{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> ", "gt": "result = client . rename_chat ( title , conversation_id )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> ", "gt": "def list_all_conversations ( ) :"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversations = client . list_all_conversations ( ) <EOL> return jsonify ( conversations ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def chat_conversation_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> ", "gt": "isproxy = get_proxy ( )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversations = client . list_all_conversations ( ) <EOL> ", "gt": "return jsonify ( conversations )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversations = client . list_all_conversations ( ) <EOL> return jsonify ( conversations ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def chat_conversation_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> ", "gt": "if __name__ == '<STR_LIT>' :"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> ", "gt": "def set_id ( self , id ) :"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> storage = IDStorage ( ) <EOL> ", "gt": "id_value = storage . get_id ( )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> ", "gt": "file_path = save_upload_file ( file )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> ", "gt": "return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT>"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> ", "gt": "file . save ( file_path )"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> ", "gt": "storage = IDStorage ( )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> ", "gt": "title = data [ '<STR_LIT>' ]"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> ", "gt": "cookie = get_cookie ( )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversations = client . list_all_conversations ( ) <EOL> return jsonify ( conversations ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def chat_conversation_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> if __name__ == '<STR_LIT>' : <EOL> app . run ( host = '<STR_LIT>' , port = <NUM_LIT> , debug = True , use_reloader = True ) <EOL> ", "gt": "app . default_encoding = '<STR_LIT>'"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> ", "gt": "conversations = client . list_all_conversations ( )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> ", "gt": "isproxy = get_proxy ( )"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> storage = IDStorage ( ) <EOL> id_value = storage . get_id ( ) <EOL> storage . set_id ( \"<STR_LIT>\" ) <EOL> if id_value is not None : <EOL> ", "gt": "print ( \"<STR_LIT>\" )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> ", "gt": "if file :"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> ", "gt": "uploads_dir = os . getenv ( '<STR_LIT>' )"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> ", "gt": "pickle . dump ( self . id , f )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> ", "gt": "return jsonify ( { '<STR_LIT>' : result } )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> ", "gt": "def upload_attachment ( ) :"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> ", "gt": "self . id = id"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversations = client . list_all_conversations ( ) <EOL> return jsonify ( conversations ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def chat_conversation_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> ", "gt": "history = client . chat_conversation_history ( conversation_id )"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> storage = IDStorage ( ) <EOL> id_value = storage . get_id ( ) <EOL> storage . set_id ( \"<STR_LIT>\" ) <EOL> ", "gt": "if id_value is not None :"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> storage = IDStorage ( ) <EOL> id_value = storage . get_id ( ) <EOL> storage . set_id ( \"<STR_LIT>\" ) <EOL> if id_value is not None : <EOL> print ( \"<STR_LIT>\" ) <EOL> else : <EOL> ", "gt": "print ( id_value )"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> return file_path <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def list_all_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversations = client . list_all_conversations ( ) <EOL> return jsonify ( conversations ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def chat_conversation_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> ", "gt": "client = Client ( cookie , isproxy )"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> storage = IDStorage ( ) <EOL> id_value = storage . get_id ( ) <EOL> ", "gt": "storage . set_id ( \"<STR_LIT>\" )"}
{"input": "import pickle <EOL> class IDStorage : <EOL> def __init__ ( self ) : <EOL> self . id = None <EOL> def get_id ( self ) : <EOL> if self . id is None : <EOL> try : <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> self . id = pickle . load ( f ) <EOL> except FileNotFoundError : <EOL> print ( \"<STR_LIT>\" ) <EOL> return self . id <EOL> def set_id ( self , id ) : <EOL> self . id = id <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( self . id , f ) <EOL> storage = IDStorage ( ) <EOL> id_value = storage . get_id ( ) <EOL> storage . set_id ( \"<STR_LIT>\" ) <EOL> if id_value is not None : <EOL> print ( \"<STR_LIT>\" ) <EOL> ", "gt": "else :"}
{"input": "import os <EOL> from flask import Flask , request , jsonify <EOL> from claude_api import Client <EOL> from common . utils import * <EOL> app = Flask ( __name__ ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def create_chat ( ) : <EOL> data = request . get_json ( ) <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> conversation = client . create_new_chat ( ) <EOL> conversation_id = conversation [ '<STR_LIT>' ] <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : conversation_id , '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' ) <EOL> def get_chat_history ( conversation_id ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> print ( isproxy ) <EOL> client = Client ( cookie , isproxy ) <EOL> history = client . chat_conversation_history ( conversation_id ) <EOL> return jsonify ( history ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> prompt = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . send_message ( prompt , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def send_message_attachment ( ) : <EOL> conversation_id = request . form . get ( \"<STR_LIT>\" ) <EOL> prompt = request . form . get ( \"<STR_LIT>\" ) <EOL> file = request . files [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> file_path = None <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> response = client . send_message ( prompt , conversation_id , file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def reset_conversations ( ) : <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . reset_all ( ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def rename_conversation ( ) : <EOL> data = request . get_json ( ) <EOL> conversation_id = data [ '<STR_LIT>' ] <EOL> title = data [ '<STR_LIT>' ] <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> result = client . rename_chat ( title , conversation_id ) <EOL> return jsonify ( { '<STR_LIT>' : result } ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' ] ) <EOL> def upload_attachment ( ) : <EOL> file = request . files [ '<STR_LIT>' ] <EOL> if file : <EOL> file_path = save_upload_file ( file ) <EOL> cookie = get_cookie ( ) <EOL> isproxy = get_proxy ( ) <EOL> client = Client ( cookie , isproxy ) <EOL> response = client . upload_attachment ( file_path ) <EOL> return jsonify ( { '<STR_LIT>' : response } ) <EOL> else : <EOL> return jsonify ( { '<STR_LIT>' : '<STR_LIT>' } ) , <NUM_LIT> <EOL> def save_upload_file ( file ) : <EOL> uploads_dir = os . getenv ( '<STR_LIT>' ) <EOL> print ( uploads_dir ) <EOL> file_path = os . path . join ( uploads_dir , file . filename ) <EOL> file . save ( file_path ) <EOL> ", "gt": "return file_path"}
