{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; List < Map < String , Object > > selectEntrustList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isEmpty ( selectEntrustList ) ) { return ; } for ( Map < String , Object > entrustMap : selectEntrustList ) { String entrustCode = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ;", "gt": "String entrustType = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ;", "gt": "import java . util . * ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ; String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ; String SQLSERVER_COLUMNS_SQL = \"<STR_LIT>\" ; String POSTGRESQL_COLUMNS_SQL = \"<STR_LIT>\" ; String MYSQL_TABLES_SQL = \"<STR_LIT>\" ;", "gt": "String ORACLE_TABLES_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ;", "gt": "import java . util . List ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; } public static MatchTypeEnum getByValue ( String value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } for ( MatchTypeEnum val : values ( ) ) { if ( val . getValue ( ) . toLowerCase ( ) . equals ( value . toLowerCase ( ) ) ) { return val ; } }", "gt": "return null ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) { return this . primaryKeyPolicy ; } public String getSequenceCode ( ) { return this . sequenceCode ; } public void setPrimaryKeyPolicy ( String primaryKeyPolicy ) { this . primaryKeyPolicy = primaryKeyPolicy ; }", "gt": "public void setSequenceCode ( String sequenceCode ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; } public WordExportException ( String msg ) { super ( msg ) ; }", "gt": "public WordExportException ( WordExportEnum exception ) {"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) { return getApplicationContext ( ) . getBean ( clazz ) ; }", "gt": "public static < T > T getBean ( String name , Class < T > clazz ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getDateInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; } public String time ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getTimeInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; } public String datetime ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getDateTimeInstance ( <NUM_LIT> , <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; }", "gt": "public String getInStrs ( List < String > params ) {"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) { if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( first , second ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( second , first ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return first . equals ( second ) ; } return first == second ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return ! first . equals ( second ) ; } return first != second ; } else { throw new ExcelExportException ( \"<STR_LIT>\" ) ; } } private static boolean isGt ( Object first , Object second ) { if ( first == null || first . toString ( ) == \"<STR_LIT>\" ) { return false ; } if ( second == null || second . toString ( ) == \"<STR_LIT>\" ) { return true ; } double one = Double . valueOf ( first . toString ( ) ) ; double two = Double . valueOf ( second . toString ( ) ) ;", "gt": "return one > two ;"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; } public WordExportException ( String msg ) { super ( msg ) ; } public WordExportException ( WordExportEnum exception ) {", "gt": "super ( exception . getMsg ( ) ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) { this . amount = amount ; } public String getUnit ( ) {", "gt": "return unit ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; }", "gt": "public static String isBlank ( String s ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ;", "gt": "void unBindBladeUserOauth ( Long id ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) { String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;", "gt": "String symbolName = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . core . tool . utils . WebUtil ; import org . springframework . stereotype . Component ; import java . util . List ;", "gt": "import java . util . Map ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) {", "gt": "obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) {", "gt": "CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ;", "gt": "@ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity {"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ;", "gt": "@ Data public class CoinMatchXhExchange {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ;", "gt": "import org . springblade . core . tool . utils . Func ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ;", "gt": "import org . springblade . core . secure . BladeUser ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) {", "gt": "String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ;", "gt": "forceModel . setDirection ( direction ) ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ;", "gt": "List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; return request . getHeader ( \"<STR_LIT>\" ) ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) { return getApplicationContext ( ) . getBean ( clazz ) ; } public static < T > T getBean ( String name , Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( name , clazz ) ;"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ; private String ftlDescription ; private String jformType ;", "gt": "private String tableName ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; return request . getHeader ( \"<STR_LIT>\" ) ; }", "gt": "public static Object getBean ( String name ) {"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) {", "gt": "QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ;"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; } public WordExportException ( String msg ) {", "gt": "super ( msg ) ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ;", "gt": "import org . apache . commons . lang . StringEscapeUtils ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) {", "gt": "dateFormat = TIME_FORMAT ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ;", "gt": "int getProcessingProgress ( String tableName , String batchCode ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) {", "gt": "return this . primaryKeyPolicy ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . rmi . ServerException ; import java . sql . SQLException ;", "gt": "import java . util . * ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ;", "gt": "import lombok . AllArgsConstructor ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; return request . getHeader ( \"<STR_LIT>\" ) ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( clazz ) ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ;", "gt": "import org . springblade . core . mp . support . Condition ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) {", "gt": "return selectModel . getClose ( ) ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; }", "gt": "public void setFirstRole ( String firstRole ) {"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ;", "gt": "import java . math . BigDecimal ;"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . core . tool . utils . WebUtil ; import org . springframework . stereotype . Component ; import java . util . List ; import java . util . Map ;", "gt": "@ Component ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class CountryI18NEnhanceList implements CgformEnhanceJavaListInter {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ;", "gt": "import javax . servlet . http . HttpServletRequest ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) {", "gt": "dateFormat = DAY_FORMAT ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ;", "gt": "if ( Func . isNotEmpty ( selectModel ) ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ;", "gt": "Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ;", "gt": "String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) {", "gt": "if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) {"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ; @ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private Long desFormId ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String desFormCode ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String routeName ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String routePath ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) {", "gt": "this . entityPackage = entityPackage ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ;", "gt": "List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange { private Map < String , ForceModelAll > forceMap ; private boolean isTriggerComplete = true ; public CoinMatchXhExchange ( ) {", "gt": "this . forceMap = new HashMap < > ( ) ;"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) { params = new JSONObject ( ) ; } if ( formData == null ) { formData = new JSONObject ( ) ; } IFillRuleHandler ruleHandler = ( IFillRuleHandler ) Class . forName ( ruleClass ) . newInstance ( ) ; return ruleHandler . execute ( params , formData ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }", "gt": "return null ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) { this . amount = amount ; } public String getUnit ( ) { return unit ; } public void setUnit ( String unit ) { this . unit = unit ; } public BigInteger getGasLimit ( ) { return gasLimit ; } public void setGasLimit ( BigInteger gasLimit ) { this . gasLimit = gasLimit ; } public BigInteger getGasPrice ( ) { return gasPrice ; } public void setGasPrice ( BigInteger gasPrice ) { this . gasPrice = gasPrice ; } public String getTxBizNumber ( ) {", "gt": "return txBizNumber ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) { return this . primaryKeyPolicy ; }", "gt": "public String getSequenceCode ( ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getDateInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; } public String time ( Object obj ) { if ( obj == null ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . rmi . ServerException ;", "gt": "import java . sql . SQLException ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ;", "gt": "List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getDateInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; } public String time ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getTimeInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; } public String datetime ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; }", "gt": "return DateFormat . getDateTimeInstance ( <NUM_LIT> , <NUM_LIT> , Locale . CHINA ) . format ( obj ) ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String countryId ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String merchantId ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; }", "gt": "else if ( TIME__NO_S_STR . equals ( format ) ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ; List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ; Long duplicateCheckCountSql ( DuplicateCheckVo duplicateCheckVo ) ;", "gt": "Long duplicateCheckCountSqlNoDataId ( DuplicateCheckVo duplicateCheckVo ) ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ; List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ; Long duplicateCheckCountSql ( DuplicateCheckVo duplicateCheckVo ) ; Long duplicateCheckCountSqlNoDataId ( DuplicateCheckVo duplicateCheckVo ) ;", "gt": "List < Map < String , Object > > getAllTenantList ( ) ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) { return administratorPhoneCode ; } public void setAdministratorPhoneCode ( String administratorPhoneCode ) { CoinhouseConfig . administratorPhoneCode = administratorPhoneCode ; } public static String getAdministratorPhone ( ) { return administratorPhone ; } public void setAdministratorPhone ( String administratorPhone ) { CoinhouseConfig . administratorPhone = administratorPhone ; } public static String getAdministratorEmail ( ) { return administratorEmail ; } public void setAdministratorEmail ( String administratorEmail ) { CoinhouseConfig . administratorEmail = administratorEmail ; } public static String getMarketJysName ( ) { return marketJysName ; } public void setMarketJysName ( String marketJysName ) { CoinhouseConfig . marketJysName = marketJysName ; } public static String getApiKey ( ) { return apiKey ; } public void setApiKey ( String apiKey ) { CoinhouseConfig . apiKey = apiKey ; } public static String getApiSecret ( ) { return apiSecret ; }", "gt": "public void setApiSecret ( String apiSecret ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) { return \"<STR_LIT>\" ; } return s ; } public static String strToStr ( String s ) {", "gt": "return \"<STR_LIT>\" + s + \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ;", "gt": "private String ftlDescription ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) {", "gt": "this . to = to ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ;", "gt": "import org . springblade . config . db . DataBaseConfig ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; }", "gt": "public static boolean isTrue ( Object first , String operator , Object second ) {"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; } return <NUM_LIT> ; } @ Override public BigDecimal getPriceBySymbol ( String symbolName ) { try { return this . getPriceBySymbol ( \"<STR_LIT>\" , symbolName ) ; } catch ( Exception e ) { return BigDecimal . ZERO ; } } @ Override public MongoDetail getPriceBySymbolDetail ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ;", "gt": "MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ;"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) { params = new JSONObject ( ) ; } if ( formData == null ) { formData = new JSONObject ( ) ; } IFillRuleHandler ruleHandler = ( IFillRuleHandler ) Class . forName ( ruleClass ) . newInstance ( ) ;", "gt": "return ruleHandler . execute ( params , formData ) ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) { this . ruleValue = ruleValue ; } public Date getCreateTime ( ) { return createTime ; } public void setCreateTime ( Date createTime ) { this . createTime = createTime ; } public String getCreateBy ( ) { return createBy ; } public void setCreateBy ( String createBy ) { this . createBy = createBy ; } public Date getUpdateTime ( ) { return updateTime ; } public void setUpdateTime ( Date updateTime ) {", "gt": "this . updateTime = updateTime ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_MYSQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; } public static MatchTypeEnum getByValue ( String value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } for ( MatchTypeEnum val : values ( ) ) { if ( val . getValue ( ) . toLowerCase ( ) . equals ( value . toLowerCase ( ) ) ) {", "gt": "return val ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ; String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ;", "gt": "String SQLSERVER_COLUMNS_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ;", "gt": "Long baseInsertSql ( Map < String , Object > map ) ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ; String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ; String SQLSERVER_COLUMNS_SQL = \"<STR_LIT>\" ; String POSTGRESQL_COLUMNS_SQL = \"<STR_LIT>\" ; String MYSQL_TABLES_SQL = \"<STR_LIT>\" ; String ORACLE_TABLES_SQL = \"<STR_LIT>\" ; String SQLSERVER_TABLES_SQL = \"<STR_LIT>\" ;", "gt": "String POSTGRESQL_TABLES_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; }", "gt": "public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) {"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) {", "gt": "HttpServletRequest request = getHttpServletRequest ( ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , symbolName ) ;", "gt": "wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange { private Map < String , ForceModelAll > forceMap ;", "gt": "private boolean isTriggerComplete = true ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) { this . ruleValue = ruleValue ; } public Date getCreateTime ( ) { return createTime ; }", "gt": "public void setCreateTime ( Date createTime ) {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; import java . util . List ; import java . util . Map ;", "gt": "@ RestController @ AllArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( value = \"<STR_LIT>\" , tags = \"<STR_LIT>\" ) public class CgformEnhanceController extends BladeController {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) {", "gt": "if ( obj == null ) {"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) { String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String symbolName = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . getExchangeCoinMatchAuto ( symbolName , baseSqlService ) . resetFixedForce ( id , direction ) ; } } public void resetAll ( String symbolName , IMjkjBaseSqlService baseSqlService ) { try { this . getExchangeCoinMatchAuto ( symbolName , baseSqlService ) . init ( baseSqlService ) ; }", "gt": "catch ( Exception e ) {"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ; private String ftlDescription ; private String jformType ; private String tableName ; private String entityPackage ; private String entityName ;", "gt": "private String jspMode ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) { String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String symbolName = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . getExchangeCoinMatchAuto ( symbolName , baseSqlService ) . resetFixedForce ( id , direction ) ; } } public void resetAll ( String symbolName , IMjkjBaseSqlService baseSqlService ) { try {", "gt": "this . getExchangeCoinMatchAuto ( symbolName , baseSqlService ) . init ( baseSqlService ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; }", "gt": "public void setEntityPackage ( String entityPackage ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) {", "gt": "if ( StringUtils . isBlank ( s ) ) {"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ; private String ftlDescription ; private String jformType ; private String tableName ; private String entityPackage ; private String entityName ; private String jspMode ;", "gt": "private List < OnlGenerateModel > subList = new ArrayList < > ( ) ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; } return <NUM_LIT> ; } @ Override public BigDecimal getPriceBySymbol ( String symbolName ) { try { return this . getPriceBySymbol ( \"<STR_LIT>\" , symbolName ) ; } catch ( Exception e ) { return BigDecimal . ZERO ; } }", "gt": "@ Override public MongoDetail getPriceBySymbolDetail ( String type , String symbolName ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ;", "gt": "List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ;"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ;", "gt": "String dropTableSQL ( String tableName ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) {", "gt": "return amount ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ; String DB_TYPE_MYSQL = \"<STR_LIT>\" ; String DB_TYPE_ORACLE = \"<STR_LIT>\" ; String DB_TYPE_POSTGRESQL = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_SQLSERVER = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) { return administratorPhoneCode ; } public void setAdministratorPhoneCode ( String administratorPhoneCode ) { CoinhouseConfig . administratorPhoneCode = administratorPhoneCode ; } public static String getAdministratorPhone ( ) { return administratorPhone ; } public void setAdministratorPhone ( String administratorPhone ) { CoinhouseConfig . administratorPhone = administratorPhone ; } public static String getAdministratorEmail ( ) { return administratorEmail ; } public void setAdministratorEmail ( String administratorEmail ) { CoinhouseConfig . administratorEmail = administratorEmail ; } public static String getMarketJysName ( ) { return marketJysName ; } public void setMarketJysName ( String marketJysName ) { CoinhouseConfig . marketJysName = marketJysName ; } public static String getApiKey ( ) { return apiKey ; } public void setApiKey ( String apiKey ) { CoinhouseConfig . apiKey = apiKey ; } public static String getApiSecret ( ) { return apiSecret ; } public void setApiSecret ( String apiSecret ) { CoinhouseConfig . apiSecret = apiSecret ; } public static String getApiBaseurl ( ) { return apiBaseurl ; } public void setApiBaseurl ( String apiBaseurl ) { CoinhouseConfig . apiBaseurl = apiBaseurl ; } public static String getRemindPhoneCode ( ) { return remindPhoneCode ; } public void setRemindPhoneCode ( String remindPhoneCode ) { CoinhouseConfig . remindPhoneCode = remindPhoneCode ; }", "gt": "public static String getRemindPhone ( ) {"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ;", "gt": "String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ;", "gt": "import org . springblade . web . service . IWebService ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ;", "gt": "return request . getHeader ( \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) {", "gt": "HttpServletRequest request = getHttpServletRequest ( ) ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ;", "gt": "import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; }", "gt": "return DateFormat . getDateInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ;"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ; String getDropColumnSql ( String fieldName ) ; String getCommentSql ( ColumnMeta columnMeta ) ;", "gt": "String getSpecialHandle ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . rmi . ServerException ; import java . sql . SQLException ; import java . util . * ; import java . util . regex . Matcher ; import java . util . regex . Pattern ;", "gt": "import java . util . stream . Collectors ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ;", "gt": "wrapper . eq ( \"<STR_LIT>\" , symbolName ) ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; }", "gt": "return getByValue ( value . toString ( ) ) ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ;", "gt": "List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; }", "gt": "public void setRuleConditions ( String ruleConditions ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ; List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ;", "gt": "Long duplicateCheckCountSql ( DuplicateCheckVo duplicateCheckVo ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ;", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) { if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( first , second ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( second , first ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return first . equals ( second ) ; } return first == second ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return ! first . equals ( second ) ; } return first != second ; } else {", "gt": "throw new ExcelExportException ( \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ; @ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private Long desFormId ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String desFormCode ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String routeName ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ;", "gt": "String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ;", "gt": "int getProcessingProgressTotal ( String tableName , String batchCode ) ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; }", "gt": "public static Object getBean ( String name ) {"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ;", "gt": "String ENHANCE_VIEW = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ;", "gt": "import org . springblade . core . redis . cache . BladeRedis ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) { return this . primaryKeyPolicy ; } public String getSequenceCode ( ) { return this . sequenceCode ; } public void setPrimaryKeyPolicy ( String primaryKeyPolicy ) { this . primaryKeyPolicy = primaryKeyPolicy ; } public void setSequenceCode ( String sequenceCode ) { this . sequenceCode = sequenceCode ; }", "gt": "@ Override public String toString ( ) {"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ;", "gt": "return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ;"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . core . tool . utils . WebUtil ;", "gt": "import org . springframework . stereotype . Component ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) { this . ruleValue = ruleValue ; }", "gt": "public Date getCreateTime ( ) {"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ; String getDropColumnSql ( String fieldName ) ; String getCommentSql ( ColumnMeta columnMeta ) ; String getSpecialHandle ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) ;", "gt": "String dropIndexs ( String indexName , String tableName ) ;"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ; String getDropColumnSql ( String fieldName ) ;", "gt": "String getCommentSql ( ColumnMeta columnMeta ) ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String countryId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String merchantId ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String coinCou ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) {", "gt": "return zeroRole ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; List < Map < String , Object > > selectEntrustList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isEmpty ( selectEntrustList ) ) { return ; } for ( Map < String , Object > entrustMap : selectEntrustList ) { String entrustCode = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String entrustType = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String calculationMethod = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; List < EntrustModel . CalculationModel > list = JsonUtil . parseArray ( calculationMethod , EntrustModel . CalculationModel . class ) ; EntrustModel entrustModel = new EntrustModel ( ) ; entrustModel . setEntrustCode ( entrustCode ) ; entrustModel . setEntrustType ( entrustType ) ; entrustModel . setCalculationList ( list ) ;", "gt": "this . entrustList . add ( entrustModel ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) { return \"<STR_LIT>\" ; } return s ; }", "gt": "public static String strToStr ( String s ) {"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) { if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( first , second ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( second , first ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return first . equals ( second ) ; } return first == second ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return ! first . equals ( second ) ; } return first != second ; } else { throw new ExcelExportException ( \"<STR_LIT>\" ) ; } } private static boolean isGt ( Object first , Object second ) { if ( first == null || first . toString ( ) == \"<STR_LIT>\" ) { return false ; } if ( second == null || second . toString ( ) == \"<STR_LIT>\" ) { return true ; }", "gt": "double one = Double . valueOf ( first . toString ( ) ) ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ; @ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity { private static final long serialVersionUID = <NUM_LIT> ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private Long desFormId ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) {", "gt": "return ruleValue ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ;", "gt": "Long getIdByCode ( String code ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) {", "gt": "return this . ftl_mode ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ; String DB_TYPE_MYSQL = \"<STR_LIT>\" ; String DB_TYPE_ORACLE = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_POSTGRESQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ;", "gt": "String ENHANCE_START = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) { params = new JSONObject ( ) ; } if ( formData == null ) { formData = new JSONObject ( ) ; }", "gt": "IFillRuleHandler ruleHandler = ( IFillRuleHandler ) Class . forName ( ruleClass ) . newInstance ( ) ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; }", "gt": "else if ( TIME_STR . equals ( format ) ) {"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) { String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String symbolName = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;", "gt": "String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; List < Map < String , Object > > selectEntrustList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isEmpty ( selectEntrustList ) ) { return ; } for ( Map < String , Object > entrustMap : selectEntrustList ) { String entrustCode = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String entrustType = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String calculationMethod = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; List < EntrustModel . CalculationModel > list = JsonUtil . parseArray ( calculationMethod , EntrustModel . CalculationModel . class ) ; EntrustModel entrustModel = new EntrustModel ( ) ; entrustModel . setEntrustCode ( entrustCode ) ; entrustModel . setEntrustType ( entrustType ) ;", "gt": "entrustModel . setCalculationList ( list ) ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ; String DB_TYPE_MYSQL = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_ORACLE = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) {", "gt": "String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) {", "gt": "CoinhouseConfig . rootRole = rootRole ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ;", "gt": "String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ;", "gt": "String ENHANCE_END = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) { return getApplicationContext ( ) . getBean ( clazz ) ; } public static < T > T getBean ( String name , Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( name , clazz ) ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) {", "gt": "CoinhouseConfig . salt = salt ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ; void unBindBladeUserOauth ( Long id ) ; < T > List < Map < String , T > > getDataListByWrapper ( String tableName , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ; < T > IPage < Map < String , T > > getDataListByWrapper ( String tableName , IPage page , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ; List < String > getAllBorrowMemberId ( ) ; List < String > getAllContractMemberId ( ) ;", "gt": "List < String > getMyAllContractSymbolName ( String memberId ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; }", "gt": "public void setTableName ( String tableName ) {"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) { this . ruleValue = ruleValue ; } public Date getCreateTime ( ) { return createTime ; } public void setCreateTime ( Date createTime ) { this . createTime = createTime ; } public String getCreateBy ( ) { return createBy ; }", "gt": "public void setCreateBy ( String createBy ) {"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ;", "gt": "import org . springblade . config . db . TableModel ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String countryId ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( clazz ) ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; } public static MatchTypeEnum getByValue ( String value ) { if ( ConvertUtils . isEmpty ( value ) ) {", "gt": "return null ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange {", "gt": "private Map < String , ForceModelAll > forceMap ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ;", "gt": "forceModel . setContractLogId ( contractLogId ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; }", "gt": "public void setAmount ( BigDecimal amount ) {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletRequest ;", "gt": "import java . util . HashMap ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ;", "gt": "import org . springframework . transaction . annotation . Transactional ;"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; }", "gt": "public WordExportException ( String msg ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ;", "gt": "List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ; void unBindBladeUserOauth ( Long id ) ;", "gt": "< T > List < Map < String , T > > getDataListByWrapper ( String tableName , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) {", "gt": "this . amount = amount ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) { return \"<STR_LIT>\" ; }", "gt": "return s ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange { private Map < String , ForceModelAll > forceMap ; private boolean isTriggerComplete = true ;", "gt": "public CoinMatchXhExchange ( ) {"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) { params = new JSONObject ( ) ; } if ( formData == null ) { formData = new JSONObject ( ) ; } IFillRuleHandler ruleHandler = ( IFillRuleHandler ) Class . forName ( ruleClass ) . newInstance ( ) ; return ruleHandler . execute ( params , formData ) ; }", "gt": "catch ( Exception e ) {"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) { return administratorPhoneCode ; } public void setAdministratorPhoneCode ( String administratorPhoneCode ) { CoinhouseConfig . administratorPhoneCode = administratorPhoneCode ; } public static String getAdministratorPhone ( ) { return administratorPhone ; } public void setAdministratorPhone ( String administratorPhone ) { CoinhouseConfig . administratorPhone = administratorPhone ; } public static String getAdministratorEmail ( ) { return administratorEmail ; } public void setAdministratorEmail ( String administratorEmail ) { CoinhouseConfig . administratorEmail = administratorEmail ; } public static String getMarketJysName ( ) { return marketJysName ; } public void setMarketJysName ( String marketJysName ) { CoinhouseConfig . marketJysName = marketJysName ; } public static String getApiKey ( ) { return apiKey ; } public void setApiKey ( String apiKey ) { CoinhouseConfig . apiKey = apiKey ; } public static String getApiSecret ( ) {", "gt": "return apiSecret ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ;", "gt": "import org . springblade . config . util . * ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ;", "gt": "import org . springblade . core . secure . utils . AuthUtil ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; }", "gt": "public String getEntityPackage ( ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ; void unBindBladeUserOauth ( Long id ) ; < T > List < Map < String , T > > getDataListByWrapper ( String tableName , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ;", "gt": "< T > IPage < Map < String , T > > getDataListByWrapper ( String tableName , IPage page , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ;"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) { params = new JSONObject ( ) ; } if ( formData == null ) {", "gt": "formData = new JSONObject ( ) ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; }", "gt": "public static < T > T getBean ( Class < T > clazz ) {"}
