{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> ", "gt": "status : HTTPStatus = HTTPStatus . CONFLICT ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> ", "gt": "update_item = UpdateModelView ("}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> ", "gt": "path_parameters : dict ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> ", "gt": "post_save = lambda request , instance : None ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> ", "gt": "query_parameters = OrderByFilterSchema ,"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> ", "gt": "on_completion = self . wrap_completion_with_status_check ("}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> data : List [ dict ] = [ ] <EOL> with self . assertRaises ( ValueError ) : <EOL> utils . ensure_list_of_dicts ( data = data ) <EOL> def test_ensure_list_of_dicts_not_list_or_dict ( self ) : <EOL> data = <NUM_LIT> <EOL> ", "gt": "with self . assertRaises ( TypeError ) :"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> ", "gt": "path_parameters = self . get_path_parameters ( test_case )"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> ", "gt": "on_completion = self . on_successful_request ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ", "gt": ")"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> ", "gt": "list_items = ListModelView ("}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> data : List [ dict ] = [ ] <EOL> with self . assertRaises ( ValueError ) : <EOL> ", "gt": "utils . ensure_list_of_dicts ( data = data )"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> ", "gt": "test_case . skipTest ( reason = \"<STR_LIT>\" )"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> ", "gt": "def test_read_model_headers_unauthorized ( self ) :"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> ", "gt": "test_case = test_case ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> ", "gt": "on_completion = self . on_failed_request ,"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> ", "gt": "else :"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> ", "gt": "payloads = self . get_payloads ( test_case )"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> ", "gt": "self ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> ", "gt": "default_response_body = ItemOut"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> ", "gt": "decorators = [ user_is_collection_creator ] ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> ", "gt": "test_case = self . model_viewset_test_case ,"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> ", "gt": "self ,"}
{"input": "from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Headers : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> forbidden : Union [ dict , List [ dict ] , None ] = None , <EOL> unauthorized : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> ", "gt": "self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok )"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . FORBIDDEN , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . forbidden is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . forbidden , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_path_parameters_not_found ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . NOT_FOUND , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if path_parameters . not_found is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . not_found , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> ", "gt": "test_case , on_completion = on_completion , status = status"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> ", "gt": "def test_view_payloads_conflict ("}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> data : List [ dict ] = [ ] <EOL> with self . assertRaises ( ValueError ) : <EOL> utils . ensure_list_of_dicts ( data = data ) <EOL> def test_ensure_list_of_dicts_not_list_or_dict ( self ) : <EOL> data = <NUM_LIT> <EOL> with self . assertRaises ( TypeError ) : <EOL> ", "gt": "utils . ensure_list_of_dicts ( data = data )"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> ", "gt": "self . run_combinatorial_tests ("}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> ", "gt": "id = getattr ( path_parameters , \"<STR_LIT>\" , None )"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . FORBIDDEN , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . forbidden is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . forbidden , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_path_parameters_not_found ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . NOT_FOUND , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if path_parameters . not_found is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . not_found , <EOL> query_parameters_list = query_parameters . ok , <EOL> ", "gt": "headers_list = headers . ok ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> ", "gt": "def test_read_model_ok ( self ) :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ", "gt": ")"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ", "gt": ")"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> ", "gt": "read_item = ReadModelView ("}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> ", "gt": "headers = self . get_headers ( test_case )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> list_tags = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Tag . objects . filter ( <EOL> items__id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> ", "gt": "response_body = List [ TagOut ] ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> list_tags = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Tag . objects . filter ( <EOL> items__id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ TagOut ] , <EOL> ", "gt": ")"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ", "gt": ")"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ", "gt": ")"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . FORBIDDEN , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . forbidden is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . forbidden , <EOL> payload_list = payloads . ok , <EOL> ", "gt": "on_completion = self . wrap_completion_with_status_check ("}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> ", "gt": "list_tags = ListModelView ("}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . FORBIDDEN , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . forbidden is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> ", "gt": "else :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> list_tags = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Tag . objects . filter ( <EOL> items__id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ", "gt": ") ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> ", "gt": "else None"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> ", "gt": "if payloads . conflict is None :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> list_tags = ListModelView ( <EOL> ", "gt": "path = \"<STR_LIT>\" ,"}
{"input": "from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Headers : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> forbidden : Union [ dict , List [ dict ] , None ] = None , <EOL> unauthorized : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> ", "gt": "self . forbidden : Optional [ List [ dict ] ] = ("}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> ", "gt": "self . assertEqual ( result , data )"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> ", "gt": "response : django . http . HttpResponse ,"}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> data : List [ dict ] = [ ] <EOL> with self . assertRaises ( ValueError ) : <EOL> utils . ensure_list_of_dicts ( data = data ) <EOL> ", "gt": "def test_ensure_list_of_dicts_not_list_or_dict ( self ) :"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> self , <EOL> test_case : TestCase , <EOL> ", "gt": "on_completion : CompletionCallback ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ", "gt": ")"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( \"<STR_LIT>\" ) <EOL> def test_read_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> ", "gt": "@ django . test . tag ( \"<STR_LIT>\" )"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> ", "gt": "self . model_view . query_parameters ( ** query_parameters )"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> ", "gt": "self ,"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ", "gt": ")"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> ", "gt": "read_model = lambda request , path_parameters , _ : Item . objects . get ("}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> ", "gt": "def test_ensure_list_of_dicts_empty_list ( self ) :"}
{"input": "from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Headers : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> forbidden : Union [ dict , List [ dict ] , None ] = None , <EOL> unauthorized : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . forbidden : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( forbidden ) if forbidden is not None else None <EOL> ) <EOL> self . unauthorized : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( unauthorized ) <EOL> if unauthorized is not None <EOL> ", "gt": "else None"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> ", "gt": "if self . model_view . query_parameters"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> ", "gt": "schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance )"}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> ", "gt": "result = utils . ensure_list_of_dicts ( data = data )"}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> data : List [ dict ] = [ ] <EOL> with self . assertRaises ( ValueError ) : <EOL> utils . ensure_list_of_dicts ( data = data ) <EOL> def test_ensure_list_of_dicts_not_list_or_dict ( self ) : <EOL> ", "gt": "data = <NUM_LIT>"}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> ", "gt": "data : List [ dict ] = [ ]"}
{"input": "import unittest <EOL> from typing import List <EOL> from ninja_crud . testing . core . components import utils <EOL> class TestUtils ( unittest . TestCase ) : <EOL> def test_ensure_list_of_dicts_single_dict ( self ) : <EOL> data = { \"<STR_LIT>\" : \"<STR_LIT>\" } <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , [ data ] ) <EOL> def test_ensure_list_of_dicts_list_of_dicts ( self ) : <EOL> data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] <EOL> result = utils . ensure_list_of_dicts ( data = data ) <EOL> self . assertEqual ( result , data ) <EOL> def test_ensure_list_of_dicts_empty_list ( self ) : <EOL> data : List [ dict ] = [ ] <EOL> ", "gt": "with self . assertRaises ( ValueError ) :"}
{"input": "from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Headers : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> forbidden : Union [ dict , List [ dict ] , None ] = None , <EOL> unauthorized : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . forbidden : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( forbidden ) if forbidden is not None else None <EOL> ) <EOL> self . unauthorized : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( unauthorized ) <EOL> ", "gt": "if unauthorized is not None"}
{"input": "from http import HTTPStatus <EOL> from typing import Callable , List , Optional , TypeVar , Union , cast <EOL> from django . http import HttpResponse <EOL> from django . test import TestCase <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> T = TypeVar ( \"<STR_LIT>\" ) <EOL> TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) <EOL> ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] <EOL> CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] <EOL> class ViewTestManager : <EOL> def __init__ ( <EOL> self , <EOL> simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> self . simulate_request = simulate_request <EOL> self . path_parameters = path_parameters or PathParameters ( ok = { } ) <EOL> self . query_parameters = query_parameters or QueryParameters ( ok = { } ) <EOL> self . headers = headers or Headers ( ok = { } ) <EOL> self . payloads = payloads or Payloads ( ok = { } ) <EOL> @ staticmethod <EOL> def _get_arg_or_callable ( <EOL> test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] <EOL> ) -> T : <EOL> if callable ( params ) : <EOL> return params ( test_case ) <EOL> elif isinstance ( params , property ) : <EOL> return cast ( Callable , params . fget ) ( test_case ) <EOL> else : <EOL> return params <EOL> def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : <EOL> path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) <EOL> if not isinstance ( path_parameters , PathParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return path_parameters <EOL> def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : <EOL> query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) <EOL> if not isinstance ( query_parameters , QueryParameters ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return query_parameters <EOL> def get_headers ( self , test_case : TestCase ) -> Headers : <EOL> headers = self . _get_arg_or_callable ( test_case , self . headers ) <EOL> if not isinstance ( headers , Headers ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return headers <EOL> def get_payloads ( self , test_case : TestCase ) -> Payloads : <EOL> payloads = self . _get_arg_or_callable ( test_case , self . payloads ) <EOL> if not isinstance ( payloads , Payloads ) : <EOL> raise TypeError ( <EOL> f\"<STR_LIT>\" <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> return payloads <EOL> @ staticmethod <EOL> def wrap_completion_with_status_check ( <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus , <EOL> ) -> CompletionCallback : <EOL> def on_completion_with_status_check ( <EOL> response : HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> test_case . assertEqual ( response . status_code , status ) <EOL> on_completion ( response , path_parameters , query_parameters , headers , payload ) <EOL> return on_completion_with_status_check <EOL> def run_combinatorial_tests ( <EOL> self , <EOL> test_case : TestCase , <EOL> path_parameters_list : List [ dict ] , <EOL> query_parameters_list : List [ dict ] , <EOL> headers_list : List [ dict ] , <EOL> payload_list : List [ dict ] , <EOL> on_completion : CompletionCallback , <EOL> ) : <EOL> for path_parameters in path_parameters_list : <EOL> for query_parameters in query_parameters_list : <EOL> for headers in headers_list : <EOL> for payload in payload_list : <EOL> with test_case . subTest ( <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> payload = payload , <EOL> ) : <EOL> response = self . simulate_request ( <EOL> path_parameters , query_parameters , headers , payload <EOL> ) <EOL> on_completion ( <EOL> response , <EOL> path_parameters , <EOL> query_parameters , <EOL> headers , <EOL> payload , <EOL> ) <EOL> def test_view_ok ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . OK , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . bad_request , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_payloads_conflict ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . CONFLICT , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if payloads . conflict is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . conflict , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_query_parameters_bad_request ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . BAD_REQUEST , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if query_parameters . bad_request is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . bad_request , <EOL> headers_list = headers . ok , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_unauthorized ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . UNAUTHORIZED , <EOL> ) : <EOL> path_parameters = self . get_path_parameters ( test_case ) <EOL> query_parameters = self . get_query_parameters ( test_case ) <EOL> headers = self . get_headers ( test_case ) <EOL> payloads = self . get_payloads ( test_case ) <EOL> if headers . unauthorized is None : <EOL> test_case . skipTest ( reason = \"<STR_LIT>\" ) <EOL> else : <EOL> self . run_combinatorial_tests ( <EOL> test_case = test_case , <EOL> path_parameters_list = path_parameters . ok , <EOL> query_parameters_list = query_parameters . ok , <EOL> headers_list = headers . unauthorized , <EOL> payload_list = payloads . ok , <EOL> on_completion = self . wrap_completion_with_status_check ( <EOL> test_case , on_completion = on_completion , status = status <EOL> ) , <EOL> ) <EOL> def test_view_headers_forbidden ( <EOL> self , <EOL> test_case : TestCase , <EOL> on_completion : CompletionCallback , <EOL> status : HTTPStatus = HTTPStatus . FORBIDDEN , <EOL> ", "gt": ") :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> list_tags = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Tag . objects . filter ( <EOL> ", "gt": "items__id = getattr ( path_parameters , \"<STR_LIT>\" , None )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> ", "gt": "default_request_body = ItemIn"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> update_item = UpdateModelView ( <EOL> pre_save = lambda request , instance : None , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_collection_creator ] , <EOL> ) <EOL> delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) <EOL> list_tags = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Tag . objects . filter ( <EOL> items__id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ TagOut ] , <EOL> ) <EOL> ", "gt": "ItemViewSet . register_routes ( router )"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ", "gt": ") :"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . read_model ( <EOL> getattr ( response , \"<STR_LIT>\" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> ", "gt": "payload : dict ,"}
{"input": "import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> import django . utils . http <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ReadModelView <EOL> class ReadModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ReadModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ReadModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> ", "gt": "query_parameters_schema = ("}
{"input": "from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Headers : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> forbidden : Union [ dict , List [ dict ] , None ] = None , <EOL> unauthorized : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . forbidden : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( forbidden ) if forbidden is not None else None <EOL> ) <EOL> ", "gt": "self . unauthorized : Optional [ List [ dict ] ] = ("}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item , Tag <EOL> from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut <EOL> router = Router ( ) <EOL> def user_is_collection_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> item = Item . objects . get ( id = item_id ) <EOL> if item . collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class ItemViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = ItemIn <EOL> default_response_body = ItemOut <EOL> list_items = ListModelView ( <EOL> query_parameters = OrderByFilterSchema , <EOL> get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , <EOL> ) <EOL> read_item = ReadModelView ( <EOL> read_model = lambda request , path_parameters , _ : Item . objects . get ( <EOL> id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ", "gt": ") ,"}
