{"input": "from django . contrib import admin <EOL> from django . urls import include <EOL> from django . urls import path <EOL> from django . urls import reverse_lazy <EOL> from django . views . generic . base import RedirectView <EOL> urlpatterns = [ <EOL> ", "gt": "path ( \"<STR_LIT>\" , admin . site . urls ) ,"}
{"input": "from . crud import InstallCrudUtils <EOL> from . crud import ModelCRUD <EOL> from . htmx import Htmx <EOL> from . htmx_extension import HtmxExtension <EOL> from . reset_migrations import ResetMigrations <EOL> from . rm_migrations import RmMigrations <EOL> ", "gt": "from . start_app import StartApp"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> ", "gt": "def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) :"}
{"input": "from django . contrib import admin <EOL> from django . urls import include <EOL> from django . urls import path <EOL> from django . urls import reverse_lazy <EOL> from django . views . generic . base import RedirectView <EOL> urlpatterns = [ <EOL> path ( \"<STR_LIT>\" , admin . site . urls ) , <EOL> path ( \"<STR_LIT>\" , RedirectView . as_view ( url = reverse_lazy ( \"<STR_LIT>\" ) ) ) , <EOL> path ( \"<STR_LIT>\" , include ( \"<STR_LIT>\" , namespace = \"<STR_LIT>\" ) ) , <EOL> ", "gt": "]"}
{"input": "from django . contrib import admin <EOL> from django . urls import include <EOL> from django . urls import path <EOL> from django . urls import reverse_lazy <EOL> from django . views . generic . base import RedirectView <EOL> urlpatterns = [ <EOL> path ( \"<STR_LIT>\" , admin . site . urls ) , <EOL> path ( \"<STR_LIT>\" , RedirectView . as_view ( url = reverse_lazy ( \"<STR_LIT>\" ) ) ) , <EOL> ", "gt": "path ( \"<STR_LIT>\" , include ( \"<STR_LIT>\" , namespace = \"<STR_LIT>\" ) ) ,"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> run_in_shell ( insert_a_post , eval_result = False ) <EOL> ", "gt": "count = run_in_shell ( count_nbr_of_posts , eval_result = True )"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> run_in_shell ( insert_a_post , eval_result = False ) <EOL> count = run_in_shell ( count_nbr_of_posts , eval_result = True ) <EOL> assert count == <NUM_LIT> <EOL> assert count == <NUM_LIT> <EOL> ", "gt": "change_model_attribute ( django_project )"}
{"input": "from . crud import InstallCrudUtils <EOL> from . crud import ModelCRUD <EOL> from . htmx import Htmx <EOL> from . htmx_extension import HtmxExtension <EOL> from . reset_migrations import ResetMigrations <EOL> from . rm_migrations import RmMigrations <EOL> from . start_app import StartApp <EOL> from . start_project import StartProject <EOL> from . sync_dotenv import SyncDotenv <EOL> ", "gt": "from . work import Work"}
{"input": "from django . contrib import admin <EOL> from django . urls import include <EOL> from django . urls import path <EOL> from django . urls import reverse_lazy <EOL> from django . views . generic . base import RedirectView <EOL> urlpatterns = [ <EOL> path ( \"<STR_LIT>\" , admin . site . urls ) , <EOL> ", "gt": "path ( \"<STR_LIT>\" , RedirectView . as_view ( url = reverse_lazy ( \"<STR_LIT>\" ) ) ) ,"}
{"input": "from django . db import models <EOL> from django . utils import timezone <EOL> class Product ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( ) <EOL> price = models . DecimalField ( max_digits = <NUM_LIT> , decimal_places = <NUM_LIT> ) <EOL> sku = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> created_at = models . DateTimeField ( default = timezone . now ) <EOL> @ property <EOL> ", "gt": "def slug ( self ) :"}
{"input": "from . crud import InstallCrudUtils <EOL> from . crud import ModelCRUD <EOL> from . htmx import Htmx <EOL> from . htmx_extension import HtmxExtension <EOL> from . reset_migrations import ResetMigrations <EOL> from . rm_migrations import RmMigrations <EOL> from . start_app import StartApp <EOL> from . start_project import StartProject <EOL> ", "gt": "from . sync_dotenv import SyncDotenv"}
{"input": "from django . contrib import admin <EOL> from django . urls import include <EOL> from django . urls import path <EOL> from django . urls import reverse_lazy <EOL> from django . views . generic . base import RedirectView <EOL> ", "gt": "urlpatterns = ["}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> run_in_shell ( insert_a_post , eval_result = False ) <EOL> count = run_in_shell ( count_nbr_of_posts , eval_result = True ) <EOL> assert count == <NUM_LIT> <EOL> ", "gt": "assert count == <NUM_LIT>"}
{"input": "from . crud import InstallCrudUtils <EOL> from . crud import ModelCRUD <EOL> from . htmx import Htmx <EOL> from . htmx_extension import HtmxExtension <EOL> from . reset_migrations import ResetMigrations <EOL> from . rm_migrations import RmMigrations <EOL> from . start_app import StartApp <EOL> ", "gt": "from . start_project import StartProject"}
{"input": "from django . db import models <EOL> from django . utils import timezone <EOL> class Product ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( ) <EOL> price = models . DecimalField ( max_digits = <NUM_LIT> , decimal_places = <NUM_LIT> ) <EOL> ", "gt": "sku = models . CharField ( max_length = <NUM_LIT> , unique = True )"}
{"input": "from . crud import InstallCrudUtils <EOL> from . crud import ModelCRUD <EOL> from . htmx import Htmx <EOL> from . htmx_extension import HtmxExtension <EOL> from . reset_migrations import ResetMigrations <EOL> ", "gt": "from . rm_migrations import RmMigrations"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> ", "gt": "makemigrations ( )"}
{"input": "from django . db import models <EOL> from django . utils import timezone <EOL> class Product ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( ) <EOL> price = models . DecimalField ( max_digits = <NUM_LIT> , decimal_places = <NUM_LIT> ) <EOL> sku = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> ", "gt": "created_at = models . DateTimeField ( default = timezone . now )"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> run_in_shell ( insert_a_post , eval_result = False ) <EOL> count = run_in_shell ( count_nbr_of_posts , eval_result = True ) <EOL> ", "gt": "assert count == <NUM_LIT>"}
{"input": "from django . db import models <EOL> from django . utils import timezone <EOL> class Product ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( ) <EOL> ", "gt": "price = models . DecimalField ( max_digits = <NUM_LIT> , decimal_places = <NUM_LIT> )"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> ", "gt": "return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] )"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> run_in_shell ( insert_a_post , eval_result = False ) <EOL> count = run_in_shell ( count_nbr_of_posts , eval_result = True ) <EOL> assert count == <NUM_LIT> <EOL> assert count == <NUM_LIT> <EOL> change_model_attribute ( django_project ) <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> assert count_migrations ( django_project ) == <NUM_LIT> <EOL> runner . invoke ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> assert count_migrations ( django_project ) == <NUM_LIT> <EOL> ", "gt": "count = run_in_shell ( count_nbr_of_posts , eval_result = True )"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> ", "gt": "def count_migrations ( django_project_dir ) :"}
{"input": "import subprocess <EOL> from cappa . testing import CommandRunner <EOL> from falco . utils import run_in_shell <EOL> def makemigrations ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def migrate ( ) : <EOL> subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) <EOL> def change_model_attribute ( django_project_dir ) : <EOL> models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> models_file_content = models_file . read_text ( ) <EOL> models_file . write_text ( <EOL> models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\" <EOL> ) <EOL> def insert_a_post ( ) : <EOL> from blog . models import Post <EOL> Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) <EOL> def count_nbr_of_posts ( ) -> int : <EOL> from blog . models import Post <EOL> return Post . objects . all ( ) . count ( ) <EOL> def count_migrations ( django_project_dir ) : <EOL> migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" <EOL> return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) <EOL> def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> makemigrations ( ) <EOL> migrate ( ) <EOL> run_in_shell ( insert_a_post , eval_result = False ) <EOL> count = run_in_shell ( count_nbr_of_posts , eval_result = True ) <EOL> assert count == <NUM_LIT> <EOL> assert count == <NUM_LIT> <EOL> change_model_attribute ( django_project ) <EOL> makemigrations ( ) <EOL> ", "gt": "migrate ( )"}
{"input": "from django . db import models <EOL> from django . utils import timezone <EOL> class Product ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( ) <EOL> price = models . DecimalField ( max_digits = <NUM_LIT> , decimal_places = <NUM_LIT> ) <EOL> sku = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> created_at = models . DateTimeField ( default = timezone . now ) <EOL> @ property <EOL> def slug ( self ) : <EOL> ", "gt": "return self . name . lower ( ) . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" )"}
