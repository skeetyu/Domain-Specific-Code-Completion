{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) {", "gt": "List < Option > menus = menuService . listMenuOptions ( ) ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; }", "gt": "public static MatchTypeEnum getByValue ( String value ) {"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . type ; import org . apache . commons . lang3 . Validate ; import java . util . concurrent . * ; public abstract class BasicFuture < T > implements Future < T > { private volatile boolean completed ; private volatile boolean cancelled ; private volatile T result ; private volatile Exception ex ; @ Override public boolean isCancelled ( ) { return this . cancelled ; } @ Override public boolean isDone ( ) { return this . completed ; } @ Override public synchronized T get ( ) throws InterruptedException , ExecutionException { while ( ! this . completed ) { wait ( ) ; } return getResult ( ) ; } @ Override public synchronized T get ( final long timeout , final TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Validate . notNull ( unit , \"<STR_LIT>\" ) ; final long msecs = unit . toMillis ( timeout ) ; final long startTime = ( msecs <= <NUM_LIT> ) ? <NUM_LIT> : System . currentTimeMillis ( ) ; long waitTime = msecs ; if ( this . completed ) { return getResult ( ) ; } else if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } else { for ( ; ; ) { wait ( waitTime ) ; if ( this . completed ) { return getResult ( ) ; } else { waitTime = msecs - ( System . currentTimeMillis ( ) - startTime ) ; if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } } } } } private T getResult ( ) throws ExecutionException { if ( this . ex != null ) { throw new ExecutionException ( this . ex ) ; } if ( cancelled ) { throw new CancellationException ( ) ; }", "gt": "return this . result ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ; map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] { qiniuContent . getUrl ( ) } ) ;", "gt": "return new ResponseEntity < > ( map , HttpStatus . OK ) ;"}
{"input": "package ginyi . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import ginyi . system . domain . SysDept ; import ginyi . system . domain . model . dto . DeptDto ;", "gt": "import org . apache . ibatis . annotations . Param ;"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ;", "gt": "apiError . setMessage ( message ) ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; @ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController { @ Resource private IVerifyService verifyService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public CommonResult captcha ( ) { String img = verifyService . captcha ( ) ;", "gt": "HashMap < String , String > map = new HashMap < > ( ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogLogin extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String userName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String status ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String ipaddr ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String loginLocation ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String browser ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; }", "gt": "public void setRuleValue ( String ruleValue ) {"}
{"input": "package com . yf . system . modules . role . dto ; import com . yf . base . api . annon . Dict ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; import java . util . Date ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String roleName ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) { return ajax ; } String uuid = IdUtils . simpleUUID ( ) ;", "gt": "String verifyKey = CacheConstants . CAPTCHA_CODE_KEY + uuid ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import com . google . common . util . concurrent . RateLimiter ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; public class RateLimiterUtil { public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds ) throws ReflectiveOperationException { return create ( permitsPerSecond , maxBurstSeconds , true ) ; } public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds , boolean filledWithToken ) throws ReflectiveOperationException { Class < ? > sleepingStopwatchClass = Class . forName ( \"<STR_LIT>\" ) ; Method createStopwatchMethod = sleepingStopwatchClass . getDeclaredMethod ( \"<STR_LIT>\" ) ; createStopwatchMethod . setAccessible ( true ) ; Object stopwatch = createStopwatchMethod . invoke ( null ) ; Class < ? > burstyRateLimiterClass = Class . forName ( \"<STR_LIT>\" ) ; Constructor < ? > burstyRateLimiterConstructor = burstyRateLimiterClass . getDeclaredConstructors ( ) [ <NUM_LIT> ] ; burstyRateLimiterConstructor . setAccessible ( true ) ; RateLimiter rateLimiter = ( RateLimiter ) burstyRateLimiterConstructor . newInstance ( stopwatch , maxBurstSeconds ) ; rateLimiter . setRate ( permitsPerSecond ) ; if ( filledWithToken ) { setField ( rateLimiter , \"<STR_LIT>\" , permitsPerSecond * maxBurstSeconds ) ; } return rateLimiter ; } private static boolean setField ( Object targetObject , String fieldName , Object fieldValue ) { Field field ; try { field = targetObject . getClass ( ) . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { field = null ; } Class superClass = targetObject . getClass ( ) . getSuperclass ( ) ; while ( field == null && superClass != null ) { try { field = superClass . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { superClass = superClass . getSuperclass ( ) ; } } if ( field == null ) { return false ; } field . setAccessible ( true ) ; try { field . set ( targetObject , fieldValue ) ; return true ; }", "gt": "catch ( IllegalAccessException e ) {"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ;", "gt": "private String component ;"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ;", "gt": "import org . springblade . core . tool . utils . WebUtil ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Sets ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; import io . github . chensheng . dddboot . tools . collection . type . ConcurrentHashSet ; import java . util . * ; public class SetUtil { public static < T > HashSet < T > newHashSet ( ) { return new HashSet < T > ( ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T > HashSet < T > newHashSet ( T ... elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSet ( Iterable < ? extends T > elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSetWithCapacity ( int expectedSize ) { return Sets . newHashSetWithExpectedSize ( expectedSize ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > TreeSet < T > newSortedSet ( ) { return new TreeSet < T > ( ) ; } public static < T > TreeSet < T > newSortedSet ( @ Nullable Comparator < ? super T > comparator ) { return Sets . newTreeSet ( comparator ) ; } public static < T > ConcurrentHashSet < T > newConcurrentHashSet ( ) { return new ConcurrentHashSet < T > ( ) ; } public static final < T > Set < T > emptySet ( ) { return Collections . emptySet ( ) ; } public static < T > Set < T > emptySetIfNull ( final Set < T > set ) {", "gt": "return set == null ? ( Set < T > ) Collections . EMPTY_SET : set ;"}
{"input": "package com . yf . system . modules . user . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . baomidou . mybatisplus . extension . activerecord . Model ; import lombok . Data ; @ Data @ TableName ( \"<STR_LIT>\" ) public class SysUserRole extends Model < SysUserRole > {", "gt": "private static final long serialVersionUID = <NUM_LIT> ;"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Getter ; import lombok . Setter ; import java . util . List ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public class DictPageVO { @ Schema ( description = \"<STR_LIT>\" ) private Long id ; @ Schema ( description = \"<STR_LIT>\" ) private String name ; @ Schema ( description = \"<STR_LIT>\" ) private String code ; @ Schema ( description = \"<STR_LIT>\" ) private Integer status ; @ Schema ( description = \"<STR_LIT>\" ) private List < DictItem > dictItems ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public static class DictItem { @ Schema ( description = \"<STR_LIT>\" ) private Long id ; @ Schema ( description = \"<STR_LIT>\" ) private String name ; @ Schema ( description = \"<STR_LIT>\" ) private String value ;", "gt": "@ Schema ( description = \"<STR_LIT>\" ) private Integer sort ;"}
{"input": "package com . xcs . wx . util ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . dataformat . xml . XmlMapper ; import lombok . extern . slf4j . Slf4j ; @ Slf4j public class XmlUtil { private static final XmlMapper MAPPER = new XmlMapper ( ) ; private XmlUtil ( ) { } public static < T > T parseXml ( String content , Class < T > valueType ) { try { int xmlStart = content . indexOf ( \"<STR_LIT>\" ) ;", "gt": "if ( xmlStart > <NUM_LIT> ) {"}
{"input": "package me . zhengjie . modules . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Set ; @ Mapper public interface DictDetailMapper extends BaseMapper < DictDetail > {", "gt": "List < DictDetail > findByDictName ( @ Param ( \"<STR_LIT>\" ) String name ) ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) { return ajax ; }", "gt": "String uuid = IdUtils . simpleUUID ( ) ;"}
{"input": "package cn . org . alan . exam . util . excel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Target ( ElementType . FIELD ) @ Retention ( RetentionPolicy . RUNTIME ) public @ interface ExcelExport {", "gt": "String value ( ) ;"}
{"input": "package ginyi . server . admin ; import ginyi . framework . core . config . AppConfig ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; import org . springframework . context . ConfigurableApplicationContext ; import java . net . UnknownHostException ; @ SpringBootApplication ( scanBasePackages = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ MapperScan ( { \"<STR_LIT>\" , \"<STR_LIT>\" }", "gt": ") @ Slf4j public class AdminApplication {"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ;", "gt": "List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) {", "gt": "PageResult < SysOperLogEntity > page = operLogService . selectOperLogPage ( operLog ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { Shape shape = new Shape ( ) ; shape . setName ( supportType ( ) ) ; shape . setLabel ( \"<STR_LIT>\" ) ; shape . setIcon ( \"<STR_LIT>\" ) ; shape . setDesc ( \"<STR_LIT>\" ) ; return shape ; } @ Override public List < ConfigItem > configItems ( ) {", "gt": "List < ConfigItem > configItemList = new ArrayList < > ( ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ;", "gt": "private String resourceCode ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) { CertificateUser certificateUser = new CertificateUser ( ) ; certificateUser . setUserId ( correctAnswerFrom . getUserId ( ) ) ; certificateUser . setExamId ( correctAnswerFrom . getExamId ( ) ) ; certificateUser . setCode ( ClassTokenGenerator . generateClassToken ( <NUM_LIT> ) ) ; certificateUser . setCertificateId ( exam . getCertificateId ( ) ) ; certificateUserMapper . insert ( certificateUser ) ; } } return Result . success ( \"<STR_LIT>\" ) ; } @ Override public Result < IPage < AnswerExamVO > > examPage ( Integer pageNum , Integer pageSize , String examName ) { Page < AnswerExamVO > page = new Page < > ( pageNum , pageSize ) ; List < AnswerExamVO > list = examMapper . selectMarkedList ( page , SecurityUtil . getUserId ( ) , SecurityUtil . getRole ( ) , examName ) . getRecords ( ) ; list . forEach ( answerExamVO -> { answerExamVO . setClassSize ( examGradeMapper . selectClassSize ( answerExamVO . getExamId ( ) ) ) ; LambdaQueryWrapper < UserExamsScore > numberWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ; answerExamVO . setNumberOfApplicants ( userExamsScoreMapper . selectCount ( numberWrapper ) . intValue ( ) ) ; LambdaQueryWrapper < UserExamsScore > correctedWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ; answerExamVO . setCorrectedPaper ( userExamsScoreMapper . selectCount ( correctedWrapper ) . intValue ( ) ) ; } ) ; page . setRecords ( list . stream ( ) . filter ( answerExamVO -> answerExamVO . getNeededMark ( ) == <NUM_LIT> ) . toList ( ) ) ; return Result . success ( null , page ) ; } @ Override public Result < IPage < UncorrectedUserVO > > stuExamPage ( Integer pageNum , Integer pageSize , Integer examId , String realName ) { IPage < UncorrectedUserVO > page = new Page < > ( pageNum , pageSize ) ; page = userExamsScoreMapper . uncorrectedUser ( page , examId , realName ) ;", "gt": "return Result . success ( null , page ) ;"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ; Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ; if ( exampleAnnotation != null ) { this . example = exampleAnnotation . value ( ) ; } Comment commentAnnotation = method . getDeclaredAnnotation ( Comment . class ) ; if ( commentAnnotation != null ) { this . comment = commentAnnotation . value ( ) ; } Parameter [ ] parameters = method . getParameters ( ) ; if ( parameters != null ) { for ( int i = <NUM_LIT> ; i < parameters . length ; i ++ ) { this . parameters . add ( new ExpressionMethodParameter ( parameters [ i ] ) ) ; } } }", "gt": "public String getComment ( ) {"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } } jsonGenerator . writeObject ( map ) ; } public Object encrypt ( String key , Object val ) { if ( ! ( val instanceof String ) ) { return val ; } String text = String . valueOf ( val ) ; if ( StringUtils . isBlank ( text ) ) { return \"<STR_LIT>\" ; } if ( ! keys . contains ( key ) ) { return text ; } int length = text . length ( ) ; if ( length < <NUM_LIT> ) { return \"<STR_LIT>\" ; } int hide = length / <NUM_LIT> ; int start = hide / <NUM_LIT> ; int end = start + hide ; StringBuilder sb = new StringBuilder ( text . substring ( <NUM_LIT> , start ) ) ; for ( int i = <NUM_LIT> ; i < hide ; i ++ ) { sb . append ( \"<STR_LIT>\" ) ; } sb . append ( text . substring ( end ) ) ; return sb . toString ( ) ; } public static void main ( String [ ] args ) {", "gt": "String json = \"<STR_LIT>\" ;"}
{"input": "package ginyi . framework . security . config ; import ginyi . framework . security . filter . JwtAuthenticationTokenFilter ; import ginyi . framework . security . handle . AuthenticationEntryPointImpl ; import ginyi . framework . security . handle . LogoutSuccessHandlerImpl ; import ginyi . framework . security . properties . PermitAllUrlProperties ; import org . springframework . context . annotation . Bean ; import org . springframework . http . HttpMethod ; import org . springframework . security . authentication . AuthenticationManager ; import org . springframework . security . config . annotation . authentication . builders . AuthenticationManagerBuilder ; import org . springframework . security . config . annotation . method . configuration . EnableGlobalMethodSecurity ; import org . springframework . security . config . annotation . web . builders . HttpSecurity ; import org . springframework . security . config . annotation . web . configuration . WebSecurityConfigurerAdapter ; import org . springframework . security . config . annotation . web . configurers . ExpressionUrlAuthorizationConfigurer ; import org . springframework . security . config . http . SessionCreationPolicy ; import org . springframework . security . core . userdetails . UserDetailsService ; import org . springframework . security . crypto . bcrypt . BCryptPasswordEncoder ; import org . springframework . security . web . authentication . UsernamePasswordAuthenticationFilter ; import org . springframework . security . web . authentication . logout . LogoutFilter ; import org . springframework . web . filter . CorsFilter ; import javax . annotation . Resource ; @ EnableGlobalMethodSecurity ( prePostEnabled = true , securedEnabled = true ) public class SecurityConfig extends WebSecurityConfigurerAdapter { @ Resource private UserDetailsService userDetailsService ; @ Resource private AuthenticationEntryPointImpl unauthorizedHandler ;", "gt": "@ Resource private LogoutSuccessHandlerImpl logoutSuccessHandler ;"}
{"input": "package cn . org . alan . exam . mapper ; import cn . org . alan . exam . model . entity . ExamQuAnswer ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . model . vo . exam . ExamQuAnswerExtVO ; import cn . org . alan . exam . model . vo . score . QuestionAnalyseVO ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import java . util . List ; public interface ExamQuAnswerMapper extends BaseMapper < ExamQuAnswer > { List < ExamQuAnswerExtVO > list ( String examId , String questionId ) ;", "gt": "QuestionAnalyseVO questionAnalyse ( Integer examId , Integer questionId ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ;", "gt": "private Integer userId ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) { CertificateUser certificateUser = new CertificateUser ( ) ; certificateUser . setUserId ( correctAnswerFrom . getUserId ( ) ) ; certificateUser . setExamId ( correctAnswerFrom . getExamId ( ) ) ; certificateUser . setCode ( ClassTokenGenerator . generateClassToken ( <NUM_LIT> ) ) ; certificateUser . setCertificateId ( exam . getCertificateId ( ) ) ;", "gt": "certificateUserMapper . insert ( certificateUser ) ;"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ; FileInputStream in = null ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; int len ; try { digest = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; in = new FileInputStream ( file ) ; while ( ( len = in . read ( buffer , <NUM_LIT> , <NUM_LIT> ) ) != - <NUM_LIT> ) { digest . update ( buffer , <NUM_LIT> , len ) ; } in . close ( ) ; } catch ( Exception e ) {", "gt": "e . printStackTrace ( ) ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ;", "gt": "String ENHANCE_START = \"<STR_LIT>\" ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; } @ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) { if ( beanType != null ) { InjectionMetadata metadata = findInjectionMetadata ( beanName , beanType , null ) ; metadata . checkConfigMembers ( beanDefinition ) ; } } @ Override public int getOrder ( ) { return order ; } public void setOrder ( int order ) { this . order = order ; } @ Override public void destroy ( ) throws Exception { for ( Object object : injectedObjectsCache . values ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( object + \"<STR_LIT>\" ) ; } if ( object instanceof DisposableBean ) { ( ( DisposableBean ) object ) . destroy ( ) ; } } injectionMetadataCache . clear ( ) ; injectedObjectsCache . clear ( ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( getClass ( ) + \"<STR_LIT>\" ) ; } } @ Override public void setBeanClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } @ Override public void setEnvironment ( Environment environment ) { this . environment = environment ; } protected Environment getEnvironment ( ) { return environment ; } protected ClassLoader getClassLoader ( ) { return classLoader ; } protected ConfigurableListableBeanFactory getBeanFactory ( ) { return beanFactory ; } protected Collection < Object > getInjectedObjects ( ) { return this . injectedObjectsCache . values ( ) ; } protected Object getInjectedObject ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception { String cacheKey = buildInjectedObjectCacheKey ( attributes , bean , beanName , injectedType , injectedElement ) ; Object injectedObject = injectedObjectsCache . get ( cacheKey ) ; if ( injectedObject == null ) { injectedObject = doGetInjectedBean ( attributes , bean , beanName , injectedType , injectedElement ) ; injectedObjectsCache . putIfAbsent ( cacheKey , injectedObject ) ; } return injectedObject ; } protected abstract Object doGetInjectedBean ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception ; protected abstract String buildInjectedObjectCacheKey ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) ; protected Map < InjectionMetadata . InjectedElement , Object > getInjectedFieldObjectsMap ( ) { Map < InjectionMetadata . InjectedElement , Object > injectedElementBeanMap = new LinkedHashMap < InjectionMetadata . InjectedElement , Object > ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata : injectionMetadataCache . values ( ) ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = metadata . getFieldElements ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement fieldElement : fieldElements ) { injectedElementBeanMap . put ( fieldElement , fieldElement . bean ) ; } } return unmodifiableMap ( injectedElementBeanMap ) ; } protected Map < InjectionMetadata . InjectedElement , Object > getInjectedMethodObjectsMap ( ) { Map < InjectionMetadata . InjectedElement , Object > injectedElementBeanMap = new LinkedHashMap < InjectionMetadata . InjectedElement , Object > ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata : injectionMetadataCache . values ( ) ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = metadata . getMethodElements ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement methodElement : methodElements ) { injectedElementBeanMap . put ( methodElement , methodElement . object ) ; } } return unmodifiableMap ( injectedElementBeanMap ) ; } public void setClassValuesAsString ( boolean classValuesAsString ) { this . classValuesAsString = classValuesAsString ; } public void setNestedAnnotationsAsMap ( boolean nestedAnnotationsAsMap ) { this . nestedAnnotationsAsMap = nestedAnnotationsAsMap ; } public void setIgnoreDefaultValue ( boolean ignoreDefaultValue ) { this . ignoreDefaultValue = ignoreDefaultValue ; } public void setTryMergedAnnotation ( boolean tryMergedAnnotation ) { this . tryMergedAnnotation = tryMergedAnnotation ; } private class AnnotatedInjectionMetadata extends InjectionMetadata { private final Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements ; private final Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements ; public AnnotatedInjectionMetadata ( Class < ? > targetClass , Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements , Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements ) { super ( targetClass , combine ( fieldElements , methodElements ) ) ; this . fieldElements = fieldElements ; this . methodElements = methodElements ; } public Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > getFieldElements ( ) { return fieldElements ; } public Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > getMethodElements ( ) { return methodElements ; } } private class AnnotatedMethodElement extends InjectionMetadata . InjectedElement { private final Method method ; private final AnnotationAttributes attributes ; private volatile Object object ; protected AnnotatedMethodElement ( Method method , PropertyDescriptor pd , AnnotationAttributes attributes ) { super ( method , pd ) ; this . method = method ; this . attributes = attributes ; } @ Override protected void inject ( Object bean , String beanName , PropertyValues pvs ) throws Throwable { Class < ? > injectedType = pd . getPropertyType ( ) ; Object injectedObject = getInjectedObject ( attributes , bean , beanName , injectedType , this ) ; ReflectionUtils . makeAccessible ( method ) ; method . invoke ( bean , injectedObject ) ; } } public class AnnotatedFieldElement extends InjectionMetadata . InjectedElement { private final Field field ; private final AnnotationAttributes attributes ; private volatile Object bean ; protected AnnotatedFieldElement ( Field field , AnnotationAttributes attributes ) { super ( field , null ) ; this . field = field ;", "gt": "this . attributes = attributes ;"}
{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) { List < Option > menus = menuService . listMenuOptions ( ) ; return Result . success ( menus ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < List < RouteVO > > listRoutes ( ) { Set < String > roles = SecurityUtils . getRoles ( ) ; List < RouteVO > routeList = menuService . listRoutes ( roles ) ; return Result . success ( routeList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < MenuForm > getMenuForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long id ) { MenuForm menu = menuService . getMenuForm ( id ) ; return Result . success ( menu ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result addMenu ( @ RequestBody MenuForm menuForm ) { boolean result = menuService . saveMenu ( menuForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateMenu ( @ RequestBody MenuForm menuForm ) { boolean result = menuService . saveMenu ( menuForm ) ;", "gt": "return Result . judge ( result ) ;"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) {", "gt": "QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ; entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void enable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ; entity . enable ( ) ; exampleRepository . save ( entity ) ; } @ Override public void disable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ; entity . disable ( ) ; exampleRepository . save ( entity ) ; } @ Override public void delete ( Long id ) {", "gt": "ExampleEntity entity = exampleRepository . getById ( id ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) { return this . primaryKeyPolicy ; } public String getSequenceCode ( ) { return this . sequenceCode ; } public void setPrimaryKeyPolicy ( String primaryKeyPolicy ) { this . primaryKeyPolicy = primaryKeyPolicy ; } public void setSequenceCode ( String sequenceCode ) { this . sequenceCode = sequenceCode ; }", "gt": "@ Override public String toString ( ) {"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ; private String ftlDescription ; private String jformType ;", "gt": "private String tableName ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class CompressContentBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppMsg appMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsername ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int scene ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppInfo appInfo ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String titile ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String title ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String sourceDisplayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String des ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String url ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String action ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int showType ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private ReferMsg referMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private WeAppInfo weAppInfo ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class ReferMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private long svrId ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsr ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String displayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String content ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String msgSource ; } @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class WeAppInfo { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String weAppIconUrl ;", "gt": "@ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String weAppPageThumbRawUrl ;"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ; wrapper . last ( \"<STR_LIT>\" ) ; CfgBase entity = this . getOne ( wrapper , false ) ; CfgBaseDTO dto = new CfgBaseDTO ( ) ; BeanMapper . copy ( entity , dto ) ; return dto ; } @ CacheEvict ( value = CacheKey . SITE , allEntries = true ) @ Transactional ( rollbackFor = Exception . class ) @ Override public void save ( CfgBaseDTO reqDTO ) {", "gt": "CfgBase entity = new CfgBase ( ) ;"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController { @ Resource private IManualScoreService manualScoreService ; @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < List < UserAnswerDetailVO > > getDetail ( @ RequestParam Integer userId , @ RequestParam Integer examId ) { return manualScoreService . getDetail ( userId , examId ) ; } @ PutMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < String > Correct ( @ RequestBody @ Validated ( AnswerGroup . CorrectGroup . class ) List < CorrectAnswerFrom > correctAnswerFroms ) {", "gt": "return manualScoreService . correct ( correctAnswerFroms ) ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; } return <NUM_LIT> ; } @ Override public BigDecimal getPriceBySymbol ( String symbolName ) { try { return this . getPriceBySymbol ( \"<STR_LIT>\" , symbolName ) ; } catch ( Exception e ) { return BigDecimal . ZERO ; } } @ Override public MongoDetail getPriceBySymbolDetail ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ;", "gt": "MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Lists ; import java . util . * ; import java . util . concurrent . CopyOnWriteArrayList ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ListUtil { public static boolean isEmpty ( List < ? > list ) { return ( list == null ) || list . isEmpty ( ) ; } public static boolean isNotEmpty ( List < ? > list ) { return ( list != null ) && ! ( list . isEmpty ( ) ) ; } public static < T > T getFirst ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( <NUM_LIT> ) ; } public static < T > T getLast ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( list . size ( ) - <NUM_LIT> ) ; } @ Deprecated public static < T > ArrayList < T > newArrayList ( ) { return new ArrayList < T > ( ) ; } public static < T > ArrayList < T > newArrayList ( T ... elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayList ( Iterable < T > elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayListWithCapacity ( int initSize ) { return new ArrayList < T > ( initSize ) ; } @ Deprecated public static < T > LinkedList < T > newLinkedList ( ) { return new LinkedList < T > ( ) ; } public static < T > LinkedList < T > newLinkedList ( Iterable < ? extends T > elements ) { return Lists . newLinkedList ( elements ) ; } @ Deprecated public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( ) { return new CopyOnWriteArrayList < T > ( ) ; } public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( T ... elements ) { return new CopyOnWriteArrayList < T > ( elements ) ; } public static final < T > List < T > emptyList ( ) { return Collections . emptyList ( ) ; } public static < T > List < T > emptyListIfNull ( final List < T > list ) { return list == null ? ( List < T > ) Collections . EMPTY_LIST : list ; } public static < T > List < T > singletonList ( T o ) { return Collections . singletonList ( o ) ; } public static < T > List < T > unmodifiableList ( List < ? extends T > list ) { return Collections . unmodifiableList ( list ) ; } public static < T > List < T > synchronizedList ( List < T > list ) { return Collections . synchronizedList ( list ) ; } public static < T extends Comparable < ? super T > > void sort ( List < T > list ) { Collections . sort ( list ) ; } public static < T extends Comparable < ? super T > > void sortReverse ( List < T > list ) { Collections . sort ( list , Collections . reverseOrder ( ) ) ; } public static < T > void sort ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , c ) ; } public static < T > void sortReverse ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , Collections . reverseOrder ( c ) ) ; } public static < T > int binarySearch ( List < ? extends Comparable < ? super T > > sortedList , T key ) { return Collections . binarySearch ( sortedList , key ) ; } public static < T > int binarySearch ( List < ? extends T > sortedList , T key , Comparator < ? super T > c ) { return Collections . binarySearch ( sortedList , key , c ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list ) ; } public static void shuffle ( List < ? > list , Random rnd ) { Collections . shuffle ( list , rnd ) ; } public static < T > List < T > reverse ( final List < T > list ) { return Lists . reverse ( list ) ; } public static < T > List < List < T > > partition ( List < T > list , int size ) { return Lists . partition ( list , size ) ; } public static < T > void notNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; } } } public static < T > void uniqueNotNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; Set < T > set = new HashSet < > ( ( int ) ( list . size ( ) / <NUM_LIT> + <NUM_LIT> ) ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; continue ; } if ( set . contains ( obj ) ) { ite . remove ( ) ; continue ; } set . add ( obj ) ; } } public static < E > List < E > union ( final List < ? extends E > list1 , final List < ? extends E > list2 ) { final List < E > result = new ArrayList < E > ( list1 . size ( ) + list2 . size ( ) ) ; result . addAll ( list1 ) ; result . addAll ( list2 ) ; return result ; } public static < T > List < T > intersection ( final List < ? extends T > list1 , final List < ? extends T > list2 ) { List < ? extends T > smaller = list1 ; List < ? extends T > larger = list2 ; if ( list1 . size ( ) > list2 . size ( ) ) { smaller = list2 ;", "gt": "larger = list1 ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ; users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ; } return users ; } @ Override public void switchUser ( String wxId ) { FileUtil . writeString ( wxId , DirUtil . getSwitchUserDir ( ) , \"<STR_LIT>\" ) ; } @ Override public String currentUser ( ) { String switchUserDir = DirUtil . getSwitchUserDir ( ) ; if ( ! FileUtil . exist ( switchUserDir ) ) { return Optional . of ( getWxIds ( ) ) . filter ( items -> ! items . isEmpty ( ) ) . map ( items -> items . get ( <NUM_LIT> ) ) . orElse ( null ) ; } return FileUtil . readUtf8String ( switchUserDir ) ; } @ Override public void saveUser ( UserBO userBO ) { FileUtil . writeString ( JSONUtil . toJsonStr ( userBO ) , DirUtil . getUserDir ( userBO . getWxId ( ) ) , \"<STR_LIT>\" ) ; } @ Override public String getBasePath ( String wxId ) { String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } String userJson = FileUtil . readUtf8String ( userDir ) ; return JSONUtil . toBean ( userJson , UserBO . class ) . getBasePath ( ) ; }", "gt": "private List < String > getWxIds ( ) {"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ; private String requestIp ; private String address ; private String browser ; private Long time ; @ JSONField ( serialize = false ) private String exceptionDetail ; @ TableField ( fill = FieldFill . INSERT ) private Timestamp createTime ; public SysLog ( String logType , Long time ) { this . logType = logType ;", "gt": "this . time = time ;"}
{"input": "package io . github . chensheng . dddboot . tools . base . type ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; public class Triple < L , M , R > { @ Nullable private final L left ; @ Nullable private final M middle ; @ Nullable private final R right ; public Triple ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) { this . left = left ; this . middle = middle ; this . right = right ; } @ Nullable public L getLeft ( ) { return left ; } @ Nullable public M getMiddle ( ) { return middle ; } @ Nullable public R getRight ( ) { return right ; } @ Override public int hashCode ( ) { final int prime = <NUM_LIT> ; int result = <NUM_LIT> ; result = prime * result + ( ( left == null ) ? <NUM_LIT> : left . hashCode ( ) ) ; result = prime * result + ( ( middle == null ) ? <NUM_LIT> : middle . hashCode ( ) ) ; return prime * result + ( ( right == null ) ? <NUM_LIT> : right . hashCode ( ) ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } Triple other = ( Triple ) obj ; if ( left == null ) { if ( other . left != null ) { return false ; } } else if ( ! left . equals ( other . left ) ) { return false ; } if ( middle == null ) { if ( other . middle != null ) { return false ; } } else if ( ! middle . equals ( other . middle ) ) { return false ; } if ( right == null ) { if ( other . right != null ) { return false ; } } else if ( ! right . equals ( other . right ) ) { return false ; } return true ; } @ Override public String toString ( ) { return \"<STR_LIT>\" + left + \"<STR_LIT>\" + middle + \"<STR_LIT>\" + right + '<STR_LIT>' ; } public static < L , M , R > Triple < L , M , R > of ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) {", "gt": "return new Triple < L , M , R > ( left , middle , right ) ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ;", "gt": "import org . springblade . config . constant . MjkjConstant ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) { CertificateUser certificateUser = new CertificateUser ( ) ; certificateUser . setUserId ( correctAnswerFrom . getUserId ( ) ) ; certificateUser . setExamId ( correctAnswerFrom . getExamId ( ) ) ; certificateUser . setCode ( ClassTokenGenerator . generateClassToken ( <NUM_LIT> ) ) ; certificateUser . setCertificateId ( exam . getCertificateId ( ) ) ; certificateUserMapper . insert ( certificateUser ) ; } } return Result . success ( \"<STR_LIT>\" ) ; } @ Override public Result < IPage < AnswerExamVO > > examPage ( Integer pageNum , Integer pageSize , String examName ) { Page < AnswerExamVO > page = new Page < > ( pageNum , pageSize ) ; List < AnswerExamVO > list = examMapper . selectMarkedList ( page , SecurityUtil . getUserId ( ) , SecurityUtil . getRole ( ) , examName ) . getRecords ( ) ; list . forEach ( answerExamVO -> { answerExamVO . setClassSize ( examGradeMapper . selectClassSize ( answerExamVO . getExamId ( ) ) ) ;", "gt": "LambdaQueryWrapper < UserExamsScore > numberWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ;"}
{"input": "package com . xcs . wx . config ; import com . baomidou . dynamic . datasource . exception . CannotFindDataSourceException ; import com . xcs . wx . domain . vo . ResponseVO ; import com . xcs . wx . exception . BizException ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . MyBatisSystemException ; import org . springframework . http . HttpStatus ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseStatus ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ Slf4j @ RestControllerAdvice @ ResponseStatus ( HttpStatus . OK ) public class ExceptionAdviceConfig { @ ExceptionHandler ( BizException . class ) public ResponseVO < String > handleException ( BizException e ) { return ResponseVO . error ( e . getCode ( ) , e . getMsg ( ) ) ; } @ ExceptionHandler ( MyBatisSystemException . class ) public ResponseVO < String > myBatisSystemException ( MyBatisSystemException e ) { if ( e . getCause ( ) . getCause ( ) instanceof CannotFindDataSourceException ) {", "gt": "return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ;"}
{"input": "package com . yf . system . modules . role . dto ; import com . yf . base . api . annon . Dict ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; import java . util . Date ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String roleName ; @ Dict ( dicCode = \"<STR_LIT>\" ) @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Integer dataScope ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Integer roleLevel ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String remark ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Date createTime ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Date updateTime ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String createBy ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String updateBy ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ;", "gt": "wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package me . zhengjie . modules . mnt . mapper ; import me . zhengjie . modules . mnt . domain . Server ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . Set ; @ Mapper public interface DeployServerMapper { void insertData ( @ Param ( \"<STR_LIT>\" ) Long deployId , @ Param ( \"<STR_LIT>\" ) Set < Server > servers ) ; void deleteByDeployId ( @ Param ( \"<STR_LIT>\" ) Long deployId ) ;", "gt": "void deleteByDeployIds ( @ Param ( \"<STR_LIT>\" ) Set < Long > deployIds ) ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) {", "gt": "return selectModel . getClose ( ) ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ;", "gt": "Integer baseDeleteSql ( String tableName , Long id ) ;"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ;", "gt": "SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultJsonConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultPropertiesConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultXmlConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultYamlConfigParse ; import java . util . * ; public final class ConfigParseUtils { private static final String LINK_CHAR = \"<STR_LIT>\" ; private static Map < String , ConfigParse > DEFAULT_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; private static Map < String , Map < String , ConfigParse > > CUSTOMER_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; static { DefaultJsonConfigParse jsonConfigParse = new DefaultJsonConfigParse ( ) ; DefaultPropertiesConfigParse propertiesConfigParse = new DefaultPropertiesConfigParse ( ) ; DefaultYamlConfigParse yamlConfigParse = new DefaultYamlConfigParse ( ) ; DefaultXmlConfigParse xmlConfigParse = new DefaultXmlConfigParse ( ) ; DEFAULT_CONFIG_PARSE_MAP . put ( jsonConfigParse . processType ( ) . toLowerCase ( ) , jsonConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( propertiesConfigParse . processType ( ) . toLowerCase ( ) , propertiesConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( yamlConfigParse . processType ( ) . toLowerCase ( ) , yamlConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( xmlConfigParse . processType ( ) . toLowerCase ( ) , xmlConfigParse ) ; ServiceLoader < ConfigParse > configParses = ServiceLoader . load ( ConfigParse . class ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ConfigParse configParse : configParses ) { String type = configParse . processType ( ) . toLowerCase ( ) ; if ( ! CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { CUSTOMER_CONFIG_PARSE_MAP . put ( type , new HashMap < String , ConfigParse > ( <NUM_LIT> ) ) ; } sb . setLength ( <NUM_LIT> ) ; sb . append ( configParse . dataId ( ) ) . append ( LINK_CHAR ) . append ( configParse . group ( ) ) ; if ( LINK_CHAR . equals ( sb . toString ( ) ) ) { DEFAULT_CONFIG_PARSE_MAP . put ( type , configParse ) ; } else { CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . put ( sb . toString ( ) , configParse ) ; } } DEFAULT_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( DEFAULT_CONFIG_PARSE_MAP ) ; CUSTOMER_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( CUSTOMER_CONFIG_PARSE_MAP ) ; } public static Map < String , Object > toProperties ( final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; if ( DEFAULT_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = DEFAULT_CONFIG_PARSE_MAP . get ( type ) ; return configParse . parse ( context ) ; } else { throw new UnsupportedOperationException ( \"<STR_LIT>\" + type ) ; } } public static Map < String , Object > toProperties ( final String dataId , final String group , final String context , String type ) { if ( context == null ) {", "gt": "return new LinkedHashMap < String , Object > ( ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ;", "gt": "public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ;", "gt": "import org . springblade . core . redis . cache . BladeRedis ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) { return administratorPhoneCode ; } public void setAdministratorPhoneCode ( String administratorPhoneCode ) { CoinhouseConfig . administratorPhoneCode = administratorPhoneCode ; } public static String getAdministratorPhone ( ) { return administratorPhone ; } public void setAdministratorPhone ( String administratorPhone ) { CoinhouseConfig . administratorPhone = administratorPhone ; } public static String getAdministratorEmail ( ) { return administratorEmail ; } public void setAdministratorEmail ( String administratorEmail ) { CoinhouseConfig . administratorEmail = administratorEmail ; } public static String getMarketJysName ( ) { return marketJysName ; } public void setMarketJysName ( String marketJysName ) { CoinhouseConfig . marketJysName = marketJysName ; } public static String getApiKey ( ) { return apiKey ; } public void setApiKey ( String apiKey ) { CoinhouseConfig . apiKey = apiKey ; } public static String getApiSecret ( ) { return apiSecret ; } public void setApiSecret ( String apiSecret ) { CoinhouseConfig . apiSecret = apiSecret ; } public static String getApiBaseurl ( ) { return apiBaseurl ; } public void setApiBaseurl ( String apiBaseurl ) {", "gt": "CoinhouseConfig . apiBaseurl = apiBaseurl ;"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ;", "gt": "@ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter {"}
{"input": "package com . youlai . system . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import com . youlai . system . plugin . mybatis . annotation . DataPermission ; import com . youlai . system . model . entity . SysDept ;", "gt": "import org . apache . ibatis . annotations . Mapper ;"}
{"input": "package com . youlai . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . model . entity . SysLog ; import com . baomidou . mybatisplus . extension . service . IService ; import com . youlai . system . model . query . LogPageQuery ; import com . youlai . system . model . vo . LogPageVO ; import com . youlai . system . model . vo . VisitStatsVO ; import com . youlai . system . model . vo . VisitTrendVO ; import java . time . LocalDate ; import java . util . List ; public interface SysLogService extends IService < SysLog > {", "gt": "Page < LogPageVO > listPagedLogs ( LogPageQuery queryParams ) ;"}
{"input": "package com . oddfar . campus . common . core ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . redis . core . BoundSetOperations ; import org . springframework . data . redis . core . HashOperations ; import org . springframework . data . redis . core . RedisTemplate ; import org . springframework . data . redis . core . ValueOperations ; import org . springframework . stereotype . Component ; import java . util . * ; import java . util . concurrent . TimeUnit ; @ SuppressWarnings ( value = { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Component public class RedisCache { @ Autowired public RedisTemplate redisTemplate ; public < T > void setCacheObject ( final String key , final T value ) { redisTemplate . opsForValue ( ) . set ( key , value ) ; } public < T > void setCacheObject ( final String key , final T value , final Integer timeout , final TimeUnit timeUnit ) { redisTemplate . opsForValue ( ) . set ( key , value , timeout , timeUnit ) ; } public boolean expire ( final String key , final long timeout ) { return expire ( key , timeout , TimeUnit . SECONDS ) ; } public boolean expire ( final String key , final long timeout , final TimeUnit unit ) { return redisTemplate . expire ( key , timeout , unit ) ; } public long getExpire ( final String key ) { return redisTemplate . getExpire ( key ) ; } public Boolean hasKey ( String key ) { return redisTemplate . hasKey ( key ) ; } public < T > T getCacheObject ( final String key ) { ValueOperations < String , T > operation = redisTemplate . opsForValue ( ) ; return operation . get ( key ) ; } public boolean deleteObject ( final String key ) { return redisTemplate . delete ( key ) ; } public boolean deleteObject ( final Collection collection ) { return redisTemplate . delete ( collection ) > <NUM_LIT> ; } public < T > long setCacheList ( final String key , final List < T > dataList ) { Long count = redisTemplate . opsForList ( ) . rightPushAll ( key , dataList ) ; return count == null ? <NUM_LIT> : count ; } public < T > List < T > getCacheList ( final String key ) { return redisTemplate . opsForList ( ) . range ( key , <NUM_LIT> , - <NUM_LIT> ) ; } public < T > BoundSetOperations < String , T > setCacheSet ( final String key , final Set < T > dataSet ) { BoundSetOperations < String , T > setOperation = redisTemplate . boundSetOps ( key ) ; Iterator < T > it = dataSet . iterator ( ) ; while ( it . hasNext ( ) ) { setOperation . add ( it . next ( ) ) ; }", "gt": "return setOperation ;"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController { @ Resource private IManualScoreService manualScoreService ; @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < List < UserAnswerDetailVO > > getDetail ( @ RequestParam Integer userId , @ RequestParam Integer examId ) {", "gt": "return manualScoreService . getDetail ( userId , examId ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Lists ; import java . util . * ; import java . util . concurrent . CopyOnWriteArrayList ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ListUtil { public static boolean isEmpty ( List < ? > list ) { return ( list == null ) || list . isEmpty ( ) ; } public static boolean isNotEmpty ( List < ? > list ) { return ( list != null ) && ! ( list . isEmpty ( ) ) ; } public static < T > T getFirst ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( <NUM_LIT> ) ; } public static < T > T getLast ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( list . size ( ) - <NUM_LIT> ) ; } @ Deprecated public static < T > ArrayList < T > newArrayList ( ) { return new ArrayList < T > ( ) ; } public static < T > ArrayList < T > newArrayList ( T ... elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayList ( Iterable < T > elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayListWithCapacity ( int initSize ) { return new ArrayList < T > ( initSize ) ; } @ Deprecated public static < T > LinkedList < T > newLinkedList ( ) { return new LinkedList < T > ( ) ; } public static < T > LinkedList < T > newLinkedList ( Iterable < ? extends T > elements ) { return Lists . newLinkedList ( elements ) ; } @ Deprecated public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( ) { return new CopyOnWriteArrayList < T > ( ) ; } public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( T ... elements ) { return new CopyOnWriteArrayList < T > ( elements ) ; } public static final < T > List < T > emptyList ( ) { return Collections . emptyList ( ) ; } public static < T > List < T > emptyListIfNull ( final List < T > list ) { return list == null ? ( List < T > ) Collections . EMPTY_LIST : list ; } public static < T > List < T > singletonList ( T o ) { return Collections . singletonList ( o ) ; } public static < T > List < T > unmodifiableList ( List < ? extends T > list ) { return Collections . unmodifiableList ( list ) ; } public static < T > List < T > synchronizedList ( List < T > list ) { return Collections . synchronizedList ( list ) ; } public static < T extends Comparable < ? super T > > void sort ( List < T > list ) { Collections . sort ( list ) ; } public static < T extends Comparable < ? super T > > void sortReverse ( List < T > list ) { Collections . sort ( list , Collections . reverseOrder ( ) ) ; } public static < T > void sort ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , c ) ; } public static < T > void sortReverse ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , Collections . reverseOrder ( c ) ) ; } public static < T > int binarySearch ( List < ? extends Comparable < ? super T > > sortedList , T key ) { return Collections . binarySearch ( sortedList , key ) ; } public static < T > int binarySearch ( List < ? extends T > sortedList , T key , Comparator < ? super T > c ) { return Collections . binarySearch ( sortedList , key , c ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list ) ; } public static void shuffle ( List < ? > list , Random rnd ) { Collections . shuffle ( list , rnd ) ; } public static < T > List < T > reverse ( final List < T > list ) { return Lists . reverse ( list ) ; } public static < T > List < List < T > > partition ( List < T > list , int size ) { return Lists . partition ( list , size ) ; } public static < T > void notNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) {", "gt": "T obj = ite . next ( ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ; public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) { NacosConfigProperties nacosConfigProperties = new NacosConfigProperties ( ) ; Binder binder = Binder . get ( environment ) ;", "gt": "ResolvableType type = ResolvableType . forClass ( NacosConfigProperties . class ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ;", "gt": "private Integer judgeCount ;"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ; String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } FileInputStream is = null ; ServletOutputStream os = null ; try { Tika tika = new Tika ( ) ; String mimeType = tika . detect ( file ) ; response . setContentType ( mimeType ) ; response . setContentLength ( ( int ) file . length ( ) ) ; is = new FileInputStream ( filePath ) ; int len = <NUM_LIT> ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; os = response . getOutputStream ( ) ; while ( ( len = is . read ( buffer ) ) > <NUM_LIT> ) { os . write ( buffer , <NUM_LIT> , len ) ; } } catch ( Exception e ) { log . error ( e ) ; } finally {", "gt": "if ( is != null ) {"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ; String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } FileInputStream is = null ;", "gt": "ServletOutputStream os = null ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ;", "gt": "List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ;"}
{"input": "package cn . org . alan . exam . model . vo ; import cn . org . alan . exam . model . entity . Option ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; import java . util . List ; @ Data public class QuestionVO { private Integer id ;", "gt": "private String content ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ;", "gt": "private Integer multiCount ;"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . Getter ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; @ Getter @ Setter public class AuthUserDto { @ NotBlank private String username ;", "gt": "@ NotBlank private String password ;"}
{"input": "package com . yf . system . modules . role . dto ; import com . yf . base . api . annon . Dict ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; import java . util . Date ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String roleName ; @ Dict ( dicCode = \"<STR_LIT>\" ) @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Integer dataScope ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Integer roleLevel ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String remark ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Date createTime ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Date updateTime ;"}
{"input": "package com . oddfar . campus . common . annotation ; import java . lang . annotation . Documented ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Target ( {", "gt": "ElementType . METHOD , ElementType . TYPE }"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; } long count = this . count ( wrapper ) ; if ( count > <NUM_LIT> ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } SysDic entity = new SysDic ( ) ; BeanMapper . copy ( reqDTO , entity ) ; this . saveOrUpdate ( entity ) ; } @ Transactional ( rollbackFor = Exception . class ) @ Override public void delete ( List < String > ids ) { List < String > codes = new ArrayList < > ( ) ; for ( String id : ids ) { SysDic dic = this . getById ( id ) ;", "gt": "if ( dic == null ) {"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ;", "gt": "FileInputStream in = null ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ;", "gt": "import org . springblade . config . db . DataBaseConfig ;"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ; import java . util . Date ; @ Data @ AllArgsConstructor @ NoArgsConstructor public class OnlineUserDto { private String userName ; private String nickName ; private String dept ; private String browser ; private String ip ;", "gt": "private String address ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ;", "gt": "import org . springblade . core . mp . support . Query ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { postService . removeDeptByIds ( ids ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; } private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; nacosPropertySource . setOrigin ( metadata . getClassName ( ) ) ; } private void initOrder ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean first = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . FIRST_ATTRIBUTE_NAME ) ) ; String before = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . BEFORE_ATTRIBUTE_NAME ) ; String after = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AFTER_ATTRIBUTE_NAME ) ; nacosPropertySource . setFirst ( first ) ;", "gt": "nacosPropertySource . setBefore ( before ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) { roleService . addRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult update ( @ RequestBody @ Validated ( UpdateGroup . class ) RoleDto roleDto ) { roleService . updateRole ( roleDto ) ;", "gt": "return CommonResult . success ( ) ;"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Getter ; import lombok . Setter ; import java . util . List ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public class DictPageVO { @ Schema ( description = \"<STR_LIT>\" ) private Long id ; @ Schema ( description = \"<STR_LIT>\" ) private String name ; @ Schema ( description = \"<STR_LIT>\" ) private String code ; @ Schema ( description = \"<STR_LIT>\" ) private Integer status ; @ Schema ( description = \"<STR_LIT>\" ) private List < DictItem > dictItems ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public static class DictItem {", "gt": "@ Schema ( description = \"<STR_LIT>\" ) private Long id ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultJsonConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultPropertiesConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultXmlConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultYamlConfigParse ; import java . util . * ; public final class ConfigParseUtils { private static final String LINK_CHAR = \"<STR_LIT>\" ; private static Map < String , ConfigParse > DEFAULT_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; private static Map < String , Map < String , ConfigParse > > CUSTOMER_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; static { DefaultJsonConfigParse jsonConfigParse = new DefaultJsonConfigParse ( ) ; DefaultPropertiesConfigParse propertiesConfigParse = new DefaultPropertiesConfigParse ( ) ; DefaultYamlConfigParse yamlConfigParse = new DefaultYamlConfigParse ( ) ; DefaultXmlConfigParse xmlConfigParse = new DefaultXmlConfigParse ( ) ; DEFAULT_CONFIG_PARSE_MAP . put ( jsonConfigParse . processType ( ) . toLowerCase ( ) , jsonConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( propertiesConfigParse . processType ( ) . toLowerCase ( ) , propertiesConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( yamlConfigParse . processType ( ) . toLowerCase ( ) , yamlConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( xmlConfigParse . processType ( ) . toLowerCase ( ) , xmlConfigParse ) ; ServiceLoader < ConfigParse > configParses = ServiceLoader . load ( ConfigParse . class ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ConfigParse configParse : configParses ) { String type = configParse . processType ( ) . toLowerCase ( ) ; if ( ! CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { CUSTOMER_CONFIG_PARSE_MAP . put ( type , new HashMap < String , ConfigParse > ( <NUM_LIT> ) ) ; } sb . setLength ( <NUM_LIT> ) ; sb . append ( configParse . dataId ( ) ) . append ( LINK_CHAR ) . append ( configParse . group ( ) ) ; if ( LINK_CHAR . equals ( sb . toString ( ) ) ) { DEFAULT_CONFIG_PARSE_MAP . put ( type , configParse ) ; } else { CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . put ( sb . toString ( ) , configParse ) ; } } DEFAULT_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( DEFAULT_CONFIG_PARSE_MAP ) ; CUSTOMER_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( CUSTOMER_CONFIG_PARSE_MAP ) ; } public static Map < String , Object > toProperties ( final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; if ( DEFAULT_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = DEFAULT_CONFIG_PARSE_MAP . get ( type ) ; return configParse . parse ( context ) ; } else { throw new UnsupportedOperationException ( \"<STR_LIT>\" + type ) ; } } public static Map < String , Object > toProperties ( final String dataId , final String group , final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; String configParseKey = dataId + LINK_CHAR + group ; if ( CUSTOMER_CONFIG_PARSE_MAP . isEmpty ( ) || LINK_CHAR . equals ( configParseKey ) ) { return toProperties ( context , type ) ; } if ( CUSTOMER_CONFIG_PARSE_MAP . get ( type ) == null || CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . isEmpty ( ) ) { return toProperties ( context , type ) ; } if ( CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . get ( configParseKey ) == null ) { return toProperties ( context , type ) ; } else { if ( CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . get ( configParseKey ) ; if ( configParse == null ) {", "gt": "throw new NoSuchElementException ( \"<STR_LIT>\" ) ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String deptName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationUrl ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String operationIp ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ;", "gt": "import org . springblade . core . tool . utils . Func ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) {", "gt": "dateFormat = TIME_FORMAT ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ; resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ;", "gt": "delCaches ( dictDetail ) ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Question ; import cn . org . alan . exam . model . form . question . QuestionFrom ; import cn . org . alan . exam . model . vo . QuestionVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import org . springframework . web . multipart . MultipartFile ; public interface IQuestionService extends IService < Question > { Result < String > addSingleQuestion ( QuestionFrom questionFrom ) ; Result < String > deleteBatchByIds ( String ids ) ;", "gt": "Result < IPage < QuestionVO > > pagingQuestion ( Integer pageNum , Integer pageSize , String content , Integer type , Integer repoId ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultJsonConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultPropertiesConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultXmlConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultYamlConfigParse ; import java . util . * ; public final class ConfigParseUtils { private static final String LINK_CHAR = \"<STR_LIT>\" ; private static Map < String , ConfigParse > DEFAULT_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; private static Map < String , Map < String , ConfigParse > > CUSTOMER_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; static { DefaultJsonConfigParse jsonConfigParse = new DefaultJsonConfigParse ( ) ; DefaultPropertiesConfigParse propertiesConfigParse = new DefaultPropertiesConfigParse ( ) ; DefaultYamlConfigParse yamlConfigParse = new DefaultYamlConfigParse ( ) ; DefaultXmlConfigParse xmlConfigParse = new DefaultXmlConfigParse ( ) ; DEFAULT_CONFIG_PARSE_MAP . put ( jsonConfigParse . processType ( ) . toLowerCase ( ) , jsonConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( propertiesConfigParse . processType ( ) . toLowerCase ( ) , propertiesConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( yamlConfigParse . processType ( ) . toLowerCase ( ) , yamlConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( xmlConfigParse . processType ( ) . toLowerCase ( ) , xmlConfigParse ) ; ServiceLoader < ConfigParse > configParses = ServiceLoader . load ( ConfigParse . class ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ConfigParse configParse : configParses ) { String type = configParse . processType ( ) . toLowerCase ( ) ; if ( ! CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { CUSTOMER_CONFIG_PARSE_MAP . put ( type , new HashMap < String , ConfigParse > ( <NUM_LIT> ) ) ; } sb . setLength ( <NUM_LIT> ) ; sb . append ( configParse . dataId ( ) ) . append ( LINK_CHAR ) . append ( configParse . group ( ) ) ; if ( LINK_CHAR . equals ( sb . toString ( ) ) ) { DEFAULT_CONFIG_PARSE_MAP . put ( type , configParse ) ; } else { CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . put ( sb . toString ( ) , configParse ) ; } } DEFAULT_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( DEFAULT_CONFIG_PARSE_MAP ) ; CUSTOMER_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( CUSTOMER_CONFIG_PARSE_MAP ) ; } public static Map < String , Object > toProperties ( final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; if ( DEFAULT_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = DEFAULT_CONFIG_PARSE_MAP . get ( type ) ; return configParse . parse ( context ) ; } else { throw new UnsupportedOperationException ( \"<STR_LIT>\" + type ) ; } } public static Map < String , Object > toProperties ( final String dataId , final String group , final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; String configParseKey = dataId + LINK_CHAR + group ; if ( CUSTOMER_CONFIG_PARSE_MAP . isEmpty ( ) || LINK_CHAR . equals ( configParseKey ) ) {", "gt": "return toProperties ( context , type ) ;"}
{"input": "package org . example . ddduser . application . service ; import org . example . ddduser . application . dto . command . ModifyAddressCommand ; import org . example . ddduser . application . dto . command . ModifyPasswordCommand ; import org . example . ddduser . application . dto . command . ModifyProfileCommand ; import org . example . ddduser . application . dto . command . UserRegisterCommand ;", "gt": "public interface UserCommandService {"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ;"}
{"input": "package com . yf . ability . shiro ; import com . yf . ability . shiro . dto . SysUserLoginDTO ; import com . yf . ability . shiro . jwt . JwtToken ; import com . yf . ability . shiro . jwt . JwtUtils ; import com . yf . ability . shiro . service . ShiroUserService ; import lombok . extern . slf4j . Slf4j ; import org . apache . shiro . authc . AuthenticationException ; import org . apache . shiro . authc . AuthenticationInfo ; import org . apache . shiro . authc . AuthenticationToken ; import org . apache . shiro . authc . SimpleAuthenticationInfo ; import org . apache . shiro . authz . AuthorizationInfo ; import org . apache . shiro . authz . SimpleAuthorizationInfo ; import org . apache . shiro . realm . AuthorizingRealm ; import org . apache . shiro . subject . PrincipalCollection ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . context . annotation . Lazy ; import org . springframework . stereotype . Component ; import java . util . HashSet ; import java . util . List ; @ Component @ Slf4j public class MyShiroRealm extends AuthorizingRealm { @ Autowired @ Lazy private ShiroUserService shiroUserService ; @ Override public boolean supports ( AuthenticationToken token ) { return token instanceof JwtToken ; } @ Override protected AuthorizationInfo doGetAuthorizationInfo ( PrincipalCollection principals ) { log . info ( \"<STR_LIT>\" ) ; System . out . println ( \"<STR_LIT>\" ) ; String userId = null ; if ( principals != null ) { SysUserLoginDTO user = ( SysUserLoginDTO ) principals . getPrimaryPrincipal ( ) ; userId = user . getId ( ) ; } SimpleAuthorizationInfo info = new SimpleAuthorizationInfo ( ) ; List < String > roles = shiroUserService . roles ( userId ) ; info . setRoles ( new HashSet < > ( roles ) ) ; List < String > permissions = shiroUserService . permissions ( userId ) ; info . addStringPermissions ( permissions ) ; log . info ( \"<STR_LIT>\" ) ; return info ; } @ Override protected AuthenticationInfo doGetAuthenticationInfo ( AuthenticationToken auth ) throws AuthenticationException { String token = ( String ) auth . getCredentials ( ) ; if ( token == null ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; } SysUserLoginDTO user = this . checkToken ( token ) ; SimpleAuthenticationInfo info = new SimpleAuthenticationInfo ( user , token , getName ( ) ) ; return info ; } public SysUserLoginDTO checkToken ( String token ) throws AuthenticationException { try { JwtUtils . getUsername ( token ) ; } catch ( Exception e ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; } SysUserLoginDTO user = shiroUserService . token ( token ) ;", "gt": "if ( JwtUtils . expired ( token ) ) {"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) { PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] infoIds ) { return R . ok ( logininforService . deleteLogininforByIds ( infoIds ) ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) { logininforService . cleanLogininfor ( ) ;", "gt": "return R . ok ( ) ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ;", "gt": "map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Question ; import cn . org . alan . exam . model . form . question . QuestionFrom ; import cn . org . alan . exam . model . vo . QuestionVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import org . springframework . web . multipart . MultipartFile ; public interface IQuestionService extends IService < Question > { Result < String > addSingleQuestion ( QuestionFrom questionFrom ) ;", "gt": "Result < String > deleteBatchByIds ( String ids ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } } catch ( Exception e ) {", "gt": "log . error ( \"<STR_LIT>\" , delayTimes , e ) ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlCData ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class VoipMsgBO {", "gt": "@ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private VoIPBubbleMsg voIPBubbleMsg ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) {", "gt": "if ( StringUtils . isBlank ( s ) ) {"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Repo ; import cn . org . alan . exam . model . vo . repo . RepoListVO ; import cn . org . alan . exam . model . vo . repo . RepoVO ; import cn . org . alan . exam . model . vo . exercise . ExerciseRepoVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import java . util . List ; public interface IRepoService extends IService < Repo > { Result < String > addRepo ( Repo repo ) ; Result < String > updateRepo ( Repo repo , Integer id ) ; Result < String > deleteRepoById ( Integer id ) ;", "gt": "Result < List < RepoListVO > > getRepoList ( String repoTitle ) ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ; private Long deptId ; private String avatar ; private String mobile ; private Integer status ; private String email ;", "gt": "private Long createBy ;"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ; private String requestIp ; private String address ; private String browser ; private Long time ; @ JSONField ( serialize = false ) private String exceptionDetail ; @ TableField ( fill = FieldFill . INSERT ) private Timestamp createTime ; public SysLog ( String logType , Long time ) {", "gt": "this . logType = logType ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) {", "gt": "String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ; private String methodName ; @ TableField ( exist = false ) private String modular_code ;", "gt": "private String modularName ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogLogin extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String userName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String status ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String ipaddr ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String loginLocation ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String browser ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String os ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String msg ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String deptName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationUrl ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationIp ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationLocation ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationParam ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String jsonResult ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierPart ( boolean consume ) {", "gt": "if ( index >= end ) {"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController { @ Resource private IManualScoreService manualScoreService ;", "gt": "@ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < List < UserAnswerDetailVO > > getDetail ( @ RequestParam Integer userId , @ RequestParam Integer examId ) {"}
{"input": "package com . oddfar . campus . framework . api . file ; import org . springframework . web . multipart . MultipartFile ; public class LocalFileOperator implements FileOperatorApi { private String currentSavePath ; public LocalFileOperator ( String currentSavePath ) { this . currentSavePath = currentSavePath ; }", "gt": "@ Override public void storageFile ( String bucketName , MultipartFile file , String [ ] allowedExtension ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ;", "gt": "Integer baseDeleteSqlStr ( String tableName , String id ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { postService . removeDeptByIds ( ids ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < PostVo > > list ( @ RequestBody PostDto postDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < PostVo > list = postService . list ( postDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addPost ( @ RequestBody @ Validated ( AddGroup . class ) PostDto postDto ) { postService . addPost ( postDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ; Set < String > selectResourceCodeByRoleId ( Long roleId ) ;", "gt": "List < SysResourceEntity > selectApiResourceList ( Long userId ) ;"}
{"input": "package com . oddfar . campus . common . annotation ; import java . lang . annotation . Documented ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ;", "gt": "@ Target ( {"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) {", "gt": "return applicationContext ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ;", "gt": "List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ;"}
{"input": "package me . zhengjie . utils . enums ; import lombok . AllArgsConstructor ; import lombok . Getter ; @ Getter @ AllArgsConstructor public enum RequestMethodEnum { GET ( \"<STR_LIT>\" ) , POST ( \"<STR_LIT>\" ) , PUT ( \"<STR_LIT>\" ) , PATCH ( \"<STR_LIT>\" ) , DELETE ( \"<STR_LIT>\" ) , ALL ( \"<STR_LIT>\" ) ; private final String type ; public static RequestMethodEnum find ( String type ) { for ( RequestMethodEnum value : RequestMethodEnum . values ( ) ) {", "gt": "if ( value . getType ( ) . equals ( type ) ) {"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ;", "gt": "private Integer certificateId ;"}
{"input": "package ginyi . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import ginyi . system . domain . SysDept ; import ginyi . system . domain . model . dto . DeptDto ; import org . apache . ibatis . annotations . Param ; public interface SysDeptMapper extends BaseMapper < SysDept > { public IPage < SysDept > list ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto , Page page ) ;", "gt": "public void insertDept ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto ) ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; @ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController { @ Resource private IVerifyService verifyService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public CommonResult captcha ( ) { String img = verifyService . captcha ( ) ; HashMap < String , String > map = new HashMap < > ( ) ;", "gt": "map . put ( \"<STR_LIT>\" , img ) ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ; private Long deptId ; private String avatar ;", "gt": "private String mobile ;"}
{"input": "package com . xcs . wx . repository . impl ; import com . baomidou . dynamic . datasource . annotation . DS ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . HardLinkImageAttribute ; import com . xcs . wx . mapper . HardLinkImageAttributeMapper ; import com . xcs . wx . repository . HardLinkImageAttributeRepository ;", "gt": "import org . springframework . stereotype . Repository ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String countryId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String merchantId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinCou ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private Integer status ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Repo ; import cn . org . alan . exam . model . vo . repo . RepoListVO ; import cn . org . alan . exam . model . vo . repo . RepoVO ; import cn . org . alan . exam . model . vo . exercise . ExerciseRepoVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ;", "gt": "import java . util . List ;"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . vo . WeChatConfigVO ; import java . util . List ; public interface WeChatService { List < WeChatConfigVO > readWeChatConfig ( ) ; List < Integer > wechatPid ( ) ; long baseAddress ( int pid ) ; String getVersion ( int pid ) ; String getWxId ( int pid ) ; String getInfo ( int pid , long address ) ;", "gt": "String getKey ( int pid , String dbPath ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ; private int initSize ; public StringBuilderHolder ( int initSize ) { this . initSize = initSize ; } public static StringBuilder getGlobal ( ) { StringBuilder sb = globalStringBuilder . get ( ) ; sb . setLength ( <NUM_LIT> ) ; return sb ; } public StringBuilder get ( ) { StringBuilder sb = stringBuilder . get ( ) ; sb . setLength ( <NUM_LIT> ) ;", "gt": "return sb ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ; return CommonResult . success ( baseVo ) ; }", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; } private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; nacosPropertySource . setOrigin ( metadata . getClassName ( ) ) ; } private void initOrder ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean first = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . FIRST_ATTRIBUTE_NAME ) ) ; String before = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . BEFORE_ATTRIBUTE_NAME ) ; String after = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AFTER_ATTRIBUTE_NAME ) ; nacosPropertySource . setFirst ( first ) ; nacosPropertySource . setBefore ( before ) ; nacosPropertySource . setAfter ( after ) ; } @ Override protected NacosConfigMetadataEvent createMetaEvent ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) {", "gt": "return new NacosConfigMetadataEvent ( beanDefinition . getMetadata ( ) ) ;"}
{"input": "package com . yf . plugins . upload . local . dto ; import com . yf . base . api . api . dto . BaseDTO ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ; @ Data @ AllArgsConstructor @ NoArgsConstructor @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class UploadRespDTO extends BaseDTO {", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String url ;"}
{"input": "package com . xcs . wx . config ; import com . baomidou . dynamic . datasource . exception . CannotFindDataSourceException ; import com . xcs . wx . domain . vo . ResponseVO ; import com . xcs . wx . exception . BizException ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . MyBatisSystemException ; import org . springframework . http . HttpStatus ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseStatus ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ Slf4j @ RestControllerAdvice @ ResponseStatus ( HttpStatus . OK ) public class ExceptionAdviceConfig { @ ExceptionHandler ( BizException . class ) public ResponseVO < String > handleException ( BizException e ) { return ResponseVO . error ( e . getCode ( ) , e . getMsg ( ) ) ; } @ ExceptionHandler ( MyBatisSystemException . class ) public ResponseVO < String > myBatisSystemException ( MyBatisSystemException e ) { if ( e . getCause ( ) . getCause ( ) instanceof CannotFindDataSourceException ) { return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } log . error ( \"<STR_LIT>\" , e ) ; return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } @ ExceptionHandler ( RuntimeException . class ) public ResponseVO < String > handleException ( RuntimeException e ) { log . error ( \"<STR_LIT>\" , e ) ; return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } @ ExceptionHandler ( Exception . class ) public ResponseVO < String > handleException ( Exception e ) {", "gt": "log . error ( \"<STR_LIT>\" , e ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; }", "gt": "public BigDecimal getAmount ( ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; } @ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) { if ( beanType != null ) { InjectionMetadata metadata = findInjectionMetadata ( beanName , beanType , null ) ; metadata . checkConfigMembers ( beanDefinition ) ; } } @ Override public int getOrder ( ) { return order ; } public void setOrder ( int order ) { this . order = order ; } @ Override public void destroy ( ) throws Exception { for ( Object object : injectedObjectsCache . values ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( object + \"<STR_LIT>\" ) ; } if ( object instanceof DisposableBean ) { ( ( DisposableBean ) object ) . destroy ( ) ; } } injectionMetadataCache . clear ( ) ; injectedObjectsCache . clear ( ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( getClass ( ) + \"<STR_LIT>\" ) ; } } @ Override public void setBeanClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } @ Override public void setEnvironment ( Environment environment ) { this . environment = environment ; } protected Environment getEnvironment ( ) { return environment ; } protected ClassLoader getClassLoader ( ) { return classLoader ; } protected ConfigurableListableBeanFactory getBeanFactory ( ) { return beanFactory ; } protected Collection < Object > getInjectedObjects ( ) { return this . injectedObjectsCache . values ( ) ; } protected Object getInjectedObject ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception { String cacheKey = buildInjectedObjectCacheKey ( attributes , bean , beanName , injectedType , injectedElement ) ; Object injectedObject = injectedObjectsCache . get ( cacheKey ) ; if ( injectedObject == null ) { injectedObject = doGetInjectedBean ( attributes , bean , beanName , injectedType , injectedElement ) ; injectedObjectsCache . putIfAbsent ( cacheKey , injectedObject ) ; }", "gt": "return injectedObject ;"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ; apiError . setMessage ( message ) ; return apiError ; } public static ApiError error ( Integer status , String message ) { ApiError apiError = new ApiError ( ) ; apiError . setStatus ( status ) ;", "gt": "apiError . setMessage ( message ) ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; }", "gt": "public String getRuleValue ( ) {"}
{"input": "package io . github . chensheng . dddboot . excel . converter ; import io . github . chensheng . dddboot . excel . core . CellValueType ; import org . apache . poi . ss . usermodel . Cell ; import org . apache . poi . ss . usermodel . CellType ; import org . apache . poi . ss . usermodel . Workbook ; import java . lang . reflect . Field ; public class IntegerConverter implements Converter { @ Override public boolean support ( Field field , CellValueType type ) { Class < ? > fieldType = field . getType ( ) ; return Integer . class == fieldType || int . class == fieldType ; } @ Override public Object fromCellContent ( String cellContent , Field field , String format , boolean use1904DateWindowing ) { try { return Integer . parseInt ( cellContent ) ; }", "gt": "catch ( NumberFormatException e ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) {", "gt": "return ruleConditions ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . type ; import org . apache . commons . lang3 . Validate ; import java . util . concurrent . * ; public abstract class BasicFuture < T > implements Future < T > { private volatile boolean completed ; private volatile boolean cancelled ; private volatile T result ; private volatile Exception ex ; @ Override public boolean isCancelled ( ) { return this . cancelled ; } @ Override public boolean isDone ( ) { return this . completed ; } @ Override public synchronized T get ( ) throws InterruptedException , ExecutionException { while ( ! this . completed ) { wait ( ) ; } return getResult ( ) ; } @ Override public synchronized T get ( final long timeout , final TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Validate . notNull ( unit , \"<STR_LIT>\" ) ; final long msecs = unit . toMillis ( timeout ) ; final long startTime = ( msecs <= <NUM_LIT> ) ? <NUM_LIT> : System . currentTimeMillis ( ) ; long waitTime = msecs ; if ( this . completed ) { return getResult ( ) ; } else if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } else { for ( ; ; ) { wait ( waitTime ) ; if ( this . completed ) { return getResult ( ) ; } else { waitTime = msecs - ( System . currentTimeMillis ( ) - startTime ) ; if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } } } } } private T getResult ( ) throws ExecutionException { if ( this . ex != null ) { throw new ExecutionException ( this . ex ) ; } if ( cancelled ) { throw new CancellationException ( ) ; } return this . result ; } public boolean completed ( final T result ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ; this . result = result ; notifyAll ( ) ; } onCompleted ( result ) ; return true ; } public boolean failed ( final Exception exception ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ; this . ex = exception ; notifyAll ( ) ; } onFailed ( exception ) ; return true ; } @ Override public boolean cancel ( final boolean mayInterruptIfRunning ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ;", "gt": "this . cancelled = true ;"}
{"input": "package me . zhengjie . exception ; public class BadConfigurationException extends RuntimeException { public BadConfigurationException ( ) { super ( ) ; } public BadConfigurationException ( String message ) { super ( message ) ; } public BadConfigurationException ( String message , Throwable cause ) { super ( message , cause ) ; } public BadConfigurationException ( Throwable cause ) {", "gt": "super ( cause ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) {", "gt": "PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ;"}
{"input": "package cn . org . alan . exam . common . aop ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . ProceedingJoinPoint ; import org . aspectj . lang . Signature ; import org . aspectj . lang . annotation . Around ; import org . aspectj . lang . annotation . Aspect ; import org . aspectj . lang . annotation . Before ; import org . aspectj . lang . annotation . Pointcut ; import org . springframework . stereotype . Component ; import cn . hutool . core . util . RandomUtil ; import com . alibaba . fastjson . JSONObject ; import com . alibaba . fastjson . support . spring . PropertyPreFilters ; import jakarta . servlet . ServletRequest ; import jakarta . servlet . ServletResponse ; import jakarta . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . slf4j . MDC ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import org . springframework . web . multipart . MultipartFile ; @ Aspect @ Component public class LogAsPect { private final static Logger LOG = LoggerFactory . getLogger ( LogAsPect . class ) ; @ Pointcut ( \"<STR_LIT>\" ) public void controllerPointcut ( ) { } @ Before ( \"<STR_LIT>\" ) public void doBefore ( JoinPoint joinPoint ) throws Throwable { ServletRequestAttributes attributes = ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ; HttpServletRequest request = attributes . getRequest ( ) ; Signature signature = joinPoint . getSignature ( ) ; String name = signature . getName ( ) ; LOG . info ( \"<STR_LIT>\" ) ; LOG . info ( \"<STR_LIT>\" , request . getRequestURL ( ) . toString ( ) , request . getMethod ( ) ) ; LOG . info ( \"<STR_LIT>\" , signature . getDeclaringTypeName ( ) , name ) ; LOG . info ( \"<STR_LIT>\" , request . getRemoteAddr ( ) ) ; Object [ ] args = joinPoint . getArgs ( ) ; Object [ ] arguments = new Object [ args . length ] ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] instanceof ServletRequest || args [ i ] instanceof ServletResponse || args [ i ] instanceof MultipartFile ) { continue ; } arguments [ i ] = args [ i ] ; } String [ ] excludeProperties = { \"<STR_LIT>\" , \"<STR_LIT>\" } ; PropertyPreFilters filters = new PropertyPreFilters ( ) ; PropertyPreFilters . MySimplePropertyPreFilter excludeFilter = filters . addFilter ( ) ; excludeFilter . addExcludes ( excludeProperties ) ; LOG . info ( \"<STR_LIT>\" , JSONObject . toJSONString ( arguments , excludeFilter ) ) ; } @ Around ( \"<STR_LIT>\" ) public Object doAround ( ProceedingJoinPoint proceedingJoinPoint ) throws Throwable { long startTime = System . currentTimeMillis ( ) ; Object result = proceedingJoinPoint . proceed ( ) ;", "gt": "String [ ] excludeProperties = {"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ;", "gt": "StringBuffer url = request . getRequestURL ( ) ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ;", "gt": "entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import org . springframework . core . annotation . AnnotationUtils ; import org . springframework . core . env . PropertyResolver ; import org . springframework . util . StringUtils ; import java . lang . annotation . Annotation ; import java . util . Map ; import java . util . Properties ; public class PropertiesPlaceholderResolver { private final PropertyResolver propertyResolver ; public PropertiesPlaceholderResolver ( PropertyResolver propertyResolver ) { this . propertyResolver = propertyResolver ; } public Properties resolve ( Annotation annotation ) { Map < String , Object > attributes = AnnotationUtils . getAnnotationAttributes ( annotation ) ; return resolve ( attributes ) ; } public Properties resolve ( Map < ? , ? > properties ) { Properties resolvedProperties = new Properties ( ) ; for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) instanceof CharSequence ) { String key = String . valueOf ( entry . getKey ( ) ) ; String value = String . valueOf ( entry . getValue ( ) ) ;", "gt": "String resolvedValue = propertyResolver . resolvePlaceholders ( value ) ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ;", "gt": "Set < String > selectResourceCodeByRoleId ( Long roleId ) ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ;", "gt": "public interface JobService extends IService < Job > {"}
{"input": "package ginyi . framework . security . config ; import ginyi . framework . security . filter . JwtAuthenticationTokenFilter ; import ginyi . framework . security . handle . AuthenticationEntryPointImpl ; import ginyi . framework . security . handle . LogoutSuccessHandlerImpl ; import ginyi . framework . security . properties . PermitAllUrlProperties ; import org . springframework . context . annotation . Bean ; import org . springframework . http . HttpMethod ; import org . springframework . security . authentication . AuthenticationManager ; import org . springframework . security . config . annotation . authentication . builders . AuthenticationManagerBuilder ; import org . springframework . security . config . annotation . method . configuration . EnableGlobalMethodSecurity ; import org . springframework . security . config . annotation . web . builders . HttpSecurity ; import org . springframework . security . config . annotation . web . configuration . WebSecurityConfigurerAdapter ; import org . springframework . security . config . annotation . web . configurers . ExpressionUrlAuthorizationConfigurer ; import org . springframework . security . config . http . SessionCreationPolicy ; import org . springframework . security . core . userdetails . UserDetailsService ; import org . springframework . security . crypto . bcrypt . BCryptPasswordEncoder ; import org . springframework . security . web . authentication . UsernamePasswordAuthenticationFilter ; import org . springframework . security . web . authentication . logout . LogoutFilter ; import org . springframework . web . filter . CorsFilter ; import javax . annotation . Resource ; @ EnableGlobalMethodSecurity ( prePostEnabled = true , securedEnabled = true ) public class SecurityConfig extends WebSecurityConfigurerAdapter { @ Resource private UserDetailsService userDetailsService ; @ Resource private AuthenticationEntryPointImpl unauthorizedHandler ; @ Resource private LogoutSuccessHandlerImpl logoutSuccessHandler ; @ Resource private JwtAuthenticationTokenFilter authenticationTokenFilter ; @ Resource private CorsFilter corsFilter ; @ Resource private PermitAllUrlProperties permitAllUrl ; @ Bean @ Override public AuthenticationManager authenticationManagerBean ( ) throws Exception { return super . authenticationManagerBean ( ) ; } @ Override protected void configure ( HttpSecurity httpSecurity ) throws Exception { ExpressionUrlAuthorizationConfigurer < HttpSecurity > . ExpressionInterceptUrlRegistry registry = httpSecurity . authorizeRequests ( ) ; permitAllUrl . getUrls ( ) . forEach ( url -> registry . antMatchers ( url ) . permitAll ( ) ) ; httpSecurity . csrf ( ) . disable ( ) . headers ( ) . cacheControl ( ) . disable ( ) . and ( ) . exceptionHandling ( ) . authenticationEntryPoint ( unauthorizedHandler ) . and ( ) . sessionManagement ( ) . sessionCreationPolicy ( SessionCreationPolicy . STATELESS ) . and ( ) . authorizeRequests ( ) . antMatchers ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) . permitAll ( ) . antMatchers ( HttpMethod . GET , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) . permitAll ( ) . antMatchers ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) . permitAll ( ) . antMatchers ( \"<STR_LIT>\" ) . permitAll ( ) . anyRequest ( ) . authenticated ( ) . and ( ) . headers ( ) . frameOptions ( ) . disable ( ) ;", "gt": "httpSecurity . logout ( ) . logoutUrl ( \"<STR_LIT>\" ) . logoutSuccessHandler ( logoutSuccessHandler ) ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_MYSQL = \"<STR_LIT>\" ;"}
{"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ; save ( localStorage ) ; return localStorage ; } catch ( Exception e ) { FileUtil . del ( file ) ; throw e ; } } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( LocalStorage resources ) { LocalStorage localStorage = getById ( resources . getId ( ) ) ; localStorage . copy ( resources ) ; saveOrUpdate ( localStorage ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void deleteAll ( Long [ ] ids ) { for ( Long id : ids ) { LocalStorage storage = getById ( id ) ; FileUtil . del ( storage . getPath ( ) ) ; removeById ( storage ) ; } } @ Override public void download ( List < LocalStorage > queryAll , HttpServletResponse response ) throws IOException { List < Map < String , Object > > list = new ArrayList < > ( ) ; for ( LocalStorage localStorage : queryAll ) { Map < String , Object > map = new LinkedHashMap < > ( ) ; map . put ( \"<STR_LIT>\" , localStorage . getRealName ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getName ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getType ( ) ) ;", "gt": "map . put ( \"<STR_LIT>\" , localStorage . getSize ( ) ) ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ; Set < String > selectResourceCodeByRoleId ( Long roleId ) ; List < SysResourceEntity > selectApiResourceList ( Long userId ) ; List < SysRoleAuth > selectSysRoleAuthAll ( ) ;", "gt": "List < SysResourceEntity > selectApiResourceList ( SysResourceEntity resource , Long userId ) ;"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController { @ Resource private IManualScoreService manualScoreService ; @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < List < UserAnswerDetailVO > > getDetail ( @ RequestParam Integer userId , @ RequestParam Integer examId ) { return manualScoreService . getDetail ( userId , examId ) ; } @ PutMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < String > Correct ( @ RequestBody @ Validated ( AnswerGroup . CorrectGroup . class ) List < CorrectAnswerFrom > correctAnswerFroms ) { return manualScoreService . correct ( correctAnswerFroms ) ; } @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < IPage < AnswerExamVO > > examPage ( @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageNum , @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageSize , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) String examName ) { return manualScoreService . examPage ( pageNum , pageSize , examName ) ; }", "gt": "@ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < IPage < UncorrectedUserVO > > stuExamPage ( @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageNum , @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageSize , @ RequestParam ( value = \"<STR_LIT>\" ) Integer examId , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) String realName ) {"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Sets ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; import io . github . chensheng . dddboot . tools . collection . type . ConcurrentHashSet ; import java . util . * ; public class SetUtil { public static < T > HashSet < T > newHashSet ( ) { return new HashSet < T > ( ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T > HashSet < T > newHashSet ( T ... elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSet ( Iterable < ? extends T > elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSetWithCapacity ( int expectedSize ) { return Sets . newHashSetWithExpectedSize ( expectedSize ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > TreeSet < T > newSortedSet ( ) { return new TreeSet < T > ( ) ; } public static < T > TreeSet < T > newSortedSet ( @ Nullable Comparator < ? super T > comparator ) { return Sets . newTreeSet ( comparator ) ; } public static < T > ConcurrentHashSet < T > newConcurrentHashSet ( ) { return new ConcurrentHashSet < T > ( ) ; } public static final < T > Set < T > emptySet ( ) { return Collections . emptySet ( ) ; } public static < T > Set < T > emptySetIfNull ( final Set < T > set ) { return set == null ? ( Set < T > ) Collections . EMPTY_SET : set ; } public static final < T > Set < T > singletonSet ( T o ) { return Collections . singleton ( o ) ; }", "gt": "public static < T > Set < T > unmodifiableSet ( Set < ? extends T > s ) {"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) { params = new JSONObject ( ) ; } if ( formData == null ) { formData = new JSONObject ( ) ; } IFillRuleHandler ruleHandler = ( IFillRuleHandler ) Class . forName ( ruleClass ) . newInstance ( ) ; return ruleHandler . execute ( params , formData ) ; }", "gt": "catch ( Exception e ) {"}
{"input": "package com . oddfar . campus . common . core ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . redis . core . BoundSetOperations ; import org . springframework . data . redis . core . HashOperations ; import org . springframework . data . redis . core . RedisTemplate ; import org . springframework . data . redis . core . ValueOperations ; import org . springframework . stereotype . Component ; import java . util . * ; import java . util . concurrent . TimeUnit ; @ SuppressWarnings ( value = { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Component public class RedisCache { @ Autowired public RedisTemplate redisTemplate ; public < T > void setCacheObject ( final String key , final T value ) { redisTemplate . opsForValue ( ) . set ( key , value ) ; } public < T > void setCacheObject ( final String key , final T value , final Integer timeout , final TimeUnit timeUnit ) { redisTemplate . opsForValue ( ) . set ( key , value , timeout , timeUnit ) ; } public boolean expire ( final String key , final long timeout ) { return expire ( key , timeout , TimeUnit . SECONDS ) ; } public boolean expire ( final String key , final long timeout , final TimeUnit unit ) { return redisTemplate . expire ( key , timeout , unit ) ; } public long getExpire ( final String key ) { return redisTemplate . getExpire ( key ) ; } public Boolean hasKey ( String key ) { return redisTemplate . hasKey ( key ) ; } public < T > T getCacheObject ( final String key ) { ValueOperations < String , T > operation = redisTemplate . opsForValue ( ) ; return operation . get ( key ) ; } public boolean deleteObject ( final String key ) { return redisTemplate . delete ( key ) ; } public boolean deleteObject ( final Collection collection ) { return redisTemplate . delete ( collection ) > <NUM_LIT> ; } public < T > long setCacheList ( final String key , final List < T > dataList ) { Long count = redisTemplate . opsForList ( ) . rightPushAll ( key , dataList ) ; return count == null ? <NUM_LIT> : count ; } public < T > List < T > getCacheList ( final String key ) { return redisTemplate . opsForList ( ) . range ( key , <NUM_LIT> , - <NUM_LIT> ) ; } public < T > BoundSetOperations < String , T > setCacheSet ( final String key , final Set < T > dataSet ) { BoundSetOperations < String , T > setOperation = redisTemplate . boundSetOps ( key ) ;", "gt": "Iterator < T > it = dataSet . iterator ( ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; } for ( Map < String , Object > contractMap : contractMapLogList ) { String id = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String symbolName = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;", "gt": "this . getExchangeCoinMatchAuto ( symbolName , baseSqlService ) . resetFixedForce ( id , direction ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; }", "gt": "@ Override public Shape shape ( ) {"}
{"input": "package top . kangert . kspider . io ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class Line { private long from ; private String text ; private long to ; public Line ( long from , String text , long to ) { this . from = from ; this . text = text ; this . to = to ; }", "gt": "@ Override public String toString ( ) {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ;", "gt": "import lombok . AllArgsConstructor ;"}
{"input": "package com . oddfar . campus . common . annotation ; import java . lang . annotation . Documented ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Target ( { ElementType . METHOD , ElementType . TYPE }", "gt": ") @ Retention ( RetentionPolicy . RUNTIME ) @ Documented public @ interface Anonymous {"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; } public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) { this . userId = userId ; this . deptId = deptId ; this . user = user ; this . permissions = permissions ; } @ JSONField ( serialize = false ) @ Override public String getPassword ( ) { return user . getPassword ( ) ; }", "gt": "@ Override public String getUsername ( ) {"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ; @ TableField ( \"<STR_LIT>\" ) private String reserved2 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved3 ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private String reserved4 ;"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . core . tool . utils . WebUtil ; import org . springframework . stereotype . Component ; import java . util . List ; import java . util . Map ; @ Component ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class CountryI18NEnhanceList implements CgformEnhanceJavaListInter {", "gt": "private final IMjkjBaseSqlService sqlService ;"}
{"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ;", "gt": "save ( localStorage ) ;"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ;", "gt": "CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ;", "gt": "return CommonResult . success ( baseVo ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ;", "gt": "private Integer judgeCount ;"}
{"input": "package com . xcs . wx . util ; import cn . hutool . extra . spring . SpringUtil ; import com . xcs . wx . service . UserService ; public class DSNameUtil { private DSNameUtil ( ) { } public static String getDSName ( String dbName ) { return getDSName ( SpringUtil . getBean ( UserService . class ) . currentUser ( ) , dbName ) ; } public static String getDSName ( String wxId , String dbName ) {", "gt": "return wxId + \"<STR_LIT>\" + dbName ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) { return \"<STR_LIT>\" ; } return s ; } public static String strToStr ( String s ) {", "gt": "return \"<STR_LIT>\" + s + \"<STR_LIT>\" ;"}
{"input": "package com . yf . plugins . upload . local . dto ; import com . yf . base . api . api . dto . BaseDTO ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ;", "gt": "@ Data @ AllArgsConstructor @ NoArgsConstructor @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class UploadRespDTO extends BaseDTO {"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { Shape shape = new Shape ( ) ; shape . setName ( supportType ( ) ) ; shape . setLabel ( \"<STR_LIT>\" ) ; shape . setIcon ( \"<STR_LIT>\" ) ; shape . setDesc ( \"<STR_LIT>\" ) ; return shape ; }", "gt": "@ Override public List < ConfigItem > configItems ( ) {"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ; Set < String > selectResourceCodeByRoleId ( Long roleId ) ; List < SysResourceEntity > selectApiResourceList ( Long userId ) ;", "gt": "List < SysRoleAuth > selectSysRoleAuthAll ( ) ;"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; } private List < SecurityScheme > securitySchemes ( ) { List < SecurityScheme > apiKeyList = new ArrayList < SecurityScheme > ( ) ; apiKeyList . add ( new ApiKey ( \"<STR_LIT>\" , \"<STR_LIT>\" , In . HEADER . toValue ( ) ) ) ; return apiKeyList ; } private List < SecurityContext > securityContexts ( ) { List < SecurityContext > securityContexts = new ArrayList < > ( ) ; securityContexts . add ( SecurityContext . builder ( ) . securityReferences ( defaultAuth ( ) ) . operationSelector ( o -> o . requestMappingPattern ( ) . matches ( \"<STR_LIT>\" ) ) . build ( ) ) ; return securityContexts ; } private List < SecurityReference > defaultAuth ( ) {", "gt": "AuthorizationScope authorizationScope = new AuthorizationScope ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigTimeoutEvent extends NacosConfigEvent { private final long timeout ; private final String errorMessage ; public NacosConfigTimeoutEvent ( ConfigService configService , String dataId , String groupId , long timeout , String errorMessage ) { super ( configService , dataId , groupId ) ; this . timeout = timeout ;", "gt": "this . errorMessage = errorMessage ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ; void unBindBladeUserOauth ( Long id ) ; < T > List < Map < String , T > > getDataListByWrapper ( String tableName , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ; < T > IPage < Map < String , T > > getDataListByWrapper ( String tableName , IPage page , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ; List < String > getAllBorrowMemberId ( ) ; List < String > getAllContractMemberId ( ) ;", "gt": "List < String > getMyAllContractSymbolName ( String memberId ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Sets ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; import io . github . chensheng . dddboot . tools . collection . type . ConcurrentHashSet ; import java . util . * ; public class SetUtil { public static < T > HashSet < T > newHashSet ( ) { return new HashSet < T > ( ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T > HashSet < T > newHashSet ( T ... elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSet ( Iterable < ? extends T > elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSetWithCapacity ( int expectedSize ) { return Sets . newHashSetWithExpectedSize ( expectedSize ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > TreeSet < T > newSortedSet ( ) { return new TreeSet < T > ( ) ; } public static < T > TreeSet < T > newSortedSet ( @ Nullable Comparator < ? super T > comparator ) { return Sets . newTreeSet ( comparator ) ; } public static < T > ConcurrentHashSet < T > newConcurrentHashSet ( ) { return new ConcurrentHashSet < T > ( ) ; } public static final < T > Set < T > emptySet ( ) { return Collections . emptySet ( ) ; } public static < T > Set < T > emptySetIfNull ( final Set < T > set ) { return set == null ? ( Set < T > ) Collections . EMPTY_SET : set ; } public static final < T > Set < T > singletonSet ( T o ) { return Collections . singleton ( o ) ; } public static < T > Set < T > unmodifiableSet ( Set < ? extends T > s ) { return Collections . unmodifiableSet ( s ) ; } public static < T > Set < T > newSetFromMap ( Map < T , Boolean > map ) { return Collections . newSetFromMap ( map ) ; } public static < E > Set < E > unionView ( final Set < ? extends E > set1 , final Set < ? extends E > set2 ) { return Sets . union ( set1 , set2 ) ; } public static < E > Set < E > intersectionView ( final Set < E > set1 , final Set < ? > set2 ) {", "gt": "return Sets . intersection ( set1 , set2 ) ;"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . vo . WeChatConfigVO ; import java . util . List ; public interface WeChatService { List < WeChatConfigVO > readWeChatConfig ( ) ; List < Integer > wechatPid ( ) ; long baseAddress ( int pid ) ;", "gt": "String getVersion ( int pid ) ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ;", "gt": "import javax . servlet . http . HttpServletRequest ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ; private Long deptId ; private String avatar ; private String mobile ; private Integer status ;", "gt": "private String email ;"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; } long count = this . count ( wrapper ) ; if ( count > <NUM_LIT> ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } SysDic entity = new SysDic ( ) ; BeanMapper . copy ( reqDTO , entity ) ; this . saveOrUpdate ( entity ) ; } @ Transactional ( rollbackFor = Exception . class ) @ Override public void delete ( List < String > ids ) { List < String > codes = new ArrayList < > ( ) ;", "gt": "for ( String id : ids ) {"}
{"input": "package com . yf . system . modules . role . dto ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleMenuDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String roleId ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ;", "gt": "List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ;"}
{"input": "package com . yf . system . modules . depart . dto . request ; import com . fasterxml . jackson . annotation . JsonIgnore ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DepartQueryReqDTO implements Serializable {", "gt": "private static final long serialVersionUID = <NUM_LIT> ;"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController { @ Resource private IManualScoreService manualScoreService ; @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < List < UserAnswerDetailVO > > getDetail ( @ RequestParam Integer userId , @ RequestParam Integer examId ) { return manualScoreService . getDetail ( userId , examId ) ; } @ PutMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < String > Correct ( @ RequestBody @ Validated ( AnswerGroup . CorrectGroup . class ) List < CorrectAnswerFrom > correctAnswerFroms ) { return manualScoreService . correct ( correctAnswerFroms ) ; } @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < IPage < AnswerExamVO > > examPage ( @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageNum , @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageSize , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) String examName ) {", "gt": "return manualScoreService . examPage ( pageNum , pageSize , examName ) ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ; private String icon ; private String redirect ;", "gt": "private String treePath ;"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import java . util . List ; public interface UserService { UserInfoVO userInfo ( ) ;", "gt": "String avatar ( ) ;"}
{"input": "package com . oddfar . campus . framework . mapper ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . oddfar . campus . common . core . BaseMapperX ; import com . oddfar . campus . common . domain . entity . SysRoleResourceEntity ; import java . util . List ;", "gt": "public interface SysRoleResourceMapper extends BaseMapperX < SysRoleResourceEntity > {"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ; String DB_TYPE_MYSQL = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_ORACLE = \"<STR_LIT>\" ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; @ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController { @ Resource private IVerifyService verifyService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public CommonResult captcha ( ) {", "gt": "String img = verifyService . captcha ( ) ;"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod {", "gt": "private String name ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ; String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ; String SQLSERVER_COLUMNS_SQL = \"<STR_LIT>\" ; String POSTGRESQL_COLUMNS_SQL = \"<STR_LIT>\" ;", "gt": "String MYSQL_TABLES_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ; entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void enable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ; entity . enable ( ) ; exampleRepository . save ( entity ) ; } @ Override public void disable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ; entity . disable ( ) ; exampleRepository . save ( entity ) ; }", "gt": "@ Override public void delete ( Long id ) {"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ; Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ; if ( exampleAnnotation != null ) { this . example = exampleAnnotation . value ( ) ; } Comment commentAnnotation = method . getDeclaredAnnotation ( Comment . class ) ; if ( commentAnnotation != null ) { this . comment = commentAnnotation . value ( ) ; } Parameter [ ] parameters = method . getParameters ( ) ; if ( parameters != null ) { for ( int i = <NUM_LIT> ; i < parameters . length ; i ++ ) { this . parameters . add ( new ExpressionMethodParameter ( parameters [ i ] ) ) ; } } } public String getComment ( ) { return comment ; } public String getName ( ) { return name ; } public String getReturnType ( ) { return returnType ; } public String getExample ( ) { return example ; } public List < ExpressionMethodParameter > getParameters ( ) { return parameters ; } } static class ExpressionMethodParameter { private String name ; private String type ;", "gt": "public ExpressionMethodParameter ( Parameter parameter ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import org . springframework . core . annotation . AnnotationUtils ; import org . springframework . core . env . PropertyResolver ; import org . springframework . util . StringUtils ; import java . lang . annotation . Annotation ; import java . util . Map ; import java . util . Properties ; public class PropertiesPlaceholderResolver { private final PropertyResolver propertyResolver ; public PropertiesPlaceholderResolver ( PropertyResolver propertyResolver ) { this . propertyResolver = propertyResolver ; } public Properties resolve ( Annotation annotation ) { Map < String , Object > attributes = AnnotationUtils . getAnnotationAttributes ( annotation ) ; return resolve ( attributes ) ; } public Properties resolve ( Map < ? , ? > properties ) { Properties resolvedProperties = new Properties ( ) ; for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) instanceof CharSequence ) { String key = String . valueOf ( entry . getKey ( ) ) ;", "gt": "String value = String . valueOf ( entry . getValue ( ) ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ;", "gt": "long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ;"}
{"input": "package me . zhengjie . service ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . domain . vo . TradeVo ; import me . zhengjie . domain . AlipayConfig ; public interface AliPayService extends IService < AlipayConfig > { AlipayConfig find ( ) ;", "gt": "AlipayConfig config ( AlipayConfig alipayConfig ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) { PageResult < SysOperLogEntity > page = operLogService . selectOperLogPage ( operLog ) ; return R . ok ( ) . put ( page ) ; }", "gt": "@ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] operIds ) {"}
{"input": "package me . zhengjie . modules . system . rest ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import me . zhengjie . annotation . Limit ; import me . zhengjie . annotation . rest . AnonymousGetMapping ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import java . util . concurrent . atomic . AtomicInteger ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class LimitController { private static final AtomicInteger ATOMIC_INTEGER = new AtomicInteger ( ) ;", "gt": "@ AnonymousGetMapping @ ApiOperation ( \"<STR_LIT>\" ) @ Limit ( key = \"<STR_LIT>\" , period = <NUM_LIT> , count = <NUM_LIT> , name = \"<STR_LIT>\" , prefix = \"<STR_LIT>\" ) public int testLimit ( ) {"}
{"input": "package com . yf . system . modules . role . dto ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleMenuDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String roleId ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String menuId ;"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } }", "gt": "jsonGenerator . writeObject ( map ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) { PageResult < SysOperLogEntity > page = operLogService . selectOperLogPage ( operLog ) ;", "gt": "return R . ok ( ) . put ( page ) ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( clazz ) ;"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } } jsonGenerator . writeObject ( map ) ; } public Object encrypt ( String key , Object val ) { if ( ! ( val instanceof String ) ) { return val ; } String text = String . valueOf ( val ) ; if ( StringUtils . isBlank ( text ) ) { return \"<STR_LIT>\" ; }", "gt": "if ( ! keys . contains ( key ) ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) { return \"<STR_LIT>\" ; } return s ; }", "gt": "public static String strToStr ( String s ) {"}
{"input": "package com . xcs . wx . util ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . dataformat . xml . XmlMapper ; import lombok . extern . slf4j . Slf4j ; @ Slf4j public class XmlUtil { private static final XmlMapper MAPPER = new XmlMapper ( ) ; private XmlUtil ( ) { } public static < T > T parseXml ( String content , Class < T > valueType ) { try { int xmlStart = content . indexOf ( \"<STR_LIT>\" ) ; if ( xmlStart > <NUM_LIT> ) { content = content . substring ( xmlStart ) ; } return MAPPER . readValue ( content , valueType ) ; }", "gt": "catch ( JsonProcessingException e ) {"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ;", "gt": "feedsVO . setHeadImgUrl ( headImgUrl ) ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) { CertificateUser certificateUser = new CertificateUser ( ) ; certificateUser . setUserId ( correctAnswerFrom . getUserId ( ) ) ; certificateUser . setExamId ( correctAnswerFrom . getExamId ( ) ) ; certificateUser . setCode ( ClassTokenGenerator . generateClassToken ( <NUM_LIT> ) ) ; certificateUser . setCertificateId ( exam . getCertificateId ( ) ) ; certificateUserMapper . insert ( certificateUser ) ; } } return Result . success ( \"<STR_LIT>\" ) ; } @ Override public Result < IPage < AnswerExamVO > > examPage ( Integer pageNum , Integer pageSize , String examName ) { Page < AnswerExamVO > page = new Page < > ( pageNum , pageSize ) ; List < AnswerExamVO > list = examMapper . selectMarkedList ( page , SecurityUtil . getUserId ( ) , SecurityUtil . getRole ( ) , examName ) . getRecords ( ) ; list . forEach ( answerExamVO -> { answerExamVO . setClassSize ( examGradeMapper . selectClassSize ( answerExamVO . getExamId ( ) ) ) ; LambdaQueryWrapper < UserExamsScore > numberWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ; answerExamVO . setNumberOfApplicants ( userExamsScoreMapper . selectCount ( numberWrapper ) . intValue ( ) ) ; LambdaQueryWrapper < UserExamsScore > correctedWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ;", "gt": "answerExamVO . setCorrectedPaper ( userExamsScoreMapper . selectCount ( correctedWrapper ) . intValue ( ) ) ;"}
{"input": "package top . kangert . kspider . websocket ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . http . server . ServerHttpRequest ; import org . springframework . http . server . ServerHttpResponse ; import org . springframework . http . server . ServletServerHttpRequest ; import org . springframework . web . socket . WebSocketHandler ; import org . springframework . web . socket . server . HandshakeInterceptor ; import cn . hutool . core . util . StrUtil ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; public class WebSocketEditorInterceptor implements HandshakeInterceptor { private static final String TOKEN_PARAMETER = \"<STR_LIT>\" ; @ Autowired private HttpServletRequest request ; public WebSocketEditorInterceptor ( ) { } @ Override public boolean beforeHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Map < String , Object > attributes ) throws Exception { String sessionToken = ( String ) request . getSession ( ) . getAttribute ( TOKEN_PARAMETER ) ; if ( req instanceof ServletServerHttpRequest ) { ServletServerHttpRequest serverRequest = ( ServletServerHttpRequest ) req ; String token = serverRequest . getServletRequest ( ) . getParameter ( TOKEN_PARAMETER ) ;", "gt": "if ( StrUtil . isBlank ( token ) ) {"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ;", "gt": "@ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController {"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ; Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ; if ( exampleAnnotation != null ) { this . example = exampleAnnotation . value ( ) ; } Comment commentAnnotation = method . getDeclaredAnnotation ( Comment . class ) ; if ( commentAnnotation != null ) { this . comment = commentAnnotation . value ( ) ; } Parameter [ ] parameters = method . getParameters ( ) ; if ( parameters != null ) { for ( int i = <NUM_LIT> ; i < parameters . length ; i ++ ) { this . parameters . add ( new ExpressionMethodParameter ( parameters [ i ] ) ) ; } } } public String getComment ( ) { return comment ; } public String getName ( ) {", "gt": "return name ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ; private Long deptId ; private String avatar ; private String mobile ; private Integer status ; private String email ; private Long createBy ;", "gt": "private Long updateBy ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ;", "gt": "wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getMessage ( ) ) ; return map ; } @ ResponseBody @ ExceptionHandler ( BaseException . class ) public Map < String , Object > handleBaseException ( BaseException e ) { log . error ( \"<STR_LIT>\" , e . getCode ( ) , e . getMessageId ( ) , e . getMessage ( ) ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , e . getCode ( ) ) ; map . put ( \"<STR_LIT>\" , e . getMessage ( ) ) ;", "gt": "return map ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) { return getApplicationContext ( ) . getBean ( clazz ) ; } public static < T > T getBean ( String name , Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( name , clazz ) ;"}
{"input": "package com . youlai . system . config ; import io . swagger . v3 . oas . models . Components ; import io . swagger . v3 . oas . models . OpenAPI ; import io . swagger . v3 . oas . models . info . Info ; import io . swagger . v3 . oas . models . security . SecurityRequirement ; import io . swagger . v3 . oas . models . security . SecurityScheme ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springdoc . core . customizers . GlobalOpenApiCustomizer ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import org . springframework . core . env . Environment ; import org . springframework . http . HttpHeaders ; @ Configuration @ Slf4j @ RequiredArgsConstructor public class SwaggerConfig { private final Environment environment ; @ Bean public OpenAPI openApi ( ) { String appVersion = environment . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; return new OpenAPI ( ) . info ( new Info ( ) . title ( \"<STR_LIT>\" ) . version ( appVersion ) ) . components ( new Components ( ) . addSecuritySchemes ( HttpHeaders . AUTHORIZATION , new SecurityScheme ( ) . name ( HttpHeaders . AUTHORIZATION ) . type ( SecurityScheme . Type . APIKEY ) . in ( SecurityScheme . In . HEADER ) . scheme ( \"<STR_LIT>\" ) . bearerFormat ( \"<STR_LIT>\" ) ) ) ; } @ Bean public GlobalOpenApiCustomizer globalOpenApiCustomizer ( ) { return openApi -> { if ( openApi . getPaths ( ) != null ) { openApi . getPaths ( ) . forEach ( ( s , pathItem ) -> { if ( s . equals ( \"<STR_LIT>\" ) || s . equals ( \"<STR_LIT>\" ) ) { return ; }", "gt": "pathItem . readOperations ( ) . forEach ( operation -> operation . addSecurityItem ( new SecurityRequirement ( ) . addList ( HttpHeaders . AUTHORIZATION ) ) ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . base . type ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; public class Triple < L , M , R > { @ Nullable private final L left ; @ Nullable private final M middle ; @ Nullable private final R right ; public Triple ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) { this . left = left ; this . middle = middle ; this . right = right ; } @ Nullable public L getLeft ( ) { return left ; } @ Nullable public M getMiddle ( ) { return middle ; } @ Nullable public R getRight ( ) { return right ; } @ Override public int hashCode ( ) { final int prime = <NUM_LIT> ; int result = <NUM_LIT> ; result = prime * result + ( ( left == null ) ? <NUM_LIT> : left . hashCode ( ) ) ; result = prime * result + ( ( middle == null ) ? <NUM_LIT> : middle . hashCode ( ) ) ; return prime * result + ( ( right == null ) ? <NUM_LIT> : right . hashCode ( ) ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } Triple other = ( Triple ) obj ;", "gt": "if ( left == null ) {"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiAlias ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String pack ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String moduleName ;", "gt": "@ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String path ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserInfoVO > getCurrentUserInfo ( ) { UserInfoVO userInfoVO = userService . getCurrentUserInfo ( ) ; return Result . success ( userInfoVO ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public void downloadTemplate ( HttpServletResponse response ) throws IOException { String fileName = \"<STR_LIT>\" ; response . setContentType ( \"<STR_LIT>\" ) ; response . setHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" + URLEncoder . encode ( fileName , StandardCharsets . UTF_8 ) ) ; String fileClassPath = \"<STR_LIT>\" + File . separator + \"<STR_LIT>\" + File . separator + fileName ; InputStream inputStream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( fileClassPath ) ; ServletOutputStream outputStream = response . getOutputStream ( ) ; ExcelWriter excelWriter = EasyExcel . write ( outputStream ) . withTemplate ( inputStream ) . build ( ) ; excelWriter . finish ( ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) public Result importUsers ( MultipartFile file ) throws IOException { UserImportListener listener = new UserImportListener ( ) ;", "gt": "String msg = ExcelUtils . importExcel ( file . getInputStream ( ) , UserImportDTO . class , listener ) ;"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiAlias ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String pack ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String moduleName ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String path ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiPath ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String author ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ; void update ( Job resources ) ; void delete ( Set < Long > ids ) ; PageResult < Job > queryAll ( JobQueryCriteria criteria , Page < Object > page ) ; List < Job > queryAll ( JobQueryCriteria criteria ) ;", "gt": "void download ( List < Job > jobs , HttpServletResponse response ) throws IOException ;"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } } jsonGenerator . writeObject ( map ) ; } public Object encrypt ( String key , Object val ) { if ( ! ( val instanceof String ) ) { return val ; } String text = String . valueOf ( val ) ; if ( StringUtils . isBlank ( text ) ) { return \"<STR_LIT>\" ; } if ( ! keys . contains ( key ) ) { return text ; } int length = text . length ( ) ; if ( length < <NUM_LIT> ) { return \"<STR_LIT>\" ; } int hide = length / <NUM_LIT> ; int start = hide / <NUM_LIT> ; int end = start + hide ; StringBuilder sb = new StringBuilder ( text . substring ( <NUM_LIT> , start ) ) ; for ( int i = <NUM_LIT> ; i < hide ;", "gt": "i ++ ) {"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; } return <NUM_LIT> ; } @ Override public BigDecimal getPriceBySymbol ( String symbolName ) { try {", "gt": "return this . getPriceBySymbol ( \"<STR_LIT>\" , symbolName ) ;"}
{"input": "package ginyi . common . utils ; public class Constants { public static final String UTF8 = \"<STR_LIT>\" ; public static final String GBK = \"<STR_LIT>\" ; public static final String SUCCESS = \"<STR_LIT>\" ; public static final String FAIL = \"<STR_LIT>\" ; public static final String LOGIN_SUCCESS = \"<STR_LIT>\" ; public static final String LOGOUT = \"<STR_LIT>\" ; public static final String REGISTER = \"<STR_LIT>\" ; public static final String LOGIN_FAIL = \"<STR_LIT>\" ; public static final String TOKEN_PREFIX = \"<STR_LIT>\" ; public static final String LOGIN_USER_KEY = \"<STR_LIT>\" ; public static final String RESOURCE_PREFIX = \"<STR_LIT>\" ;", "gt": "public static final String TOKEN = \"<STR_LIT>\" ;"}
{"input": "package cn . org . alan . exam . util . excel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Target ( ElementType . FIELD ) @ Retention ( RetentionPolicy . RUNTIME ) public @ interface ExcelExport { String value ( ) ; int sort ( ) default <NUM_LIT> ; String kv ( ) default \"<STR_LIT>\" ;", "gt": "String example ( ) default \"<STR_LIT>\" ;"}
{"input": "package cn . org . alan . exam . model . vo ; import cn . org . alan . exam . model . entity . Option ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; import java . util . List ; @ Data public class QuestionVO { private Integer id ; private String content ;", "gt": "private Integer repoId ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange {", "gt": "private Map < String , ForceModelAll > forceMap ;"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ; SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ; List < SysDictItem > toEntity ( List < DictForm . DictItem > dictFormDictItems ) ; DictForm . DictItem convertToDictFormDictItem ( SysDictItem entity ) ; List < DictForm . DictItem > convertToDictFormDictItem ( List < SysDictItem > entities ) ; @ Mappings ( { @ Mapping ( target = \"<STR_LIT>\" , source = \"<STR_LIT>\" ) , @ Mapping ( target = \"<STR_LIT>\" , source = \"<STR_LIT>\" ) }", "gt": ") Option convertToOption ( SysDictItem dictItem ) ;"}
{"input": "package io . github . chensheng . dddboot . web . core ; public class CommonResponse extends Response < Object > { private static final long serialVersionUID = <NUM_LIT> ; public CommonResponse ( ) { } public CommonResponse ( String code , String msg ) { super ( code , msg ) ; } public CommonResponse ( String code , String msg , Object data ) { super ( code , msg , data ) ; } public static CommonResponse bizSuccess ( Object data ) {", "gt": "return new CommonResponse ( ResponseType . BIZ_SUCCESS . getCode ( ) , ResponseType . BIZ_SUCCESS . getMsg ( ) , data ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . type ; import org . apache . commons . lang3 . Validate ; import java . util . concurrent . * ; public abstract class BasicFuture < T > implements Future < T > { private volatile boolean completed ; private volatile boolean cancelled ; private volatile T result ; private volatile Exception ex ; @ Override public boolean isCancelled ( ) { return this . cancelled ; } @ Override public boolean isDone ( ) { return this . completed ; } @ Override public synchronized T get ( ) throws InterruptedException , ExecutionException { while ( ! this . completed ) { wait ( ) ; } return getResult ( ) ; } @ Override public synchronized T get ( final long timeout , final TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Validate . notNull ( unit , \"<STR_LIT>\" ) ; final long msecs = unit . toMillis ( timeout ) ; final long startTime = ( msecs <= <NUM_LIT> ) ? <NUM_LIT> : System . currentTimeMillis ( ) ; long waitTime = msecs ; if ( this . completed ) { return getResult ( ) ; } else if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } else { for ( ; ; ) { wait ( waitTime ) ; if ( this . completed ) { return getResult ( ) ; } else { waitTime = msecs - ( System . currentTimeMillis ( ) - startTime ) ; if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } } } } } private T getResult ( ) throws ExecutionException { if ( this . ex != null ) { throw new ExecutionException ( this . ex ) ; } if ( cancelled ) { throw new CancellationException ( ) ; } return this . result ; } public boolean completed ( final T result ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ; this . result = result ; notifyAll ( ) ; } onCompleted ( result ) ; return true ; } public boolean failed ( final Exception exception ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ; this . ex = exception ; notifyAll ( ) ; } onFailed ( exception ) ; return true ; }", "gt": "@ Override public boolean cancel ( final boolean mayInterruptIfRunning ) {"}
{"input": "package cn . org . alan . exam . security ; import cn . org . alan . exam . model . entity . User ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . authority . SimpleGrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . List ; @ Data @ NoArgsConstructor public class SysUserDetails implements UserDetails { private List < SimpleGrantedAuthority > permissions ; private User user ; private String username ; public SysUserDetails ( User user ) { this . user = user ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return permissions ; } public void setPermissions ( List < SimpleGrantedAuthority > permissions ) { this . permissions = permissions ; } @ Override public String getPassword ( ) { String myPassword = user . getPassword ( ) ; user . setPassword ( \"<STR_LIT>\" ) ; return myPassword ; } @ Override public String getUsername ( ) { return user . getUserName ( ) ; } @ Override public boolean isAccountNonExpired ( ) {", "gt": "return true ;"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; } private List < SecurityScheme > securitySchemes ( ) { List < SecurityScheme > apiKeyList = new ArrayList < SecurityScheme > ( ) ; apiKeyList . add ( new ApiKey ( \"<STR_LIT>\" , \"<STR_LIT>\" , In . HEADER . toValue ( ) ) ) ; return apiKeyList ; } private List < SecurityContext > securityContexts ( ) { List < SecurityContext > securityContexts = new ArrayList < > ( ) ; securityContexts . add ( SecurityContext . builder ( ) . securityReferences ( defaultAuth ( ) ) . operationSelector ( o -> o . requestMappingPattern ( ) . matches ( \"<STR_LIT>\" ) ) . build ( ) ) ; return securityContexts ; } private List < SecurityReference > defaultAuth ( ) { AuthorizationScope authorizationScope = new AuthorizationScope ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; AuthorizationScope [ ] authorizationScopes = new AuthorizationScope [ <NUM_LIT> ] ; authorizationScopes [ <NUM_LIT> ] = authorizationScope ; List < SecurityReference > securityReferences = new ArrayList < > ( ) ; securityReferences . add ( new SecurityReference ( \"<STR_LIT>\" , authorizationScopes ) ) ; return securityReferences ; } private ApiInfo apiInfo ( ) {", "gt": "return new ApiInfoBuilder ( ) . title ( \"<STR_LIT>\" ) . description ( \"<STR_LIT>\" ) . contact ( new Contact ( \"<STR_LIT>\" , null , null ) ) . version ( \"<STR_LIT>\" + version ) . build ( ) ;"}
{"input": "package top . kangert . kspider . websocket ; import top . kangert . kspider . KspiderRuntime ; import top . kangert . kspider . context . SpiderWebSocketContext ; import top . kangert . kspider . util . SpiderFlowUtils ; import org . springframework . web . socket . TextMessage ; import org . springframework . web . socket . WebSocketSession ; import org . springframework . web . socket . handler . TextWebSocketHandler ; import cn . hutool . json . JSONObject ; import cn . hutool . json . JSONUtil ; import java . util . concurrent . CompletableFuture ; public class WebSocketEditorHandler extends TextWebSocketHandler { public KspiderRuntime spider ; private SpiderWebSocketContext context ; public WebSocketEditorHandler ( KspiderRuntime spider ) { this . spider = spider ; } @ Override protected void handleTextMessage ( WebSocketSession session , TextMessage message ) { JSONObject event = JSONUtil . parseObj ( message . getPayload ( ) ) ; String eventType = event . getStr ( \"<STR_LIT>\" ) ; boolean isDebug = WebSocketEvent . DEBUG_EVENT_TYPE . equalsIgnoreCase ( eventType ) ; if ( WebSocketEvent . TEST_EVENT_TYPE . equalsIgnoreCase ( eventType ) || isDebug ) { context = new SpiderWebSocketContext ( session ) ; context . setDebug ( isDebug ) ; context . setRunning ( true ) ; CompletableFuture . runAsync ( ( ) -> { String json = event . getStr ( \"<STR_LIT>\" ) ; if ( json != null ) { try { spider . runWithTest ( SpiderFlowUtils . parseJsonToSpiderNode ( json ) , context ) ; } catch ( Exception e ) { context . write ( new WebSocketEvent < > ( WebSocketEvent . ERROR_EVENT_TYPE , e . getMessage ( ) ) ) ; } context . write ( new WebSocketEvent < > ( WebSocketEvent . FINISH_EVENT_TYPE , null ) ) ; } else { context . write ( new WebSocketEvent < > ( WebSocketEvent . ERROR_EVENT_TYPE , \"<STR_LIT>\" ) ) ; } context . setRunning ( false ) ; } ) ; }", "gt": "else if ( WebSocketEvent . STOP_EVENT_TYPE . equals ( eventType ) && context != null ) {"}
{"input": "package ginyi . common . utils ; public class Constants { public static final String UTF8 = \"<STR_LIT>\" ; public static final String GBK = \"<STR_LIT>\" ; public static final String SUCCESS = \"<STR_LIT>\" ; public static final String FAIL = \"<STR_LIT>\" ; public static final String LOGIN_SUCCESS = \"<STR_LIT>\" ; public static final String LOGOUT = \"<STR_LIT>\" ; public static final String REGISTER = \"<STR_LIT>\" ; public static final String LOGIN_FAIL = \"<STR_LIT>\" ;", "gt": "public static final String TOKEN_PREFIX = \"<STR_LIT>\" ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserInfoVO > getCurrentUserInfo ( ) { UserInfoVO userInfoVO = userService . getCurrentUserInfo ( ) ; return Result . success ( userInfoVO ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public void downloadTemplate ( HttpServletResponse response ) throws IOException { String fileName = \"<STR_LIT>\" ; response . setContentType ( \"<STR_LIT>\" ) ; response . setHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" + URLEncoder . encode ( fileName , StandardCharsets . UTF_8 ) ) ; String fileClassPath = \"<STR_LIT>\" + File . separator + \"<STR_LIT>\" + File . separator + fileName ; InputStream inputStream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( fileClassPath ) ;", "gt": "ServletOutputStream outputStream = response . getOutputStream ( ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class RecoverContactServiceImpl implements RecoverContactService { private final FTSContactContentRepository ftsContactContentRepository ; private final ContactRepository contactRepository ; private final RecoverContactMapping recoverContactMapping ;", "gt": "@ Override public List < RecoverContactVO > queryRecoverContact ( RecoverContactDTO recoverContactDTO ) {"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ; SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ; List < SysDictItem > toEntity ( List < DictForm . DictItem > dictFormDictItems ) ; DictForm . DictItem convertToDictFormDictItem ( SysDictItem entity ) ; List < DictForm . DictItem > convertToDictFormDictItem ( List < SysDictItem > entities ) ;", "gt": "@ Mappings ( {"}
{"input": "package ginyi . framework . security . config ; import ginyi . framework . security . filter . JwtAuthenticationTokenFilter ; import ginyi . framework . security . handle . AuthenticationEntryPointImpl ; import ginyi . framework . security . handle . LogoutSuccessHandlerImpl ; import ginyi . framework . security . properties . PermitAllUrlProperties ; import org . springframework . context . annotation . Bean ; import org . springframework . http . HttpMethod ; import org . springframework . security . authentication . AuthenticationManager ; import org . springframework . security . config . annotation . authentication . builders . AuthenticationManagerBuilder ; import org . springframework . security . config . annotation . method . configuration . EnableGlobalMethodSecurity ; import org . springframework . security . config . annotation . web . builders . HttpSecurity ; import org . springframework . security . config . annotation . web . configuration . WebSecurityConfigurerAdapter ; import org . springframework . security . config . annotation . web . configurers . ExpressionUrlAuthorizationConfigurer ; import org . springframework . security . config . http . SessionCreationPolicy ; import org . springframework . security . core . userdetails . UserDetailsService ; import org . springframework . security . crypto . bcrypt . BCryptPasswordEncoder ; import org . springframework . security . web . authentication . UsernamePasswordAuthenticationFilter ; import org . springframework . security . web . authentication . logout . LogoutFilter ; import org . springframework . web . filter . CorsFilter ; import javax . annotation . Resource ; @ EnableGlobalMethodSecurity ( prePostEnabled = true , securedEnabled = true ) public class SecurityConfig extends WebSecurityConfigurerAdapter { @ Resource private UserDetailsService userDetailsService ; @ Resource private AuthenticationEntryPointImpl unauthorizedHandler ; @ Resource private LogoutSuccessHandlerImpl logoutSuccessHandler ;", "gt": "@ Resource private JwtAuthenticationTokenFilter authenticationTokenFilter ;"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Data ; @ Schema ( description = \"<STR_LIT>\" ) @ Data public class TablePageVO { @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableName ;", "gt": "@ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableComment ;"}
{"input": "package cn . org . alan . exam . model . entity ; import com . alibaba . druid . sql . dialect . mysql . ast . FullTextType ; import com . baomidou . mybatisplus . annotation . * ; import java . io . Serializable ; import java . time . LocalDateTime ; @ TableName ( \"<STR_LIT>\" ) public class User implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Integer id ; private String userName ; private String realName ; @ TableField ( fill = FieldFill . INSERT ) private String password ; private String avatar ; @ TableField ( fill = FieldFill . INSERT ) private Integer roleId ; private Integer gradeId ; @ TableField ( fill = FieldFill . INSERT ) private LocalDateTime createTime ; private Integer status ; private Integer isDeleted ; public Integer getIsDeleted ( ) { return isDeleted ; } public void setIsDeleted ( Integer isDeleted ) { this . isDeleted = isDeleted ; } public Integer getId ( ) { return id ; } public void setId ( Integer id ) { this . id = id ; } public String getUserName ( ) { return userName ; } public void setUserName ( String userName ) { this . userName = userName ; } public String getRealName ( ) { return realName ; } public void setRealName ( String realName ) { this . realName = realName ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getAvatar ( ) { return avatar ; } public void setAvatar ( String avatar ) { this . avatar = avatar ; } public Integer getRoleId ( ) { return roleId ; } public void setRoleId ( Integer roleId ) { this . roleId = roleId ; } public Integer getGradeId ( ) { return gradeId ; } public void setGradeId ( Integer gradeId ) { this . gradeId = gradeId ; }", "gt": "public LocalDateTime getCreateTime ( ) {"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlCData ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class VoipMsgBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private VoIPBubbleMsg voIPBubbleMsg ;", "gt": "@ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class VoIPBubbleMsg {"}
{"input": "package ginyi . common . utils ; public class Constants { public static final String UTF8 = \"<STR_LIT>\" ; public static final String GBK = \"<STR_LIT>\" ; public static final String SUCCESS = \"<STR_LIT>\" ; public static final String FAIL = \"<STR_LIT>\" ; public static final String LOGIN_SUCCESS = \"<STR_LIT>\" ; public static final String LOGOUT = \"<STR_LIT>\" ;", "gt": "public static final String REGISTER = \"<STR_LIT>\" ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; } @ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) { if ( beanType != null ) { InjectionMetadata metadata = findInjectionMetadata ( beanName , beanType , null ) ; metadata . checkConfigMembers ( beanDefinition ) ; } } @ Override public int getOrder ( ) { return order ; } public void setOrder ( int order ) { this . order = order ; } @ Override public void destroy ( ) throws Exception { for ( Object object : injectedObjectsCache . values ( ) ) { if ( logger . isInfoEnabled ( ) ) {", "gt": "logger . info ( object + \"<STR_LIT>\" ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) { PageResult < SysOperLogEntity > page = operLogService . selectOperLogPage ( operLog ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] operIds ) { return R . ok ( operLogService . deleteOperLogByIds ( operIds ) ) ; }", "gt": "@ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) {"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ;", "gt": "import java . util . stream . Collectors ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; CellStyleConfig that = ( CellStyleConfig ) o ; return Objects . equals ( font , that . font ) && Objects . equals ( wrapText , that . wrapText ) && verticalAlignment == that . verticalAlignment && alignment == that . alignment && Objects . equals ( locked , that . locked ) && fillPattern == that . fillPattern && Objects . equals ( fillForegroundColor , that . fillForegroundColor ) && borderBottom == that . borderBottom && borderLeft == that . borderLeft ; } @ Override public int hashCode ( ) { return Objects . hash ( font , wrapText , verticalAlignment , alignment , locked , fillPattern , fillForegroundColor , borderBottom , borderLeft ) ; } public static class FontConfig { private String fontName ; private short fontHeightInPoints ; private boolean bold ; public String getFontName ( ) { return fontName ; } public void setFontName ( String fontName ) { this . fontName = fontName ; } public short getFontHeightInPoints ( ) { return fontHeightInPoints ; } public void setFontHeightInPoints ( short fontHeightInPoints ) { this . fontHeightInPoints = fontHeightInPoints ; } public boolean isBold ( ) { return bold ; }", "gt": "public void setBold ( boolean bold ) {"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ; String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } FileInputStream is = null ; ServletOutputStream os = null ; try { Tika tika = new Tika ( ) ; String mimeType = tika . detect ( file ) ; response . setContentType ( mimeType ) ; response . setContentLength ( ( int ) file . length ( ) ) ; is = new FileInputStream ( filePath ) ; int len = <NUM_LIT> ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; os = response . getOutputStream ( ) ;", "gt": "while ( ( len = is . read ( buffer ) ) > <NUM_LIT> ) {"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ; import java . util . Date ; @ Data @ AllArgsConstructor @ NoArgsConstructor public class OnlineUserDto { private String userName ; private String nickName ;", "gt": "private String dept ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; }", "gt": "return getByValue ( value . toString ( ) ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import com . google . common . util . concurrent . RateLimiter ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; public class RateLimiterUtil { public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds ) throws ReflectiveOperationException { return create ( permitsPerSecond , maxBurstSeconds , true ) ; } public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds , boolean filledWithToken ) throws ReflectiveOperationException { Class < ? > sleepingStopwatchClass = Class . forName ( \"<STR_LIT>\" ) ; Method createStopwatchMethod = sleepingStopwatchClass . getDeclaredMethod ( \"<STR_LIT>\" ) ; createStopwatchMethod . setAccessible ( true ) ; Object stopwatch = createStopwatchMethod . invoke ( null ) ; Class < ? > burstyRateLimiterClass = Class . forName ( \"<STR_LIT>\" ) ; Constructor < ? > burstyRateLimiterConstructor = burstyRateLimiterClass . getDeclaredConstructors ( ) [ <NUM_LIT> ] ; burstyRateLimiterConstructor . setAccessible ( true ) ; RateLimiter rateLimiter = ( RateLimiter ) burstyRateLimiterConstructor . newInstance ( stopwatch , maxBurstSeconds ) ; rateLimiter . setRate ( permitsPerSecond ) ; if ( filledWithToken ) { setField ( rateLimiter , \"<STR_LIT>\" , permitsPerSecond * maxBurstSeconds ) ; } return rateLimiter ; } private static boolean setField ( Object targetObject , String fieldName , Object fieldValue ) { Field field ; try { field = targetObject . getClass ( ) . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { field = null ; } Class superClass = targetObject . getClass ( ) . getSuperclass ( ) ; while ( field == null && superClass != null ) { try { field = superClass . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { superClass = superClass . getSuperclass ( ) ; } }", "gt": "if ( field == null ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ; import org . springframework . core . type . AnnotationMetadata ;", "gt": "@ Configuration public class NacosConfigBootBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar , BeanFactoryAware {"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ;", "gt": "@ SneakyThrows ( {"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Data ; @ Schema ( description = \"<STR_LIT>\" ) @ Data public class TablePageVO { @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableName ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableComment ;", "gt": "@ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableCollation ;"}
{"input": "package io . github . chensheng . dddboot . web . core ; public class CommonResponse extends Response < Object > { private static final long serialVersionUID = <NUM_LIT> ; public CommonResponse ( ) { } public CommonResponse ( String code , String msg ) { super ( code , msg ) ; } public CommonResponse ( String code , String msg , Object data ) { super ( code , msg , data ) ; } public static CommonResponse bizSuccess ( Object data ) { return new CommonResponse ( ResponseType . BIZ_SUCCESS . getCode ( ) , ResponseType . BIZ_SUCCESS . getMsg ( ) , data ) ; }", "gt": "public static CommonResponse bizError ( String msg ) {"}
{"input": "package io . github . chensheng . dddboot . tools . text ; import java . io . UnsupportedEncodingException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; public class MD5Util { public static String md5With16 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With16 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md3 ( String b ) { try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; byte [ ] a = md . digest ( b . getBytes ( ) ) ; a = md . digest ( a ) ; a = md . digest ( a ) ; return bytesToHex ( a ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( byte [ ] input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( String input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } return null ; } private static String bytesToHex ( byte [ ] bytes ) { StringBuffer md5str = new StringBuffer ( ) ; int digital ;", "gt": "for ( int i = <NUM_LIT> ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String deptName ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String operationUrl ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ; resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ; delCaches ( dictDetail ) ; } @ Override @ Cacheable ( key = \"<STR_LIT>\" ) public List < DictDetail > getDictByName ( String name ) { return dictDetailMapper . findByDictName ( name ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void delete ( Long id ) {", "gt": "DictDetail dictDetail = getById ( id ) ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ;", "gt": "import org . springblade . core . secure . BladeUser ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ;", "gt": "String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ;"}
{"input": "package com . oddfar . campus . common . core ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . redis . core . BoundSetOperations ; import org . springframework . data . redis . core . HashOperations ; import org . springframework . data . redis . core . RedisTemplate ; import org . springframework . data . redis . core . ValueOperations ; import org . springframework . stereotype . Component ; import java . util . * ; import java . util . concurrent . TimeUnit ; @ SuppressWarnings ( value = { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Component public class RedisCache { @ Autowired public RedisTemplate redisTemplate ; public < T > void setCacheObject ( final String key , final T value ) { redisTemplate . opsForValue ( ) . set ( key , value ) ; } public < T > void setCacheObject ( final String key , final T value , final Integer timeout , final TimeUnit timeUnit ) { redisTemplate . opsForValue ( ) . set ( key , value , timeout , timeUnit ) ; } public boolean expire ( final String key , final long timeout ) { return expire ( key , timeout , TimeUnit . SECONDS ) ; } public boolean expire ( final String key , final long timeout , final TimeUnit unit ) { return redisTemplate . expire ( key , timeout , unit ) ; } public long getExpire ( final String key ) { return redisTemplate . getExpire ( key ) ; } public Boolean hasKey ( String key ) { return redisTemplate . hasKey ( key ) ; } public < T > T getCacheObject ( final String key ) { ValueOperations < String , T > operation = redisTemplate . opsForValue ( ) ; return operation . get ( key ) ; } public boolean deleteObject ( final String key ) { return redisTemplate . delete ( key ) ; } public boolean deleteObject ( final Collection collection ) { return redisTemplate . delete ( collection ) > <NUM_LIT> ; } public < T > long setCacheList ( final String key , final List < T > dataList ) { Long count = redisTemplate . opsForList ( ) . rightPushAll ( key , dataList ) ; return count == null ? <NUM_LIT> : count ; } public < T > List < T > getCacheList ( final String key ) { return redisTemplate . opsForList ( ) . range ( key , <NUM_LIT> , - <NUM_LIT> ) ; } public < T > BoundSetOperations < String , T > setCacheSet ( final String key , final Set < T > dataSet ) { BoundSetOperations < String , T > setOperation = redisTemplate . boundSetOps ( key ) ; Iterator < T > it = dataSet . iterator ( ) ; while ( it . hasNext ( ) ) { setOperation . add ( it . next ( ) ) ; } return setOperation ; } public < T > Set < T > getCacheSet ( final String key ) { return redisTemplate . opsForSet ( ) . members ( key ) ; } public < T > void setCacheMap ( final String key , final Map < String , T > dataMap ) {", "gt": "if ( dataMap != null ) {"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; }", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) {"}
{"input": "package com . youlai . system . enums ; import com . youlai . system . common . base . IBaseEnum ; import lombok . Getter ; @ Getter public enum DataScopeEnum implements IBaseEnum < Integer > { ALL ( <NUM_LIT> , \"<STR_LIT>\" ) , DEPT_AND_SUB ( <NUM_LIT> , \"<STR_LIT>\" ) , DEPT ( <NUM_LIT> , \"<STR_LIT>\" ) , SELF ( <NUM_LIT> , \"<STR_LIT>\" ) ; private final Integer value ;", "gt": "private final String label ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ;", "gt": "String ENHANCE_END = \"<STR_LIT>\" ;"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; } public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) { this . userId = userId ;", "gt": "this . deptId = deptId ;"}
{"input": "package com . youlai . system . filter ; import jakarta . servlet . http . HttpServletRequest ; import lombok . extern . slf4j . Slf4j ; import org . springframework . context . annotation . Configuration ; import org . springframework . web . filter . CommonsRequestLoggingFilter ; @ Configuration @ Slf4j public class RequestLogFilter extends CommonsRequestLoggingFilter { @ Override protected boolean shouldLog ( HttpServletRequest request ) { return this . logger . isInfoEnabled ( ) ; } @ Override protected void beforeRequest ( HttpServletRequest request , String message ) { String requestURI = request . getRequestURI ( ) ; log . info ( \"<STR_LIT>\" , requestURI ) ; super . beforeRequest ( request , message ) ; } @ Override protected void afterRequest ( HttpServletRequest request , String message ) {", "gt": "super . afterRequest ( request , message ) ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Question ; import cn . org . alan . exam . model . form . question . QuestionFrom ; import cn . org . alan . exam . model . vo . QuestionVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import org . springframework . web . multipart . MultipartFile ;", "gt": "public interface IQuestionService extends IService < Question > {"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) { return toString ( false ) ; } public String toString ( boolean isSimple ) { final StringBuilder builder = new StringBuilder ( isSimple ? <NUM_LIT> : <NUM_LIT> ) ; builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits , <NUM_LIT> ) ) ; return builder . toString ( ) ; } @ Override public int hashCode ( ) { long hilo = mostSigBits ^ leastSigBits ; return ( ( int ) ( hilo > > <NUM_LIT> ) ) ^ ( int ) hilo ; } @ Override public boolean equals ( Object obj ) { if ( ( null == obj ) || ( obj . getClass ( ) != UUID . class ) ) { return false ; } UUID id = ( UUID ) obj ; return ( mostSigBits == id . mostSigBits && leastSigBits == id . leastSigBits ) ; } @ Override public int compareTo ( UUID val ) { return ( this . mostSigBits < val . mostSigBits ? - <NUM_LIT> : ( this . mostSigBits > val . mostSigBits ? <NUM_LIT> : ( this . leastSigBits < val . leastSigBits ? - <NUM_LIT> : ( this . leastSigBits > val . leastSigBits ? <NUM_LIT> : <NUM_LIT> ) ) ) ) ; } private static String digits ( long val , int digits ) { long hi = <NUM_LIT> << ( digits * <NUM_LIT> ) ; return Long . toHexString ( hi | ( val & ( hi - <NUM_LIT> ) ) ) . substring ( <NUM_LIT> ) ; } private void checkTimeBase ( ) {", "gt": "if ( version ( ) != <NUM_LIT> ) {"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private Integer isShowName ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange { private Map < String , ForceModelAll > forceMap ; private boolean isTriggerComplete = true ;", "gt": "public CoinMatchXhExchange ( ) {"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) {", "gt": "this . ruleValue = ruleValue ;"}
{"input": "package com . yf . system . modules . role . dto ; import com . yf . base . api . annon . Dict ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; import java . util . Date ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigReceivedEvent extends NacosConfigEvent { private final String content ; private final String type ; public NacosConfigReceivedEvent ( ConfigService configService , String dataId , String groupId , String content , String type ) { super ( configService , dataId , groupId ) ; this . content = content ;", "gt": "this . type = type ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ; Set < String > selectResourceCodeByRoleId ( Long roleId ) ; List < SysResourceEntity > selectApiResourceList ( Long userId ) ; List < SysRoleAuth > selectSysRoleAuthAll ( ) ; List < SysResourceEntity > selectApiResourceList ( SysResourceEntity resource , Long userId ) ; List < Long > selectResourceListByRoleId ( Long roleId ) ; List < TreeSelect > buildResourceTreeSelect ( List < SysResourceEntity > resources ) ;", "gt": "void editRoleResource ( Long roleId , Long [ ] resourceIds ) ;"}
{"input": "package com . xcs . wx . config ; import com . baomidou . dynamic . datasource . exception . CannotFindDataSourceException ; import com . xcs . wx . domain . vo . ResponseVO ; import com . xcs . wx . exception . BizException ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . MyBatisSystemException ; import org . springframework . http . HttpStatus ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseStatus ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ Slf4j @ RestControllerAdvice @ ResponseStatus ( HttpStatus . OK ) public class ExceptionAdviceConfig { @ ExceptionHandler ( BizException . class ) public ResponseVO < String > handleException ( BizException e ) { return ResponseVO . error ( e . getCode ( ) , e . getMsg ( ) ) ; } @ ExceptionHandler ( MyBatisSystemException . class ) public ResponseVO < String > myBatisSystemException ( MyBatisSystemException e ) {", "gt": "if ( e . getCause ( ) . getCause ( ) instanceof CannotFindDataSourceException ) {"}
{"input": "package com . yf . system . modules . depart . dto . request ; import com . fasterxml . jackson . annotation . JsonIgnore ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DepartQueryReqDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String parentId ; @ JsonIgnore private String deptCodes ; @ JsonIgnore private String likeCode ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String deptCode ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ; private Integer saqCount ; private Integer saqScore ;", "gt": "@ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime startTime ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; CellStyleConfig that = ( CellStyleConfig ) o ; return Objects . equals ( font , that . font ) && Objects . equals ( wrapText , that . wrapText ) && verticalAlignment == that . verticalAlignment && alignment == that . alignment && Objects . equals ( locked , that . locked ) && fillPattern == that . fillPattern && Objects . equals ( fillForegroundColor , that . fillForegroundColor ) && borderBottom == that . borderBottom && borderLeft == that . borderLeft ; } @ Override public int hashCode ( ) { return Objects . hash ( font , wrapText , verticalAlignment , alignment , locked , fillPattern , fillForegroundColor , borderBottom , borderLeft ) ; } public static class FontConfig { private String fontName ; private short fontHeightInPoints ; private boolean bold ; public String getFontName ( ) { return fontName ; } public void setFontName ( String fontName ) {", "gt": "this . fontName = fontName ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ; Set < String > selectResourceCodeByRoleId ( Long roleId ) ; List < SysResourceEntity > selectApiResourceList ( Long userId ) ; List < SysRoleAuth > selectSysRoleAuthAll ( ) ; List < SysResourceEntity > selectApiResourceList ( SysResourceEntity resource , Long userId ) ; List < Long > selectResourceListByRoleId ( Long roleId ) ;", "gt": "List < TreeSelect > buildResourceTreeSelect ( List < SysResourceEntity > resources ) ;"}
{"input": "package me . zhengjie . modules . system . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import me . zhengjie . annotation . Log ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . service . JobService ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . Set ; @ RestController @ RequiredArgsConstructor @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class JobController { private final JobService jobService ; private static final String ENTITY_NAME = \"<STR_LIT>\" ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public void exportJob ( HttpServletResponse response , JobQueryCriteria criteria ) throws IOException {", "gt": "jobService . download ( jobService . queryAll ( criteria ) , response ) ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; @ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController { @ Resource private IVerifyService verifyService ;", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public CommonResult captcha ( ) {"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import com . google . common . util . concurrent . RateLimiter ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; public class RateLimiterUtil { public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds ) throws ReflectiveOperationException { return create ( permitsPerSecond , maxBurstSeconds , true ) ; } public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds , boolean filledWithToken ) throws ReflectiveOperationException { Class < ? > sleepingStopwatchClass = Class . forName ( \"<STR_LIT>\" ) ; Method createStopwatchMethod = sleepingStopwatchClass . getDeclaredMethod ( \"<STR_LIT>\" ) ; createStopwatchMethod . setAccessible ( true ) ; Object stopwatch = createStopwatchMethod . invoke ( null ) ; Class < ? > burstyRateLimiterClass = Class . forName ( \"<STR_LIT>\" ) ; Constructor < ? > burstyRateLimiterConstructor = burstyRateLimiterClass . getDeclaredConstructors ( ) [ <NUM_LIT> ] ; burstyRateLimiterConstructor . setAccessible ( true ) ; RateLimiter rateLimiter = ( RateLimiter ) burstyRateLimiterConstructor . newInstance ( stopwatch , maxBurstSeconds ) ; rateLimiter . setRate ( permitsPerSecond ) ; if ( filledWithToken ) { setField ( rateLimiter , \"<STR_LIT>\" , permitsPerSecond * maxBurstSeconds ) ; } return rateLimiter ; } private static boolean setField ( Object targetObject , String fieldName , Object fieldValue ) { Field field ; try { field = targetObject . getClass ( ) . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { field = null ; } Class superClass = targetObject . getClass ( ) . getSuperclass ( ) ; while ( field == null && superClass != null ) { try { field = superClass . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { superClass = superClass . getSuperclass ( ) ; } } if ( field == null ) { return false ; } field . setAccessible ( true ) ; try {", "gt": "field . set ( targetObject , fieldValue ) ;"}
{"input": "package me . zhengjie . modules . mnt . mapper ; import me . zhengjie . modules . mnt . domain . Server ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . Set ; @ Mapper public interface DeployServerMapper { void insertData ( @ Param ( \"<STR_LIT>\" ) Long deployId , @ Param ( \"<STR_LIT>\" ) Set < Server > servers ) ; void deleteByDeployId ( @ Param ( \"<STR_LIT>\" ) Long deployId ) ; void deleteByDeployIds ( @ Param ( \"<STR_LIT>\" ) Set < Long > deployIds ) ;", "gt": "void deleteByServerIds ( @ Param ( \"<STR_LIT>\" ) Set < Long > serverIds ) ;"}
{"input": "package cn . org . alan . exam . security ; import cn . org . alan . exam . model . entity . User ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . authority . SimpleGrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . List ; @ Data @ NoArgsConstructor public class SysUserDetails implements UserDetails { private List < SimpleGrantedAuthority > permissions ; private User user ; private String username ; public SysUserDetails ( User user ) { this . user = user ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return permissions ; } public void setPermissions ( List < SimpleGrantedAuthority > permissions ) { this . permissions = permissions ; } @ Override public String getPassword ( ) { String myPassword = user . getPassword ( ) ; user . setPassword ( \"<STR_LIT>\" ) ; return myPassword ; } @ Override public String getUsername ( ) { return user . getUserName ( ) ; } @ Override public boolean isAccountNonExpired ( ) { return true ; } @ Override public boolean isAccountNonLocked ( ) {", "gt": "return true ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserInfoVO > getCurrentUserInfo ( ) { UserInfoVO userInfoVO = userService . getCurrentUserInfo ( ) ; return Result . success ( userInfoVO ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public void downloadTemplate ( HttpServletResponse response ) throws IOException { String fileName = \"<STR_LIT>\" ; response . setContentType ( \"<STR_LIT>\" ) ; response . setHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" + URLEncoder . encode ( fileName , StandardCharsets . UTF_8 ) ) ; String fileClassPath = \"<STR_LIT>\" + File . separator + \"<STR_LIT>\" + File . separator + fileName ; InputStream inputStream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( fileClassPath ) ; ServletOutputStream outputStream = response . getOutputStream ( ) ; ExcelWriter excelWriter = EasyExcel . write ( outputStream ) . withTemplate ( inputStream ) . build ( ) ; excelWriter . finish ( ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) public Result importUsers ( MultipartFile file ) throws IOException { UserImportListener listener = new UserImportListener ( ) ; String msg = ExcelUtils . importExcel ( file . getInputStream ( ) , UserImportDTO . class , listener ) ; return Result . success ( msg ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public void exportUsers ( UserPageQuery queryParams , HttpServletResponse response ) throws IOException {", "gt": "String fileName = \"<STR_LIT>\" ;"}
{"input": "package ginyi . server . admin ; import ginyi . framework . core . config . AppConfig ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; import org . springframework . context . ConfigurableApplicationContext ; import java . net . UnknownHostException ; @ SpringBootApplication ( scanBasePackages = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ MapperScan ( { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Slf4j public class AdminApplication { public static void main ( String [ ] args ) throws UnknownHostException {", "gt": "ConfigurableApplicationContext context = SpringApplication . run ( AdminApplication . class , args ) ;"}
{"input": "package cn . org . alan . exam . security ; import cn . org . alan . exam . model . entity . User ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . authority . SimpleGrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . List ; @ Data @ NoArgsConstructor public class SysUserDetails implements UserDetails { private List < SimpleGrantedAuthority > permissions ; private User user ; private String username ; public SysUserDetails ( User user ) { this . user = user ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return permissions ; } public void setPermissions ( List < SimpleGrantedAuthority > permissions ) { this . permissions = permissions ; } @ Override public String getPassword ( ) { String myPassword = user . getPassword ( ) ; user . setPassword ( \"<STR_LIT>\" ) ; return myPassword ; } @ Override public String getUsername ( ) { return user . getUserName ( ) ; } @ Override public boolean isAccountNonExpired ( ) { return true ; } @ Override public boolean isAccountNonLocked ( ) { return true ; }", "gt": "@ Override public boolean isCredentialsNonExpired ( ) {"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ; wrapper . last ( \"<STR_LIT>\" ) ; CfgBase entity = this . getOne ( wrapper , false ) ; CfgBaseDTO dto = new CfgBaseDTO ( ) ; BeanMapper . copy ( entity , dto ) ;", "gt": "return dto ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ;", "gt": "private String password ;"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( {", "gt": "JsonProcessingException . class , IOException . class }"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import java . io . Serializable ; @ Data @ TableName ( \"<STR_LIT>\" ) public class SysRoleMenuEntity implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( type = IdType . INPUT ) private Long roleId ;", "gt": "private Long menuId ;"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ; @ TableField ( \"<STR_LIT>\" ) private String reserved2 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved3 ; @ TableField ( \"<STR_LIT>\" ) private String reserved4 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved5 ; @ TableField ( \"<STR_LIT>\" ) private String reserved6 ; @ TableField ( value = \"<STR_LIT>\" , typeHandler = ByteArrayTypeHandler . class ) private byte [ ] roomData ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved7 ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private String reserved8 ;"}
{"input": "package cn . org . alan . exam . model . vo ; import cn . org . alan . exam . model . entity . Option ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; import java . util . List ; @ Data public class QuestionVO { private Integer id ; private String content ; private Integer repoId ; private String image ;", "gt": "private String repoTitle ;"}
{"input": "package me . zhengjie . modules . system . rest ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import me . zhengjie . annotation . Limit ; import me . zhengjie . annotation . rest . AnonymousGetMapping ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import java . util . concurrent . atomic . AtomicInteger ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class LimitController {", "gt": "private static final AtomicInteger ATOMIC_INTEGER = new AtomicInteger ( ) ;"}
{"input": "package com . oddfar . campus . common . enums ; import lombok . Getter ; @ Getter public enum ResBizTypeEnum { BUSINESS ( <NUM_LIT> , \"<STR_LIT>\" ) , SYSTEM ( <NUM_LIT> , \"<STR_LIT>\" ) ; private final Integer code ; private final String message ; ResBizTypeEnum ( Integer code , String message ) { this . code = code ;", "gt": "this . message = message ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . rmi . ServerException ; import java . sql . SQLException ; import java . util . * ; import java . util . regex . Matcher ;", "gt": "import java . util . regex . Pattern ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ; String DB_TYPE_MYSQL = \"<STR_LIT>\" ; String DB_TYPE_ORACLE = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_POSTGRESQL = \"<STR_LIT>\" ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; Set < Long > currentDictItemIds = currentDictItemEntities . stream ( ) . map ( SysDictItem :: getId ) . collect ( Collectors . toSet ( ) ) ; Set < Long > newAttrIds = dictItems . stream ( ) . map ( SysDictItem :: getId ) . filter ( Objects :: nonNull ) . collect ( Collectors . toSet ( ) ) ; Set < Long > idsToDelete = new HashSet < > ( currentDictItemIds ) ; idsToDelete . removeAll ( newAttrIds ) ; if ( ! idsToDelete . isEmpty ( ) ) { dictItemService . removeByIds ( idsToDelete ) ; }", "gt": "for ( SysDictItem dictItem : dictItems ) {"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ; private Integer saqCount ;", "gt": "private Integer saqScore ;"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ;", "gt": "private String packageStyle ;"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ; String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } FileInputStream is = null ; ServletOutputStream os = null ; try { Tika tika = new Tika ( ) ; String mimeType = tika . detect ( file ) ; response . setContentType ( mimeType ) ; response . setContentLength ( ( int ) file . length ( ) ) ; is = new FileInputStream ( filePath ) ; int len = <NUM_LIT> ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; os = response . getOutputStream ( ) ; while ( ( len = is . read ( buffer ) ) > <NUM_LIT> ) { os . write ( buffer , <NUM_LIT> , len ) ; } } catch ( Exception e ) { log . error ( e ) ; } finally { if ( is != null ) { is . close ( ) ; }", "gt": "if ( os != null ) {"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; }", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) {"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ;", "gt": "private String perm ;"}
{"input": "package io . github . chensheng . dddboot . web . core ; public class CommonResponse extends Response < Object > { private static final long serialVersionUID = <NUM_LIT> ; public CommonResponse ( ) { } public CommonResponse ( String code , String msg ) { super ( code , msg ) ; } public CommonResponse ( String code , String msg , Object data ) { super ( code , msg , data ) ; }", "gt": "public static CommonResponse bizSuccess ( Object data ) {"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ;", "gt": "forceModel . setContractLogId ( contractLogId ) ;"}
{"input": "package io . github . chensheng . dddboot . excel . converter ; import io . github . chensheng . dddboot . excel . core . CellValueType ; import org . apache . poi . ss . usermodel . Cell ; import org . apache . poi . ss . usermodel . CellType ; import org . apache . poi . ss . usermodel . Workbook ; import java . lang . reflect . Field ; public class IntegerConverter implements Converter { @ Override public boolean support ( Field field , CellValueType type ) { Class < ? > fieldType = field . getType ( ) ; return Integer . class == fieldType || int . class == fieldType ; } @ Override public Object fromCellContent ( String cellContent , Field field , String format , boolean use1904DateWindowing ) { try { return Integer . parseInt ( cellContent ) ; } catch ( NumberFormatException e ) { try { return ( int ) Double . parseDouble ( cellContent ) ; } catch ( Exception ex ) { return Integer . class == field . getType ( ) ? null : <NUM_LIT> ; } } }", "gt": "@ Override public void setCellContent ( Workbook workbook , Cell cell , Object cellValue , String format ) {"}
{"input": "package top . kangert . kspider . constant ; import lombok . Getter ; public enum RequestBodyType { NONE ( \"<STR_LIT>\" ) , RAW_BODY_TYPE ( \"<STR_LIT>\" ) , FORM_DATA_BODY_TYPE ( \"<STR_LIT>\" ) ; @ Getter private String bodyType ; RequestBodyType ( String bodyType ) { this . bodyType = bodyType ; } public static RequestBodyType geRequestBodyType ( String bodyType ) { for ( RequestBodyType requestBodyType : values ( ) ) { if ( requestBodyType . getBodyType ( ) . equals ( bodyType ) ) { return requestBodyType ; } }", "gt": "return null ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ;", "gt": "private Integer multiCount ;"}
{"input": "package cn . org . alan . exam . model . entity ; import com . alibaba . druid . sql . dialect . mysql . ast . FullTextType ; import com . baomidou . mybatisplus . annotation . * ; import java . io . Serializable ; import java . time . LocalDateTime ; @ TableName ( \"<STR_LIT>\" ) public class User implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Integer id ; private String userName ; private String realName ; @ TableField ( fill = FieldFill . INSERT ) private String password ; private String avatar ; @ TableField ( fill = FieldFill . INSERT ) private Integer roleId ; private Integer gradeId ; @ TableField ( fill = FieldFill . INSERT ) private LocalDateTime createTime ; private Integer status ; private Integer isDeleted ; public Integer getIsDeleted ( ) { return isDeleted ; } public void setIsDeleted ( Integer isDeleted ) { this . isDeleted = isDeleted ; } public Integer getId ( ) { return id ; } public void setId ( Integer id ) { this . id = id ; } public String getUserName ( ) { return userName ; } public void setUserName ( String userName ) { this . userName = userName ; } public String getRealName ( ) { return realName ; } public void setRealName ( String realName ) { this . realName = realName ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getAvatar ( ) { return avatar ; } public void setAvatar ( String avatar ) { this . avatar = avatar ; } public Integer getRoleId ( ) { return roleId ; } public void setRoleId ( Integer roleId ) { this . roleId = roleId ; } public Integer getGradeId ( ) { return gradeId ; }", "gt": "public void setGradeId ( Integer gradeId ) {"}
{"input": "package com . youlai . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . model . entity . SysLog ; import com . baomidou . mybatisplus . extension . service . IService ; import com . youlai . system . model . query . LogPageQuery ; import com . youlai . system . model . vo . LogPageVO ; import com . youlai . system . model . vo . VisitStatsVO ; import com . youlai . system . model . vo . VisitTrendVO ; import java . time . LocalDate ; import java . util . List ;", "gt": "public interface SysLogService extends IService < SysLog > {"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; }", "gt": "return <NUM_LIT> ;"}
{"input": "package top . kangert . kspider . constant ; import lombok . Getter ; public enum RequestBodyType { NONE ( \"<STR_LIT>\" ) , RAW_BODY_TYPE ( \"<STR_LIT>\" ) , FORM_DATA_BODY_TYPE ( \"<STR_LIT>\" ) ; @ Getter private String bodyType ; RequestBodyType ( String bodyType ) { this . bodyType = bodyType ; } public static RequestBodyType geRequestBodyType ( String bodyType ) {", "gt": "for ( RequestBodyType requestBodyType : values ( ) ) {"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import com . google . common . collect . * ; import com . google . common . util . concurrent . AtomicLongMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . IntObjectHashMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . LongObjectHashMap ; import org . apache . commons . lang3 . mutable . MutableInt ; import org . apache . commons . lang3 . mutable . MutableLong ; import java . util . Comparator ; import java . util . HashMap ; import java . util . concurrent . ConcurrentMap ; public class MoreMaps { public static < K , V > ConcurrentMap < K , V > createWeakKeyConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakKeys ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < K , V > ConcurrentMap < K , V > createWeakValueConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakValues ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < V > IntObjectHashMap < V > createPrimitiveIntKeyMap ( int initialCapacity , float loadFactor ) { return new IntObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < V > LongObjectHashMap < V > createPrimitiveLongKeyMap ( int initialCapacity , float loadFactor ) { return new LongObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableInt > createMutableIntValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableInt > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableLong > createMutableLongValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableLong > ( initialCapacity , loadFactor ) ; } public static < E > AtomicLongMap < E > createConcurrentCounterMap ( ) { return AtomicLongMap . create ( ) ; } public static < K , V > ArrayListMultimap < K , V > createListMultiValueMap ( int expectedKeys , int expectedValuesPerKey ) { return ArrayListMultimap . create ( expectedKeys , expectedValuesPerKey ) ; } public static < K , V extends Comparable > SortedSetMultimap < K , V > createSortedSetMultiValueMap ( ) { return MultimapBuilder . hashKeys ( ) . treeSetValues ( ) . build ( ) ; } public static < K , V > SortedSetMultimap < K , V > createSortedSetMultiValueMap ( Comparator < V > comparator ) { return ( SortedSetMultimap < K , V > ) MultimapBuilder . hashKeys ( ) . treeSetValues ( comparator ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < K extends Comparable , V > TreeRangeMap < K , V > createRangeMap ( ) {", "gt": "return TreeRangeMap . create ( ) ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; } public static MatchTypeEnum getByValue ( String value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } for ( MatchTypeEnum val : values ( ) ) { if ( val . getValue ( ) . toLowerCase ( ) . equals ( value . toLowerCase ( ) ) ) { return val ; } }", "gt": "return null ;"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ; FileInputStream in = null ; byte [ ] buffer = new byte [ <NUM_LIT> ] ;", "gt": "int len ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; import java . io . UnsupportedEncodingException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; public class MD5Util { public static String md5With16 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With16 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md3 ( String b ) { try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; byte [ ] a = md . digest ( b . getBytes ( ) ) ; a = md . digest ( a ) ; a = md . digest ( a ) ; return bytesToHex ( a ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( byte [ ] input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( String input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) {", "gt": "return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ;"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ;", "gt": "map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getMessage ( ) ) ;"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; } public CdpRemoteWebDriver ( URL remoteAddress , Capabilities capabilities ) { super ( ( CommandExecutor ) ( new HttpCommandExecutor ( ImmutableMap . copyOf ( CHROME_COMMAND_NAME_TO_URL ) , remoteAddress ) ) , capabilities ) ; } public Map < String , Object > executeCdpCommand ( String commandName , Map < String , Object > parameters ) { Objects . requireNonNull ( commandName , \"<STR_LIT>\" ) ; Objects . requireNonNull ( parameters , \"<STR_LIT>\" ) ; Map < String , Object > toReturn = ( Map ) this . getExecuteMethod ( ) . execute ( \"<STR_LIT>\" , ImmutableMap . of ( \"<STR_LIT>\" , commandName , \"<STR_LIT>\" , parameters ) ) ;", "gt": "return ImmutableMap . copyOf ( toReturn ) ;"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ; String getDropColumnSql ( String fieldName ) ; String getCommentSql ( ColumnMeta columnMeta ) ; String getSpecialHandle ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) ;", "gt": "String dropIndexs ( String indexName , String tableName ) ;"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; } long count = this . count ( wrapper ) ; if ( count > <NUM_LIT> ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } SysDic entity = new SysDic ( ) ; BeanMapper . copy ( reqDTO , entity ) ;", "gt": "this . saveOrUpdate ( entity ) ;"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; }", "gt": "long count = this . count ( wrapper ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ; private int initSize ; public StringBuilderHolder ( int initSize ) { this . initSize = initSize ; } public static StringBuilder getGlobal ( ) { StringBuilder sb = globalStringBuilder . get ( ) ; sb . setLength ( <NUM_LIT> ) ; return sb ; } public StringBuilder get ( ) {", "gt": "StringBuilder sb = stringBuilder . get ( ) ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Question ; import cn . org . alan . exam . model . form . question . QuestionFrom ; import cn . org . alan . exam . model . vo . QuestionVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import org . springframework . web . multipart . MultipartFile ; public interface IQuestionService extends IService < Question > { Result < String > addSingleQuestion ( QuestionFrom questionFrom ) ; Result < String > deleteBatchByIds ( String ids ) ; Result < IPage < QuestionVO > > pagingQuestion ( Integer pageNum , Integer pageSize , String content , Integer type , Integer repoId ) ;", "gt": "Result < QuestionVO > querySingle ( Integer id ) ;"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ; private String requestIp ; private String address ; private String browser ; private Long time ; @ JSONField ( serialize = false ) private String exceptionDetail ;", "gt": "@ TableField ( fill = FieldFill . INSERT ) private Timestamp createTime ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ; users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ; } return users ; } @ Override public void switchUser ( String wxId ) { FileUtil . writeString ( wxId , DirUtil . getSwitchUserDir ( ) , \"<STR_LIT>\" ) ; } @ Override public String currentUser ( ) { String switchUserDir = DirUtil . getSwitchUserDir ( ) ; if ( ! FileUtil . exist ( switchUserDir ) ) { return Optional . of ( getWxIds ( ) ) . filter ( items -> ! items . isEmpty ( ) ) . map ( items -> items . get ( <NUM_LIT> ) ) . orElse ( null ) ; } return FileUtil . readUtf8String ( switchUserDir ) ; } @ Override public void saveUser ( UserBO userBO ) { FileUtil . writeString ( JSONUtil . toJsonStr ( userBO ) , DirUtil . getUserDir ( userBO . getWxId ( ) ) , \"<STR_LIT>\" ) ; } @ Override public String getBasePath ( String wxId ) { String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; }", "gt": "String userJson = FileUtil . readUtf8String ( userDir ) ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) { return ajax ; } String uuid = IdUtils . simpleUUID ( ) ; String verifyKey = CacheConstants . CAPTCHA_CODE_KEY + uuid ; String capStr = null , code = null ; BufferedImage image = null ; String captchaType = ConfigExpander . getLoginCaptchaType ( ) ; if ( \"<STR_LIT>\" . equals ( captchaType ) ) { String capText = captchaProducerMath . createText ( ) ; capStr = capText . substring ( <NUM_LIT> , capText . lastIndexOf ( \"<STR_LIT>\" ) ) ; code = capText . substring ( capText . lastIndexOf ( \"<STR_LIT>\" ) + <NUM_LIT> ) ; image = captchaProducerMath . createImage ( capStr ) ; } else if ( \"<STR_LIT>\" . equals ( captchaType ) ) { capStr = code = captchaProducer . createText ( ) ; image = captchaProducer . createImage ( capStr ) ; } redisCache . setCacheObject ( verifyKey , code , Constants . CAPTCHA_EXPIRATION , TimeUnit . MINUTES ) ; FastByteArrayOutputStream os = new FastByteArrayOutputStream ( ) ; try { ImageIO . write ( image , \"<STR_LIT>\" , os ) ; } catch ( IOException e ) { return R . error ( e . getMessage ( ) ) ; }", "gt": "ajax . put ( \"<STR_LIT>\" , uuid ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ;", "gt": "import java . io . Serializable ;"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } } catch ( Exception e ) { log . error ( \"<STR_LIT>\" , delayTimes , e ) ; } } } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; }", "gt": "@ Override public Shape shape ( ) {"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . vo . WeChatConfigVO ; import java . util . List ; public interface WeChatService { List < WeChatConfigVO > readWeChatConfig ( ) ; List < Integer > wechatPid ( ) ;", "gt": "long baseAddress ( int pid ) ;"}
{"input": "package com . xcs . wx . repository . impl ; import com . baomidou . dynamic . datasource . annotation . DS ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . HardLinkImageAttribute ; import com . xcs . wx . mapper . HardLinkImageAttributeMapper ; import com . xcs . wx . repository . HardLinkImageAttributeRepository ; import org . springframework . stereotype . Repository ;", "gt": "@ Repository @ DS ( value = DataSourceType . HARD_LINK_IMAGE_DB ) public class HardLinkImageAttributeRepositoryImpl extends ServiceImpl < HardLinkImageAttributeMapper , HardLinkImageAttribute > implements HardLinkImageAttributeRepository {"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ;", "gt": "private String logType ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) {", "gt": "String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ;"}
{"input": "package com . youlai . system . model . dto ; import lombok . Data ; import java . util . Set ; @ Data public class UserAuthInfo { private Long userId ; private String username ; private String nickname ; private Long deptId ; private String password ; private Integer status ; private Set < String > roles ; private Set < String > perms ;", "gt": "private Integer dataScope ;"}
{"input": "package cn . org . alan . exam . common . aop ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . ProceedingJoinPoint ; import org . aspectj . lang . Signature ; import org . aspectj . lang . annotation . Around ; import org . aspectj . lang . annotation . Aspect ; import org . aspectj . lang . annotation . Before ; import org . aspectj . lang . annotation . Pointcut ; import org . springframework . stereotype . Component ; import cn . hutool . core . util . RandomUtil ; import com . alibaba . fastjson . JSONObject ; import com . alibaba . fastjson . support . spring . PropertyPreFilters ; import jakarta . servlet . ServletRequest ; import jakarta . servlet . ServletResponse ; import jakarta . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . slf4j . MDC ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import org . springframework . web . multipart . MultipartFile ; @ Aspect @ Component public class LogAsPect { private final static Logger LOG = LoggerFactory . getLogger ( LogAsPect . class ) ; @ Pointcut ( \"<STR_LIT>\" ) public void controllerPointcut ( ) { } @ Before ( \"<STR_LIT>\" ) public void doBefore ( JoinPoint joinPoint ) throws Throwable { ServletRequestAttributes attributes = ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ; HttpServletRequest request = attributes . getRequest ( ) ; Signature signature = joinPoint . getSignature ( ) ; String name = signature . getName ( ) ; LOG . info ( \"<STR_LIT>\" ) ; LOG . info ( \"<STR_LIT>\" , request . getRequestURL ( ) . toString ( ) , request . getMethod ( ) ) ; LOG . info ( \"<STR_LIT>\" , signature . getDeclaringTypeName ( ) , name ) ; LOG . info ( \"<STR_LIT>\" , request . getRemoteAddr ( ) ) ; Object [ ] args = joinPoint . getArgs ( ) ; Object [ ] arguments = new Object [ args . length ] ; for ( int i = <NUM_LIT> ; i < args . length ;", "gt": "i ++ ) {"}
{"input": "package me . zhengjie . modules . system . rest ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import me . zhengjie . annotation . Limit ; import me . zhengjie . annotation . rest . AnonymousGetMapping ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ;", "gt": "import java . util . concurrent . atomic . AtomicInteger ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; import java . io . UnsupportedEncodingException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; public class MD5Util { public static String md5With16 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With16 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md3 ( String b ) { try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; byte [ ] a = md . digest ( b . getBytes ( ) ) ; a = md . digest ( a ) ; a = md . digest ( a ) ; return bytesToHex ( a ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( byte [ ] input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( String input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; }", "gt": "return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Sets ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; import io . github . chensheng . dddboot . tools . collection . type . ConcurrentHashSet ; import java . util . * ; public class SetUtil { public static < T > HashSet < T > newHashSet ( ) { return new HashSet < T > ( ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T > HashSet < T > newHashSet ( T ... elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSet ( Iterable < ? extends T > elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSetWithCapacity ( int expectedSize ) { return Sets . newHashSetWithExpectedSize ( expectedSize ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > TreeSet < T > newSortedSet ( ) { return new TreeSet < T > ( ) ; } public static < T > TreeSet < T > newSortedSet ( @ Nullable Comparator < ? super T > comparator ) { return Sets . newTreeSet ( comparator ) ; } public static < T > ConcurrentHashSet < T > newConcurrentHashSet ( ) { return new ConcurrentHashSet < T > ( ) ; } public static final < T > Set < T > emptySet ( ) { return Collections . emptySet ( ) ; } public static < T > Set < T > emptySetIfNull ( final Set < T > set ) { return set == null ? ( Set < T > ) Collections . EMPTY_SET : set ; } public static final < T > Set < T > singletonSet ( T o ) { return Collections . singleton ( o ) ; } public static < T > Set < T > unmodifiableSet ( Set < ? extends T > s ) {", "gt": "return Collections . unmodifiableSet ( s ) ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String deptName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationUrl ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationIp ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationLocation ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationParam ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String jsonResult ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer status ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String errorMsg ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ; feedsVO . setHeadImgUrl ( headImgUrl ) ; } ) . collect ( Collectors . toList ( ) ) ; return new PageVO < > ( pageResult . getCurrent ( ) , pageResult . getSize ( ) , pageResult . getTotal ( ) , feedsVos ) ; } ) . orElse ( new PageVO < > ( feedsDTO . getCurrent ( ) , feedsDTO . getPageSize ( ) , <NUM_LIT> , null ) ) ; } private List < FeedsMediaVO > getMedia ( TimelineObjectBO timelineObjectBO ) { List < FeedsMediaVO > feedsMediaVos = new ArrayList < > ( ) ; List < TimelineObjectBO . ContentObject . Media > mediaList = timelineObjectBO . getContentObject ( ) . getMediaList ( ) ; if ( CollUtil . isEmpty ( mediaList ) ) { return feedsMediaVos ; } for ( TimelineObjectBO . ContentObject . Media media : mediaList ) {", "gt": "FeedsMediaVO feedsMediaVo = new FeedsMediaVO ( ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { Shape shape = new Shape ( ) ; shape . setName ( supportType ( ) ) ; shape . setLabel ( \"<STR_LIT>\" ) ; shape . setIcon ( \"<STR_LIT>\" ) ; shape . setDesc ( \"<STR_LIT>\" ) ;", "gt": "return shape ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ;", "gt": "forceModel . setDirection ( direction ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; } private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; nacosPropertySource . setOrigin ( metadata . getClassName ( ) ) ; } private void initOrder ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean first = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . FIRST_ATTRIBUTE_NAME ) ) ; String before = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . BEFORE_ATTRIBUTE_NAME ) ; String after = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AFTER_ATTRIBUTE_NAME ) ; nacosPropertySource . setFirst ( first ) ; nacosPropertySource . setBefore ( before ) ;", "gt": "nacosPropertySource . setAfter ( after ) ;"}
{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) { List < Option > menus = menuService . listMenuOptions ( ) ; return Result . success ( menus ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < List < RouteVO > > listRoutes ( ) { Set < String > roles = SecurityUtils . getRoles ( ) ; List < RouteVO > routeList = menuService . listRoutes ( roles ) ; return Result . success ( routeList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < MenuForm > getMenuForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long id ) { MenuForm menu = menuService . getMenuForm ( id ) ; return Result . success ( menu ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result addMenu ( @ RequestBody MenuForm menuForm ) { boolean result = menuService . saveMenu ( menuForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateMenu ( @ RequestBody MenuForm menuForm ) { boolean result = menuService . saveMenu ( menuForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteMenu ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable ( \"<STR_LIT>\" ) Long id ) { boolean result = menuService . deleteMenu ( id ) ;", "gt": "return Result . judge ( result ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; List < Map < String , Object > > selectEntrustList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isEmpty ( selectEntrustList ) ) { return ; } for ( Map < String , Object > entrustMap : selectEntrustList ) { String entrustCode = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String entrustType = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ;", "gt": "String calculationMethod = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ; public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) {", "gt": "NacosConfigProperties nacosConfigProperties = new NacosConfigProperties ( ) ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; CellStyleConfig that = ( CellStyleConfig ) o ; return Objects . equals ( font , that . font ) && Objects . equals ( wrapText , that . wrapText ) && verticalAlignment == that . verticalAlignment && alignment == that . alignment && Objects . equals ( locked , that . locked ) && fillPattern == that . fillPattern && Objects . equals ( fillForegroundColor , that . fillForegroundColor ) && borderBottom == that . borderBottom && borderLeft == that . borderLeft ; } @ Override public int hashCode ( ) { return Objects . hash ( font , wrapText , verticalAlignment , alignment , locked , fillPattern , fillForegroundColor , borderBottom , borderLeft ) ; } public static class FontConfig { private String fontName ; private short fontHeightInPoints ; private boolean bold ; public String getFontName ( ) { return fontName ; } public void setFontName ( String fontName ) { this . fontName = fontName ; } public short getFontHeightInPoints ( ) { return fontHeightInPoints ; } public void setFontHeightInPoints ( short fontHeightInPoints ) { this . fontHeightInPoints = fontHeightInPoints ; }", "gt": "public boolean isBold ( ) {"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getMessage ( ) ) ; return map ; } @ ResponseBody @ ExceptionHandler ( BaseException . class ) public Map < String , Object > handleBaseException ( BaseException e ) { log . error ( \"<STR_LIT>\" , e . getCode ( ) , e . getMessageId ( ) , e . getMessage ( ) ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , e . getCode ( ) ) ;", "gt": "map . put ( \"<STR_LIT>\" , e . getMessage ( ) ) ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ; map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] { qiniuContent . getUrl ( ) } ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > synchronizeQiNiu ( ) {", "gt": "qiniuContentService . synchronize ( qiNiuConfigService . getConfig ( ) ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; }", "gt": "@ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) {"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; }", "gt": "String ruleClass = entity . getString ( \"<STR_LIT>\" ) ;"}
{"input": "package org . example . ddduser . application . dto . command ; import lombok . Data ; import org . example . ddduser . domain . user . valueobject . Gender ; import javax . validation . constraints . NotEmpty ; @ Data public class ModifyProfileCommand { @ NotEmpty ( message = \"<STR_LIT>\" ) private String nickName ; private String avatar ; private Gender gender ;", "gt": "private Integer age ;"}
{"input": "package com . xcs . wx . util ; import cn . hutool . extra . spring . SpringUtil ; import com . xcs . wx . service . UserService ; public class DSNameUtil { private DSNameUtil ( ) { }", "gt": "public static String getDSName ( String dbName ) {"}
{"input": "package io . github . chensheng . dddboot . tools . io ; import com . google . common . io . Resources ; import io . github . chensheng . dddboot . tools . collection . ListUtil ; import io . github . chensheng . dddboot . tools . reflect . ClassLoaderUtil ; import io . github . chensheng . dddboot . tools . text . Charsets ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . ArrayList ; import java . util . Enumeration ; import java . util . List ; public class ResourceUtil { public static URL asUrl ( String resourceName ) { return Resources . getResource ( resourceName ) ; } public static URL asUrl ( Class < ? > contextClass , String resourceName ) { return Resources . getResource ( contextClass , resourceName ) ; } public static InputStream asStream ( String resourceName ) throws IOException { return Resources . getResource ( resourceName ) . openStream ( ) ; } public static InputStream asStream ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . getResource ( contextClass , resourceName ) . openStream ( ) ; } public static String toString ( String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ; } public static String toString ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( contextClass , resourceName ) , Charsets . UTF_8 ) ; }", "gt": "public static List < String > toLines ( String resourceName ) throws IOException {"}
{"input": "package ginyi . framework . security . config ; import ginyi . framework . security . filter . JwtAuthenticationTokenFilter ; import ginyi . framework . security . handle . AuthenticationEntryPointImpl ; import ginyi . framework . security . handle . LogoutSuccessHandlerImpl ; import ginyi . framework . security . properties . PermitAllUrlProperties ; import org . springframework . context . annotation . Bean ; import org . springframework . http . HttpMethod ; import org . springframework . security . authentication . AuthenticationManager ; import org . springframework . security . config . annotation . authentication . builders . AuthenticationManagerBuilder ; import org . springframework . security . config . annotation . method . configuration . EnableGlobalMethodSecurity ; import org . springframework . security . config . annotation . web . builders . HttpSecurity ; import org . springframework . security . config . annotation . web . configuration . WebSecurityConfigurerAdapter ; import org . springframework . security . config . annotation . web . configurers . ExpressionUrlAuthorizationConfigurer ; import org . springframework . security . config . http . SessionCreationPolicy ; import org . springframework . security . core . userdetails . UserDetailsService ; import org . springframework . security . crypto . bcrypt . BCryptPasswordEncoder ; import org . springframework . security . web . authentication . UsernamePasswordAuthenticationFilter ; import org . springframework . security . web . authentication . logout . LogoutFilter ; import org . springframework . web . filter . CorsFilter ; import javax . annotation . Resource ; @ EnableGlobalMethodSecurity ( prePostEnabled = true , securedEnabled = true ) public class SecurityConfig extends WebSecurityConfigurerAdapter { @ Resource private UserDetailsService userDetailsService ; @ Resource private AuthenticationEntryPointImpl unauthorizedHandler ; @ Resource private LogoutSuccessHandlerImpl logoutSuccessHandler ; @ Resource private JwtAuthenticationTokenFilter authenticationTokenFilter ; @ Resource private CorsFilter corsFilter ; @ Resource private PermitAllUrlProperties permitAllUrl ; @ Bean @ Override public AuthenticationManager authenticationManagerBean ( ) throws Exception {", "gt": "return super . authenticationManagerBean ( ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; } @ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) { if ( beanType != null ) { InjectionMetadata metadata = findInjectionMetadata ( beanName , beanType , null ) ; metadata . checkConfigMembers ( beanDefinition ) ; } } @ Override public int getOrder ( ) { return order ; } public void setOrder ( int order ) { this . order = order ; } @ Override public void destroy ( ) throws Exception { for ( Object object : injectedObjectsCache . values ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( object + \"<STR_LIT>\" ) ; } if ( object instanceof DisposableBean ) { ( ( DisposableBean ) object ) . destroy ( ) ; } } injectionMetadataCache . clear ( ) ; injectedObjectsCache . clear ( ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( getClass ( ) + \"<STR_LIT>\" ) ; } } @ Override public void setBeanClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } @ Override public void setEnvironment ( Environment environment ) { this . environment = environment ; } protected Environment getEnvironment ( ) { return environment ; } protected ClassLoader getClassLoader ( ) { return classLoader ; } protected ConfigurableListableBeanFactory getBeanFactory ( ) { return beanFactory ; } protected Collection < Object > getInjectedObjects ( ) { return this . injectedObjectsCache . values ( ) ; } protected Object getInjectedObject ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception { String cacheKey = buildInjectedObjectCacheKey ( attributes , bean , beanName , injectedType , injectedElement ) ; Object injectedObject = injectedObjectsCache . get ( cacheKey ) ; if ( injectedObject == null ) { injectedObject = doGetInjectedBean ( attributes , bean , beanName , injectedType , injectedElement ) ; injectedObjectsCache . putIfAbsent ( cacheKey , injectedObject ) ; } return injectedObject ; } protected abstract Object doGetInjectedBean ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception ; protected abstract String buildInjectedObjectCacheKey ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) ; protected Map < InjectionMetadata . InjectedElement , Object > getInjectedFieldObjectsMap ( ) { Map < InjectionMetadata . InjectedElement , Object > injectedElementBeanMap = new LinkedHashMap < InjectionMetadata . InjectedElement , Object > ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata : injectionMetadataCache . values ( ) ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = metadata . getFieldElements ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement fieldElement : fieldElements ) { injectedElementBeanMap . put ( fieldElement , fieldElement . bean ) ; } } return unmodifiableMap ( injectedElementBeanMap ) ; } protected Map < InjectionMetadata . InjectedElement , Object > getInjectedMethodObjectsMap ( ) { Map < InjectionMetadata . InjectedElement , Object > injectedElementBeanMap = new LinkedHashMap < InjectionMetadata . InjectedElement , Object > ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata : injectionMetadataCache . values ( ) ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = metadata . getMethodElements ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement methodElement : methodElements ) { injectedElementBeanMap . put ( methodElement , methodElement . object ) ; } } return unmodifiableMap ( injectedElementBeanMap ) ; } public void setClassValuesAsString ( boolean classValuesAsString ) { this . classValuesAsString = classValuesAsString ; } public void setNestedAnnotationsAsMap ( boolean nestedAnnotationsAsMap ) { this . nestedAnnotationsAsMap = nestedAnnotationsAsMap ; } public void setIgnoreDefaultValue ( boolean ignoreDefaultValue ) { this . ignoreDefaultValue = ignoreDefaultValue ; } public void setTryMergedAnnotation ( boolean tryMergedAnnotation ) { this . tryMergedAnnotation = tryMergedAnnotation ; } private class AnnotatedInjectionMetadata extends InjectionMetadata { private final Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements ; private final Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements ; public AnnotatedInjectionMetadata ( Class < ? > targetClass , Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements , Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements ) { super ( targetClass , combine ( fieldElements , methodElements ) ) ; this . fieldElements = fieldElements ; this . methodElements = methodElements ; } public Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > getFieldElements ( ) { return fieldElements ; } public Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > getMethodElements ( ) { return methodElements ; } } private class AnnotatedMethodElement extends InjectionMetadata . InjectedElement { private final Method method ; private final AnnotationAttributes attributes ; private volatile Object object ; protected AnnotatedMethodElement ( Method method , PropertyDescriptor pd , AnnotationAttributes attributes ) { super ( method , pd ) ; this . method = method ; this . attributes = attributes ; } @ Override protected void inject ( Object bean , String beanName , PropertyValues pvs ) throws Throwable { Class < ? > injectedType = pd . getPropertyType ( ) ; Object injectedObject = getInjectedObject ( attributes , bean , beanName , injectedType , this ) ; ReflectionUtils . makeAccessible ( method ) ; method . invoke ( bean , injectedObject ) ; } } public class AnnotatedFieldElement extends InjectionMetadata . InjectedElement { private final Field field ; private final AnnotationAttributes attributes ; private volatile Object bean ; protected AnnotatedFieldElement ( Field field , AnnotationAttributes attributes ) {", "gt": "super ( field , null ) ;"}
{"input": "package com . youlai . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . model . entity . SysLog ; import com . baomidou . mybatisplus . extension . service . IService ; import com . youlai . system . model . query . LogPageQuery ; import com . youlai . system . model . vo . LogPageVO ; import com . youlai . system . model . vo . VisitStatsVO ; import com . youlai . system . model . vo . VisitTrendVO ; import java . time . LocalDate ; import java . util . List ; public interface SysLogService extends IService < SysLog > { Page < LogPageVO > listPagedLogs ( LogPageQuery queryParams ) ; VisitTrendVO getVisitTrend ( LocalDate startDate , LocalDate endDate ) ;", "gt": "List < VisitStatsVO > getVisitStats ( ) ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) {", "gt": "return ajax ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . type ; import org . apache . commons . lang3 . Validate ; import java . util . concurrent . * ; public abstract class BasicFuture < T > implements Future < T > { private volatile boolean completed ; private volatile boolean cancelled ; private volatile T result ; private volatile Exception ex ; @ Override public boolean isCancelled ( ) { return this . cancelled ; } @ Override public boolean isDone ( ) { return this . completed ; } @ Override public synchronized T get ( ) throws InterruptedException , ExecutionException { while ( ! this . completed ) { wait ( ) ; } return getResult ( ) ; } @ Override public synchronized T get ( final long timeout , final TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Validate . notNull ( unit , \"<STR_LIT>\" ) ; final long msecs = unit . toMillis ( timeout ) ; final long startTime = ( msecs <= <NUM_LIT> ) ? <NUM_LIT> : System . currentTimeMillis ( ) ; long waitTime = msecs ; if ( this . completed ) { return getResult ( ) ; } else if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } else { for ( ; ; ) { wait ( waitTime ) ; if ( this . completed ) { return getResult ( ) ; } else { waitTime = msecs - ( System . currentTimeMillis ( ) - startTime ) ; if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } } } } } private T getResult ( ) throws ExecutionException { if ( this . ex != null ) { throw new ExecutionException ( this . ex ) ; } if ( cancelled ) { throw new CancellationException ( ) ; } return this . result ; } public boolean completed ( final T result ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ; this . result = result ; notifyAll ( ) ; } onCompleted ( result ) ; return true ; } public boolean failed ( final Exception exception ) { synchronized ( this ) { if ( this . completed ) { return false ; } this . completed = true ;", "gt": "this . ex = exception ;"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ;", "gt": "map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ;"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ; SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ; List < SysDictItem > toEntity ( List < DictForm . DictItem > dictFormDictItems ) ; DictForm . DictItem convertToDictFormDictItem ( SysDictItem entity ) ;", "gt": "List < DictForm . DictItem > convertToDictFormDictItem ( List < SysDictItem > entities ) ;"}
{"input": "package com . yf . ability . shiro ; import com . yf . ability . shiro . dto . SysUserLoginDTO ; import com . yf . ability . shiro . jwt . JwtToken ; import com . yf . ability . shiro . jwt . JwtUtils ; import com . yf . ability . shiro . service . ShiroUserService ; import lombok . extern . slf4j . Slf4j ; import org . apache . shiro . authc . AuthenticationException ; import org . apache . shiro . authc . AuthenticationInfo ; import org . apache . shiro . authc . AuthenticationToken ; import org . apache . shiro . authc . SimpleAuthenticationInfo ; import org . apache . shiro . authz . AuthorizationInfo ; import org . apache . shiro . authz . SimpleAuthorizationInfo ; import org . apache . shiro . realm . AuthorizingRealm ; import org . apache . shiro . subject . PrincipalCollection ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . context . annotation . Lazy ; import org . springframework . stereotype . Component ; import java . util . HashSet ; import java . util . List ; @ Component @ Slf4j public class MyShiroRealm extends AuthorizingRealm { @ Autowired @ Lazy private ShiroUserService shiroUserService ; @ Override public boolean supports ( AuthenticationToken token ) { return token instanceof JwtToken ; } @ Override protected AuthorizationInfo doGetAuthorizationInfo ( PrincipalCollection principals ) { log . info ( \"<STR_LIT>\" ) ; System . out . println ( \"<STR_LIT>\" ) ; String userId = null ; if ( principals != null ) { SysUserLoginDTO user = ( SysUserLoginDTO ) principals . getPrimaryPrincipal ( ) ; userId = user . getId ( ) ; } SimpleAuthorizationInfo info = new SimpleAuthorizationInfo ( ) ; List < String > roles = shiroUserService . roles ( userId ) ; info . setRoles ( new HashSet < > ( roles ) ) ; List < String > permissions = shiroUserService . permissions ( userId ) ; info . addStringPermissions ( permissions ) ; log . info ( \"<STR_LIT>\" ) ; return info ; } @ Override protected AuthenticationInfo doGetAuthenticationInfo ( AuthenticationToken auth ) throws AuthenticationException { String token = ( String ) auth . getCredentials ( ) ; if ( token == null ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; }", "gt": "SysUserLoginDTO user = this . checkToken ( token ) ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ; resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ; delCaches ( dictDetail ) ; } @ Override @ Cacheable ( key = \"<STR_LIT>\" ) public List < DictDetail > getDictByName ( String name ) { return dictDetailMapper . findByDictName ( name ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void delete ( Long id ) { DictDetail dictDetail = getById ( id ) ; removeById ( id ) ;", "gt": "delCaches ( dictDetail ) ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; import top . kangert . kspider . expression . ExpressionError ; import java . util . List ; public class TokenStream { private final List < Token > tokens ; private int index ; private final int end ; public TokenStream ( List < Token > tokens ) { this . tokens = tokens ; this . index = <NUM_LIT> ; this . end = tokens . size ( ) ; } public boolean hasMore ( ) { return index < end ; } public boolean hasNext ( ) { return index + <NUM_LIT> < end ; } public boolean hasPrev ( ) { return index > <NUM_LIT> ; } public Token consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( index ++ ) ; } public Token next ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( ++ index ) ; } public Token prev ( ) { if ( index == <NUM_LIT> ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( -- index ) ; } public Token expect ( TokenType type ) { boolean result = match ( type , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public Token expect ( String text ) { boolean result = match ( text , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public boolean match ( TokenType type , boolean consume ) { if ( index >= end ) { return false ; }", "gt": "if ( tokens . get ( index ) . getType ( ) == type ) {"}
{"input": "package top . kangert . kspider . websocket ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . http . server . ServerHttpRequest ; import org . springframework . http . server . ServerHttpResponse ; import org . springframework . http . server . ServletServerHttpRequest ; import org . springframework . web . socket . WebSocketHandler ; import org . springframework . web . socket . server . HandshakeInterceptor ; import cn . hutool . core . util . StrUtil ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; public class WebSocketEditorInterceptor implements HandshakeInterceptor { private static final String TOKEN_PARAMETER = \"<STR_LIT>\" ; @ Autowired private HttpServletRequest request ; public WebSocketEditorInterceptor ( ) { } @ Override public boolean beforeHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Map < String , Object > attributes ) throws Exception { String sessionToken = ( String ) request . getSession ( ) . getAttribute ( TOKEN_PARAMETER ) ; if ( req instanceof ServletServerHttpRequest ) { ServletServerHttpRequest serverRequest = ( ServletServerHttpRequest ) req ; String token = serverRequest . getServletRequest ( ) . getParameter ( TOKEN_PARAMETER ) ; if ( StrUtil . isBlank ( token ) ) { return false ; }", "gt": "else if ( StrUtil . equals ( sessionToken , token ) ) {"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ; void update ( Job resources ) ; void delete ( Set < Long > ids ) ; PageResult < Job > queryAll ( JobQueryCriteria criteria , Page < Object > page ) ; List < Job > queryAll ( JobQueryCriteria criteria ) ; void download ( List < Job > jobs , HttpServletResponse response ) throws IOException ;", "gt": "void verification ( Set < Long > ids ) ;"}
{"input": "package io . github . chensheng . dddboot . excel ; import io . github . chensheng . dddboot . excel . reader . ExcelReaderFactory ; import io . github . chensheng . dddboot . excel . writer . ExcelWriterFactory ; import io . github . chensheng . dddboot . tools . collection . CollectionUtil ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; public class ExcelUtil { public static < T > List < T > read ( InputStream inputStream , Class < T > rowType ) { if ( inputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( rowType == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } return ExcelReaderFactory . read ( inputStream , rowType ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList ) { write ( outputStream , rowDataList , null ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList , InputStream templateIs ) { if ( outputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( CollectionUtil . isEmpty ( rowDataList ) ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; }", "gt": "ExcelWriterFactory . write ( outputStream , templateIs , rowDataList ) ;"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getMessage ( ) ) ; return map ; } @ ResponseBody @ ExceptionHandler ( BaseException . class ) public Map < String , Object > handleBaseException ( BaseException e ) { log . error ( \"<STR_LIT>\" , e . getCode ( ) , e . getMessageId ( ) , e . getMessage ( ) ) ; Map < String , Object > map = new HashMap < > ( ) ;", "gt": "map . put ( \"<STR_LIT>\" , e . getCode ( ) ) ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ;", "gt": "private Integer sort ;"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) { return toString ( false ) ; } public String toString ( boolean isSimple ) { final StringBuilder builder = new StringBuilder ( isSimple ? <NUM_LIT> : <NUM_LIT> ) ; builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits , <NUM_LIT> ) ) ; return builder . toString ( ) ; } @ Override public int hashCode ( ) { long hilo = mostSigBits ^ leastSigBits ; return ( ( int ) ( hilo > > <NUM_LIT> ) ) ^ ( int ) hilo ; } @ Override public boolean equals ( Object obj ) { if ( ( null == obj ) || ( obj . getClass ( ) != UUID . class ) ) { return false ; } UUID id = ( UUID ) obj ; return ( mostSigBits == id . mostSigBits && leastSigBits == id . leastSigBits ) ; }", "gt": "@ Override public int compareTo ( UUID val ) {"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) { return ajax ; } String uuid = IdUtils . simpleUUID ( ) ; String verifyKey = CacheConstants . CAPTCHA_CODE_KEY + uuid ; String capStr = null , code = null ; BufferedImage image = null ; String captchaType = ConfigExpander . getLoginCaptchaType ( ) ;", "gt": "if ( \"<STR_LIT>\" . equals ( captchaType ) ) {"}
{"input": "package com . oddfar . campus . common . enums ; import cn . hutool . core . util . DesensitizedUtil ; import lombok . AllArgsConstructor ; import java . util . function . Function ; @ AllArgsConstructor public enum SensitiveStrategy {", "gt": "ID_CARD ( s -> DesensitizedUtil . idCardNum ( s , <NUM_LIT> , <NUM_LIT> ) ) , PHONE ( DesensitizedUtil :: mobilePhone ) , ADDRESS ( s -> DesensitizedUtil . address ( s , <NUM_LIT> ) ) , EMAIL ( DesensitizedUtil :: email ) , BANK_CARD ( DesensitizedUtil :: bankCard ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ;", "gt": "initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ; feedsVO . setHeadImgUrl ( headImgUrl ) ; } ) . collect ( Collectors . toList ( ) ) ; return new PageVO < > ( pageResult . getCurrent ( ) , pageResult . getSize ( ) , pageResult . getTotal ( ) , feedsVos ) ; } ) . orElse ( new PageVO < > ( feedsDTO . getCurrent ( ) , feedsDTO . getPageSize ( ) , <NUM_LIT> , null ) ) ; } private List < FeedsMediaVO > getMedia ( TimelineObjectBO timelineObjectBO ) { List < FeedsMediaVO > feedsMediaVos = new ArrayList < > ( ) ; List < TimelineObjectBO . ContentObject . Media > mediaList = timelineObjectBO . getContentObject ( ) . getMediaList ( ) ; if ( CollUtil . isEmpty ( mediaList ) ) { return feedsMediaVos ; } for ( TimelineObjectBO . ContentObject . Media media : mediaList ) { FeedsMediaVO feedsMediaVo = new FeedsMediaVO ( ) ; feedsMediaVo . setUrl ( media . getUrl ( ) . getValue ( ) ) ; feedsMediaVo . setThumb ( media . getThumb ( ) . getValue ( ) ) ; feedsMediaVos . add ( feedsMediaVo ) ; } return feedsMediaVos ; } private FeedsLocationVO getLocation ( TimelineObjectBO timelineObjectBO ) { TimelineObjectBO . Location location = timelineObjectBO . getLocation ( ) ; if ( ObjUtil . isNotEmpty ( location ) ) { FeedsLocationVO feedsLocationVO = new FeedsLocationVO ( ) ; feedsLocationVO . setCity ( location . getCity ( ) ) ; feedsLocationVO . setPoiAddress ( location . getPoiAddress ( ) ) ; feedsLocationVO . setPoiClassifyId ( location . getPoiClassifyId ( ) ) ; feedsLocationVO . setPoiName ( location . getPoiName ( ) ) ; feedsLocationVO . setPoiClassifyType ( location . getPoiClassifyType ( ) ) ; return feedsLocationVO ; } return null ; } private TimelineObjectBO parseXmlToObj ( String xml ) { try {", "gt": "xml = xml . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ;", "gt": "private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ; private String icon ;", "gt": "private String redirect ;"}
{"input": "package com . yf . ability . shiro ; import com . yf . ability . shiro . dto . SysUserLoginDTO ; import com . yf . ability . shiro . jwt . JwtToken ; import com . yf . ability . shiro . jwt . JwtUtils ; import com . yf . ability . shiro . service . ShiroUserService ; import lombok . extern . slf4j . Slf4j ; import org . apache . shiro . authc . AuthenticationException ; import org . apache . shiro . authc . AuthenticationInfo ; import org . apache . shiro . authc . AuthenticationToken ; import org . apache . shiro . authc . SimpleAuthenticationInfo ; import org . apache . shiro . authz . AuthorizationInfo ; import org . apache . shiro . authz . SimpleAuthorizationInfo ; import org . apache . shiro . realm . AuthorizingRealm ; import org . apache . shiro . subject . PrincipalCollection ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . context . annotation . Lazy ; import org . springframework . stereotype . Component ; import java . util . HashSet ; import java . util . List ; @ Component @ Slf4j public class MyShiroRealm extends AuthorizingRealm { @ Autowired @ Lazy private ShiroUserService shiroUserService ; @ Override public boolean supports ( AuthenticationToken token ) { return token instanceof JwtToken ; } @ Override protected AuthorizationInfo doGetAuthorizationInfo ( PrincipalCollection principals ) { log . info ( \"<STR_LIT>\" ) ; System . out . println ( \"<STR_LIT>\" ) ; String userId = null ; if ( principals != null ) { SysUserLoginDTO user = ( SysUserLoginDTO ) principals . getPrimaryPrincipal ( ) ; userId = user . getId ( ) ; } SimpleAuthorizationInfo info = new SimpleAuthorizationInfo ( ) ; List < String > roles = shiroUserService . roles ( userId ) ; info . setRoles ( new HashSet < > ( roles ) ) ; List < String > permissions = shiroUserService . permissions ( userId ) ; info . addStringPermissions ( permissions ) ; log . info ( \"<STR_LIT>\" ) ; return info ; } @ Override protected AuthenticationInfo doGetAuthenticationInfo ( AuthenticationToken auth ) throws AuthenticationException { String token = ( String ) auth . getCredentials ( ) ; if ( token == null ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; } SysUserLoginDTO user = this . checkToken ( token ) ; SimpleAuthenticationInfo info = new SimpleAuthenticationInfo ( user , token , getName ( ) ) ; return info ; } public SysUserLoginDTO checkToken ( String token ) throws AuthenticationException { try { JwtUtils . getUsername ( token ) ; } catch ( Exception e ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; } SysUserLoginDTO user = shiroUserService . token ( token ) ; if ( JwtUtils . expired ( token ) ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; } return user ; } @ Override public void clearCache ( PrincipalCollection principals ) {", "gt": "super . clearCache ( principals ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) {", "gt": "Shape shape = new Shape ( ) ;"}
{"input": "package com . yf . plugins . upload . local . dto ; import com . yf . base . api . api . dto . BaseDTO ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . AllArgsConstructor ; import lombok . Data ;", "gt": "import lombok . NoArgsConstructor ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) {", "gt": "this . ruleConditions = ruleConditions ;"}
{"input": "package cn . org . alan . exam . util ; import jakarta . annotation . Resource ; import org . junit . jupiter . api . Test ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Encryption ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Signing ; import java . security . NoSuchAlgorithmException ; import java . time . LocalDate ; public class CryptoUtilsTest {", "gt": "@ Resource private CryptoUtils cryptoUtils ;"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiAlias ;", "gt": "@ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String pack ;"}
{"input": "package com . oddfar . campus . common . core . page ; import java . io . Serializable ; import java . util . List ; public class TableDataInfo implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private long total ; private List < ? > rows ; private int code ; private String msg ; public TableDataInfo ( ) { } public TableDataInfo ( List < ? > list , int total ) { this . rows = list ; this . total = total ; } public long getTotal ( ) { return total ; } public void setTotal ( long total ) { this . total = total ; } public List < ? > getRows ( ) { return rows ; } public void setRows ( List < ? > rows ) { this . rows = rows ; } public int getCode ( ) { return code ; } public void setCode ( int code ) { this . code = code ; }", "gt": "public String getMsg ( ) {"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import java . io . Serializable ;", "gt": "@ Data @ TableName ( \"<STR_LIT>\" ) public class SysRoleMenuEntity implements Serializable {"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) public CommonResult add ( @ RequestBody @ Validated ( AddGroup . class ) NoticeDto noticeDto ) { noticeService . add ( noticeDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) public CommonResult update ( @ RequestBody @ Validated ( UpdateGroup . class ) NoticeDto noticeDto ) { noticeService . updateNotice ( noticeDto ) ;", "gt": "return CommonResult . success ( ) ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ; entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ; exampleRepository . save ( entity ) ; }", "gt": "@ Override public void enable ( Long id ) {"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } } catch ( Exception e ) { log . error ( \"<STR_LIT>\" , delayTimes , e ) ; } } } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < > ( ) ;", "gt": "Map < String , Object > delayTimeAttrs = new HashMap < > ( ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ;", "gt": "private String resourceName ;"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . Getter ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; @ Getter @ Setter public class AuthUserDto {", "gt": "@ NotBlank private String username ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; } @ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) { if ( beanType != null ) { InjectionMetadata metadata = findInjectionMetadata ( beanName , beanType , null ) ; metadata . checkConfigMembers ( beanDefinition ) ; } } @ Override public int getOrder ( ) { return order ; } public void setOrder ( int order ) { this . order = order ; } @ Override public void destroy ( ) throws Exception { for ( Object object : injectedObjectsCache . values ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( object + \"<STR_LIT>\" ) ; } if ( object instanceof DisposableBean ) { ( ( DisposableBean ) object ) . destroy ( ) ; } } injectionMetadataCache . clear ( ) ; injectedObjectsCache . clear ( ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( getClass ( ) + \"<STR_LIT>\" ) ; } } @ Override public void setBeanClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } @ Override public void setEnvironment ( Environment environment ) { this . environment = environment ; } protected Environment getEnvironment ( ) { return environment ; } protected ClassLoader getClassLoader ( ) { return classLoader ; } protected ConfigurableListableBeanFactory getBeanFactory ( ) { return beanFactory ; } protected Collection < Object > getInjectedObjects ( ) { return this . injectedObjectsCache . values ( ) ; } protected Object getInjectedObject ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception { String cacheKey = buildInjectedObjectCacheKey ( attributes , bean , beanName , injectedType , injectedElement ) ; Object injectedObject = injectedObjectsCache . get ( cacheKey ) ; if ( injectedObject == null ) { injectedObject = doGetInjectedBean ( attributes , bean , beanName , injectedType , injectedElement ) ; injectedObjectsCache . putIfAbsent ( cacheKey , injectedObject ) ; } return injectedObject ; } protected abstract Object doGetInjectedBean ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception ; protected abstract String buildInjectedObjectCacheKey ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) ; protected Map < InjectionMetadata . InjectedElement , Object > getInjectedFieldObjectsMap ( ) { Map < InjectionMetadata . InjectedElement , Object > injectedElementBeanMap = new LinkedHashMap < InjectionMetadata . InjectedElement , Object > ( ) ; for ( AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata : injectionMetadataCache . values ( ) ) {", "gt": "Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = metadata . getFieldElements ( ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ;", "gt": "private Integer judgeScore ;"}
{"input": "package top . kangert . kspider . executor . function . extension ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; import top . kangert . kspider . executor . FunctionExtension ; import top . kangert . kspider . util . ExtractUtils ; import org . springframework . stereotype . Component ; import cn . hutool . json . JSONUtil ; import java . util . Objects ; @ Component public class ObjectFunctionExtension implements FunctionExtension { @ Override public Class < ? > support ( ) { return Object . class ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static String string ( Object obj ) { if ( obj instanceof String ) { return ( String ) obj ; } return Objects . toString ( obj ) ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static Object jsonpath ( Object obj , String path ) { if ( obj instanceof String ) { return ExtractUtils . getValueByJsonPath ( JSONUtil . parse ( ( String ) obj ) , path ) ; } return ExtractUtils . getValueByJsonPath ( obj , path ) ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static Object sleep ( Object obj , int millis ) { try {", "gt": "Thread . sleep ( millis ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import io . github . chensheng . dddboot . tools . number . RandomUtil ; import org . apache . commons . lang3 . Validate ; public class Sampler { private static final Double ALWAYS = Double . valueOf ( <NUM_LIT> ) ; private static final Double NEVER = Double . valueOf ( <NUM_LIT> ) ; private double threshold ; protected Sampler ( ) { } protected Sampler ( double selectPercent ) { Validate . isTrue ( ( selectPercent >= <NUM_LIT> ) && ( selectPercent <= <NUM_LIT> ) , \"<STR_LIT>\" + selectPercent ) ; this . threshold = selectPercent / <NUM_LIT> ; } public static Sampler create ( Double selectPercent ) { if ( selectPercent . equals ( ALWAYS ) ) { return new AlwaysSampler ( ) ; } else if ( selectPercent . equals ( NEVER ) ) { return new NeverSampler ( ) ; } else { return new Sampler ( selectPercent ) ; } } public boolean select ( ) { return RandomUtil . threadLocalRandom ( ) . nextDouble ( ) < threshold ; } protected static class AlwaysSampler extends Sampler { @ Override public boolean select ( ) {", "gt": "return true ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierPart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierPart ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public void skipWhiteSpace ( ) { while ( true ) { if ( index >= end ) { return ; } char c = source . charAt ( index ) ; if ( c == '<STR_LIT>' || c == '<STR_LIT>' || c == '<STR_LIT>' || c == '<STR_LIT>' ) { index ++ ; continue ; } else { break ; } } } public void startSpan ( ) { spanStart = index ; } public Span endSpan ( ) { return new Span ( source , spanStart , index ) ; } public boolean isSpanEmpty ( ) { return spanStart == this . index ; } public int getPosition ( ) {", "gt": "return index ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ; public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) { NacosConfigProperties nacosConfigProperties = new NacosConfigProperties ( ) ; Binder binder = Binder . get ( environment ) ; ResolvableType type = ResolvableType . forClass ( NacosConfigProperties . class ) ;", "gt": "Bindable < ? > target = Bindable . of ( type ) . withExistingValue ( nacosConfigProperties ) ;"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ; @ TableField ( \"<STR_LIT>\" ) private String reserved2 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved3 ; @ TableField ( \"<STR_LIT>\" ) private String reserved4 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved5 ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private String reserved6 ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { postService . removeDeptByIds ( ids ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < PostVo > > list ( @ RequestBody PostDto postDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < PostVo > list = postService . list ( postDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addPost ( @ RequestBody @ Validated ( AddGroup . class ) PostDto postDto ) {", "gt": "postService . addPost ( postDto ) ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; }", "gt": "public boolean matchIdentifierPart ( boolean consume ) {"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . Getter ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; @ Getter @ Setter public class AuthUserDto { @ NotBlank private String username ; @ NotBlank private String password ;", "gt": "private String code ;"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ; wrapper . last ( \"<STR_LIT>\" ) ; CfgBase entity = this . getOne ( wrapper , false ) ;", "gt": "CfgBaseDTO dto = new CfgBaseDTO ( ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ; import org . springframework . core . type . AnnotationMetadata ; @ Configuration public class NacosConfigBootBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar , BeanFactoryAware { @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { DefaultListableBeanFactory defaultListableBeanFactory = ( DefaultListableBeanFactory ) beanFactory ; BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( NacosBootConfigurationPropertiesBinder . class ) ; defaultListableBeanFactory . registerBeanDefinition ( NacosBootConfigurationPropertiesBinder . BEAN_NAME , beanDefinitionBuilder . getBeanDefinition ( ) ) ; }", "gt": "@ Override public void registerBeanDefinitions ( AnnotationMetadata importingClassMetadata , BeanDefinitionRegistry registry ) {"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import java . io . Serializable ; @ Data @ TableName ( \"<STR_LIT>\" ) public class SysRoleMenuEntity implements Serializable {", "gt": "private static final long serialVersionUID = <NUM_LIT> ;"}
{"input": "package io . github . chensheng . dddboot . tools . base . type ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; public class Triple < L , M , R > { @ Nullable private final L left ; @ Nullable private final M middle ; @ Nullable private final R right ; public Triple ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) { this . left = left ; this . middle = middle ; this . right = right ; } @ Nullable public L getLeft ( ) { return left ; } @ Nullable public M getMiddle ( ) { return middle ; } @ Nullable public R getRight ( ) { return right ; } @ Override public int hashCode ( ) { final int prime = <NUM_LIT> ; int result = <NUM_LIT> ; result = prime * result + ( ( left == null ) ? <NUM_LIT> : left . hashCode ( ) ) ; result = prime * result + ( ( middle == null ) ? <NUM_LIT> : middle . hashCode ( ) ) ; return prime * result + ( ( right == null ) ? <NUM_LIT> : right . hashCode ( ) ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } Triple other = ( Triple ) obj ; if ( left == null ) { if ( other . left != null ) { return false ; } } else if ( ! left . equals ( other . left ) ) { return false ; } if ( middle == null ) { if ( other . middle != null ) { return false ; } } else if ( ! middle . equals ( other . middle ) ) { return false ; } if ( right == null ) {", "gt": "if ( other . right != null ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ; public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) { NacosConfigProperties nacosConfigProperties = new NacosConfigProperties ( ) ; Binder binder = Binder . get ( environment ) ; ResolvableType type = ResolvableType . forClass ( NacosConfigProperties . class ) ; Bindable < ? > target = Bindable . of ( type ) . withExistingValue ( nacosConfigProperties ) ; binder . bind ( NacosConfigConstants . PREFIX , target ) ; logger . info ( \"<STR_LIT>\" , nacosConfigProperties ) ;", "gt": "return nacosConfigProperties ;"}
{"input": "package cn . org . alan . exam . model . vo ; import cn . org . alan . exam . model . entity . Option ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; import java . util . List ; @ Data public class QuestionVO { private Integer id ; private String content ; private Integer repoId ; private String image ; private String repoTitle ;", "gt": "private Integer quType ;"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ;", "gt": "wrapper . last ( \"<STR_LIT>\" ) ;"}
{"input": "package com . yf . ability . shiro ; import com . yf . ability . shiro . dto . SysUserLoginDTO ; import com . yf . ability . shiro . jwt . JwtToken ; import com . yf . ability . shiro . jwt . JwtUtils ; import com . yf . ability . shiro . service . ShiroUserService ; import lombok . extern . slf4j . Slf4j ; import org . apache . shiro . authc . AuthenticationException ; import org . apache . shiro . authc . AuthenticationInfo ; import org . apache . shiro . authc . AuthenticationToken ; import org . apache . shiro . authc . SimpleAuthenticationInfo ; import org . apache . shiro . authz . AuthorizationInfo ; import org . apache . shiro . authz . SimpleAuthorizationInfo ; import org . apache . shiro . realm . AuthorizingRealm ; import org . apache . shiro . subject . PrincipalCollection ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . context . annotation . Lazy ; import org . springframework . stereotype . Component ; import java . util . HashSet ; import java . util . List ; @ Component @ Slf4j public class MyShiroRealm extends AuthorizingRealm { @ Autowired @ Lazy private ShiroUserService shiroUserService ; @ Override public boolean supports ( AuthenticationToken token ) { return token instanceof JwtToken ; } @ Override protected AuthorizationInfo doGetAuthorizationInfo ( PrincipalCollection principals ) { log . info ( \"<STR_LIT>\" ) ; System . out . println ( \"<STR_LIT>\" ) ; String userId = null ; if ( principals != null ) { SysUserLoginDTO user = ( SysUserLoginDTO ) principals . getPrimaryPrincipal ( ) ; userId = user . getId ( ) ; } SimpleAuthorizationInfo info = new SimpleAuthorizationInfo ( ) ; List < String > roles = shiroUserService . roles ( userId ) ; info . setRoles ( new HashSet < > ( roles ) ) ; List < String > permissions = shiroUserService . permissions ( userId ) ;", "gt": "info . addStringPermissions ( permissions ) ;"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ; String getDropColumnSql ( String fieldName ) ; String getCommentSql ( ColumnMeta columnMeta ) ; String getSpecialHandle ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) ; String dropIndexs ( String indexName , String tableName ) ;", "gt": "String countIndex ( String indexName , String tableName ) ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ; if ( ! StringUtils . isBlank ( currentId ) ) { if ( LoginType . MOBILE . equals ( loginType ) ) { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } else { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } } SysUserBind bind = new SysUserBind ( ) ; bind . setUserId ( userId ) ; bind . setLoginType ( loginType ) ; bind . setOpenId ( openId ) ; this . save ( bind ) ; } @ Override public void delete ( List < String > ids ) { this . removeByIds ( ids ) ; } @ Override public String findBind ( String loginType , String openId ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getLoginType , loginType ) . eq ( SysUserBind :: getOpenId , openId ) ;", "gt": "SysUserBind bind = this . getOne ( wrapper , false ) ;"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ; String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } FileInputStream is = null ; ServletOutputStream os = null ; try { Tika tika = new Tika ( ) ; String mimeType = tika . detect ( file ) ; response . setContentType ( mimeType ) ; response . setContentLength ( ( int ) file . length ( ) ) ; is = new FileInputStream ( filePath ) ; int len = <NUM_LIT> ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; os = response . getOutputStream ( ) ; while ( ( len = is . read ( buffer ) ) > <NUM_LIT> ) { os . write ( buffer , <NUM_LIT> , len ) ; } } catch ( Exception e ) { log . error ( e ) ; } finally { if ( is != null ) { is . close ( ) ; } if ( os != null ) { os . close ( ) ; } } } private LocalConfig getConfig ( ) { String str = pluginDataService . findConfig ( PLUGIN_CODE ) ; return JsonHelper . parseObject ( str , LocalConfig . class ) ; } private UploadRespDTO generateResult ( LocalConfig conf , String fileName ) { String domain = conf . getVisitUrl ( ) ; return new UploadRespDTO ( domain + Constant . FILE_PREFIX + fileName ) ; } public String getRealPath ( LocalConfig conf , String uri ) { String regx = Constant . FILE_PREFIX + \"<STR_LIT>\" ; Pattern pattern = Pattern . compile ( regx ) ;", "gt": "Matcher m = pattern . matcher ( uri ) ;"}
{"input": "package com . oddfar . campus . common . enums ; import lombok . Getter ; @ Getter public enum ResBizTypeEnum { BUSINESS ( <NUM_LIT> , \"<STR_LIT>\" ) , SYSTEM ( <NUM_LIT> , \"<STR_LIT>\" ) ; private final Integer code ; private final String message ; ResBizTypeEnum ( Integer code , String message ) {", "gt": "this . code = code ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { postService . removeDeptByIds ( ids ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < PostVo > > list ( @ RequestBody PostDto postDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < PostVo > list = postService . list ( postDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addPost ( @ RequestBody @ Validated ( AddGroup . class ) PostDto postDto ) { postService . addPost ( postDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult update ( @ RequestBody @ Validated PostDto postDto ) { postService . updatePost ( postDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( includeParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" } ) public CommonResult updateStatus ( @ RequestBody PostDto postDto ) { postService . updateStatus ( postDto ) ;", "gt": "return CommonResult . success ( ) ;"}
{"input": "package org . example . api . web . example ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . dto . query . ExampleListQuery ; import org . example . application . example . dto . query . ExamplePageQuery ; import org . example . application . example . dto . result . ExampleResult ; import org . example . application . example . service . ExampleCommandService ; import org . example . application . example . service . ExampleQueryService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . validation . Valid ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class ExampleController { @ Autowired private ExampleQueryService exampleQueryService ; @ Autowired private ExampleCommandService exampleCommandService ; @ GetMapping ( \"<STR_LIT>\" ) public Page < ExampleResult > page ( @ Valid ExamplePageQuery query ) { return exampleQueryService . page ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public List < ExampleResult > list ( @ Valid ExampleListQuery query ) { return exampleQueryService . list ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public ExampleResult detail ( @ PathVariable Long id ) { return exampleQueryService . detail ( id ) ; } @ PostMapping public void create ( @ Valid @ RequestBody ExampleCreateCommand command ) { exampleCommandService . create ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void updatePassword ( @ Valid @ RequestBody ExampleUpdatePasswordCommand command ) { exampleCommandService . update ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void enable ( @ PathVariable Long id ) { exampleCommandService . enable ( id ) ; }", "gt": "@ PutMapping ( \"<STR_LIT>\" ) public void disable ( @ PathVariable Long id ) {"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; } return <NUM_LIT> ; } @ Override public BigDecimal getPriceBySymbol ( String symbolName ) { try { return this . getPriceBySymbol ( \"<STR_LIT>\" , symbolName ) ; } catch ( Exception e ) {", "gt": "return BigDecimal . ZERO ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ; if ( ! StringUtils . isBlank ( currentId ) ) { if ( LoginType . MOBILE . equals ( loginType ) ) { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } else { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } } SysUserBind bind = new SysUserBind ( ) ; bind . setUserId ( userId ) ; bind . setLoginType ( loginType ) ; bind . setOpenId ( openId ) ; this . save ( bind ) ; } @ Override public void delete ( List < String > ids ) { this . removeByIds ( ids ) ; } @ Override public String findBind ( String loginType , String openId ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getLoginType , loginType ) . eq ( SysUserBind :: getOpenId , openId ) ; SysUserBind bind = this . getOne ( wrapper , false ) ; if ( bind != null ) { return bind . getUserId ( ) ; } return null ; }", "gt": "@ Override public boolean hasBind ( String loginType , String openId ) {"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ;", "gt": "import org . apache . commons . lang . StringEscapeUtils ;"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import java . util . List ; public interface UserService { UserInfoVO userInfo ( ) ; String avatar ( ) ; String nickname ( ) ; List < UserVO > users ( ) ;", "gt": "void switchUser ( String wxId ) ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierPart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierPart ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public void skipWhiteSpace ( ) { while ( true ) { if ( index >= end ) { return ; }", "gt": "char c = source . charAt ( index ) ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ; if ( ! StringUtils . isBlank ( currentId ) ) { if ( LoginType . MOBILE . equals ( loginType ) ) { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } else {", "gt": "throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ;"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Data ; @ Schema ( description = \"<STR_LIT>\" ) @ Data public class TablePageVO { @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableName ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableComment ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableCollation ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String engine ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String charset ;", "gt": "@ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String createTime ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ; private String methodName ;", "gt": "@ TableField ( exist = false ) private String modular_code ;"}
{"input": "package cn . org . alan . exam . util ; import jakarta . annotation . Resource ; import org . junit . jupiter . api . Test ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Encryption ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Signing ; import java . security . NoSuchAlgorithmException ; import java . time . LocalDate ; public class CryptoUtilsTest { @ Resource private CryptoUtils cryptoUtils ; @ Test void getDate ( ) throws Exception {", "gt": "String secretKey = CryptoUtils . generateSymmetricKey ( Encryption . AES_ECB_PKCS5 ) ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) { if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( first , second ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( second , first ) ; }", "gt": "else if ( \"<STR_LIT>\" . endsWith ( operator ) ) {"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ; apiError . setMessage ( message ) ;", "gt": "return apiError ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ;", "gt": "import java . util . * ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) { CertificateUser certificateUser = new CertificateUser ( ) ; certificateUser . setUserId ( correctAnswerFrom . getUserId ( ) ) ; certificateUser . setExamId ( correctAnswerFrom . getExamId ( ) ) ; certificateUser . setCode ( ClassTokenGenerator . generateClassToken ( <NUM_LIT> ) ) ; certificateUser . setCertificateId ( exam . getCertificateId ( ) ) ; certificateUserMapper . insert ( certificateUser ) ; } } return Result . success ( \"<STR_LIT>\" ) ; } @ Override public Result < IPage < AnswerExamVO > > examPage ( Integer pageNum , Integer pageSize , String examName ) { Page < AnswerExamVO > page = new Page < > ( pageNum , pageSize ) ; List < AnswerExamVO > list = examMapper . selectMarkedList ( page , SecurityUtil . getUserId ( ) , SecurityUtil . getRole ( ) , examName ) . getRecords ( ) ; list . forEach ( answerExamVO -> { answerExamVO . setClassSize ( examGradeMapper . selectClassSize ( answerExamVO . getExamId ( ) ) ) ; LambdaQueryWrapper < UserExamsScore > numberWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ; answerExamVO . setNumberOfApplicants ( userExamsScoreMapper . selectCount ( numberWrapper ) . intValue ( ) ) ; LambdaQueryWrapper < UserExamsScore > correctedWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . eq ( UserExamsScore :: getExamId , answerExamVO . getExamId ( ) ) ; answerExamVO . setCorrectedPaper ( userExamsScoreMapper . selectCount ( correctedWrapper ) . intValue ( ) ) ; } ) ;", "gt": "page . setRecords ( list . stream ( ) . filter ( answerExamVO -> answerExamVO . getNeededMark ( ) == <NUM_LIT> ) . toList ( ) ) ;"}
{"input": "package io . github . chensheng . dddboot . excel ; import io . github . chensheng . dddboot . excel . reader . ExcelReaderFactory ; import io . github . chensheng . dddboot . excel . writer . ExcelWriterFactory ; import io . github . chensheng . dddboot . tools . collection . CollectionUtil ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; public class ExcelUtil { public static < T > List < T > read ( InputStream inputStream , Class < T > rowType ) { if ( inputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( rowType == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } return ExcelReaderFactory . read ( inputStream , rowType ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList ) { write ( outputStream , rowDataList , null ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList , InputStream templateIs ) { if ( outputStream == null ) {", "gt": "throw new IllegalArgumentException ( \"<STR_LIT>\" ) ;"}
{"input": "package ginyi . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import ginyi . system . domain . SysDept ; import ginyi . system . domain . model . dto . DeptDto ; import org . apache . ibatis . annotations . Param ;", "gt": "public interface SysDeptMapper extends BaseMapper < SysDept > {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > {", "gt": "List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ;"}
{"input": "package com . oddfar . campus . common . core . page ; import java . io . Serializable ; import java . util . List ; public class TableDataInfo implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private long total ; private List < ? > rows ; private int code ; private String msg ; public TableDataInfo ( ) { } public TableDataInfo ( List < ? > list , int total ) { this . rows = list ; this . total = total ; } public long getTotal ( ) { return total ; } public void setTotal ( long total ) { this . total = total ; } public List < ? > getRows ( ) { return rows ; } public void setRows ( List < ? > rows ) { this . rows = rows ; } public int getCode ( ) { return code ; } public void setCode ( int code ) {", "gt": "this . code = code ;"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; } private List < SecurityScheme > securitySchemes ( ) { List < SecurityScheme > apiKeyList = new ArrayList < SecurityScheme > ( ) ; apiKeyList . add ( new ApiKey ( \"<STR_LIT>\" , \"<STR_LIT>\" , In . HEADER . toValue ( ) ) ) ; return apiKeyList ; } private List < SecurityContext > securityContexts ( ) { List < SecurityContext > securityContexts = new ArrayList < > ( ) ; securityContexts . add ( SecurityContext . builder ( ) . securityReferences ( defaultAuth ( ) ) . operationSelector ( o -> o . requestMappingPattern ( ) . matches ( \"<STR_LIT>\" ) ) . build ( ) ) ; return securityContexts ; } private List < SecurityReference > defaultAuth ( ) { AuthorizationScope authorizationScope = new AuthorizationScope ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;", "gt": "AuthorizationScope [ ] authorizationScopes = new AuthorizationScope [ <NUM_LIT> ] ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; CellStyleConfig that = ( CellStyleConfig ) o ; return Objects . equals ( font , that . font ) && Objects . equals ( wrapText , that . wrapText ) && verticalAlignment == that . verticalAlignment && alignment == that . alignment && Objects . equals ( locked , that . locked ) && fillPattern == that . fillPattern && Objects . equals ( fillForegroundColor , that . fillForegroundColor ) && borderBottom == that . borderBottom && borderLeft == that . borderLeft ; } @ Override public int hashCode ( ) { return Objects . hash ( font , wrapText , verticalAlignment , alignment , locked , fillPattern , fillForegroundColor , borderBottom , borderLeft ) ; } public static class FontConfig {", "gt": "private String fontName ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) { PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] infoIds ) { return R . ok ( logininforService . deleteLogininforByIds ( infoIds ) ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) { logininforService . cleanLogininfor ( ) ; return R . ok ( ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R unlock ( @ PathVariable ( \"<STR_LIT>\" ) String userName ) {", "gt": "passwordService . clearLoginRecordCache ( userName ) ;"}
{"input": "package io . github . chensheng . dddboot . web . core ; public class CommonResponse extends Response < Object > { private static final long serialVersionUID = <NUM_LIT> ; public CommonResponse ( ) { } public CommonResponse ( String code , String msg ) { super ( code , msg ) ; } public CommonResponse ( String code , String msg , Object data ) { super ( code , msg , data ) ; } public static CommonResponse bizSuccess ( Object data ) { return new CommonResponse ( ResponseType . BIZ_SUCCESS . getCode ( ) , ResponseType . BIZ_SUCCESS . getMsg ( ) , data ) ; } public static CommonResponse bizError ( String msg ) { return new CommonResponse ( ResponseType . BIZ_ERROR . getCode ( ) , msg ) ; }", "gt": "public static CommonResponse sysError ( String msg ) {"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class CompressContentBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppMsg appMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsername ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int scene ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppInfo appInfo ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String titile ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String title ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String sourceDisplayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String des ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String url ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String action ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int showType ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private ReferMsg referMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private WeAppInfo weAppInfo ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class ReferMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private long svrId ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsr ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String displayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String content ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String msgSource ; }", "gt": "@ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class WeAppInfo {"}
{"input": "package org . example . ddduser . application . dto . command ; import lombok . Data ; import org . example . ddduser . domain . user . valueobject . Gender ; import javax . validation . constraints . NotEmpty ; @ Data public class ModifyProfileCommand { @ NotEmpty ( message = \"<STR_LIT>\" ) private String nickName ;", "gt": "private String avatar ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ; feedsVO . setHeadImgUrl ( headImgUrl ) ; } ) . collect ( Collectors . toList ( ) ) ; return new PageVO < > ( pageResult . getCurrent ( ) , pageResult . getSize ( ) , pageResult . getTotal ( ) , feedsVos ) ; } ) . orElse ( new PageVO < > ( feedsDTO . getCurrent ( ) , feedsDTO . getPageSize ( ) , <NUM_LIT> , null ) ) ; }", "gt": "private List < FeedsMediaVO > getMedia ( TimelineObjectBO timelineObjectBO ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ;", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ; String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ; String DICT_TEXT_SUFFIX = \"<STR_LIT>\" ; String DB_TYPE_MYSQL = \"<STR_LIT>\" ; String DB_TYPE_ORACLE = \"<STR_LIT>\" ; String DB_TYPE_POSTGRESQL = \"<STR_LIT>\" ;", "gt": "String DB_TYPE_SQLSERVER = \"<STR_LIT>\" ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; import java . io . UnsupportedEncodingException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; public class MD5Util { public static String md5With16 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With16 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md3 ( String b ) { try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; byte [ ] a = md . digest ( b . getBytes ( ) ) ; a = md . digest ( a ) ; a = md . digest ( a ) ; return bytesToHex ( a ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( byte [ ] input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( String input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) ; }", "gt": "catch ( NoSuchAlgorithmException e ) {"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter {", "gt": "Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ;"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ;", "gt": "String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; }", "gt": "@ Override public String supportType ( ) {"}
{"input": "package com . xcs . wx . util ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . dataformat . xml . XmlMapper ; import lombok . extern . slf4j . Slf4j ; @ Slf4j public class XmlUtil { private static final XmlMapper MAPPER = new XmlMapper ( ) ; private XmlUtil ( ) { } public static < T > T parseXml ( String content , Class < T > valueType ) { try { int xmlStart = content . indexOf ( \"<STR_LIT>\" ) ; if ( xmlStart > <NUM_LIT> ) { content = content . substring ( xmlStart ) ; } return MAPPER . readValue ( content , valueType ) ; } catch ( JsonProcessingException e ) { log . error ( \"<STR_LIT>\" , e ) ; }", "gt": "return null ;"}
{"input": "package ginyi . server . admin ; import ginyi . framework . core . config . AppConfig ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; import org . springframework . context . ConfigurableApplicationContext ; import java . net . UnknownHostException ; @ SpringBootApplication ( scanBasePackages = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" }"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . ManualScore ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import java . util . List ; public interface IManualScoreService extends IService < ManualScore > {", "gt": "Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) ;"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import java . util . List ; public interface UserService { UserInfoVO userInfo ( ) ; String avatar ( ) ;", "gt": "String nickname ( ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class RecoverContactServiceImpl implements RecoverContactService { private final FTSContactContentRepository ftsContactContentRepository ; private final ContactRepository contactRepository ;", "gt": "private final RecoverContactMapping recoverContactMapping ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigTimeoutEvent extends NacosConfigEvent { private final long timeout ; private final String errorMessage ; public NacosConfigTimeoutEvent ( ConfigService configService , String dataId , String groupId , long timeout , String errorMessage ) { super ( configService , dataId , groupId ) ; this . timeout = timeout ; this . errorMessage = errorMessage ; } public long getTimeout ( ) { return timeout ; } public String getErrorMessage ( ) {", "gt": "return errorMessage ;"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } } catch ( Exception e ) { log . error ( \"<STR_LIT>\" , delayTimes , e ) ; } } } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; }", "gt": "@ Override public List < ConfigItem > configItems ( ) {"}
{"input": "package cn . org . alan . exam . security ; import cn . org . alan . exam . model . entity . User ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . authority . SimpleGrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . List ; @ Data @ NoArgsConstructor public class SysUserDetails implements UserDetails { private List < SimpleGrantedAuthority > permissions ; private User user ; private String username ; public SysUserDetails ( User user ) { this . user = user ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return permissions ; } public void setPermissions ( List < SimpleGrantedAuthority > permissions ) { this . permissions = permissions ; } @ Override public String getPassword ( ) { String myPassword = user . getPassword ( ) ; user . setPassword ( \"<STR_LIT>\" ) ; return myPassword ; } @ Override public String getUsername ( ) { return user . getUserName ( ) ; } @ Override public boolean isAccountNonExpired ( ) { return true ; }", "gt": "@ Override public boolean isAccountNonLocked ( ) {"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ; wrapper . last ( \"<STR_LIT>\" ) ; CfgBase entity = this . getOne ( wrapper , false ) ; CfgBaseDTO dto = new CfgBaseDTO ( ) ;", "gt": "BeanMapper . copy ( entity , dto ) ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ;", "gt": "@ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController {"}
{"input": "package me . zhengjie . service ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . domain . vo . TradeVo ; import me . zhengjie . domain . AlipayConfig ; public interface AliPayService extends IService < AlipayConfig > {", "gt": "AlipayConfig find ( ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; import java . io . UnsupportedEncodingException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; public class MD5Util { public static String md5With16 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( String input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With16 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md5With32 ( byte [ ] input ) { return code ( input , <NUM_LIT> ) ; } public static String md3 ( String b ) { try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; byte [ ] a = md . digest ( b . getBytes ( ) ) ; a = md . digest ( a ) ; a = md . digest ( a ) ; return bytesToHex ( a ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( byte [ ] input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } return null ; } private static String code ( String input , int bit ) { if ( input == null ) { return null ; } try { MessageDigest md = MessageDigest . getInstance ( System . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( bit == <NUM_LIT> ) { return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) . substring ( <NUM_LIT> , <NUM_LIT> ) ; } return bytesToHex ( md . digest ( input . getBytes ( \"<STR_LIT>\" ) ) ) ; } catch ( NoSuchAlgorithmException e ) { e . printStackTrace ( ) ; } catch ( UnsupportedEncodingException e ) { e . printStackTrace ( ) ; } return null ; } private static String bytesToHex ( byte [ ] bytes ) { StringBuffer md5str = new StringBuffer ( ) ; int digital ; for ( int i = <NUM_LIT> ; i < bytes . length ; i ++ ) { digital = bytes [ i ] ; if ( digital < <NUM_LIT> ) { digital += <NUM_LIT> ; } if ( digital < <NUM_LIT> ) { md5str . append ( \"<STR_LIT>\" ) ; } md5str . append ( Integer . toHexString ( digital ) ) ; }", "gt": "return md5str . toString ( ) . toUpperCase ( ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; }", "gt": "public Map < String , CoinMatchContract > getMatchMap ( ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ;", "gt": "Integer baseRealDeleteSql ( String tableName , Long id ) ;"}
{"input": "package me . zhengjie . modules . system . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import me . zhengjie . annotation . Log ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . service . JobService ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . Set ; @ RestController @ RequiredArgsConstructor @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class JobController { private final JobService jobService ; private static final String ENTITY_NAME = \"<STR_LIT>\" ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public void exportJob ( HttpServletResponse response , JobQueryCriteria criteria ) throws IOException { jobService . download ( jobService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < PageResult < Job > > queryJob ( JobQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( jobService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > createJob ( @ Validated @ RequestBody Job resources ) { if ( resources . getId ( ) != null ) { throw new BadRequestException ( \"<STR_LIT>\" + ENTITY_NAME + \"<STR_LIT>\" ) ; } jobService . create ( resources ) ; return new ResponseEntity < > ( HttpStatus . CREATED ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > updateJob ( @ Validated ( Job . Update . class ) @ RequestBody Job resources ) {", "gt": "jobService . update ( resources ) ;"}
{"input": "package com . xcs . wx . util ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . dataformat . xml . XmlMapper ; import lombok . extern . slf4j . Slf4j ; @ Slf4j public class XmlUtil { private static final XmlMapper MAPPER = new XmlMapper ( ) ; private XmlUtil ( ) { } public static < T > T parseXml ( String content , Class < T > valueType ) { try { int xmlStart = content . indexOf ( \"<STR_LIT>\" ) ; if ( xmlStart > <NUM_LIT> ) {", "gt": "content = content . substring ( xmlStart ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; }", "gt": "@ Override public Shape shape ( ) {"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ; void update ( Job resources ) ;", "gt": "void delete ( Set < Long > ids ) ;"}
{"input": "package cn . org . alan . exam . util ; import jakarta . annotation . Resource ; import org . junit . jupiter . api . Test ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Encryption ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Signing ; import java . security . NoSuchAlgorithmException ; import java . time . LocalDate ; public class CryptoUtilsTest { @ Resource private CryptoUtils cryptoUtils ; @ Test void getDate ( ) throws Exception { String secretKey = CryptoUtils . generateSymmetricKey ( Encryption . AES_ECB_PKCS5 ) ;", "gt": "String cipherText = CryptoUtils . encryptSymmetrically ( secretKey , null , \"<STR_LIT>\" , Encryption . AES_ECB_PKCS5 ) ;"}
{"input": "package me . zhengjie . service ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . domain . vo . TradeVo ; import me . zhengjie . domain . AlipayConfig ; public interface AliPayService extends IService < AlipayConfig > { AlipayConfig find ( ) ; AlipayConfig config ( AlipayConfig alipayConfig ) ; String toPayAsPc ( AlipayConfig alipay , TradeVo trade ) throws Exception ;", "gt": "String toPayAsWeb ( AlipayConfig alipay , TradeVo trade ) throws Exception ;"}
{"input": "package com . youlai . system . enums ; import com . youlai . system . common . base . IBaseEnum ; import lombok . Getter ; @ Getter public enum DataScopeEnum implements IBaseEnum < Integer > { ALL ( <NUM_LIT> , \"<STR_LIT>\" ) , DEPT_AND_SUB ( <NUM_LIT> , \"<STR_LIT>\" ) , DEPT ( <NUM_LIT> , \"<STR_LIT>\" ) , SELF ( <NUM_LIT> , \"<STR_LIT>\" ) ; private final Integer value ; private final String label ;", "gt": "DataScopeEnum ( Integer value , String label ) {"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ; private String ftlDescription ; private String jformType ; private String tableName ;", "gt": "private String entityPackage ;"}
{"input": "package org . example . ddduser . application . service ; import org . example . ddduser . application . dto . command . ModifyAddressCommand ; import org . example . ddduser . application . dto . command . ModifyPasswordCommand ; import org . example . ddduser . application . dto . command . ModifyProfileCommand ; import org . example . ddduser . application . dto . command . UserRegisterCommand ; public interface UserCommandService { void register ( UserRegisterCommand command ) ; void modifyProfile ( ModifyProfileCommand command ) ;", "gt": "void modifyPassword ( ModifyPasswordCommand command ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ;", "gt": "private Integer radioCount ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ; @ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private Long desFormId ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String desFormCode ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String routeName ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String routePath ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) { return getApplicationContext ( ) . getBean ( clazz ) ; }", "gt": "public static < T > T getBean ( String name , Class < T > clazz ) {"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import java . util . List ; public interface UserService { UserInfoVO userInfo ( ) ; String avatar ( ) ; String nickname ( ) ; List < UserVO > users ( ) ; void switchUser ( String wxId ) ; String currentUser ( ) ; void saveUser ( UserBO userBO ) ;", "gt": "String getBasePath ( String wxId ) ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ;", "gt": "void truncateResource ( ) ;"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } } jsonGenerator . writeObject ( map ) ; } public Object encrypt ( String key , Object val ) { if ( ! ( val instanceof String ) ) { return val ; } String text = String . valueOf ( val ) ; if ( StringUtils . isBlank ( text ) ) { return \"<STR_LIT>\" ; } if ( ! keys . contains ( key ) ) { return text ; } int length = text . length ( ) ; if ( length < <NUM_LIT> ) { return \"<STR_LIT>\" ; } int hide = length / <NUM_LIT> ; int start = hide / <NUM_LIT> ;", "gt": "int end = start + hide ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) { CertificateUser certificateUser = new CertificateUser ( ) ; certificateUser . setUserId ( correctAnswerFrom . getUserId ( ) ) ; certificateUser . setExamId ( correctAnswerFrom . getExamId ( ) ) ; certificateUser . setCode ( ClassTokenGenerator . generateClassToken ( <NUM_LIT> ) ) ; certificateUser . setCertificateId ( exam . getCertificateId ( ) ) ; certificateUserMapper . insert ( certificateUser ) ; } }", "gt": "return Result . success ( \"<STR_LIT>\" ) ;"}
{"input": "package cn . org . alan . exam . model . entity ; import com . alibaba . druid . sql . dialect . mysql . ast . FullTextType ; import com . baomidou . mybatisplus . annotation . * ; import java . io . Serializable ; import java . time . LocalDateTime ; @ TableName ( \"<STR_LIT>\" ) public class User implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Integer id ; private String userName ; private String realName ; @ TableField ( fill = FieldFill . INSERT ) private String password ; private String avatar ; @ TableField ( fill = FieldFill . INSERT ) private Integer roleId ; private Integer gradeId ; @ TableField ( fill = FieldFill . INSERT ) private LocalDateTime createTime ; private Integer status ; private Integer isDeleted ; public Integer getIsDeleted ( ) { return isDeleted ; } public void setIsDeleted ( Integer isDeleted ) { this . isDeleted = isDeleted ; } public Integer getId ( ) { return id ; } public void setId ( Integer id ) { this . id = id ; } public String getUserName ( ) { return userName ; } public void setUserName ( String userName ) { this . userName = userName ; } public String getRealName ( ) { return realName ; } public void setRealName ( String realName ) { this . realName = realName ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getAvatar ( ) { return avatar ; } public void setAvatar ( String avatar ) { this . avatar = avatar ; } public Integer getRoleId ( ) { return roleId ; } public void setRoleId ( Integer roleId ) { this . roleId = roleId ; } public Integer getGradeId ( ) { return gradeId ; } public void setGradeId ( Integer gradeId ) { this . gradeId = gradeId ; } public LocalDateTime getCreateTime ( ) { return createTime ; }", "gt": "public void setCreateTime ( LocalDateTime createTime ) {"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Getter ; import lombok . Setter ; import java . util . List ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public class DictPageVO { @ Schema ( description = \"<STR_LIT>\" ) private Long id ; @ Schema ( description = \"<STR_LIT>\" ) private String name ; @ Schema ( description = \"<STR_LIT>\" ) private String code ; @ Schema ( description = \"<STR_LIT>\" ) private Integer status ; @ Schema ( description = \"<STR_LIT>\" ) private List < DictItem > dictItems ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public static class DictItem { @ Schema ( description = \"<STR_LIT>\" ) private Long id ; @ Schema ( description = \"<STR_LIT>\" ) private String name ; @ Schema ( description = \"<STR_LIT>\" ) private String value ; @ Schema ( description = \"<STR_LIT>\" ) private Integer sort ;", "gt": "@ Schema ( description = \"<STR_LIT>\" ) private Integer status ;"}
{"input": "package com . yf . system . modules . depart . dto . request ; import com . fasterxml . jackson . annotation . JsonIgnore ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DepartQueryReqDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String parentId ; @ JsonIgnore private String deptCodes ;", "gt": "@ JsonIgnore private String likeCode ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import io . github . chensheng . dddboot . tools . number . RandomUtil ; import org . apache . commons . lang3 . Validate ; public class Sampler { private static final Double ALWAYS = Double . valueOf ( <NUM_LIT> ) ; private static final Double NEVER = Double . valueOf ( <NUM_LIT> ) ; private double threshold ; protected Sampler ( ) { } protected Sampler ( double selectPercent ) { Validate . isTrue ( ( selectPercent >= <NUM_LIT> ) && ( selectPercent <= <NUM_LIT> ) , \"<STR_LIT>\" + selectPercent ) ; this . threshold = selectPercent / <NUM_LIT> ; } public static Sampler create ( Double selectPercent ) { if ( selectPercent . equals ( ALWAYS ) ) { return new AlwaysSampler ( ) ; } else if ( selectPercent . equals ( NEVER ) ) { return new NeverSampler ( ) ; } else { return new Sampler ( selectPercent ) ; } }", "gt": "public boolean select ( ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ;", "gt": "Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { postService . removeDeptByIds ( ids ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < PostVo > > list ( @ RequestBody PostDto postDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < PostVo > list = postService . list ( postDto , page , pageSize ) ;", "gt": "return CommonResult . success ( list ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < ConfigItem > ( ) ; ConfigItem configStart = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_START_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ; configItemList . add ( configStart ) ;", "gt": "ConfigItem configEnd = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_END_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ; private String methodName ; @ TableField ( exist = false ) private String modular_code ; private String modularName ; private String url ; private String httpMethod ; private Integer resourceBizType ;", "gt": "private String requiredPermissionFlag ;"}
{"input": "package com . youlai . system . enums ; import com . youlai . system . common . base . IBaseEnum ; import lombok . Getter ; @ Getter public enum DataScopeEnum implements IBaseEnum < Integer > { ALL ( <NUM_LIT> , \"<STR_LIT>\" ) , DEPT_AND_SUB ( <NUM_LIT> , \"<STR_LIT>\" ) , DEPT ( <NUM_LIT> , \"<STR_LIT>\" ) , SELF ( <NUM_LIT> , \"<STR_LIT>\" ) ; private final Integer value ; private final String label ; DataScopeEnum ( Integer value , String label ) { this . value = value ;", "gt": "this . label = label ;"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ; FileInputStream in = null ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; int len ; try {", "gt": "digest = MessageDigest . getInstance ( \"<STR_LIT>\" ) ;"}
{"input": "package top . kangert . kspider . websocket ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . http . server . ServerHttpRequest ; import org . springframework . http . server . ServerHttpResponse ; import org . springframework . http . server . ServletServerHttpRequest ; import org . springframework . web . socket . WebSocketHandler ; import org . springframework . web . socket . server . HandshakeInterceptor ; import cn . hutool . core . util . StrUtil ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; public class WebSocketEditorInterceptor implements HandshakeInterceptor { private static final String TOKEN_PARAMETER = \"<STR_LIT>\" ; @ Autowired private HttpServletRequest request ; public WebSocketEditorInterceptor ( ) { } @ Override public boolean beforeHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Map < String , Object > attributes ) throws Exception { String sessionToken = ( String ) request . getSession ( ) . getAttribute ( TOKEN_PARAMETER ) ; if ( req instanceof ServletServerHttpRequest ) { ServletServerHttpRequest serverRequest = ( ServletServerHttpRequest ) req ; String token = serverRequest . getServletRequest ( ) . getParameter ( TOKEN_PARAMETER ) ; if ( StrUtil . isBlank ( token ) ) { return false ; } else if ( StrUtil . equals ( sessionToken , token ) ) { return true ; } else { return false ; } } return true ; }", "gt": "@ Override public void afterHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Exception e ) {"}
{"input": "package me . zhengjie . exception ; public class BadConfigurationException extends RuntimeException { public BadConfigurationException ( ) { super ( ) ; } public BadConfigurationException ( String message ) { super ( message ) ; } public BadConfigurationException ( String message , Throwable cause ) { super ( message , cause ) ; } public BadConfigurationException ( Throwable cause ) { super ( cause ) ; }", "gt": "protected BadConfigurationException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) {"}
{"input": "package cn . org . alan . exam . common . aop ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . ProceedingJoinPoint ; import org . aspectj . lang . Signature ; import org . aspectj . lang . annotation . Around ; import org . aspectj . lang . annotation . Aspect ; import org . aspectj . lang . annotation . Before ; import org . aspectj . lang . annotation . Pointcut ; import org . springframework . stereotype . Component ; import cn . hutool . core . util . RandomUtil ; import com . alibaba . fastjson . JSONObject ; import com . alibaba . fastjson . support . spring . PropertyPreFilters ; import jakarta . servlet . ServletRequest ; import jakarta . servlet . ServletResponse ; import jakarta . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . slf4j . MDC ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import org . springframework . web . multipart . MultipartFile ; @ Aspect @ Component public class LogAsPect { private final static Logger LOG = LoggerFactory . getLogger ( LogAsPect . class ) ; @ Pointcut ( \"<STR_LIT>\" ) public void controllerPointcut ( ) { } @ Before ( \"<STR_LIT>\" ) public void doBefore ( JoinPoint joinPoint ) throws Throwable { ServletRequestAttributes attributes = ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ; HttpServletRequest request = attributes . getRequest ( ) ; Signature signature = joinPoint . getSignature ( ) ; String name = signature . getName ( ) ; LOG . info ( \"<STR_LIT>\" ) ; LOG . info ( \"<STR_LIT>\" , request . getRequestURL ( ) . toString ( ) , request . getMethod ( ) ) ; LOG . info ( \"<STR_LIT>\" , signature . getDeclaringTypeName ( ) , name ) ; LOG . info ( \"<STR_LIT>\" , request . getRemoteAddr ( ) ) ; Object [ ] args = joinPoint . getArgs ( ) ; Object [ ] arguments = new Object [ args . length ] ;", "gt": "for ( int i = <NUM_LIT> ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) { return administratorPhoneCode ; } public void setAdministratorPhoneCode ( String administratorPhoneCode ) { CoinhouseConfig . administratorPhoneCode = administratorPhoneCode ; } public static String getAdministratorPhone ( ) { return administratorPhone ; } public void setAdministratorPhone ( String administratorPhone ) { CoinhouseConfig . administratorPhone = administratorPhone ; } public static String getAdministratorEmail ( ) { return administratorEmail ; } public void setAdministratorEmail ( String administratorEmail ) { CoinhouseConfig . administratorEmail = administratorEmail ; } public static String getMarketJysName ( ) { return marketJysName ; } public void setMarketJysName ( String marketJysName ) { CoinhouseConfig . marketJysName = marketJysName ; } public static String getApiKey ( ) { return apiKey ; } public void setApiKey ( String apiKey ) { CoinhouseConfig . apiKey = apiKey ; } public static String getApiSecret ( ) { return apiSecret ; } public void setApiSecret ( String apiSecret ) { CoinhouseConfig . apiSecret = apiSecret ; } public static String getApiBaseurl ( ) { return apiBaseurl ; } public void setApiBaseurl ( String apiBaseurl ) { CoinhouseConfig . apiBaseurl = apiBaseurl ; } public static String getRemindPhoneCode ( ) { return remindPhoneCode ; } public void setRemindPhoneCode ( String remindPhoneCode ) { CoinhouseConfig . remindPhoneCode = remindPhoneCode ; } public static String getRemindPhone ( ) {", "gt": "return remindPhone ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) { this . amount = amount ; } public String getUnit ( ) { return unit ; }", "gt": "public void setUnit ( String unit ) {"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; @ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController {", "gt": "@ Resource private IVerifyService verifyService ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ; entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void enable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ; entity . enable ( ) ;", "gt": "exampleRepository . save ( entity ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ; import org . springframework . core . type . AnnotationMetadata ; @ Configuration public class NacosConfigBootBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar , BeanFactoryAware { @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { DefaultListableBeanFactory defaultListableBeanFactory = ( DefaultListableBeanFactory ) beanFactory ;", "gt": "BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( NacosBootConfigurationPropertiesBinder . class ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ; private Integer saqCount ; private Integer saqScore ; @ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime startTime ; @ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime endTime ;", "gt": "@ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime createTime ;"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; } public WordExportException ( String msg ) { super ( msg ) ; }", "gt": "public WordExportException ( WordExportEnum exception ) {"}
{"input": "package top . kangert . kspider . io ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class Line { private long from ; private String text ; private long to ; public Line ( long from , String text , long to ) {", "gt": "this . from = from ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ;", "gt": "resources . setId ( dictDetail . getId ( ) ) ;"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class } ) public void response ( HttpServletResponse response , Result result ) { String s = objectMapper . writeValueAsString ( result ) ; response . setCharacterEncoding ( \"<STR_LIT>\" ) ;", "gt": "response . setContentType ( \"<STR_LIT>\" ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util . parse ; import com . alibaba . nacos . api . config . ConfigType ; import io . github . chensheng . dddboot . nacos . spring . util . AbstractConfigParse ; import org . springframework . util . StringUtils ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import javax . xml . parsers . DocumentBuilderFactory ; import java . io . ByteArrayInputStream ; import java . util . LinkedHashMap ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; public class DefaultXmlConfigParse extends AbstractConfigParse { private DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; @ Override public Map < String , Object > parse ( String configText ) { Map < String , Object > properties = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; try { Document document = factory . newDocumentBuilder ( ) . parse ( new ByteArrayInputStream ( configText . getBytes ( \"<STR_LIT>\" ) ) ) ; Element root = document . getDocumentElement ( ) ; Map < String , Object > map = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; recursionXmlToMap ( map , root ) ; mapToProperties ( \"<STR_LIT>\" , properties , map ) ; } catch ( Exception e ) { throw new ConfigParseException ( e ) ; } return properties ; } private void recursionXmlToMap ( Map < String , Object > outMap , Element element ) { NodeList nodeList = element . getChildNodes ( ) ; String name = element . getNodeName ( ) ; if ( nodeList . getLength ( ) == <NUM_LIT> && ! nodeList . item ( <NUM_LIT> ) . hasChildNodes ( ) ) { addData ( outMap , name , element . getTextContent ( ) ) ; } else { Map < String , Object > innerMap = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; int length = nodeList . getLength ( ) ; for ( int i = <NUM_LIT> ; i < length ; i ++ ) { Node node = nodeList . item ( i ) ; if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { Element tElement = ( Element ) node ; recursionXmlToMap ( innerMap , tElement ) ; } } addData ( outMap , name , innerMap ) ; } } private void addData ( Map < String , Object > map , String key , Object data ) { if ( map . containsKey ( key ) ) { if ( map . get ( key ) instanceof List ) { ( ( List ) map . get ( key ) ) . add ( data ) ; } else { List < Object > list = new LinkedList < Object > ( ) ; list . add ( map . get ( key ) ) ; map . put ( key , list ) ; } } else { map . put ( key , data ) ; } } private void mapToProperties ( String prefixName , Map < String , Object > properties , Object data ) { if ( data instanceof List ) { List list = ( List ) data ; for ( int i = <NUM_LIT> ; i < list . size ( ) ;", "gt": "i ++ ) {"}
{"input": "package cn . org . alan . exam . util ; import jakarta . annotation . Resource ; import org . junit . jupiter . api . Test ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Encryption ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Signing ; import java . security . NoSuchAlgorithmException ; import java . time . LocalDate ; public class CryptoUtilsTest { @ Resource private CryptoUtils cryptoUtils ;", "gt": "@ Test void getDate ( ) throws Exception {"}
{"input": "package ginyi . server . admin ; import ginyi . framework . core . config . AppConfig ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; import org . springframework . context . ConfigurableApplicationContext ; import java . net . UnknownHostException ; @ SpringBootApplication ( scanBasePackages = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" }", "gt": ") @ MapperScan ( {"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) {", "gt": "return administratorPhoneCode ;"}
{"input": "package com . oddfar . campus . common . annotation ; import java . lang . annotation . Documented ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ;", "gt": "import java . lang . annotation . Target ;"}
{"input": "package cn . org . alan . exam . security ; import cn . org . alan . exam . model . entity . User ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . authority . SimpleGrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . List ; @ Data @ NoArgsConstructor public class SysUserDetails implements UserDetails { private List < SimpleGrantedAuthority > permissions ; private User user ; private String username ; public SysUserDetails ( User user ) { this . user = user ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return permissions ; } public void setPermissions ( List < SimpleGrantedAuthority > permissions ) { this . permissions = permissions ; } @ Override public String getPassword ( ) { String myPassword = user . getPassword ( ) ; user . setPassword ( \"<STR_LIT>\" ) ; return myPassword ; }", "gt": "@ Override public String getUsername ( ) {"}
{"input": "package io . github . chensheng . dddboot . tools . base . type ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; public class Triple < L , M , R > { @ Nullable private final L left ; @ Nullable private final M middle ; @ Nullable private final R right ; public Triple ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) { this . left = left ; this . middle = middle ; this . right = right ; } @ Nullable public L getLeft ( ) { return left ; } @ Nullable public M getMiddle ( ) { return middle ; } @ Nullable public R getRight ( ) { return right ; } @ Override public int hashCode ( ) { final int prime = <NUM_LIT> ; int result = <NUM_LIT> ; result = prime * result + ( ( left == null ) ? <NUM_LIT> : left . hashCode ( ) ) ; result = prime * result + ( ( middle == null ) ? <NUM_LIT> : middle . hashCode ( ) ) ; return prime * result + ( ( right == null ) ? <NUM_LIT> : right . hashCode ( ) ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } Triple other = ( Triple ) obj ; if ( left == null ) { if ( other . left != null ) { return false ; } } else if ( ! left . equals ( other . left ) ) { return false ; } if ( middle == null ) { if ( other . middle != null ) { return false ; } } else if ( ! middle . equals ( other . middle ) ) { return false ; } if ( right == null ) { if ( other . right != null ) { return false ; } } else if ( ! right . equals ( other . right ) ) { return false ; } return true ; } @ Override public String toString ( ) {", "gt": "return \"<STR_LIT>\" + left + \"<STR_LIT>\" + middle + \"<STR_LIT>\" + right + '<STR_LIT>' ;"}
{"input": "package top . kangert . kspider . websocket ; import top . kangert . kspider . KspiderRuntime ; import top . kangert . kspider . context . SpiderWebSocketContext ; import top . kangert . kspider . util . SpiderFlowUtils ; import org . springframework . web . socket . TextMessage ; import org . springframework . web . socket . WebSocketSession ; import org . springframework . web . socket . handler . TextWebSocketHandler ; import cn . hutool . json . JSONObject ; import cn . hutool . json . JSONUtil ; import java . util . concurrent . CompletableFuture ; public class WebSocketEditorHandler extends TextWebSocketHandler { public KspiderRuntime spider ; private SpiderWebSocketContext context ; public WebSocketEditorHandler ( KspiderRuntime spider ) { this . spider = spider ; } @ Override protected void handleTextMessage ( WebSocketSession session , TextMessage message ) { JSONObject event = JSONUtil . parseObj ( message . getPayload ( ) ) ; String eventType = event . getStr ( \"<STR_LIT>\" ) ; boolean isDebug = WebSocketEvent . DEBUG_EVENT_TYPE . equalsIgnoreCase ( eventType ) ; if ( WebSocketEvent . TEST_EVENT_TYPE . equalsIgnoreCase ( eventType ) || isDebug ) { context = new SpiderWebSocketContext ( session ) ; context . setDebug ( isDebug ) ; context . setRunning ( true ) ; CompletableFuture . runAsync ( ( ) -> { String json = event . getStr ( \"<STR_LIT>\" ) ; if ( json != null ) { try { spider . runWithTest ( SpiderFlowUtils . parseJsonToSpiderNode ( json ) , context ) ; } catch ( Exception e ) { context . write ( new WebSocketEvent < > ( WebSocketEvent . ERROR_EVENT_TYPE , e . getMessage ( ) ) ) ; } context . write ( new WebSocketEvent < > ( WebSocketEvent . FINISH_EVENT_TYPE , null ) ) ; } else {", "gt": "context . write ( new WebSocketEvent < > ( WebSocketEvent . ERROR_EVENT_TYPE , \"<STR_LIT>\" ) ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ; public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) { NacosConfigProperties nacosConfigProperties = new NacosConfigProperties ( ) ;", "gt": "Binder binder = Binder . get ( environment ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ;", "gt": "private Integer saqCount ;"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; }", "gt": "private List < SecurityScheme > securitySchemes ( ) {"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class } ) public void response ( HttpServletResponse response , Result result ) { String s = objectMapper . writeValueAsString ( result ) ;", "gt": "response . setCharacterEncoding ( \"<STR_LIT>\" ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ; private String methodName ; @ TableField ( exist = false ) private String modular_code ; private String modularName ; private String url ; private String httpMethod ;", "gt": "private Integer resourceBizType ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; }", "gt": "public String getTableName ( ) {"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ;", "gt": "private Integer radioScore ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ;", "gt": "private String methodName ;"}
{"input": "package ginyi . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import ginyi . system . domain . SysDept ; import ginyi . system . domain . model . dto . DeptDto ; import org . apache . ibatis . annotations . Param ; public interface SysDeptMapper extends BaseMapper < SysDept > { public IPage < SysDept > list ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto , Page page ) ; public void insertDept ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto ) ; public void updateDept ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto ) ;", "gt": "public void updateDeptStatus ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util . parse ; import com . alibaba . nacos . api . config . ConfigType ; import io . github . chensheng . dddboot . nacos . spring . util . AbstractConfigParse ; import org . springframework . util . StringUtils ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import javax . xml . parsers . DocumentBuilderFactory ; import java . io . ByteArrayInputStream ; import java . util . LinkedHashMap ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; public class DefaultXmlConfigParse extends AbstractConfigParse { private DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; @ Override public Map < String , Object > parse ( String configText ) { Map < String , Object > properties = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; try { Document document = factory . newDocumentBuilder ( ) . parse ( new ByteArrayInputStream ( configText . getBytes ( \"<STR_LIT>\" ) ) ) ; Element root = document . getDocumentElement ( ) ; Map < String , Object > map = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; recursionXmlToMap ( map , root ) ; mapToProperties ( \"<STR_LIT>\" , properties , map ) ; } catch ( Exception e ) { throw new ConfigParseException ( e ) ; } return properties ; } private void recursionXmlToMap ( Map < String , Object > outMap , Element element ) { NodeList nodeList = element . getChildNodes ( ) ; String name = element . getNodeName ( ) ; if ( nodeList . getLength ( ) == <NUM_LIT> && ! nodeList . item ( <NUM_LIT> ) . hasChildNodes ( ) ) { addData ( outMap , name , element . getTextContent ( ) ) ; } else { Map < String , Object > innerMap = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; int length = nodeList . getLength ( ) ; for ( int i = <NUM_LIT> ; i < length ; i ++ ) { Node node = nodeList . item ( i ) ; if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { Element tElement = ( Element ) node ; recursionXmlToMap ( innerMap , tElement ) ; } } addData ( outMap , name , innerMap ) ; } } private void addData ( Map < String , Object > map , String key , Object data ) { if ( map . containsKey ( key ) ) { if ( map . get ( key ) instanceof List ) { ( ( List ) map . get ( key ) ) . add ( data ) ; } else { List < Object > list = new LinkedList < Object > ( ) ; list . add ( map . get ( key ) ) ; map . put ( key , list ) ; } } else { map . put ( key , data ) ; } } private void mapToProperties ( String prefixName , Map < String , Object > properties , Object data ) { if ( data instanceof List ) { List list = ( List ) data ; for ( int i = <NUM_LIT> ; i < list . size ( ) ; i ++ ) { int lastIndex = prefixName . lastIndexOf ( '<STR_LIT>' ) ; String preName = prefixName . substring ( <NUM_LIT> , lastIndex ) ; String lastName = prefixName . substring ( lastIndex ) ; mapToProperties ( preName + \"<STR_LIT>\" + i + \"<STR_LIT>\" , properties , list . get ( i ) ) ; } } else if ( data instanceof Map ) { Map < String , Object > map = ( Map < String , Object > ) data ;", "gt": "for ( Map . Entry < String , Object > entry : map . entrySet ( ) ) {"}
{"input": "package cn . org . alan . exam . model . vo ; import cn . org . alan . exam . model . entity . Option ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; import java . util . List ; @ Data public class QuestionVO { private Integer id ; private String content ; private Integer repoId ; private String image ; private String repoTitle ; private Integer quType ; private String analysis ; @ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime createTime ;", "gt": "private List < Option > options ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; @ RestController @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class SysVerifyController { @ Resource private IVerifyService verifyService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public CommonResult captcha ( ) { String img = verifyService . captcha ( ) ; HashMap < String , String > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , img ) ;", "gt": "return CommonResult . success ( map ) ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; CellStyleConfig that = ( CellStyleConfig ) o ; return Objects . equals ( font , that . font ) && Objects . equals ( wrapText , that . wrapText ) && verticalAlignment == that . verticalAlignment && alignment == that . alignment && Objects . equals ( locked , that . locked ) && fillPattern == that . fillPattern && Objects . equals ( fillForegroundColor , that . fillForegroundColor ) && borderBottom == that . borderBottom && borderLeft == that . borderLeft ; } @ Override public int hashCode ( ) { return Objects . hash ( font , wrapText , verticalAlignment , alignment , locked , fillPattern , fillForegroundColor , borderBottom , borderLeft ) ; } public static class FontConfig { private String fontName ; private short fontHeightInPoints ; private boolean bold ; public String getFontName ( ) { return fontName ; }", "gt": "public void setFontName ( String fontName ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ;", "gt": "void baseUpdateSql ( Map < String , Object > map ) ;"}
{"input": "package me . zhengjie . exception ; public class BadConfigurationException extends RuntimeException { public BadConfigurationException ( ) { super ( ) ; } public BadConfigurationException ( String message ) { super ( message ) ; } public BadConfigurationException ( String message , Throwable cause ) {", "gt": "super ( message , cause ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Sets ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; import io . github . chensheng . dddboot . tools . collection . type . ConcurrentHashSet ; import java . util . * ; public class SetUtil { public static < T > HashSet < T > newHashSet ( ) { return new HashSet < T > ( ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T > HashSet < T > newHashSet ( T ... elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSet ( Iterable < ? extends T > elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSetWithCapacity ( int expectedSize ) { return Sets . newHashSetWithExpectedSize ( expectedSize ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > TreeSet < T > newSortedSet ( ) { return new TreeSet < T > ( ) ; } public static < T > TreeSet < T > newSortedSet ( @ Nullable Comparator < ? super T > comparator ) { return Sets . newTreeSet ( comparator ) ; } public static < T > ConcurrentHashSet < T > newConcurrentHashSet ( ) { return new ConcurrentHashSet < T > ( ) ; } public static final < T > Set < T > emptySet ( ) { return Collections . emptySet ( ) ; } public static < T > Set < T > emptySetIfNull ( final Set < T > set ) { return set == null ? ( Set < T > ) Collections . EMPTY_SET : set ; } public static final < T > Set < T > singletonSet ( T o ) { return Collections . singleton ( o ) ; } public static < T > Set < T > unmodifiableSet ( Set < ? extends T > s ) { return Collections . unmodifiableSet ( s ) ; } public static < T > Set < T > newSetFromMap ( Map < T , Boolean > map ) { return Collections . newSetFromMap ( map ) ; } public static < E > Set < E > unionView ( final Set < ? extends E > set1 , final Set < ? extends E > set2 ) { return Sets . union ( set1 , set2 ) ; }", "gt": "public static < E > Set < E > intersectionView ( final Set < E > set1 , final Set < ? > set2 ) {"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; return request . getHeader ( \"<STR_LIT>\" ) ; } public static Object getBean ( String name ) {", "gt": "return getApplicationContext ( ) . getBean ( name ) ;"}
{"input": "package top . kangert . kspider . executor . function . extension ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; import top . kangert . kspider . executor . FunctionExtension ; import top . kangert . kspider . util . ExtractUtils ; import org . springframework . stereotype . Component ; import cn . hutool . json . JSONUtil ; import java . util . Objects ; @ Component public class ObjectFunctionExtension implements FunctionExtension { @ Override public Class < ? > support ( ) { return Object . class ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static String string ( Object obj ) { if ( obj instanceof String ) { return ( String ) obj ; }", "gt": "return Objects . toString ( obj ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . annotation ; import org . apache . commons . logging . Log ; import org . apache . commons . logging . LogFactory ; import org . springframework . beans . BeanUtils ; import org . springframework . beans . BeansException ; import org . springframework . beans . PropertyValues ; import org . springframework . beans . factory . * ; import org . springframework . beans . factory . annotation . AutowiredAnnotationBeanPostProcessor ; import org . springframework . beans . factory . annotation . InjectionMetadata ; import org . springframework . beans . factory . config . ConfigurableListableBeanFactory ; import org . springframework . beans . factory . config . InstantiationAwareBeanPostProcessorAdapter ; import org . springframework . beans . factory . support . MergedBeanDefinitionPostProcessor ; import org . springframework . beans . factory . support . RootBeanDefinition ; import org . springframework . context . EnvironmentAware ; import org . springframework . core . Ordered ; import org . springframework . core . PriorityOrdered ; import org . springframework . core . annotation . AnnotationAttributes ; import org . springframework . core . env . Environment ; import org . springframework . util . Assert ; import org . springframework . util . ClassUtils ; import org . springframework . util . ReflectionUtils ; import org . springframework . util . StringUtils ; import java . beans . PropertyDescriptor ; import java . lang . annotation . Annotation ; import java . lang . reflect . * ; import java . util . * ; import java . util . concurrent . ConcurrentHashMap ; import java . util . concurrent . ConcurrentMap ; import static io . github . chensheng . dddboot . nacos . spring . util . AnnotationUtils . getAnnotationAttributes ; import static java . util . Collections . unmodifiableMap ; import static org . springframework . aop . support . AopUtils . getTargetClass ; import static org . springframework . core . BridgeMethodResolver . findBridgedMethod ; import static org . springframework . core . BridgeMethodResolver . isVisibilityBridgeMethodPair ; import static org . springframework . core . GenericTypeResolver . resolveTypeArgument ; public abstract class AbstractAnnotationBeanPostProcessor extends InstantiationAwareBeanPostProcessorAdapter implements MergedBeanDefinitionPostProcessor , PriorityOrdered , BeanFactoryAware , BeanClassLoaderAware , EnvironmentAware , DisposableBean { private final static int CACHE_SIZE = Integer . getInteger ( \"<STR_LIT>\" , <NUM_LIT> ) ; private final Log logger = LogFactory . getLog ( getClass ( ) ) ; private final Class < ? extends Annotation > [ ] annotationTypes ; private final ConcurrentMap < String , AnnotatedInjectionMetadata > injectionMetadataCache = new ConcurrentHashMap < String , AnnotatedInjectionMetadata > ( CACHE_SIZE ) ; private final ConcurrentMap < String , Object > injectedObjectsCache = new ConcurrentHashMap < String , Object > ( CACHE_SIZE ) ; private ConfigurableListableBeanFactory beanFactory ; private Environment environment ; private ClassLoader classLoader ; private int order = Ordered . LOWEST_PRECEDENCE - <NUM_LIT> ; private boolean classValuesAsString = true ; private boolean nestedAnnotationsAsMap = true ; private boolean ignoreDefaultValue = true ; private boolean tryMergedAnnotation = true ; public AbstractAnnotationBeanPostProcessor ( Class < ? extends Annotation > ... annotationTypes ) { Assert . notEmpty ( annotationTypes , \"<STR_LIT>\" ) ; this . annotationTypes = annotationTypes ; } private static < T > Collection < T > combine ( Collection < ? extends T > ... elements ) { List < T > allElements = new ArrayList < T > ( ) ; for ( Collection < ? extends T > e : elements ) { allElements . addAll ( e ) ; } return allElements ; } @ Deprecated public final Class < ? extends Annotation > getAnnotationType ( ) { return annotationTypes [ <NUM_LIT> ] ; } protected final Class < ? extends Annotation > [ ] getAnnotationTypes ( ) { return annotationTypes ; } @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { Assert . isInstanceOf ( ConfigurableListableBeanFactory . class , beanFactory , \"<STR_LIT>\" ) ; this . beanFactory = ( ConfigurableListableBeanFactory ) beanFactory ; } @ Override public PropertyValues postProcessPropertyValues ( PropertyValues pvs , PropertyDescriptor [ ] pds , Object bean , String beanName ) throws BeanCreationException { InjectionMetadata metadata = findInjectionMetadata ( beanName , bean . getClass ( ) , pvs ) ; try { metadata . inject ( bean , beanName , pvs ) ; } catch ( BeanCreationException ex ) { throw ex ; } catch ( Throwable ex ) { throw new BeanCreationException ( beanName , \"<STR_LIT>\" + getAnnotationType ( ) . getSimpleName ( ) + \"<STR_LIT>\" , ex ) ; } return pvs ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > findFieldAnnotationMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > elements = new LinkedList < AnnotatedFieldElement > ( ) ; ReflectionUtils . doWithFields ( beanClass , new ReflectionUtils . FieldCallback ( ) { @ Override public void doWith ( Field field ) throws IllegalArgumentException , IllegalAccessException { for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( field , annotationType ) ; if ( attributes != null ) { if ( Modifier . isStatic ( field . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + field ) ; } return ; } elements . add ( new AnnotatedFieldElement ( field , attributes ) ) ; } } } } ) ; return elements ; } private List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > findAnnotatedMethodMetadata ( final Class < ? > beanClass ) { final List < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > elements = new LinkedList < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > ( ) ; ReflectionUtils . doWithMethods ( beanClass , new ReflectionUtils . MethodCallback ( ) { @ Override public void doWith ( Method method ) throws IllegalArgumentException , IllegalAccessException { Method bridgedMethod = findBridgedMethod ( method ) ; if ( ! isVisibilityBridgeMethodPair ( method , bridgedMethod ) ) { return ; } for ( Class < ? extends Annotation > annotationType : getAnnotationTypes ( ) ) { AnnotationAttributes attributes = doGetAnnotationAttributes ( bridgedMethod , annotationType ) ; if ( attributes != null && method . equals ( ClassUtils . getMostSpecificMethod ( method , beanClass ) ) ) { if ( Modifier . isStatic ( method . getModifiers ( ) ) ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } return ; } if ( method . getParameterTypes ( ) . length == <NUM_LIT> ) { if ( logger . isWarnEnabled ( ) ) { logger . warn ( \"<STR_LIT>\" + annotationType . getName ( ) + \"<STR_LIT>\" + method ) ; } } PropertyDescriptor pd = BeanUtils . findPropertyForMethod ( bridgedMethod , beanClass ) ; elements . add ( new AnnotatedMethodElement ( method , pd , attributes ) ) ; } } } } ) ; return elements ; } protected AnnotationAttributes doGetAnnotationAttributes ( AnnotatedElement annotatedElement , Class < ? extends Annotation > annotationType ) { return getAnnotationAttributes ( annotatedElement , annotationType , getEnvironment ( ) , classValuesAsString , nestedAnnotationsAsMap , ignoreDefaultValue , tryMergedAnnotation ) ; } private AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata buildAnnotatedMetadata ( final Class < ? > beanClass ) { Collection < AbstractAnnotationBeanPostProcessor . AnnotatedFieldElement > fieldElements = findFieldAnnotationMetadata ( beanClass ) ; Collection < AbstractAnnotationBeanPostProcessor . AnnotatedMethodElement > methodElements = findAnnotatedMethodMetadata ( beanClass ) ; return new AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata ( beanClass , fieldElements , methodElements ) ; } private InjectionMetadata findInjectionMetadata ( String beanName , Class < ? > clazz , PropertyValues pvs ) { String cacheKey = ( StringUtils . hasLength ( beanName ) ? beanName : clazz . getName ( ) ) ; AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { synchronized ( this . injectionMetadataCache ) { metadata = this . injectionMetadataCache . get ( cacheKey ) ; if ( InjectionMetadata . needsRefresh ( metadata , clazz ) ) { if ( metadata != null ) { metadata . clear ( pvs ) ; } try { metadata = buildAnnotatedMetadata ( clazz ) ; this . injectionMetadataCache . put ( cacheKey , metadata ) ; } catch ( NoClassDefFoundError err ) { throw new IllegalStateException ( \"<STR_LIT>\" + clazz . getName ( ) + \"<STR_LIT>\" , err ) ; } } } } return metadata ; } @ Override public void postProcessMergedBeanDefinition ( RootBeanDefinition beanDefinition , Class < ? > beanType , String beanName ) { if ( beanType != null ) { InjectionMetadata metadata = findInjectionMetadata ( beanName , beanType , null ) ; metadata . checkConfigMembers ( beanDefinition ) ; } } @ Override public int getOrder ( ) { return order ; } public void setOrder ( int order ) { this . order = order ; } @ Override public void destroy ( ) throws Exception { for ( Object object : injectedObjectsCache . values ( ) ) { if ( logger . isInfoEnabled ( ) ) { logger . info ( object + \"<STR_LIT>\" ) ; } if ( object instanceof DisposableBean ) { ( ( DisposableBean ) object ) . destroy ( ) ; } } injectionMetadataCache . clear ( ) ; injectedObjectsCache . clear ( ) ; if ( logger . isInfoEnabled ( ) ) { logger . info ( getClass ( ) + \"<STR_LIT>\" ) ; } } @ Override public void setBeanClassLoader ( ClassLoader classLoader ) { this . classLoader = classLoader ; } @ Override public void setEnvironment ( Environment environment ) { this . environment = environment ; } protected Environment getEnvironment ( ) { return environment ; } protected ClassLoader getClassLoader ( ) { return classLoader ; } protected ConfigurableListableBeanFactory getBeanFactory ( ) { return beanFactory ; } protected Collection < Object > getInjectedObjects ( ) { return this . injectedObjectsCache . values ( ) ; } protected Object getInjectedObject ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception { String cacheKey = buildInjectedObjectCacheKey ( attributes , bean , beanName , injectedType , injectedElement ) ; Object injectedObject = injectedObjectsCache . get ( cacheKey ) ; if ( injectedObject == null ) { injectedObject = doGetInjectedBean ( attributes , bean , beanName , injectedType , injectedElement ) ; injectedObjectsCache . putIfAbsent ( cacheKey , injectedObject ) ; } return injectedObject ; } protected abstract Object doGetInjectedBean ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) throws Exception ; protected abstract String buildInjectedObjectCacheKey ( AnnotationAttributes attributes , Object bean , String beanName , Class < ? > injectedType , InjectionMetadata . InjectedElement injectedElement ) ; protected Map < InjectionMetadata . InjectedElement , Object > getInjectedFieldObjectsMap ( ) { Map < InjectionMetadata . InjectedElement , Object > injectedElementBeanMap = new LinkedHashMap < InjectionMetadata . InjectedElement , Object > ( ) ;", "gt": "for ( AbstractAnnotationBeanPostProcessor . AnnotatedInjectionMetadata metadata : injectionMetadataCache . values ( ) ) {"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; }", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) { PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] infoIds ) { return R . ok ( logininforService . deleteLogininforByIds ( infoIds ) ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) {", "gt": "logininforService . cleanLogininfor ( ) ;"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ; import java . util . Date ; @ Data @ AllArgsConstructor @ NoArgsConstructor public class OnlineUserDto { private String userName ; private String nickName ; private String dept ; private String browser ; private String ip ; private String address ; private String key ;", "gt": "private Date loginTime ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigReceivedEvent extends NacosConfigEvent { private final String content ; private final String type ; public NacosConfigReceivedEvent ( ConfigService configService , String dataId , String groupId , String content , String type ) { super ( configService , dataId , groupId ) ; this . content = content ; this . type = type ; } public String getContent ( ) {", "gt": "return content ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) { return ajax ; } String uuid = IdUtils . simpleUUID ( ) ; String verifyKey = CacheConstants . CAPTCHA_CODE_KEY + uuid ; String capStr = null , code = null ; BufferedImage image = null ; String captchaType = ConfigExpander . getLoginCaptchaType ( ) ; if ( \"<STR_LIT>\" . equals ( captchaType ) ) { String capText = captchaProducerMath . createText ( ) ; capStr = capText . substring ( <NUM_LIT> , capText . lastIndexOf ( \"<STR_LIT>\" ) ) ; code = capText . substring ( capText . lastIndexOf ( \"<STR_LIT>\" ) + <NUM_LIT> ) ; image = captchaProducerMath . createImage ( capStr ) ; }", "gt": "else if ( \"<STR_LIT>\" . equals ( captchaType ) ) {"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ; private String icon ; private String redirect ; private String treePath ;", "gt": "private Integer keepAlive ;"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; }", "gt": "public CdpRemoteWebDriver ( URL remoteAddress , Capabilities capabilities ) {"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class } ) public void response ( HttpServletResponse response , Result result ) {", "gt": "String s = objectMapper . writeValueAsString ( result ) ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierPart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierPart ( c ) ) {", "gt": "if ( consume ) {"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import com . google . common . collect . * ; import com . google . common . util . concurrent . AtomicLongMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . IntObjectHashMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . LongObjectHashMap ; import org . apache . commons . lang3 . mutable . MutableInt ; import org . apache . commons . lang3 . mutable . MutableLong ; import java . util . Comparator ; import java . util . HashMap ; import java . util . concurrent . ConcurrentMap ; public class MoreMaps { public static < K , V > ConcurrentMap < K , V > createWeakKeyConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakKeys ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < K , V > ConcurrentMap < K , V > createWeakValueConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakValues ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < V > IntObjectHashMap < V > createPrimitiveIntKeyMap ( int initialCapacity , float loadFactor ) { return new IntObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < V > LongObjectHashMap < V > createPrimitiveLongKeyMap ( int initialCapacity , float loadFactor ) { return new LongObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableInt > createMutableIntValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableInt > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableLong > createMutableLongValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableLong > ( initialCapacity , loadFactor ) ; } public static < E > AtomicLongMap < E > createConcurrentCounterMap ( ) { return AtomicLongMap . create ( ) ; } public static < K , V > ArrayListMultimap < K , V > createListMultiValueMap ( int expectedKeys , int expectedValuesPerKey ) { return ArrayListMultimap . create ( expectedKeys , expectedValuesPerKey ) ; } public static < K , V extends Comparable > SortedSetMultimap < K , V > createSortedSetMultiValueMap ( ) { return MultimapBuilder . hashKeys ( ) . treeSetValues ( ) . build ( ) ; }", "gt": "public static < K , V > SortedSetMultimap < K , V > createSortedSetMultiValueMap ( Comparator < V > comparator ) {"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Getter ; import lombok . Setter ; import java . util . List ; @ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public class DictPageVO { @ Schema ( description = \"<STR_LIT>\" ) private Long id ; @ Schema ( description = \"<STR_LIT>\" ) private String name ; @ Schema ( description = \"<STR_LIT>\" ) private String code ; @ Schema ( description = \"<STR_LIT>\" ) private Integer status ; @ Schema ( description = \"<STR_LIT>\" ) private List < DictItem > dictItems ;", "gt": "@ Schema ( description = \"<STR_LIT>\" ) @ Getter @ Setter public static class DictItem {"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierPart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierPart ( c ) ) { if ( consume ) { index ++ ; } return true ; }", "gt": "return false ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ; List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ;", "gt": "Long duplicateCheckCountSql ( DuplicateCheckVo duplicateCheckVo ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ; import org . springframework . core . type . AnnotationMetadata ; @ Configuration public class NacosConfigBootBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar , BeanFactoryAware { @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException {", "gt": "DefaultListableBeanFactory defaultListableBeanFactory = ( DefaultListableBeanFactory ) beanFactory ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) {", "gt": "QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ;"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class }", "gt": ") public void response ( HttpServletResponse response , Result result ) {"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Repo ; import cn . org . alan . exam . model . vo . repo . RepoListVO ; import cn . org . alan . exam . model . vo . repo . RepoVO ; import cn . org . alan . exam . model . vo . exercise . ExerciseRepoVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import java . util . List ; public interface IRepoService extends IService < Repo > { Result < String > addRepo ( Repo repo ) ; Result < String > updateRepo ( Repo repo , Integer id ) ; Result < String > deleteRepoById ( Integer id ) ; Result < List < RepoListVO > > getRepoList ( String repoTitle ) ; Result < IPage < RepoVO > > pagingRepo ( Integer pageNum , Integer pageSize , String title ) ;", "gt": "Result < IPage < ExerciseRepoVO > > getRepo ( Integer pageNum , Integer pageSize , String title ) ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ;", "gt": "import org . springblade . core . mp . support . Condition ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ; feedsVO . setHeadImgUrl ( headImgUrl ) ; } ) . collect ( Collectors . toList ( ) ) ; return new PageVO < > ( pageResult . getCurrent ( ) , pageResult . getSize ( ) , pageResult . getTotal ( ) , feedsVos ) ; } ) . orElse ( new PageVO < > ( feedsDTO . getCurrent ( ) , feedsDTO . getPageSize ( ) , <NUM_LIT> , null ) ) ; } private List < FeedsMediaVO > getMedia ( TimelineObjectBO timelineObjectBO ) { List < FeedsMediaVO > feedsMediaVos = new ArrayList < > ( ) ; List < TimelineObjectBO . ContentObject . Media > mediaList = timelineObjectBO . getContentObject ( ) . getMediaList ( ) ; if ( CollUtil . isEmpty ( mediaList ) ) { return feedsMediaVos ; } for ( TimelineObjectBO . ContentObject . Media media : mediaList ) { FeedsMediaVO feedsMediaVo = new FeedsMediaVO ( ) ; feedsMediaVo . setUrl ( media . getUrl ( ) . getValue ( ) ) ; feedsMediaVo . setThumb ( media . getThumb ( ) . getValue ( ) ) ; feedsMediaVos . add ( feedsMediaVo ) ; } return feedsMediaVos ; } private FeedsLocationVO getLocation ( TimelineObjectBO timelineObjectBO ) { TimelineObjectBO . Location location = timelineObjectBO . getLocation ( ) ; if ( ObjUtil . isNotEmpty ( location ) ) { FeedsLocationVO feedsLocationVO = new FeedsLocationVO ( ) ; feedsLocationVO . setCity ( location . getCity ( ) ) ; feedsLocationVO . setPoiAddress ( location . getPoiAddress ( ) ) ; feedsLocationVO . setPoiClassifyId ( location . getPoiClassifyId ( ) ) ; feedsLocationVO . setPoiName ( location . getPoiName ( ) ) ; feedsLocationVO . setPoiClassifyType ( location . getPoiClassifyType ( ) ) ; return feedsLocationVO ; } return null ; } private TimelineObjectBO parseXmlToObj ( String xml ) { try { xml = xml . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; xml = xml . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; return XmlUtil . parseXml ( xml , TimelineObjectBO . class ) ; }", "gt": "catch ( Exception e ) {"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; } public CdpRemoteWebDriver ( URL remoteAddress , Capabilities capabilities ) { super ( ( CommandExecutor ) ( new HttpCommandExecutor ( ImmutableMap . copyOf ( CHROME_COMMAND_NAME_TO_URL ) , remoteAddress ) ) , capabilities ) ; } public Map < String , Object > executeCdpCommand ( String commandName , Map < String , Object > parameters ) {", "gt": "Objects . requireNonNull ( commandName , \"<STR_LIT>\" ) ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ; private String methodName ; @ TableField ( exist = false ) private String modular_code ; private String modularName ;", "gt": "private String url ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ;", "gt": "@ Data public class CoinMatchXhExchange {"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ; private String icon ; private String redirect ; private String treePath ; private Integer keepAlive ; private Integer alwaysShow ; @ TableField ( updateStrategy = FieldStrategy . ALWAYS ) private String params ; @ TableField ( fill = FieldFill . INSERT ) private LocalDateTime createTime ;", "gt": "@ TableField ( fill = FieldFill . INSERT_UPDATE ) private LocalDateTime updateTime ;"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ; @ TableField ( \"<STR_LIT>\" ) private String reserved2 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved3 ; @ TableField ( \"<STR_LIT>\" ) private String reserved4 ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private Integer reserved5 ;"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ; apiError . setMessage ( message ) ; return apiError ; } public static ApiError error ( Integer status , String message ) {", "gt": "ApiError apiError = new ApiError ( ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import com . google . common . util . concurrent . RateLimiter ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; public class RateLimiterUtil { public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds ) throws ReflectiveOperationException { return create ( permitsPerSecond , maxBurstSeconds , true ) ; } public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds , boolean filledWithToken ) throws ReflectiveOperationException { Class < ? > sleepingStopwatchClass = Class . forName ( \"<STR_LIT>\" ) ; Method createStopwatchMethod = sleepingStopwatchClass . getDeclaredMethod ( \"<STR_LIT>\" ) ; createStopwatchMethod . setAccessible ( true ) ; Object stopwatch = createStopwatchMethod . invoke ( null ) ; Class < ? > burstyRateLimiterClass = Class . forName ( \"<STR_LIT>\" ) ; Constructor < ? > burstyRateLimiterConstructor = burstyRateLimiterClass . getDeclaredConstructors ( ) [ <NUM_LIT> ] ; burstyRateLimiterConstructor . setAccessible ( true ) ; RateLimiter rateLimiter = ( RateLimiter ) burstyRateLimiterConstructor . newInstance ( stopwatch , maxBurstSeconds ) ; rateLimiter . setRate ( permitsPerSecond ) ; if ( filledWithToken ) { setField ( rateLimiter , \"<STR_LIT>\" , permitsPerSecond * maxBurstSeconds ) ; } return rateLimiter ; } private static boolean setField ( Object targetObject , String fieldName , Object fieldValue ) { Field field ; try { field = targetObject . getClass ( ) . getDeclaredField ( fieldName ) ; }", "gt": "catch ( NoSuchFieldException e ) {"}
{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) { List < Option > menus = menuService . listMenuOptions ( ) ; return Result . success ( menus ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < List < RouteVO > > listRoutes ( ) { Set < String > roles = SecurityUtils . getRoles ( ) ;", "gt": "List < RouteVO > routeList = menuService . listRoutes ( roles ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . utils . Func ; import java . util . List ; import java . util . Map ; import java . util . concurrent . ConcurrentHashMap ; @ Slf4j public class CoinMatchContractFactory { private ConcurrentHashMap < String , CoinMatchContract > matchMap ; public CoinMatchContractFactory ( ) { this . matchMap = new ConcurrentHashMap < > ( ) ; } public void addExchangeCoinMatch ( String symbolName , CoinMatchContract match ) { log . info ( \"<STR_LIT>\" , symbolName ) ; if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { this . matchMap . put ( symbolName , match ) ; } } public boolean containsExchangeCoinMatch ( String symbolName ) { return this . matchMap != null && this . matchMap . containsKey ( symbolName ) ; } public CoinMatchContract getExchangeCoinMatchAuto ( String symbolName , IMjkjBaseSqlService baseSqlService ) { if ( ! this . containsExchangeCoinMatch ( symbolName ) ) { CoinMatchContract match = new CoinMatchContract ( symbolName ) ; match . init ( baseSqlService ) ; this . matchMap . put ( symbolName , match ) ; } return this . matchMap . get ( symbolName ) ; } public Map < String , CoinMatchContract > getMatchMap ( ) { return this . matchMap ; } public void resetMemberForceFixed ( String memberId , String contractTypeStr , IMjkjBaseSqlService baseSqlService ) { String contractType = Func . equals ( contractTypeStr , \"<STR_LIT>\" ) ? \"<STR_LIT>\" : \"<STR_LIT>\" ; QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , memberId ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrapper . eq ( \"<STR_LIT>\" , contractType ) ; wrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractMapLogList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isNotEmpty ( contractMapLogList ) ) { return ; }", "gt": "for ( Map < String , Object > contractMap : contractMapLogList ) {"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getDateInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; }", "gt": "public String time ( Object obj ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import org . springframework . core . annotation . AnnotationUtils ; import org . springframework . core . env . PropertyResolver ; import org . springframework . util . StringUtils ; import java . lang . annotation . Annotation ; import java . util . Map ; import java . util . Properties ; public class PropertiesPlaceholderResolver { private final PropertyResolver propertyResolver ; public PropertiesPlaceholderResolver ( PropertyResolver propertyResolver ) { this . propertyResolver = propertyResolver ; } public Properties resolve ( Annotation annotation ) { Map < String , Object > attributes = AnnotationUtils . getAnnotationAttributes ( annotation ) ; return resolve ( attributes ) ; } public Properties resolve ( Map < ? , ? > properties ) { Properties resolvedProperties = new Properties ( ) ; for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) instanceof CharSequence ) { String key = String . valueOf ( entry . getKey ( ) ) ; String value = String . valueOf ( entry . getValue ( ) ) ; String resolvedValue = propertyResolver . resolvePlaceholders ( value ) ; if ( StringUtils . hasText ( resolvedValue ) ) {", "gt": "resolvedProperties . setProperty ( key , resolvedValue ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import io . github . chensheng . dddboot . tools . number . RandomUtil ; import org . apache . commons . lang3 . Validate ; public class Sampler { private static final Double ALWAYS = Double . valueOf ( <NUM_LIT> ) ; private static final Double NEVER = Double . valueOf ( <NUM_LIT> ) ; private double threshold ; protected Sampler ( ) { } protected Sampler ( double selectPercent ) { Validate . isTrue ( ( selectPercent >= <NUM_LIT> ) && ( selectPercent <= <NUM_LIT> ) , \"<STR_LIT>\" + selectPercent ) ; this . threshold = selectPercent / <NUM_LIT> ; } public static Sampler create ( Double selectPercent ) { if ( selectPercent . equals ( ALWAYS ) ) { return new AlwaysSampler ( ) ; } else if ( selectPercent . equals ( NEVER ) ) { return new NeverSampler ( ) ; } else { return new Sampler ( selectPercent ) ; } } public boolean select ( ) { return RandomUtil . threadLocalRandom ( ) . nextDouble ( ) < threshold ; }", "gt": "protected static class AlwaysSampler extends Sampler {"}
{"input": "package ginyi . framework . security . config ; import ginyi . framework . security . filter . JwtAuthenticationTokenFilter ; import ginyi . framework . security . handle . AuthenticationEntryPointImpl ; import ginyi . framework . security . handle . LogoutSuccessHandlerImpl ; import ginyi . framework . security . properties . PermitAllUrlProperties ; import org . springframework . context . annotation . Bean ; import org . springframework . http . HttpMethod ; import org . springframework . security . authentication . AuthenticationManager ; import org . springframework . security . config . annotation . authentication . builders . AuthenticationManagerBuilder ; import org . springframework . security . config . annotation . method . configuration . EnableGlobalMethodSecurity ; import org . springframework . security . config . annotation . web . builders . HttpSecurity ; import org . springframework . security . config . annotation . web . configuration . WebSecurityConfigurerAdapter ; import org . springframework . security . config . annotation . web . configurers . ExpressionUrlAuthorizationConfigurer ; import org . springframework . security . config . http . SessionCreationPolicy ; import org . springframework . security . core . userdetails . UserDetailsService ; import org . springframework . security . crypto . bcrypt . BCryptPasswordEncoder ; import org . springframework . security . web . authentication . UsernamePasswordAuthenticationFilter ; import org . springframework . security . web . authentication . logout . LogoutFilter ; import org . springframework . web . filter . CorsFilter ; import javax . annotation . Resource ; @ EnableGlobalMethodSecurity ( prePostEnabled = true , securedEnabled = true ) public class SecurityConfig extends WebSecurityConfigurerAdapter { @ Resource private UserDetailsService userDetailsService ; @ Resource private AuthenticationEntryPointImpl unauthorizedHandler ; @ Resource private LogoutSuccessHandlerImpl logoutSuccessHandler ; @ Resource private JwtAuthenticationTokenFilter authenticationTokenFilter ; @ Resource private CorsFilter corsFilter ; @ Resource private PermitAllUrlProperties permitAllUrl ; @ Bean @ Override public AuthenticationManager authenticationManagerBean ( ) throws Exception { return super . authenticationManagerBean ( ) ; } @ Override protected void configure ( HttpSecurity httpSecurity ) throws Exception { ExpressionUrlAuthorizationConfigurer < HttpSecurity > . ExpressionInterceptUrlRegistry registry = httpSecurity . authorizeRequests ( ) ;", "gt": "permitAllUrl . getUrls ( ) . forEach ( url -> registry . antMatchers ( url ) . permitAll ( ) ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) { PageResult < SysOperLogEntity > page = operLogService . selectOperLogPage ( operLog ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] operIds ) {", "gt": "return R . ok ( operLogService . deleteOperLogByIds ( operIds ) ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) { roleService . addRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult update ( @ RequestBody @ Validated ( UpdateGroup . class ) RoleDto roleDto ) { roleService . updateRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { roleService . removeByRoleId ( roleId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { roleService . removeByRoleIds ( ids ) ;", "gt": "return CommonResult . success ( ) ;"}
{"input": "package com . xcs . wx . repository . impl ; import com . baomidou . dynamic . datasource . annotation . DS ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . HardLinkImageAttribute ; import com . xcs . wx . mapper . HardLinkImageAttributeMapper ; import com . xcs . wx . repository . HardLinkImageAttributeRepository ; import org . springframework . stereotype . Repository ; @ Repository @ DS ( value = DataSourceType . HARD_LINK_IMAGE_DB ) public class HardLinkImageAttributeRepositoryImpl extends ServiceImpl < HardLinkImageAttributeMapper , HardLinkImageAttribute > implements HardLinkImageAttributeRepository {", "gt": "@ Override public String queryHardLinkImage ( byte [ ] md5 ) {"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ; @ TableField ( \"<STR_LIT>\" ) private String reserved2 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved3 ; @ TableField ( \"<STR_LIT>\" ) private String reserved4 ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved5 ; @ TableField ( \"<STR_LIT>\" ) private String reserved6 ; @ TableField ( value = \"<STR_LIT>\" , typeHandler = ByteArrayTypeHandler . class ) private byte [ ] roomData ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private Integer reserved7 ;"}
{"input": "package io . github . chensheng . dddboot . excel ; import io . github . chensheng . dddboot . excel . reader . ExcelReaderFactory ; import io . github . chensheng . dddboot . excel . writer . ExcelWriterFactory ; import io . github . chensheng . dddboot . tools . collection . CollectionUtil ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; public class ExcelUtil { public static < T > List < T > read ( InputStream inputStream , Class < T > rowType ) { if ( inputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( rowType == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } return ExcelReaderFactory . read ( inputStream , rowType ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList ) {", "gt": "write ( outputStream , rowDataList , null ) ;"}
{"input": "package top . kangert . kspider . executor . function . extension ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; import top . kangert . kspider . executor . FunctionExtension ; import top . kangert . kspider . util . ExtractUtils ; import org . springframework . stereotype . Component ; import cn . hutool . json . JSONUtil ; import java . util . Objects ; @ Component public class ObjectFunctionExtension implements FunctionExtension { @ Override public Class < ? > support ( ) { return Object . class ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static String string ( Object obj ) { if ( obj instanceof String ) { return ( String ) obj ; } return Objects . toString ( obj ) ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static Object jsonpath ( Object obj , String path ) { if ( obj instanceof String ) { return ExtractUtils . getValueByJsonPath ( JSONUtil . parse ( ( String ) obj ) , path ) ; } return ExtractUtils . getValueByJsonPath ( obj , path ) ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static Object sleep ( Object obj , int millis ) { try { Thread . sleep ( millis ) ; }", "gt": "catch ( InterruptedException ignored ) {"}
{"input": "package top . kangert . kspider . websocket ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . http . server . ServerHttpRequest ; import org . springframework . http . server . ServerHttpResponse ; import org . springframework . http . server . ServletServerHttpRequest ; import org . springframework . web . socket . WebSocketHandler ; import org . springframework . web . socket . server . HandshakeInterceptor ; import cn . hutool . core . util . StrUtil ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; public class WebSocketEditorInterceptor implements HandshakeInterceptor { private static final String TOKEN_PARAMETER = \"<STR_LIT>\" ; @ Autowired private HttpServletRequest request ; public WebSocketEditorInterceptor ( ) { } @ Override public boolean beforeHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Map < String , Object > attributes ) throws Exception { String sessionToken = ( String ) request . getSession ( ) . getAttribute ( TOKEN_PARAMETER ) ; if ( req instanceof ServletServerHttpRequest ) { ServletServerHttpRequest serverRequest = ( ServletServerHttpRequest ) req ; String token = serverRequest . getServletRequest ( ) . getParameter ( TOKEN_PARAMETER ) ; if ( StrUtil . isBlank ( token ) ) { return false ; } else if ( StrUtil . equals ( sessionToken , token ) ) {", "gt": "return true ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultJsonConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultPropertiesConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultXmlConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultYamlConfigParse ; import java . util . * ; public final class ConfigParseUtils { private static final String LINK_CHAR = \"<STR_LIT>\" ; private static Map < String , ConfigParse > DEFAULT_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; private static Map < String , Map < String , ConfigParse > > CUSTOMER_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; static { DefaultJsonConfigParse jsonConfigParse = new DefaultJsonConfigParse ( ) ; DefaultPropertiesConfigParse propertiesConfigParse = new DefaultPropertiesConfigParse ( ) ; DefaultYamlConfigParse yamlConfigParse = new DefaultYamlConfigParse ( ) ; DefaultXmlConfigParse xmlConfigParse = new DefaultXmlConfigParse ( ) ; DEFAULT_CONFIG_PARSE_MAP . put ( jsonConfigParse . processType ( ) . toLowerCase ( ) , jsonConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( propertiesConfigParse . processType ( ) . toLowerCase ( ) , propertiesConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( yamlConfigParse . processType ( ) . toLowerCase ( ) , yamlConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( xmlConfigParse . processType ( ) . toLowerCase ( ) , xmlConfigParse ) ; ServiceLoader < ConfigParse > configParses = ServiceLoader . load ( ConfigParse . class ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ConfigParse configParse : configParses ) { String type = configParse . processType ( ) . toLowerCase ( ) ; if ( ! CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { CUSTOMER_CONFIG_PARSE_MAP . put ( type , new HashMap < String , ConfigParse > ( <NUM_LIT> ) ) ; } sb . setLength ( <NUM_LIT> ) ; sb . append ( configParse . dataId ( ) ) . append ( LINK_CHAR ) . append ( configParse . group ( ) ) ; if ( LINK_CHAR . equals ( sb . toString ( ) ) ) { DEFAULT_CONFIG_PARSE_MAP . put ( type , configParse ) ; } else { CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . put ( sb . toString ( ) , configParse ) ; } } DEFAULT_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( DEFAULT_CONFIG_PARSE_MAP ) ; CUSTOMER_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( CUSTOMER_CONFIG_PARSE_MAP ) ; } public static Map < String , Object > toProperties ( final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; if ( DEFAULT_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = DEFAULT_CONFIG_PARSE_MAP . get ( type ) ;", "gt": "return configParse . parse ( context ) ;"}
{"input": "package top . kangert . kspider . websocket ; import top . kangert . kspider . KspiderRuntime ; import top . kangert . kspider . context . SpiderWebSocketContext ; import top . kangert . kspider . util . SpiderFlowUtils ; import org . springframework . web . socket . TextMessage ; import org . springframework . web . socket . WebSocketSession ; import org . springframework . web . socket . handler . TextWebSocketHandler ; import cn . hutool . json . JSONObject ; import cn . hutool . json . JSONUtil ; import java . util . concurrent . CompletableFuture ; public class WebSocketEditorHandler extends TextWebSocketHandler { public KspiderRuntime spider ; private SpiderWebSocketContext context ; public WebSocketEditorHandler ( KspiderRuntime spider ) { this . spider = spider ; } @ Override protected void handleTextMessage ( WebSocketSession session , TextMessage message ) { JSONObject event = JSONUtil . parseObj ( message . getPayload ( ) ) ; String eventType = event . getStr ( \"<STR_LIT>\" ) ; boolean isDebug = WebSocketEvent . DEBUG_EVENT_TYPE . equalsIgnoreCase ( eventType ) ; if ( WebSocketEvent . TEST_EVENT_TYPE . equalsIgnoreCase ( eventType ) || isDebug ) { context = new SpiderWebSocketContext ( session ) ; context . setDebug ( isDebug ) ; context . setRunning ( true ) ; CompletableFuture . runAsync ( ( ) -> { String json = event . getStr ( \"<STR_LIT>\" ) ; if ( json != null ) { try { spider . runWithTest ( SpiderFlowUtils . parseJsonToSpiderNode ( json ) , context ) ; } catch ( Exception e ) { context . write ( new WebSocketEvent < > ( WebSocketEvent . ERROR_EVENT_TYPE , e . getMessage ( ) ) ) ; } context . write ( new WebSocketEvent < > ( WebSocketEvent . FINISH_EVENT_TYPE , null ) ) ; } else { context . write ( new WebSocketEvent < > ( WebSocketEvent . ERROR_EVENT_TYPE , \"<STR_LIT>\" ) ) ; } context . setRunning ( false ) ; } ) ; } else if ( WebSocketEvent . STOP_EVENT_TYPE . equals ( eventType ) && context != null ) { context . setRunning ( false ) ; context . stop ( ) ; }", "gt": "else if ( WebSocketEvent . RESUME_EVENT_TYPE . equalsIgnoreCase ( eventType ) && context != null ) {"}
{"input": "package top . kangert . kspider . executor . function . extension ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; import top . kangert . kspider . executor . FunctionExtension ; import top . kangert . kspider . util . ExtractUtils ; import org . springframework . stereotype . Component ; import cn . hutool . json . JSONUtil ; import java . util . Objects ; @ Component public class ObjectFunctionExtension implements FunctionExtension { @ Override public Class < ? > support ( ) { return Object . class ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static String string ( Object obj ) { if ( obj instanceof String ) { return ( String ) obj ; } return Objects . toString ( obj ) ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static Object jsonpath ( Object obj , String path ) { if ( obj instanceof String ) { return ExtractUtils . getValueByJsonPath ( JSONUtil . parse ( ( String ) obj ) , path ) ; }", "gt": "return ExtractUtils . getValueByJsonPath ( obj , path ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class RecoverContactServiceImpl implements RecoverContactService { private final FTSContactContentRepository ftsContactContentRepository ; private final ContactRepository contactRepository ; private final RecoverContactMapping recoverContactMapping ; @ Override public List < RecoverContactVO > queryRecoverContact ( RecoverContactDTO recoverContactDTO ) { List < FTSContactContent > ftsContactContents = ftsContactContentRepository . queryContactContent ( recoverContactDTO ) ; Set < String > set = contactRepository . getContactWithMp ( ) ; return ftsContactContents . stream ( ) . filter ( ftsContent -> ! set . contains ( ftsContent . getAlias ( ) ) ) . map ( recoverContactMapping :: convert ) . collect ( Collectors . toList ( ) ) ; } @ Override public String exportRecoverContact ( ) {", "gt": "String filePath = DirUtil . getExportDir ( \"<STR_LIT>\" ) ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) {", "gt": "boolean result = userService . deleteUsers ( ids ) ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) {", "gt": "return getApplicationContext ( ) . getBean ( name ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class RecoverContactServiceImpl implements RecoverContactService {", "gt": "private final FTSContactContentRepository ftsContactContentRepository ;"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) {", "gt": "this . tableName = tableName ;"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ; String ENHANCE_VIEW = \"<STR_LIT>\" ; String ENHANCE_START = \"<STR_LIT>\" ; String ENHANCE_END = \"<STR_LIT>\" ;", "gt": "String ENHANCE_QUERYANEXPORT = \"<STR_LIT>\" ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ;", "gt": "void create ( Job resources ) ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlCData ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class VoipMsgBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private VoIPBubbleMsg voIPBubbleMsg ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class VoIPBubbleMsg {", "gt": "@ JacksonXmlCData @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String msg ;"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; } private List < SecurityScheme > securitySchemes ( ) {", "gt": "List < SecurityScheme > apiKeyList = new ArrayList < SecurityScheme > ( ) ;"}
{"input": "package org . example . api . web . example ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . dto . query . ExampleListQuery ; import org . example . application . example . dto . query . ExamplePageQuery ; import org . example . application . example . dto . result . ExampleResult ; import org . example . application . example . service . ExampleCommandService ; import org . example . application . example . service . ExampleQueryService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . validation . Valid ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class ExampleController { @ Autowired private ExampleQueryService exampleQueryService ; @ Autowired private ExampleCommandService exampleCommandService ; @ GetMapping ( \"<STR_LIT>\" ) public Page < ExampleResult > page ( @ Valid ExamplePageQuery query ) { return exampleQueryService . page ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public List < ExampleResult > list ( @ Valid ExampleListQuery query ) { return exampleQueryService . list ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public ExampleResult detail ( @ PathVariable Long id ) { return exampleQueryService . detail ( id ) ; } @ PostMapping public void create ( @ Valid @ RequestBody ExampleCreateCommand command ) { exampleCommandService . create ( command ) ; }", "gt": "@ PutMapping ( \"<STR_LIT>\" ) public void updatePassword ( @ Valid @ RequestBody ExampleUpdatePasswordCommand command ) {"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; }", "gt": "@ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) {"}
{"input": "package com . oddfar . campus . common . enums ; import lombok . Getter ; @ Getter public enum ResBizTypeEnum { BUSINESS ( <NUM_LIT> , \"<STR_LIT>\" ) , SYSTEM ( <NUM_LIT> , \"<STR_LIT>\" ) ; private final Integer code ; private final String message ;", "gt": "ResBizTypeEnum ( Integer code , String message ) {"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; }", "gt": "public WordExportException ( String msg ) {"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ; map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] {", "gt": "qiniuContent . getUrl ( ) }"}
{"input": "package com . yf . system . modules . user . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . baomidou . mybatisplus . extension . activerecord . Model ; import lombok . Data ;", "gt": "@ Data @ TableName ( \"<STR_LIT>\" ) public class SysUserRole extends Model < SysUserRole > {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ; void unBindBladeUserOauth ( Long id ) ; < T > List < Map < String , T > > getDataListByWrapper ( String tableName , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ; < T > IPage < Map < String , T > > getDataListByWrapper ( String tableName , IPage page , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ; List < String > getAllBorrowMemberId ( ) ;", "gt": "List < String > getAllContractMemberId ( ) ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ; if ( ! StringUtils . isBlank ( currentId ) ) { if ( LoginType . MOBILE . equals ( loginType ) ) { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } else { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } } SysUserBind bind = new SysUserBind ( ) ; bind . setUserId ( userId ) ; bind . setLoginType ( loginType ) ; bind . setOpenId ( openId ) ; this . save ( bind ) ; } @ Override public void delete ( List < String > ids ) {", "gt": "this . removeByIds ( ids ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; Set < Long > currentDictItemIds = currentDictItemEntities . stream ( ) . map ( SysDictItem :: getId ) . collect ( Collectors . toSet ( ) ) ; Set < Long > newAttrIds = dictItems . stream ( ) . map ( SysDictItem :: getId ) . filter ( Objects :: nonNull ) . collect ( Collectors . toSet ( ) ) ; Set < Long > idsToDelete = new HashSet < > ( currentDictItemIds ) ; idsToDelete . removeAll ( newAttrIds ) ;", "gt": "if ( ! idsToDelete . isEmpty ( ) ) {"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; import top . kangert . kspider . expression . ExpressionError ; import java . util . List ; public class TokenStream { private final List < Token > tokens ; private int index ; private final int end ; public TokenStream ( List < Token > tokens ) { this . tokens = tokens ; this . index = <NUM_LIT> ; this . end = tokens . size ( ) ; } public boolean hasMore ( ) { return index < end ; } public boolean hasNext ( ) { return index + <NUM_LIT> < end ; } public boolean hasPrev ( ) { return index > <NUM_LIT> ; } public Token consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( index ++ ) ; } public Token next ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( ++ index ) ; } public Token prev ( ) { if ( index == <NUM_LIT> ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( -- index ) ; } public Token expect ( TokenType type ) { boolean result = match ( type , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public Token expect ( String text ) { boolean result = match ( text , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public boolean match ( TokenType type , boolean consume ) { if ( index >= end ) { return false ; } if ( tokens . get ( index ) . getType ( ) == type ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean match ( String text , boolean consume ) { if ( index >= end ) { return false ; } if ( tokens . get ( index ) . getText ( ) . equals ( text ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean match ( boolean consume , TokenType ... types ) { for ( TokenType type : types ) { if ( match ( type , consume ) ) { return true ; } }", "gt": "return false ;"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ;", "gt": "private String requestIp ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import io . github . chensheng . dddboot . tools . number . RandomUtil ; import org . apache . commons . lang3 . Validate ; public class Sampler { private static final Double ALWAYS = Double . valueOf ( <NUM_LIT> ) ; private static final Double NEVER = Double . valueOf ( <NUM_LIT> ) ; private double threshold ; protected Sampler ( ) { } protected Sampler ( double selectPercent ) { Validate . isTrue ( ( selectPercent >= <NUM_LIT> ) && ( selectPercent <= <NUM_LIT> ) , \"<STR_LIT>\" + selectPercent ) ; this . threshold = selectPercent / <NUM_LIT> ; } public static Sampler create ( Double selectPercent ) { if ( selectPercent . equals ( ALWAYS ) ) { return new AlwaysSampler ( ) ; } else if ( selectPercent . equals ( NEVER ) ) { return new NeverSampler ( ) ; } else { return new Sampler ( selectPercent ) ; } } public boolean select ( ) { return RandomUtil . threadLocalRandom ( ) . nextDouble ( ) < threshold ; } protected static class AlwaysSampler extends Sampler { @ Override public boolean select ( ) { return true ; } } protected static class NeverSampler extends Sampler {", "gt": "@ Override public boolean select ( ) {"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserInfoVO > getCurrentUserInfo ( ) {", "gt": "UserInfoVO userInfoVO = userService . getCurrentUserInfo ( ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; Set < Long > currentDictItemIds = currentDictItemEntities . stream ( ) . map ( SysDictItem :: getId ) . collect ( Collectors . toSet ( ) ) ; Set < Long > newAttrIds = dictItems . stream ( ) . map ( SysDictItem :: getId ) . filter ( Objects :: nonNull ) . collect ( Collectors . toSet ( ) ) ; Set < Long > idsToDelete = new HashSet < > ( currentDictItemIds ) ; idsToDelete . removeAll ( newAttrIds ) ; if ( ! idsToDelete . isEmpty ( ) ) { dictItemService . removeByIds ( idsToDelete ) ; } for ( SysDictItem dictItem : dictItems ) { if ( dictItem . getId ( ) != null && currentDictItemIds . contains ( dictItem . getId ( ) ) ) { dictItemService . updateById ( dictItem ) ; } else { dictItem . setDictId ( id ) ; dictItemService . save ( dictItem ) ; } } } return result ; } @ Override @ Transactional public void deleteDictByIds ( String ids ) { Assert . isTrue ( StrUtil . isNotBlank ( ids ) , \"<STR_LIT>\" ) ; List < String > idList = Arrays . stream ( ids . split ( \"<STR_LIT>\" ) ) . toList ( ) ; for ( String id : idList ) { boolean result = this . removeById ( id ) ; if ( result ) {", "gt": "dictItemService . remove ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ;"}
{"input": "package me . zhengjie . modules . system . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import me . zhengjie . annotation . Log ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . service . JobService ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . Set ; @ RestController @ RequiredArgsConstructor @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class JobController { private final JobService jobService ; private static final String ENTITY_NAME = \"<STR_LIT>\" ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public void exportJob ( HttpServletResponse response , JobQueryCriteria criteria ) throws IOException { jobService . download ( jobService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < PageResult < Job > > queryJob ( JobQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( jobService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > createJob ( @ Validated @ RequestBody Job resources ) { if ( resources . getId ( ) != null ) { throw new BadRequestException ( \"<STR_LIT>\" + ENTITY_NAME + \"<STR_LIT>\" ) ; } jobService . create ( resources ) ; return new ResponseEntity < > ( HttpStatus . CREATED ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > updateJob ( @ Validated ( Job . Update . class ) @ RequestBody Job resources ) { jobService . update ( resources ) ; return new ResponseEntity < > ( HttpStatus . NO_CONTENT ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > deleteJob ( @ RequestBody Set < Long > ids ) { jobService . verification ( ids ) ;", "gt": "jobService . delete ( ids ) ;"}
{"input": "package cn . org . alan . exam . util . excel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ; @ Target ( ElementType . FIELD ) @ Retention ( RetentionPolicy . RUNTIME ) public @ interface ExcelExport { String value ( ) ;", "gt": "int sort ( ) default <NUM_LIT> ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class RecoverContactServiceImpl implements RecoverContactService { private final FTSContactContentRepository ftsContactContentRepository ; private final ContactRepository contactRepository ; private final RecoverContactMapping recoverContactMapping ; @ Override public List < RecoverContactVO > queryRecoverContact ( RecoverContactDTO recoverContactDTO ) { List < FTSContactContent > ftsContactContents = ftsContactContentRepository . queryContactContent ( recoverContactDTO ) ; Set < String > set = contactRepository . getContactWithMp ( ) ; return ftsContactContents . stream ( ) . filter ( ftsContent -> ! set . contains ( ftsContent . getAlias ( ) ) ) . map ( recoverContactMapping :: convert ) . collect ( Collectors . toList ( ) ) ; } @ Override public String exportRecoverContact ( ) { String filePath = DirUtil . getExportDir ( \"<STR_LIT>\" ) ; FileUtil . mkdir ( new File ( filePath ) . getParent ( ) ) ;", "gt": "EasyExcel . write ( filePath , RecoverContactVO . class ) . sheet ( \"<STR_LIT>\" ) . doWrite ( ( ) -> queryRecoverContact ( new RecoverContactDTO ( ) ) ) ;"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ;", "gt": "CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; } private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; nacosPropertySource . setOrigin ( metadata . getClassName ( ) ) ; } private void initOrder ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean first = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . FIRST_ATTRIBUTE_NAME ) ) ;", "gt": "String before = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . BEFORE_ATTRIBUTE_NAME ) ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; import java . util . List ;", "gt": "import java . util . Map ;"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; }", "gt": "public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) {"}
{"input": "package me . zhengjie . modules . system . rest ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import me . zhengjie . annotation . Limit ; import me . zhengjie . annotation . rest . AnonymousGetMapping ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import java . util . concurrent . atomic . AtomicInteger ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class LimitController { private static final AtomicInteger ATOMIC_INTEGER = new AtomicInteger ( ) ; @ AnonymousGetMapping @ ApiOperation ( \"<STR_LIT>\" ) @ Limit ( key = \"<STR_LIT>\" , period = <NUM_LIT> , count = <NUM_LIT> , name = \"<STR_LIT>\" , prefix = \"<STR_LIT>\" ) public int testLimit ( ) {", "gt": "return ATOMIC_INTEGER . incrementAndGet ( ) ;"}
{"input": "package ginyi . framework . security . config ; import ginyi . framework . security . filter . JwtAuthenticationTokenFilter ; import ginyi . framework . security . handle . AuthenticationEntryPointImpl ; import ginyi . framework . security . handle . LogoutSuccessHandlerImpl ; import ginyi . framework . security . properties . PermitAllUrlProperties ; import org . springframework . context . annotation . Bean ; import org . springframework . http . HttpMethod ; import org . springframework . security . authentication . AuthenticationManager ; import org . springframework . security . config . annotation . authentication . builders . AuthenticationManagerBuilder ; import org . springframework . security . config . annotation . method . configuration . EnableGlobalMethodSecurity ; import org . springframework . security . config . annotation . web . builders . HttpSecurity ; import org . springframework . security . config . annotation . web . configuration . WebSecurityConfigurerAdapter ; import org . springframework . security . config . annotation . web . configurers . ExpressionUrlAuthorizationConfigurer ; import org . springframework . security . config . http . SessionCreationPolicy ; import org . springframework . security . core . userdetails . UserDetailsService ; import org . springframework . security . crypto . bcrypt . BCryptPasswordEncoder ; import org . springframework . security . web . authentication . UsernamePasswordAuthenticationFilter ; import org . springframework . security . web . authentication . logout . LogoutFilter ; import org . springframework . web . filter . CorsFilter ; import javax . annotation . Resource ; @ EnableGlobalMethodSecurity ( prePostEnabled = true , securedEnabled = true ) public class SecurityConfig extends WebSecurityConfigurerAdapter { @ Resource private UserDetailsService userDetailsService ; @ Resource private AuthenticationEntryPointImpl unauthorizedHandler ; @ Resource private LogoutSuccessHandlerImpl logoutSuccessHandler ; @ Resource private JwtAuthenticationTokenFilter authenticationTokenFilter ;", "gt": "@ Resource private CorsFilter corsFilter ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ; feedsVO . setHeadImgUrl ( headImgUrl ) ; } ) . collect ( Collectors . toList ( ) ) ; return new PageVO < > ( pageResult . getCurrent ( ) , pageResult . getSize ( ) , pageResult . getTotal ( ) , feedsVos ) ; } ) . orElse ( new PageVO < > ( feedsDTO . getCurrent ( ) , feedsDTO . getPageSize ( ) , <NUM_LIT> , null ) ) ; } private List < FeedsMediaVO > getMedia ( TimelineObjectBO timelineObjectBO ) { List < FeedsMediaVO > feedsMediaVos = new ArrayList < > ( ) ; List < TimelineObjectBO . ContentObject . Media > mediaList = timelineObjectBO . getContentObject ( ) . getMediaList ( ) ; if ( CollUtil . isEmpty ( mediaList ) ) { return feedsMediaVos ; } for ( TimelineObjectBO . ContentObject . Media media : mediaList ) { FeedsMediaVO feedsMediaVo = new FeedsMediaVO ( ) ; feedsMediaVo . setUrl ( media . getUrl ( ) . getValue ( ) ) ; feedsMediaVo . setThumb ( media . getThumb ( ) . getValue ( ) ) ; feedsMediaVos . add ( feedsMediaVo ) ; } return feedsMediaVos ; } private FeedsLocationVO getLocation ( TimelineObjectBO timelineObjectBO ) { TimelineObjectBO . Location location = timelineObjectBO . getLocation ( ) ; if ( ObjUtil . isNotEmpty ( location ) ) { FeedsLocationVO feedsLocationVO = new FeedsLocationVO ( ) ; feedsLocationVO . setCity ( location . getCity ( ) ) ; feedsLocationVO . setPoiAddress ( location . getPoiAddress ( ) ) ; feedsLocationVO . setPoiClassifyId ( location . getPoiClassifyId ( ) ) ; feedsLocationVO . setPoiName ( location . getPoiName ( ) ) ; feedsLocationVO . setPoiClassifyType ( location . getPoiClassifyType ( ) ) ; return feedsLocationVO ; } return null ; } private TimelineObjectBO parseXmlToObj ( String xml ) { try { xml = xml . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; xml = xml . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;", "gt": "return XmlUtil . parseXml ( xml , TimelineObjectBO . class ) ;"}
{"input": "package org . example . ddduser . application . service ; import org . example . ddduser . application . dto . command . ModifyAddressCommand ; import org . example . ddduser . application . dto . command . ModifyPasswordCommand ; import org . example . ddduser . application . dto . command . ModifyProfileCommand ; import org . example . ddduser . application . dto . command . UserRegisterCommand ; public interface UserCommandService { void register ( UserRegisterCommand command ) ; void modifyProfile ( ModifyProfileCommand command ) ; void modifyPassword ( ModifyPasswordCommand command ) ;", "gt": "void modifyAddress ( ModifyAddressCommand command ) ;"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public void download ( HttpServletRequest request , HttpServletResponse response ) throws IOException { LocalConfig conf = this . getConfig ( ) ; String filePath = this . getRealPath ( conf , request . getRequestURI ( ) ) ; File file = new File ( filePath ) ;", "gt": "if ( ! file . exists ( ) ) {"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ; private String requestIp ; private String address ;", "gt": "private String browser ;"}
{"input": "package io . github . chensheng . dddboot . excel . converter ; import io . github . chensheng . dddboot . excel . core . CellValueType ; import org . apache . poi . ss . usermodel . Cell ; import org . apache . poi . ss . usermodel . CellType ; import org . apache . poi . ss . usermodel . Workbook ; import java . lang . reflect . Field ; public class IntegerConverter implements Converter { @ Override public boolean support ( Field field , CellValueType type ) { Class < ? > fieldType = field . getType ( ) ; return Integer . class == fieldType || int . class == fieldType ; } @ Override public Object fromCellContent ( String cellContent , Field field , String format , boolean use1904DateWindowing ) { try { return Integer . parseInt ( cellContent ) ; } catch ( NumberFormatException e ) { try { return ( int ) Double . parseDouble ( cellContent ) ; } catch ( Exception ex ) { return Integer . class == field . getType ( ) ? null : <NUM_LIT> ; } } } @ Override public void setCellContent ( Workbook workbook , Cell cell , Object cellValue , String format ) { Integer value = ( Integer ) cellValue ; cell . setCellType ( CellType . NUMERIC ) ;", "gt": "cell . setCellValue ( value ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Lists ; import java . util . * ; import java . util . concurrent . CopyOnWriteArrayList ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ListUtil { public static boolean isEmpty ( List < ? > list ) { return ( list == null ) || list . isEmpty ( ) ; } public static boolean isNotEmpty ( List < ? > list ) { return ( list != null ) && ! ( list . isEmpty ( ) ) ; } public static < T > T getFirst ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( <NUM_LIT> ) ; } public static < T > T getLast ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( list . size ( ) - <NUM_LIT> ) ; } @ Deprecated public static < T > ArrayList < T > newArrayList ( ) { return new ArrayList < T > ( ) ; } public static < T > ArrayList < T > newArrayList ( T ... elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayList ( Iterable < T > elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayListWithCapacity ( int initSize ) { return new ArrayList < T > ( initSize ) ; } @ Deprecated public static < T > LinkedList < T > newLinkedList ( ) { return new LinkedList < T > ( ) ; } public static < T > LinkedList < T > newLinkedList ( Iterable < ? extends T > elements ) { return Lists . newLinkedList ( elements ) ; } @ Deprecated public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( ) { return new CopyOnWriteArrayList < T > ( ) ; } public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( T ... elements ) { return new CopyOnWriteArrayList < T > ( elements ) ; } public static final < T > List < T > emptyList ( ) { return Collections . emptyList ( ) ; } public static < T > List < T > emptyListIfNull ( final List < T > list ) { return list == null ? ( List < T > ) Collections . EMPTY_LIST : list ; } public static < T > List < T > singletonList ( T o ) { return Collections . singletonList ( o ) ; } public static < T > List < T > unmodifiableList ( List < ? extends T > list ) { return Collections . unmodifiableList ( list ) ; } public static < T > List < T > synchronizedList ( List < T > list ) { return Collections . synchronizedList ( list ) ; } public static < T extends Comparable < ? super T > > void sort ( List < T > list ) { Collections . sort ( list ) ; } public static < T extends Comparable < ? super T > > void sortReverse ( List < T > list ) { Collections . sort ( list , Collections . reverseOrder ( ) ) ; } public static < T > void sort ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , c ) ; } public static < T > void sortReverse ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , Collections . reverseOrder ( c ) ) ; } public static < T > int binarySearch ( List < ? extends Comparable < ? super T > > sortedList , T key ) { return Collections . binarySearch ( sortedList , key ) ; } public static < T > int binarySearch ( List < ? extends T > sortedList , T key , Comparator < ? super T > c ) { return Collections . binarySearch ( sortedList , key , c ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list ) ; } public static void shuffle ( List < ? > list , Random rnd ) { Collections . shuffle ( list , rnd ) ; } public static < T > List < T > reverse ( final List < T > list ) { return Lists . reverse ( list ) ; } public static < T > List < List < T > > partition ( List < T > list , int size ) { return Lists . partition ( list , size ) ; } public static < T > void notNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; } } } public static < T > void uniqueNotNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; Set < T > set = new HashSet < > ( ( int ) ( list . size ( ) / <NUM_LIT> + <NUM_LIT> ) ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; continue ; } if ( set . contains ( obj ) ) { ite . remove ( ) ; continue ; } set . add ( obj ) ; } } public static < E > List < E > union ( final List < ? extends E > list1 , final List < ? extends E > list2 ) { final List < E > result = new ArrayList < E > ( list1 . size ( ) + list2 . size ( ) ) ; result . addAll ( list1 ) ; result . addAll ( list2 ) ; return result ; } public static < T > List < T > intersection ( final List < ? extends T > list1 , final List < ? extends T > list2 ) { List < ? extends T > smaller = list1 ; List < ? extends T > larger = list2 ; if ( list1 . size ( ) > list2 . size ( ) ) { smaller = list2 ; larger = list1 ; } List < T > newSmaller = new ArrayList < T > ( smaller ) ; List < T > result = new ArrayList < T > ( smaller . size ( ) ) ; for ( final T e : larger ) { if ( newSmaller . contains ( e ) ) { result . add ( e ) ; newSmaller . remove ( e ) ; } }", "gt": "return result ;"}
{"input": "package com . youlai . system . filter ; import jakarta . servlet . http . HttpServletRequest ; import lombok . extern . slf4j . Slf4j ; import org . springframework . context . annotation . Configuration ; import org . springframework . web . filter . CommonsRequestLoggingFilter ; @ Configuration @ Slf4j public class RequestLogFilter extends CommonsRequestLoggingFilter { @ Override protected boolean shouldLog ( HttpServletRequest request ) { return this . logger . isInfoEnabled ( ) ; }", "gt": "@ Override protected void beforeRequest ( HttpServletRequest request , String message ) {"}
{"input": "package com . youlai . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . model . entity . SysLog ; import com . baomidou . mybatisplus . extension . service . IService ; import com . youlai . system . model . query . LogPageQuery ; import com . youlai . system . model . vo . LogPageVO ; import com . youlai . system . model . vo . VisitStatsVO ;", "gt": "import com . youlai . system . model . vo . VisitTrendVO ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ; map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] { qiniuContent . getUrl ( ) } ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > synchronizeQiNiu ( ) { qiniuContentService . synchronize ( qiNiuConfigService . getConfig ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > downloadQiNiu ( @ PathVariable Long id ) { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContentService . download ( qiniuContentService . getById ( id ) , qiNiuConfigService . getConfig ( ) ) ) ;", "gt": "return new ResponseEntity < > ( map , HttpStatus . OK ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import com . google . common . collect . * ; import com . google . common . util . concurrent . AtomicLongMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . IntObjectHashMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . LongObjectHashMap ; import org . apache . commons . lang3 . mutable . MutableInt ; import org . apache . commons . lang3 . mutable . MutableLong ; import java . util . Comparator ; import java . util . HashMap ; import java . util . concurrent . ConcurrentMap ; public class MoreMaps { public static < K , V > ConcurrentMap < K , V > createWeakKeyConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakKeys ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < K , V > ConcurrentMap < K , V > createWeakValueConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakValues ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < V > IntObjectHashMap < V > createPrimitiveIntKeyMap ( int initialCapacity , float loadFactor ) { return new IntObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < V > LongObjectHashMap < V > createPrimitiveLongKeyMap ( int initialCapacity , float loadFactor ) { return new LongObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableInt > createMutableIntValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableInt > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableLong > createMutableLongValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableLong > ( initialCapacity , loadFactor ) ; } public static < E > AtomicLongMap < E > createConcurrentCounterMap ( ) { return AtomicLongMap . create ( ) ; }", "gt": "public static < K , V > ArrayListMultimap < K , V > createListMultiValueMap ( int expectedKeys , int expectedValuesPerKey ) {"}
{"input": "package me . zhengjie . utils . enums ; import lombok . AllArgsConstructor ; import lombok . Getter ; @ Getter @ AllArgsConstructor public enum RequestMethodEnum { GET ( \"<STR_LIT>\" ) , POST ( \"<STR_LIT>\" ) , PUT ( \"<STR_LIT>\" ) , PATCH ( \"<STR_LIT>\" ) , DELETE ( \"<STR_LIT>\" ) , ALL ( \"<STR_LIT>\" ) ; private final String type ; public static RequestMethodEnum find ( String type ) {", "gt": "for ( RequestMethodEnum value : RequestMethodEnum . values ( ) ) {"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getMessage ( ) ) ; return map ; } @ ResponseBody @ ExceptionHandler ( BaseException . class ) public Map < String , Object > handleBaseException ( BaseException e ) { log . error ( \"<STR_LIT>\" , e . getCode ( ) , e . getMessageId ( ) , e . getMessage ( ) ) ;", "gt": "Map < String , Object > map = new HashMap < > ( ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ; private Integer saqCount ;", "gt": "private Integer saqScore ;"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; } public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) { this . userId = userId ; this . deptId = deptId ; this . user = user ;", "gt": "this . permissions = permissions ;"}
{"input": "package org . example . ddduser ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; @ SpringBootApplication @ MapperScan ( \"<STR_LIT>\" ) public class Application { public static void main ( String [ ] args ) { SpringApplication app = new SpringApplication ( Application . class ) ;", "gt": "app . run ( args ) ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ; resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ; delCaches ( dictDetail ) ; } @ Override @ Cacheable ( key = \"<STR_LIT>\" ) public List < DictDetail > getDictByName ( String name ) { return dictDetailMapper . findByDictName ( name ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void delete ( Long id ) { DictDetail dictDetail = getById ( id ) ; removeById ( id ) ; delCaches ( dictDetail ) ; }", "gt": "public void delCaches ( DictDetail dictDetail ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultJsonConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultPropertiesConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultXmlConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultYamlConfigParse ; import java . util . * ; public final class ConfigParseUtils { private static final String LINK_CHAR = \"<STR_LIT>\" ; private static Map < String , ConfigParse > DEFAULT_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; private static Map < String , Map < String , ConfigParse > > CUSTOMER_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; static { DefaultJsonConfigParse jsonConfigParse = new DefaultJsonConfigParse ( ) ; DefaultPropertiesConfigParse propertiesConfigParse = new DefaultPropertiesConfigParse ( ) ; DefaultYamlConfigParse yamlConfigParse = new DefaultYamlConfigParse ( ) ; DefaultXmlConfigParse xmlConfigParse = new DefaultXmlConfigParse ( ) ; DEFAULT_CONFIG_PARSE_MAP . put ( jsonConfigParse . processType ( ) . toLowerCase ( ) , jsonConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( propertiesConfigParse . processType ( ) . toLowerCase ( ) , propertiesConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( yamlConfigParse . processType ( ) . toLowerCase ( ) , yamlConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( xmlConfigParse . processType ( ) . toLowerCase ( ) , xmlConfigParse ) ; ServiceLoader < ConfigParse > configParses = ServiceLoader . load ( ConfigParse . class ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ConfigParse configParse : configParses ) { String type = configParse . processType ( ) . toLowerCase ( ) ; if ( ! CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { CUSTOMER_CONFIG_PARSE_MAP . put ( type , new HashMap < String , ConfigParse > ( <NUM_LIT> ) ) ; } sb . setLength ( <NUM_LIT> ) ; sb . append ( configParse . dataId ( ) ) . append ( LINK_CHAR ) . append ( configParse . group ( ) ) ; if ( LINK_CHAR . equals ( sb . toString ( ) ) ) { DEFAULT_CONFIG_PARSE_MAP . put ( type , configParse ) ; } else { CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . put ( sb . toString ( ) , configParse ) ; } } DEFAULT_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( DEFAULT_CONFIG_PARSE_MAP ) ; CUSTOMER_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( CUSTOMER_CONFIG_PARSE_MAP ) ; } public static Map < String , Object > toProperties ( final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; if ( DEFAULT_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = DEFAULT_CONFIG_PARSE_MAP . get ( type ) ; return configParse . parse ( context ) ; } else { throw new UnsupportedOperationException ( \"<STR_LIT>\" + type ) ; } } public static Map < String , Object > toProperties ( final String dataId , final String group , final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ;", "gt": "String configParseKey = dataId + LINK_CHAR + group ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogLogin extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String userName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String status ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String ipaddr ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String loginLocation ;"}
{"input": "package com . youlai . system . filter ; import jakarta . servlet . http . HttpServletRequest ; import lombok . extern . slf4j . Slf4j ; import org . springframework . context . annotation . Configuration ; import org . springframework . web . filter . CommonsRequestLoggingFilter ; @ Configuration @ Slf4j public class RequestLogFilter extends CommonsRequestLoggingFilter { @ Override protected boolean shouldLog ( HttpServletRequest request ) { return this . logger . isInfoEnabled ( ) ; } @ Override protected void beforeRequest ( HttpServletRequest request , String message ) { String requestURI = request . getRequestURI ( ) ; log . info ( \"<STR_LIT>\" , requestURI ) ;", "gt": "super . beforeRequest ( request , message ) ;"}
{"input": "package com . yf . system . modules . user . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . baomidou . mybatisplus . extension . activerecord . Model ; import lombok . Data ; @ Data @ TableName ( \"<STR_LIT>\" ) public class SysUserRole extends Model < SysUserRole > { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( value = \"<STR_LIT>\" , type = IdType . ASSIGN_ID ) private String id ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private String userId ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ;", "gt": "void update ( Job resources ) ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ;", "gt": "String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultJsonConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultPropertiesConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultXmlConfigParse ; import io . github . chensheng . dddboot . nacos . spring . util . parse . DefaultYamlConfigParse ; import java . util . * ; public final class ConfigParseUtils { private static final String LINK_CHAR = \"<STR_LIT>\" ; private static Map < String , ConfigParse > DEFAULT_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; private static Map < String , Map < String , ConfigParse > > CUSTOMER_CONFIG_PARSE_MAP = new HashMap ( <NUM_LIT> ) ; static { DefaultJsonConfigParse jsonConfigParse = new DefaultJsonConfigParse ( ) ; DefaultPropertiesConfigParse propertiesConfigParse = new DefaultPropertiesConfigParse ( ) ; DefaultYamlConfigParse yamlConfigParse = new DefaultYamlConfigParse ( ) ; DefaultXmlConfigParse xmlConfigParse = new DefaultXmlConfigParse ( ) ; DEFAULT_CONFIG_PARSE_MAP . put ( jsonConfigParse . processType ( ) . toLowerCase ( ) , jsonConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( propertiesConfigParse . processType ( ) . toLowerCase ( ) , propertiesConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( yamlConfigParse . processType ( ) . toLowerCase ( ) , yamlConfigParse ) ; DEFAULT_CONFIG_PARSE_MAP . put ( xmlConfigParse . processType ( ) . toLowerCase ( ) , xmlConfigParse ) ; ServiceLoader < ConfigParse > configParses = ServiceLoader . load ( ConfigParse . class ) ; StringBuilder sb = new StringBuilder ( ) ; for ( ConfigParse configParse : configParses ) { String type = configParse . processType ( ) . toLowerCase ( ) ; if ( ! CUSTOMER_CONFIG_PARSE_MAP . containsKey ( type ) ) { CUSTOMER_CONFIG_PARSE_MAP . put ( type , new HashMap < String , ConfigParse > ( <NUM_LIT> ) ) ; } sb . setLength ( <NUM_LIT> ) ; sb . append ( configParse . dataId ( ) ) . append ( LINK_CHAR ) . append ( configParse . group ( ) ) ; if ( LINK_CHAR . equals ( sb . toString ( ) ) ) { DEFAULT_CONFIG_PARSE_MAP . put ( type , configParse ) ; } else { CUSTOMER_CONFIG_PARSE_MAP . get ( type ) . put ( sb . toString ( ) , configParse ) ; } } DEFAULT_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( DEFAULT_CONFIG_PARSE_MAP ) ; CUSTOMER_CONFIG_PARSE_MAP = Collections . unmodifiableMap ( CUSTOMER_CONFIG_PARSE_MAP ) ; } public static Map < String , Object > toProperties ( final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; } type = type . toLowerCase ( ) ; if ( DEFAULT_CONFIG_PARSE_MAP . containsKey ( type ) ) { ConfigParse configParse = DEFAULT_CONFIG_PARSE_MAP . get ( type ) ; return configParse . parse ( context ) ; } else { throw new UnsupportedOperationException ( \"<STR_LIT>\" + type ) ; } } public static Map < String , Object > toProperties ( final String dataId , final String group , final String context , String type ) { if ( context == null ) { return new LinkedHashMap < String , Object > ( ) ; }", "gt": "type = type . toLowerCase ( ) ;"}
{"input": "package com . yf . system . modules . role . dto ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleMenuDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ;"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } } jsonGenerator . writeObject ( map ) ; } public Object encrypt ( String key , Object val ) { if ( ! ( val instanceof String ) ) { return val ; } String text = String . valueOf ( val ) ; if ( StringUtils . isBlank ( text ) ) { return \"<STR_LIT>\" ; } if ( ! keys . contains ( key ) ) { return text ; } int length = text . length ( ) ; if ( length < <NUM_LIT> ) { return \"<STR_LIT>\" ; } int hide = length / <NUM_LIT> ; int start = hide / <NUM_LIT> ; int end = start + hide ; StringBuilder sb = new StringBuilder ( text . substring ( <NUM_LIT> , start ) ) ; for ( int i = <NUM_LIT> ; i < hide ; i ++ ) { sb . append ( \"<STR_LIT>\" ) ; } sb . append ( text . substring ( end ) ) ; return sb . toString ( ) ; } public static void main ( String [ ] args ) { String json = \"<STR_LIT>\" ;", "gt": "json = json . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) {", "gt": "Long userId = securityRepository . getLoginUser ( ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) { this . amount = amount ; } public String getUnit ( ) { return unit ; } public void setUnit ( String unit ) { this . unit = unit ; } public BigInteger getGasLimit ( ) { return gasLimit ; }", "gt": "public void setGasLimit ( BigInteger gasLimit ) {"}
{"input": "package com . youlai . system . config ; import io . swagger . v3 . oas . models . Components ; import io . swagger . v3 . oas . models . OpenAPI ; import io . swagger . v3 . oas . models . info . Info ; import io . swagger . v3 . oas . models . security . SecurityRequirement ; import io . swagger . v3 . oas . models . security . SecurityScheme ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springdoc . core . customizers . GlobalOpenApiCustomizer ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import org . springframework . core . env . Environment ; import org . springframework . http . HttpHeaders ; @ Configuration @ Slf4j @ RequiredArgsConstructor public class SwaggerConfig { private final Environment environment ; @ Bean public OpenAPI openApi ( ) { String appVersion = environment . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; return new OpenAPI ( ) . info ( new Info ( ) . title ( \"<STR_LIT>\" ) . version ( appVersion ) ) . components ( new Components ( ) . addSecuritySchemes ( HttpHeaders . AUTHORIZATION , new SecurityScheme ( ) . name ( HttpHeaders . AUTHORIZATION ) . type ( SecurityScheme . Type . APIKEY ) . in ( SecurityScheme . In . HEADER ) . scheme ( \"<STR_LIT>\" ) . bearerFormat ( \"<STR_LIT>\" ) ) ) ; } @ Bean public GlobalOpenApiCustomizer globalOpenApiCustomizer ( ) { return openApi -> {", "gt": "if ( openApi . getPaths ( ) != null ) {"}
{"input": "package com . oddfar . campus . framework . api . file ; import org . springframework . web . multipart . MultipartFile ; public class LocalFileOperator implements FileOperatorApi { private String currentSavePath ; public LocalFileOperator ( String currentSavePath ) {", "gt": "this . currentSavePath = currentSavePath ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ;"}
{"input": "package me . zhengjie . modules . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ;", "gt": "import java . util . List ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ; map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] { qiniuContent . getUrl ( ) } ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > synchronizeQiNiu ( ) { qiniuContentService . synchronize ( qiNiuConfigService . getConfig ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > downloadQiNiu ( @ PathVariable Long id ) { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContentService . download ( qiniuContentService . getById ( id ) , qiNiuConfigService . getConfig ( ) ) ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > deleteQiNiu ( @ PathVariable Long id ) {", "gt": "qiniuContentService . delete ( qiniuContentService . getById ( id ) , qiNiuConfigService . getConfig ( ) ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ; private int initSize ; public StringBuilderHolder ( int initSize ) { this . initSize = initSize ; } public static StringBuilder getGlobal ( ) {", "gt": "StringBuilder sb = globalStringBuilder . get ( ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; }", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = {"}
{"input": "package com . xcs . wx . service ; import com . xcs . wx . domain . vo . WeChatConfigVO ; import java . util . List ; public interface WeChatService { List < WeChatConfigVO > readWeChatConfig ( ) ; List < Integer > wechatPid ( ) ; long baseAddress ( int pid ) ; String getVersion ( int pid ) ; String getWxId ( int pid ) ;", "gt": "String getInfo ( int pid , long address ) ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) { CoinhouseConfig . firstRole = firstRole ; } public static String getSecondRole ( ) { return secondRole ; } public void setSecondRole ( String secondRole ) { CoinhouseConfig . secondRole = secondRole ; } public static String getThirdRole ( ) { return thirdRole ; } public void setThirdRole ( String thirdRole ) { CoinhouseConfig . thirdRole = thirdRole ; } public static String getGeneralRole ( ) { return generalRole ; } public void setGeneralRole ( String generalRole ) { CoinhouseConfig . generalRole = generalRole ; } public void setHuobiVolumePercent ( BigDecimal huobiVolumePercent ) { CoinhouseConfig . huobiVolumePercent = huobiVolumePercent ; } public static String getSalt ( ) { return salt ; } public void setSalt ( String salt ) { CoinhouseConfig . salt = salt ; } public static String getCustomerBladeUserId ( ) { return customerBladeUserId ; } public void setCustomerBladeUserId ( String customerBladeUserId ) { CoinhouseConfig . customerBladeUserId = customerBladeUserId ; } public static String getDefaultHeadIcon ( ) { return defaultHeadIcon ; } public void setDefaultHeadIcon ( String defaultHeadIcon ) { CoinhouseConfig . defaultHeadIcon = defaultHeadIcon ; } public static String getAdministratorPhoneCode ( ) { return administratorPhoneCode ; } public void setAdministratorPhoneCode ( String administratorPhoneCode ) { CoinhouseConfig . administratorPhoneCode = administratorPhoneCode ; } public static String getAdministratorPhone ( ) { return administratorPhone ; } public void setAdministratorPhone ( String administratorPhone ) { CoinhouseConfig . administratorPhone = administratorPhone ; } public static String getAdministratorEmail ( ) { return administratorEmail ; } public void setAdministratorEmail ( String administratorEmail ) { CoinhouseConfig . administratorEmail = administratorEmail ; } public static String getMarketJysName ( ) { return marketJysName ; } public void setMarketJysName ( String marketJysName ) { CoinhouseConfig . marketJysName = marketJysName ; } public static String getApiKey ( ) { return apiKey ; } public void setApiKey ( String apiKey ) { CoinhouseConfig . apiKey = apiKey ; } public static String getApiSecret ( ) { return apiSecret ; } public void setApiSecret ( String apiSecret ) { CoinhouseConfig . apiSecret = apiSecret ; } public static String getApiBaseurl ( ) { return apiBaseurl ; } public void setApiBaseurl ( String apiBaseurl ) { CoinhouseConfig . apiBaseurl = apiBaseurl ; } public static String getRemindPhoneCode ( ) { return remindPhoneCode ; } public void setRemindPhoneCode ( String remindPhoneCode ) { CoinhouseConfig . remindPhoneCode = remindPhoneCode ; } public static String getRemindPhone ( ) { return remindPhone ; } public void setRemindPhone ( String remindPhone ) { CoinhouseConfig . remindPhone = remindPhone ; }", "gt": "public static String getRemindEmail ( ) {"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } }", "gt": "catch ( Exception e ) {"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; } long count = this . count ( wrapper ) ;", "gt": "if ( count > <NUM_LIT> ) {"}
{"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ; save ( localStorage ) ; return localStorage ; } catch ( Exception e ) { FileUtil . del ( file ) ; throw e ; } } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( LocalStorage resources ) {", "gt": "LocalStorage localStorage = getById ( resources . getId ( ) ) ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ;", "gt": "return request . getHeader ( \"<STR_LIT>\" ) ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlCData ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ;", "gt": "@ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class VoipMsgBO {"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . ManualScore ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import java . util . List ; public interface IManualScoreService extends IService < ManualScore > { Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) ; Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) ;", "gt": "Result < IPage < AnswerExamVO > > examPage ( Integer pageNum , Integer pageSize , String examName ) ;"}
{"input": "package io . github . chensheng . dddboot . excel ; import io . github . chensheng . dddboot . excel . reader . ExcelReaderFactory ; import io . github . chensheng . dddboot . excel . writer . ExcelWriterFactory ; import io . github . chensheng . dddboot . tools . collection . CollectionUtil ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; public class ExcelUtil { public static < T > List < T > read ( InputStream inputStream , Class < T > rowType ) { if ( inputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( rowType == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } return ExcelReaderFactory . read ( inputStream , rowType ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList ) { write ( outputStream , rowDataList , null ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList , InputStream templateIs ) {", "gt": "if ( outputStream == null ) {"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Question ; import cn . org . alan . exam . model . form . question . QuestionFrom ; import cn . org . alan . exam . model . vo . QuestionVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import org . springframework . web . multipart . MultipartFile ; public interface IQuestionService extends IService < Question > { Result < String > addSingleQuestion ( QuestionFrom questionFrom ) ; Result < String > deleteBatchByIds ( String ids ) ; Result < IPage < QuestionVO > > pagingQuestion ( Integer pageNum , Integer pageSize , String content , Integer type , Integer repoId ) ; Result < QuestionVO > querySingle ( Integer id ) ;", "gt": "Result < String > updateQuestion ( QuestionFrom questionFrom ) ;"}
{"input": "package com . youlai . system . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import com . youlai . system . plugin . mybatis . annotation . DataPermission ; import com . youlai . system . model . entity . SysDept ; import org . apache . ibatis . annotations . Mapper ;", "gt": "import org . apache . ibatis . annotations . Param ;"}
{"input": "package org . example . api . web . example ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . dto . query . ExampleListQuery ; import org . example . application . example . dto . query . ExamplePageQuery ; import org . example . application . example . dto . result . ExampleResult ; import org . example . application . example . service . ExampleCommandService ; import org . example . application . example . service . ExampleQueryService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . validation . Valid ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class ExampleController { @ Autowired private ExampleQueryService exampleQueryService ; @ Autowired private ExampleCommandService exampleCommandService ; @ GetMapping ( \"<STR_LIT>\" ) public Page < ExampleResult > page ( @ Valid ExamplePageQuery query ) { return exampleQueryService . page ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public List < ExampleResult > list ( @ Valid ExampleListQuery query ) { return exampleQueryService . list ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public ExampleResult detail ( @ PathVariable Long id ) { return exampleQueryService . detail ( id ) ; } @ PostMapping public void create ( @ Valid @ RequestBody ExampleCreateCommand command ) { exampleCommandService . create ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void updatePassword ( @ Valid @ RequestBody ExampleUpdatePasswordCommand command ) {", "gt": "exampleCommandService . update ( command ) ;"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException {", "gt": "checkTimeBase ( ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) { return this . primaryKeyPolicy ; } public String getSequenceCode ( ) { return this . sequenceCode ; } public void setPrimaryKeyPolicy ( String primaryKeyPolicy ) {", "gt": "this . primaryKeyPolicy = primaryKeyPolicy ;"}
{"input": "package org . example . ddduser . application . service ; import org . example . ddduser . application . dto . command . ModifyAddressCommand ; import org . example . ddduser . application . dto . command . ModifyPasswordCommand ; import org . example . ddduser . application . dto . command . ModifyProfileCommand ; import org . example . ddduser . application . dto . command . UserRegisterCommand ; public interface UserCommandService {", "gt": "void register ( UserRegisterCommand command ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }", "gt": ") public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) {"}
{"input": "package com . yf . system . modules . role . dto ; import com . yf . base . api . annon . Dict ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; import java . util . Date ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String id ; @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private String roleName ;", "gt": "@ Dict ( dicCode = \"<STR_LIT>\" ) @ ApiModelProperty ( value = \"<STR_LIT>\" , required = true ) private Integer dataScope ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) {", "gt": "if ( this == o ) return true ;"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; } public static MatchTypeEnum getByValue ( String value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; }", "gt": "for ( MatchTypeEnum val : values ( ) ) {"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) { return toString ( false ) ; } public String toString ( boolean isSimple ) { final StringBuilder builder = new StringBuilder ( isSimple ? <NUM_LIT> : <NUM_LIT> ) ; builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) {", "gt": "builder . append ( '<STR_LIT>' ) ;"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; } public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) { this . userId = userId ; this . deptId = deptId ; this . user = user ; this . permissions = permissions ; } @ JSONField ( serialize = false ) @ Override public String getPassword ( ) { return user . getPassword ( ) ; } @ Override public String getUsername ( ) { return user . getUserName ( ) ; } @ JSONField ( serialize = false ) @ Override public boolean isAccountNonExpired ( ) { return true ; } @ JSONField ( serialize = false ) @ Override public boolean isAccountNonLocked ( ) { return true ; } @ JSONField ( serialize = false ) @ Override public boolean isCredentialsNonExpired ( ) { return true ; } @ JSONField ( serialize = false ) @ Override public boolean isEnabled ( ) { return true ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) {", "gt": "return null ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigTimeoutEvent extends NacosConfigEvent { private final long timeout ; private final String errorMessage ; public NacosConfigTimeoutEvent ( ConfigService configService , String dataId , String groupId , long timeout , String errorMessage ) { super ( configService , dataId , groupId ) ; this . timeout = timeout ; this . errorMessage = errorMessage ; }", "gt": "public long getTimeout ( ) {"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ; SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ; List < SysDictItem > toEntity ( List < DictForm . DictItem > dictFormDictItems ) ; DictForm . DictItem convertToDictFormDictItem ( SysDictItem entity ) ; List < DictForm . DictItem > convertToDictFormDictItem ( List < SysDictItem > entities ) ; @ Mappings ( { @ Mapping ( target = \"<STR_LIT>\" , source = \"<STR_LIT>\" ) , @ Mapping ( target = \"<STR_LIT>\" , source = \"<STR_LIT>\" ) } ) Option convertToOption ( SysDictItem dictItem ) ;", "gt": "List < Option > convertToOption ( List < SysDictItem > dictItems ) ;"}
{"input": "package me . zhengjie . modules . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Set ;", "gt": "@ Mapper public interface DictDetailMapper extends BaseMapper < DictDetail > {"}
{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) { List < Option > menus = menuService . listMenuOptions ( ) ; return Result . success ( menus ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < List < RouteVO > > listRoutes ( ) { Set < String > roles = SecurityUtils . getRoles ( ) ; List < RouteVO > routeList = menuService . listRoutes ( roles ) ; return Result . success ( routeList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < MenuForm > getMenuForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long id ) { MenuForm menu = menuService . getMenuForm ( id ) ; return Result . success ( menu ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result addMenu ( @ RequestBody MenuForm menuForm ) {", "gt": "boolean result = menuService . saveMenu ( menuForm ) ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ; @ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity {", "gt": "private static final long serialVersionUID = <NUM_LIT> ;"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiAlias ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String pack ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String moduleName ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String path ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiPath ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String author ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String prefix ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private Boolean cover = false ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . Repo ; import cn . org . alan . exam . model . vo . repo . RepoListVO ; import cn . org . alan . exam . model . vo . repo . RepoVO ; import cn . org . alan . exam . model . vo . exercise . ExerciseRepoVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import java . util . List ; public interface IRepoService extends IService < Repo > {", "gt": "Result < String > addRepo ( Repo repo ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; Set < Long > currentDictItemIds = currentDictItemEntities . stream ( ) . map ( SysDictItem :: getId ) . collect ( Collectors . toSet ( ) ) ; Set < Long > newAttrIds = dictItems . stream ( ) . map ( SysDictItem :: getId ) . filter ( Objects :: nonNull ) . collect ( Collectors . toSet ( ) ) ; Set < Long > idsToDelete = new HashSet < > ( currentDictItemIds ) ; idsToDelete . removeAll ( newAttrIds ) ; if ( ! idsToDelete . isEmpty ( ) ) { dictItemService . removeByIds ( idsToDelete ) ; } for ( SysDictItem dictItem : dictItems ) { if ( dictItem . getId ( ) != null && currentDictItemIds . contains ( dictItem . getId ( ) ) ) { dictItemService . updateById ( dictItem ) ; } else { dictItem . setDictId ( id ) ; dictItemService . save ( dictItem ) ; } } } return result ; } @ Override @ Transactional public void deleteDictByIds ( String ids ) { Assert . isTrue ( StrUtil . isNotBlank ( ids ) , \"<STR_LIT>\" ) ;", "gt": "List < String > idList = Arrays . stream ( ids . split ( \"<STR_LIT>\" ) ) . toList ( ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ; users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ; } return users ; } @ Override public void switchUser ( String wxId ) { FileUtil . writeString ( wxId , DirUtil . getSwitchUserDir ( ) , \"<STR_LIT>\" ) ; } @ Override public String currentUser ( ) { String switchUserDir = DirUtil . getSwitchUserDir ( ) ; if ( ! FileUtil . exist ( switchUserDir ) ) { return Optional . of ( getWxIds ( ) ) . filter ( items -> ! items . isEmpty ( ) ) . map ( items -> items . get ( <NUM_LIT> ) ) . orElse ( null ) ; } return FileUtil . readUtf8String ( switchUserDir ) ; } @ Override public void saveUser ( UserBO userBO ) { FileUtil . writeString ( JSONUtil . toJsonStr ( userBO ) , DirUtil . getUserDir ( userBO . getWxId ( ) ) , \"<STR_LIT>\" ) ; } @ Override public String getBasePath ( String wxId ) { String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) {", "gt": "return null ;"}
{"input": "package org . example . api . web . example ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . dto . query . ExampleListQuery ; import org . example . application . example . dto . query . ExamplePageQuery ; import org . example . application . example . dto . result . ExampleResult ; import org . example . application . example . service . ExampleCommandService ; import org . example . application . example . service . ExampleQueryService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . validation . Valid ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class ExampleController { @ Autowired private ExampleQueryService exampleQueryService ; @ Autowired private ExampleCommandService exampleCommandService ; @ GetMapping ( \"<STR_LIT>\" ) public Page < ExampleResult > page ( @ Valid ExamplePageQuery query ) { return exampleQueryService . page ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public List < ExampleResult > list ( @ Valid ExampleListQuery query ) { return exampleQueryService . list ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public ExampleResult detail ( @ PathVariable Long id ) { return exampleQueryService . detail ( id ) ; } @ PostMapping public void create ( @ Valid @ RequestBody ExampleCreateCommand command ) { exampleCommandService . create ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void updatePassword ( @ Valid @ RequestBody ExampleUpdatePasswordCommand command ) { exampleCommandService . update ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void enable ( @ PathVariable Long id ) { exampleCommandService . enable ( id ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void disable ( @ PathVariable Long id ) { exampleCommandService . disable ( id ) ; } @ DeleteMapping ( \"<STR_LIT>\" ) public void delete ( @ PathVariable Long id ) {", "gt": "exampleCommandService . delete ( id ) ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ;", "gt": "import org . springframework . stereotype . Service ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogLogin extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String userName ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; this . resetFixedForce ( contractLogId , direction ) ; } } private void addEntrust ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrapper = new QueryWrapper < > ( ) ; wrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; List < Map < String , Object > > selectEntrustList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrapper ) ; if ( Func . isEmpty ( selectEntrustList ) ) { return ; } for ( Map < String , Object > entrustMap : selectEntrustList ) { String entrustCode = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String entrustType = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; String calculationMethod = MjkjUtils . getMap2Str ( entrustMap , \"<STR_LIT>\" ) ; List < EntrustModel . CalculationModel > list = JsonUtil . parseArray ( calculationMethod , EntrustModel . CalculationModel . class ) ; EntrustModel entrustModel = new EntrustModel ( ) ;", "gt": "entrustModel . setEntrustCode ( entrustCode ) ;"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ; Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ; if ( exampleAnnotation != null ) { this . example = exampleAnnotation . value ( ) ; } Comment commentAnnotation = method . getDeclaredAnnotation ( Comment . class ) ; if ( commentAnnotation != null ) { this . comment = commentAnnotation . value ( ) ; } Parameter [ ] parameters = method . getParameters ( ) ; if ( parameters != null ) { for ( int i = <NUM_LIT> ; i < parameters . length ; i ++ ) { this . parameters . add ( new ExpressionMethodParameter ( parameters [ i ] ) ) ; } } } public String getComment ( ) { return comment ; } public String getName ( ) { return name ; }", "gt": "public String getReturnType ( ) {"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Lists ; import java . util . * ; import java . util . concurrent . CopyOnWriteArrayList ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ListUtil { public static boolean isEmpty ( List < ? > list ) { return ( list == null ) || list . isEmpty ( ) ; } public static boolean isNotEmpty ( List < ? > list ) { return ( list != null ) && ! ( list . isEmpty ( ) ) ; } public static < T > T getFirst ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( <NUM_LIT> ) ; } public static < T > T getLast ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( list . size ( ) - <NUM_LIT> ) ; } @ Deprecated public static < T > ArrayList < T > newArrayList ( ) { return new ArrayList < T > ( ) ; } public static < T > ArrayList < T > newArrayList ( T ... elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayList ( Iterable < T > elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayListWithCapacity ( int initSize ) { return new ArrayList < T > ( initSize ) ; } @ Deprecated public static < T > LinkedList < T > newLinkedList ( ) { return new LinkedList < T > ( ) ; } public static < T > LinkedList < T > newLinkedList ( Iterable < ? extends T > elements ) { return Lists . newLinkedList ( elements ) ; } @ Deprecated public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( ) { return new CopyOnWriteArrayList < T > ( ) ; } public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( T ... elements ) { return new CopyOnWriteArrayList < T > ( elements ) ; } public static final < T > List < T > emptyList ( ) { return Collections . emptyList ( ) ; } public static < T > List < T > emptyListIfNull ( final List < T > list ) { return list == null ? ( List < T > ) Collections . EMPTY_LIST : list ; } public static < T > List < T > singletonList ( T o ) { return Collections . singletonList ( o ) ; } public static < T > List < T > unmodifiableList ( List < ? extends T > list ) { return Collections . unmodifiableList ( list ) ; } public static < T > List < T > synchronizedList ( List < T > list ) { return Collections . synchronizedList ( list ) ; } public static < T extends Comparable < ? super T > > void sort ( List < T > list ) { Collections . sort ( list ) ; } public static < T extends Comparable < ? super T > > void sortReverse ( List < T > list ) { Collections . sort ( list , Collections . reverseOrder ( ) ) ; } public static < T > void sort ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , c ) ; } public static < T > void sortReverse ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , Collections . reverseOrder ( c ) ) ; } public static < T > int binarySearch ( List < ? extends Comparable < ? super T > > sortedList , T key ) { return Collections . binarySearch ( sortedList , key ) ; } public static < T > int binarySearch ( List < ? extends T > sortedList , T key , Comparator < ? super T > c ) { return Collections . binarySearch ( sortedList , key , c ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list ) ; } public static void shuffle ( List < ? > list , Random rnd ) { Collections . shuffle ( list , rnd ) ; } public static < T > List < T > reverse ( final List < T > list ) { return Lists . reverse ( list ) ; } public static < T > List < List < T > > partition ( List < T > list , int size ) { return Lists . partition ( list , size ) ; } public static < T > void notNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; } } } public static < T > void uniqueNotNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; Set < T > set = new HashSet < > ( ( int ) ( list . size ( ) / <NUM_LIT> + <NUM_LIT> ) ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; continue ; } if ( set . contains ( obj ) ) { ite . remove ( ) ; continue ; } set . add ( obj ) ; } } public static < E > List < E > union ( final List < ? extends E > list1 , final List < ? extends E > list2 ) { final List < E > result = new ArrayList < E > ( list1 . size ( ) + list2 . size ( ) ) ; result . addAll ( list1 ) ; result . addAll ( list2 ) ; return result ; } public static < T > List < T > intersection ( final List < ? extends T > list1 , final List < ? extends T > list2 ) { List < ? extends T > smaller = list1 ; List < ? extends T > larger = list2 ; if ( list1 . size ( ) > list2 . size ( ) ) {", "gt": "smaller = list2 ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) { this . amount = amount ; } public String getUnit ( ) { return unit ; } public void setUnit ( String unit ) { this . unit = unit ; } public BigInteger getGasLimit ( ) { return gasLimit ; } public void setGasLimit ( BigInteger gasLimit ) { this . gasLimit = gasLimit ; } public BigInteger getGasPrice ( ) { return gasPrice ; } public void setGasPrice ( BigInteger gasPrice ) { this . gasPrice = gasPrice ; } public String getTxBizNumber ( ) {", "gt": "return txBizNumber ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ;", "gt": "return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigReceivedEvent extends NacosConfigEvent { private final String content ; private final String type ; public NacosConfigReceivedEvent ( ConfigService configService , String dataId , String groupId , String content , String type ) { super ( configService , dataId , groupId ) ; this . content = content ; this . type = type ; } public String getContent ( ) { return content ; }", "gt": "public String getType ( ) {"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ;", "gt": "users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ;"}
{"input": "package top . kangert . kspider . io ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class Line { private long from ; private String text ; private long to ; public Line ( long from , String text , long to ) { this . from = from ; this . text = text ; this . to = to ; } @ Override public String toString ( ) {", "gt": "return \"<STR_LIT>\" + \"<STR_LIT>\" + from + \"<STR_LIT>\" + text + '<STR_LIT>' + \"<STR_LIT>\" + to + '<STR_LIT>' ;"}
{"input": "package com . oddfar . campus . common . core . page ; import java . io . Serializable ; import java . util . List ; public class TableDataInfo implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private long total ; private List < ? > rows ; private int code ; private String msg ; public TableDataInfo ( ) { } public TableDataInfo ( List < ? > list , int total ) { this . rows = list ; this . total = total ; } public long getTotal ( ) { return total ; } public void setTotal ( long total ) { this . total = total ; } public List < ? > getRows ( ) { return rows ; }", "gt": "public void setRows ( List < ? > rows ) {"}
{"input": "package cn . org . alan . exam . common . aop ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . ProceedingJoinPoint ; import org . aspectj . lang . Signature ; import org . aspectj . lang . annotation . Around ; import org . aspectj . lang . annotation . Aspect ; import org . aspectj . lang . annotation . Before ; import org . aspectj . lang . annotation . Pointcut ; import org . springframework . stereotype . Component ; import cn . hutool . core . util . RandomUtil ; import com . alibaba . fastjson . JSONObject ; import com . alibaba . fastjson . support . spring . PropertyPreFilters ; import jakarta . servlet . ServletRequest ; import jakarta . servlet . ServletResponse ; import jakarta . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . slf4j . MDC ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import org . springframework . web . multipart . MultipartFile ; @ Aspect @ Component public class LogAsPect { private final static Logger LOG = LoggerFactory . getLogger ( LogAsPect . class ) ; @ Pointcut ( \"<STR_LIT>\" ) public void controllerPointcut ( ) { } @ Before ( \"<STR_LIT>\" ) public void doBefore ( JoinPoint joinPoint ) throws Throwable { ServletRequestAttributes attributes = ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ; HttpServletRequest request = attributes . getRequest ( ) ; Signature signature = joinPoint . getSignature ( ) ; String name = signature . getName ( ) ; LOG . info ( \"<STR_LIT>\" ) ; LOG . info ( \"<STR_LIT>\" , request . getRequestURL ( ) . toString ( ) , request . getMethod ( ) ) ; LOG . info ( \"<STR_LIT>\" , signature . getDeclaringTypeName ( ) , name ) ;", "gt": "LOG . info ( \"<STR_LIT>\" , request . getRemoteAddr ( ) ) ;"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Data ; @ Schema ( description = \"<STR_LIT>\" ) @ Data public class TablePageVO { @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableName ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableComment ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableCollation ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String engine ;", "gt": "@ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String charset ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; import top . kangert . kspider . expression . ExpressionError ; import java . util . List ; public class TokenStream { private final List < Token > tokens ; private int index ; private final int end ; public TokenStream ( List < Token > tokens ) { this . tokens = tokens ; this . index = <NUM_LIT> ; this . end = tokens . size ( ) ; } public boolean hasMore ( ) { return index < end ; } public boolean hasNext ( ) { return index + <NUM_LIT> < end ; } public boolean hasPrev ( ) { return index > <NUM_LIT> ; } public Token consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( index ++ ) ; } public Token next ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( ++ index ) ; } public Token prev ( ) { if ( index == <NUM_LIT> ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( -- index ) ; } public Token expect ( TokenType type ) { boolean result = match ( type , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public Token expect ( String text ) { boolean result = match ( text , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public boolean match ( TokenType type , boolean consume ) { if ( index >= end ) { return false ; } if ( tokens . get ( index ) . getType ( ) == type ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean match ( String text , boolean consume ) { if ( index >= end ) { return false ; } if ( tokens . get ( index ) . getText ( ) . equals ( text ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean match ( boolean consume , TokenType ... types ) { for ( TokenType type : types ) { if ( match ( type , consume ) ) { return true ; } } return false ; } public boolean match ( boolean consume , String ... tokenTexts ) { for ( String text : tokenTexts ) { if ( match ( text , consume ) ) { return true ; } } return false ; } public String getSource ( ) {", "gt": "if ( tokens . size ( ) == <NUM_LIT> ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ;", "gt": "List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ;"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ;", "gt": "if ( params == null ) {"}
{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) { List < Option > menus = menuService . listMenuOptions ( ) ; return Result . success ( menus ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < List < RouteVO > > listRoutes ( ) { Set < String > roles = SecurityUtils . getRoles ( ) ; List < RouteVO > routeList = menuService . listRoutes ( roles ) ; return Result . success ( routeList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < MenuForm > getMenuForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long id ) { MenuForm menu = menuService . getMenuForm ( id ) ; return Result . success ( menu ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result addMenu ( @ RequestBody MenuForm menuForm ) { boolean result = menuService . saveMenu ( menuForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateMenu ( @ RequestBody MenuForm menuForm ) { boolean result = menuService . saveMenu ( menuForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteMenu ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable ( \"<STR_LIT>\" ) Long id ) { boolean result = menuService . deleteMenu ( id ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( \"<STR_LIT>\" ) public Result updateMenuVisible ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long menuId , @ Parameter ( description = \"<STR_LIT>\" ) Integer visible ) { boolean result = menuService . updateMenuVisible ( menuId , visible ) ;", "gt": "return Result . judge ( result ) ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ;", "gt": "if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) {"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ;", "gt": "private Integer judgeScore ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ;", "gt": "import java . math . BigDecimal ;"}
{"input": "package com . oddfar . campus . framework . mapper ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . oddfar . campus . common . core . BaseMapperX ; import com . oddfar . campus . common . domain . entity . SysRoleResourceEntity ; import java . util . List ; public interface SysRoleResourceMapper extends BaseMapperX < SysRoleResourceEntity > { default int deleteRoleResourceByRoleId ( Long roleId ) {", "gt": "return delete ( new QueryWrapper < SysRoleResourceEntity > ( ) . eq ( \"<STR_LIT>\" , roleId ) ) ;"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class } ) public void response ( HttpServletResponse response , Result result ) { String s = objectMapper . writeValueAsString ( result ) ; response . setCharacterEncoding ( \"<STR_LIT>\" ) ; response . setContentType ( \"<STR_LIT>\" ) ; PrintWriter writer = response . getWriter ( ) ; writer . write ( s ) ; writer . flush ( ) ;", "gt": "writer . close ( ) ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ; @ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity { private static final long serialVersionUID = <NUM_LIT> ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private Long desFormId ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import com . google . common . util . concurrent . RateLimiter ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; public class RateLimiterUtil { public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds ) throws ReflectiveOperationException { return create ( permitsPerSecond , maxBurstSeconds , true ) ; } public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds , boolean filledWithToken ) throws ReflectiveOperationException { Class < ? > sleepingStopwatchClass = Class . forName ( \"<STR_LIT>\" ) ; Method createStopwatchMethod = sleepingStopwatchClass . getDeclaredMethod ( \"<STR_LIT>\" ) ; createStopwatchMethod . setAccessible ( true ) ; Object stopwatch = createStopwatchMethod . invoke ( null ) ; Class < ? > burstyRateLimiterClass = Class . forName ( \"<STR_LIT>\" ) ; Constructor < ? > burstyRateLimiterConstructor = burstyRateLimiterClass . getDeclaredConstructors ( ) [ <NUM_LIT> ] ; burstyRateLimiterConstructor . setAccessible ( true ) ; RateLimiter rateLimiter = ( RateLimiter ) burstyRateLimiterConstructor . newInstance ( stopwatch , maxBurstSeconds ) ; rateLimiter . setRate ( permitsPerSecond ) ; if ( filledWithToken ) { setField ( rateLimiter , \"<STR_LIT>\" , permitsPerSecond * maxBurstSeconds ) ; } return rateLimiter ; } private static boolean setField ( Object targetObject , String fieldName , Object fieldValue ) { Field field ; try { field = targetObject . getClass ( ) . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { field = null ; } Class superClass = targetObject . getClass ( ) . getSuperclass ( ) ; while ( field == null && superClass != null ) { try { field = superClass . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { superClass = superClass . getSuperclass ( ) ; } } if ( field == null ) { return false ; }", "gt": "field . setAccessible ( true ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < ConfigItem > ( ) ; ConfigItem configStart = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_START_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ;", "gt": "configItemList . add ( configStart ) ;"}
{"input": "package ginyi . common . utils ; public class Constants { public static final String UTF8 = \"<STR_LIT>\" ; public static final String GBK = \"<STR_LIT>\" ; public static final String SUCCESS = \"<STR_LIT>\" ; public static final String FAIL = \"<STR_LIT>\" ; public static final String LOGIN_SUCCESS = \"<STR_LIT>\" ; public static final String LOGOUT = \"<STR_LIT>\" ; public static final String REGISTER = \"<STR_LIT>\" ; public static final String LOGIN_FAIL = \"<STR_LIT>\" ; public static final String TOKEN_PREFIX = \"<STR_LIT>\" ; public static final String LOGIN_USER_KEY = \"<STR_LIT>\" ; public static final String RESOURCE_PREFIX = \"<STR_LIT>\" ; public static final String TOKEN = \"<STR_LIT>\" ;", "gt": "public static final Integer CAPTCHA_EXPIRATION = <NUM_LIT> ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamGradeListVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ; private Integer saqCount ; private Integer saqScore ;", "gt": "@ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime startTime ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ; private int initSize ; public StringBuilderHolder ( int initSize ) {", "gt": "this . initSize = initSize ;"}
{"input": "package com . xcs . wx . config ; import com . baomidou . dynamic . datasource . exception . CannotFindDataSourceException ; import com . xcs . wx . domain . vo . ResponseVO ; import com . xcs . wx . exception . BizException ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . MyBatisSystemException ; import org . springframework . http . HttpStatus ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseStatus ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ Slf4j @ RestControllerAdvice @ ResponseStatus ( HttpStatus . OK ) public class ExceptionAdviceConfig { @ ExceptionHandler ( BizException . class ) public ResponseVO < String > handleException ( BizException e ) { return ResponseVO . error ( e . getCode ( ) , e . getMsg ( ) ) ; } @ ExceptionHandler ( MyBatisSystemException . class ) public ResponseVO < String > myBatisSystemException ( MyBatisSystemException e ) { if ( e . getCause ( ) . getCause ( ) instanceof CannotFindDataSourceException ) { return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; }", "gt": "log . error ( \"<STR_LIT>\" , e ) ;"}
{"input": "package com . yf . ability . shiro ; import com . yf . ability . shiro . dto . SysUserLoginDTO ; import com . yf . ability . shiro . jwt . JwtToken ; import com . yf . ability . shiro . jwt . JwtUtils ; import com . yf . ability . shiro . service . ShiroUserService ; import lombok . extern . slf4j . Slf4j ; import org . apache . shiro . authc . AuthenticationException ; import org . apache . shiro . authc . AuthenticationInfo ; import org . apache . shiro . authc . AuthenticationToken ; import org . apache . shiro . authc . SimpleAuthenticationInfo ; import org . apache . shiro . authz . AuthorizationInfo ; import org . apache . shiro . authz . SimpleAuthorizationInfo ; import org . apache . shiro . realm . AuthorizingRealm ; import org . apache . shiro . subject . PrincipalCollection ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . context . annotation . Lazy ; import org . springframework . stereotype . Component ; import java . util . HashSet ; import java . util . List ; @ Component @ Slf4j public class MyShiroRealm extends AuthorizingRealm { @ Autowired @ Lazy private ShiroUserService shiroUserService ; @ Override public boolean supports ( AuthenticationToken token ) { return token instanceof JwtToken ; } @ Override protected AuthorizationInfo doGetAuthorizationInfo ( PrincipalCollection principals ) { log . info ( \"<STR_LIT>\" ) ; System . out . println ( \"<STR_LIT>\" ) ; String userId = null ; if ( principals != null ) { SysUserLoginDTO user = ( SysUserLoginDTO ) principals . getPrimaryPrincipal ( ) ; userId = user . getId ( ) ; } SimpleAuthorizationInfo info = new SimpleAuthorizationInfo ( ) ; List < String > roles = shiroUserService . roles ( userId ) ; info . setRoles ( new HashSet < > ( roles ) ) ; List < String > permissions = shiroUserService . permissions ( userId ) ; info . addStringPermissions ( permissions ) ; log . info ( \"<STR_LIT>\" ) ; return info ; } @ Override protected AuthenticationInfo doGetAuthenticationInfo ( AuthenticationToken auth ) throws AuthenticationException { String token = ( String ) auth . getCredentials ( ) ; if ( token == null ) { throw new AuthenticationException ( \"<STR_LIT>\" ) ; } SysUserLoginDTO user = this . checkToken ( token ) ;", "gt": "SimpleAuthenticationInfo info = new SimpleAuthenticationInfo ( user , token , getName ( ) ) ;"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ; map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] { qiniuContent . getUrl ( ) } ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > synchronizeQiNiu ( ) { qiniuContentService . synchronize ( qiNiuConfigService . getConfig ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; }", "gt": "@ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > downloadQiNiu ( @ PathVariable Long id ) {"}
{"input": "package me . zhengjie . utils . enums ; import lombok . AllArgsConstructor ; import lombok . Getter ; @ Getter @ AllArgsConstructor public enum RequestMethodEnum { GET ( \"<STR_LIT>\" ) , POST ( \"<STR_LIT>\" ) , PUT ( \"<STR_LIT>\" ) , PATCH ( \"<STR_LIT>\" ) , DELETE ( \"<STR_LIT>\" ) , ALL ( \"<STR_LIT>\" ) ; private final String type ; public static RequestMethodEnum find ( String type ) { for ( RequestMethodEnum value : RequestMethodEnum . values ( ) ) { if ( value . getType ( ) . equals ( type ) ) {", "gt": "return value ;"}
{"input": "package top . kangert . kspider . websocket ; import top . kangert . kspider . KspiderRuntime ; import top . kangert . kspider . context . SpiderWebSocketContext ; import top . kangert . kspider . util . SpiderFlowUtils ; import org . springframework . web . socket . TextMessage ; import org . springframework . web . socket . WebSocketSession ; import org . springframework . web . socket . handler . TextWebSocketHandler ; import cn . hutool . json . JSONObject ; import cn . hutool . json . JSONUtil ; import java . util . concurrent . CompletableFuture ; public class WebSocketEditorHandler extends TextWebSocketHandler { public KspiderRuntime spider ; private SpiderWebSocketContext context ; public WebSocketEditorHandler ( KspiderRuntime spider ) { this . spider = spider ; } @ Override protected void handleTextMessage ( WebSocketSession session , TextMessage message ) { JSONObject event = JSONUtil . parseObj ( message . getPayload ( ) ) ; String eventType = event . getStr ( \"<STR_LIT>\" ) ; boolean isDebug = WebSocketEvent . DEBUG_EVENT_TYPE . equalsIgnoreCase ( eventType ) ; if ( WebSocketEvent . TEST_EVENT_TYPE . equalsIgnoreCase ( eventType ) || isDebug ) { context = new SpiderWebSocketContext ( session ) ; context . setDebug ( isDebug ) ; context . setRunning ( true ) ; CompletableFuture . runAsync ( ( ) -> { String json = event . getStr ( \"<STR_LIT>\" ) ; if ( json != null ) { try { spider . runWithTest ( SpiderFlowUtils . parseJsonToSpiderNode ( json ) , context ) ; }", "gt": "catch ( Exception e ) {"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) { if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( first , second ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( second , first ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return first . equals ( second ) ; } return first == second ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return ! first . equals ( second ) ; } return first != second ; } else { throw new ExcelExportException ( \"<STR_LIT>\" ) ; } }", "gt": "private static boolean isGt ( Object first , Object second ) {"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) { roleService . addRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult update ( @ RequestBody @ Validated ( UpdateGroup . class ) RoleDto roleDto ) { roleService . updateRole ( roleDto ) ; return CommonResult . success ( ) ; }", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) {"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . core . tool . utils . WebUtil ; import org . springframework . stereotype . Component ; import java . util . List ; import java . util . Map ;", "gt": "@ Component ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class CountryI18NEnhanceList implements CgformEnhanceJavaListInter {"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; }", "gt": "public static String getOrigin ( ) {"}
{"input": "package com . xcs . wx . repository . impl ; import com . baomidou . dynamic . datasource . annotation . DS ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . HardLinkImageAttribute ; import com . xcs . wx . mapper . HardLinkImageAttributeMapper ;", "gt": "import com . xcs . wx . repository . HardLinkImageAttributeRepository ;"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; } public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) { this . userId = userId ; this . deptId = deptId ; this . user = user ; this . permissions = permissions ; } @ JSONField ( serialize = false ) @ Override public String getPassword ( ) {", "gt": "return user . getPassword ( ) ;"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ; wrapper . last ( \"<STR_LIT>\" ) ; CfgBase entity = this . getOne ( wrapper , false ) ; CfgBaseDTO dto = new CfgBaseDTO ( ) ; BeanMapper . copy ( entity , dto ) ; return dto ; } @ CacheEvict ( value = CacheKey . SITE , allEntries = true ) @ Transactional ( rollbackFor = Exception . class ) @ Override public void save ( CfgBaseDTO reqDTO ) { CfgBase entity = new CfgBase ( ) ;", "gt": "BeanMapper . copy ( reqDTO , entity ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) { return this . entityPackage ; } public String getTableName ( ) { return this . tableName ; } public String getEntityName ( ) { return this . entityName ; } public String getFtlDescription ( ) { return this . ftlDescription ; } public void setEntityPackage ( String entityPackage ) { this . entityPackage = entityPackage ; } public void setTableName ( String tableName ) { this . tableName = tableName ; } public void setEntityName ( String entityName ) { this . entityName = entityName ; } public void setFtlDescription ( String ftlDescription ) { this . ftlDescription = ftlDescription ; } public String getFtl_mode ( ) { return this . ftl_mode ; } public void setFtl_mode ( String ftl_mode ) { this . ftl_mode = ftl_mode ; } public String getPrimaryKeyPolicy ( ) { return this . primaryKeyPolicy ; } public String getSequenceCode ( ) { return this . sequenceCode ; } public void setPrimaryKeyPolicy ( String primaryKeyPolicy ) { this . primaryKeyPolicy = primaryKeyPolicy ; } public void setSequenceCode ( String sequenceCode ) { this . sequenceCode = sequenceCode ; } @ Override public String toString ( ) {", "gt": "return \"<STR_LIT>\" + this . entityPackage + \"<STR_LIT>\" + this . tableName + \"<STR_LIT>\" + this . entityName + \"<STR_LIT>\" + this . ftlDescription + \"<STR_LIT>\" + this . primaryKeyPolicy + \"<STR_LIT>\" + this . sequenceCode + \"<STR_LIT>\" + this . ftl_mode + \"<STR_LIT>\" + this . subTables + \"<STR_LIT>\" + this . fieldRowNum + \"<STR_LIT>\" + this . searchFieldNum + \"<STR_LIT>\" + this . fieldRequiredNum + \"<STR_LIT>\" ;"}
{"input": "package com . oddfar . campus . common . domain . entity ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . oddfar . campus . common . domain . BaseEntity ; import lombok . Data ; import lombok . EqualsAndHashCode ; @ Data @ EqualsAndHashCode ( callSuper = true ) @ TableName ( \"<STR_LIT>\" ) public class SysResourceEntity extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( \"<STR_LIT>\" ) private Long resourceId ; private String appCode ; private String resourceCode ; private String resourceName ; private String className ; private String methodName ; @ TableField ( exist = false ) private String modular_code ; private String modularName ; private String url ;", "gt": "private String httpMethod ;"}
{"input": "package io . github . chensheng . dddboot . tools . io ; import com . google . common . io . Resources ; import io . github . chensheng . dddboot . tools . collection . ListUtil ; import io . github . chensheng . dddboot . tools . reflect . ClassLoaderUtil ; import io . github . chensheng . dddboot . tools . text . Charsets ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . ArrayList ; import java . util . Enumeration ; import java . util . List ; public class ResourceUtil { public static URL asUrl ( String resourceName ) { return Resources . getResource ( resourceName ) ; } public static URL asUrl ( Class < ? > contextClass , String resourceName ) { return Resources . getResource ( contextClass , resourceName ) ; } public static InputStream asStream ( String resourceName ) throws IOException { return Resources . getResource ( resourceName ) . openStream ( ) ; } public static InputStream asStream ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . getResource ( contextClass , resourceName ) . openStream ( ) ; } public static String toString ( String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ; } public static String toString ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( contextClass , resourceName ) , Charsets . UTF_8 ) ; } public static List < String > toLines ( String resourceName ) throws IOException {", "gt": "return Resources . readLines ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ;"}
{"input": "package com . youlai . system . model . dto ; import lombok . Data ; import java . util . Set ; @ Data public class UserAuthInfo { private Long userId ; private String username ; private String nickname ; private Long deptId ;", "gt": "private String password ;"}
{"input": "package io . github . chensheng . dddboot . tools . io ; import com . google . common . io . Resources ; import io . github . chensheng . dddboot . tools . collection . ListUtil ; import io . github . chensheng . dddboot . tools . reflect . ClassLoaderUtil ; import io . github . chensheng . dddboot . tools . text . Charsets ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . ArrayList ; import java . util . Enumeration ; import java . util . List ; public class ResourceUtil { public static URL asUrl ( String resourceName ) { return Resources . getResource ( resourceName ) ; } public static URL asUrl ( Class < ? > contextClass , String resourceName ) { return Resources . getResource ( contextClass , resourceName ) ; } public static InputStream asStream ( String resourceName ) throws IOException { return Resources . getResource ( resourceName ) . openStream ( ) ; } public static InputStream asStream ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . getResource ( contextClass , resourceName ) . openStream ( ) ; } public static String toString ( String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ; } public static String toString ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( contextClass , resourceName ) , Charsets . UTF_8 ) ; } public static List < String > toLines ( String resourceName ) throws IOException { return Resources . readLines ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ; } public static List < String > toLines ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . readLines ( Resources . getResource ( contextClass , resourceName ) , Charsets . UTF_8 ) ; } public static List < URL > getResourcesQuietly ( String resourceName ) { return getResourcesQuietly ( resourceName , ClassLoaderUtil . getDefaultClassLoader ( ) ) ; } public static List < URL > getResourcesQuietly ( String resourceName , ClassLoader contextClassLoader ) { try { Enumeration < URL > urls = contextClassLoader . getResources ( resourceName ) ; List < URL > list = new ArrayList < URL > ( <NUM_LIT> ) ;", "gt": "while ( urls . hasMoreElements ( ) ) {"}
{"input": "package com . youlai . system . config ; import io . swagger . v3 . oas . models . Components ; import io . swagger . v3 . oas . models . OpenAPI ; import io . swagger . v3 . oas . models . info . Info ; import io . swagger . v3 . oas . models . security . SecurityRequirement ; import io . swagger . v3 . oas . models . security . SecurityScheme ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springdoc . core . customizers . GlobalOpenApiCustomizer ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import org . springframework . core . env . Environment ; import org . springframework . http . HttpHeaders ; @ Configuration @ Slf4j @ RequiredArgsConstructor public class SwaggerConfig { private final Environment environment ; @ Bean public OpenAPI openApi ( ) { String appVersion = environment . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;", "gt": "return new OpenAPI ( ) . info ( new Info ( ) . title ( \"<STR_LIT>\" ) . version ( appVersion ) ) . components ( new Components ( ) . addSecuritySchemes ( HttpHeaders . AUTHORIZATION , new SecurityScheme ( ) . name ( HttpHeaders . AUTHORIZATION ) . type ( SecurityScheme . Type . APIKEY ) . in ( SecurityScheme . In . HEADER ) . scheme ( \"<STR_LIT>\" ) . bearerFormat ( \"<STR_LIT>\" ) ) ) ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ;", "gt": "Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; Set < Long > currentDictItemIds = currentDictItemEntities . stream ( ) . map ( SysDictItem :: getId ) . collect ( Collectors . toSet ( ) ) ; Set < Long > newAttrIds = dictItems . stream ( ) . map ( SysDictItem :: getId ) . filter ( Objects :: nonNull ) . collect ( Collectors . toSet ( ) ) ; Set < Long > idsToDelete = new HashSet < > ( currentDictItemIds ) ; idsToDelete . removeAll ( newAttrIds ) ; if ( ! idsToDelete . isEmpty ( ) ) { dictItemService . removeByIds ( idsToDelete ) ; } for ( SysDictItem dictItem : dictItems ) { if ( dictItem . getId ( ) != null && currentDictItemIds . contains ( dictItem . getId ( ) ) ) { dictItemService . updateById ( dictItem ) ; } else { dictItem . setDictId ( id ) ; dictItemService . save ( dictItem ) ; } } } return result ; } @ Override @ Transactional public void deleteDictByIds ( String ids ) { Assert . isTrue ( StrUtil . isNotBlank ( ids ) , \"<STR_LIT>\" ) ; List < String > idList = Arrays . stream ( ids . split ( \"<STR_LIT>\" ) ) . toList ( ) ; for ( String id : idList ) {", "gt": "boolean result = this . removeById ( id ) ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ;", "gt": "return Result . judge ( result ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Lists ; import java . util . * ; import java . util . concurrent . CopyOnWriteArrayList ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ListUtil { public static boolean isEmpty ( List < ? > list ) { return ( list == null ) || list . isEmpty ( ) ; } public static boolean isNotEmpty ( List < ? > list ) { return ( list != null ) && ! ( list . isEmpty ( ) ) ; } public static < T > T getFirst ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( <NUM_LIT> ) ; } public static < T > T getLast ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( list . size ( ) - <NUM_LIT> ) ; } @ Deprecated public static < T > ArrayList < T > newArrayList ( ) { return new ArrayList < T > ( ) ; } public static < T > ArrayList < T > newArrayList ( T ... elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayList ( Iterable < T > elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayListWithCapacity ( int initSize ) { return new ArrayList < T > ( initSize ) ; } @ Deprecated public static < T > LinkedList < T > newLinkedList ( ) { return new LinkedList < T > ( ) ; } public static < T > LinkedList < T > newLinkedList ( Iterable < ? extends T > elements ) { return Lists . newLinkedList ( elements ) ; } @ Deprecated public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( ) { return new CopyOnWriteArrayList < T > ( ) ; } public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( T ... elements ) { return new CopyOnWriteArrayList < T > ( elements ) ; } public static final < T > List < T > emptyList ( ) { return Collections . emptyList ( ) ; } public static < T > List < T > emptyListIfNull ( final List < T > list ) { return list == null ? ( List < T > ) Collections . EMPTY_LIST : list ; } public static < T > List < T > singletonList ( T o ) { return Collections . singletonList ( o ) ; } public static < T > List < T > unmodifiableList ( List < ? extends T > list ) { return Collections . unmodifiableList ( list ) ; } public static < T > List < T > synchronizedList ( List < T > list ) { return Collections . synchronizedList ( list ) ; } public static < T extends Comparable < ? super T > > void sort ( List < T > list ) { Collections . sort ( list ) ; } public static < T extends Comparable < ? super T > > void sortReverse ( List < T > list ) { Collections . sort ( list , Collections . reverseOrder ( ) ) ; } public static < T > void sort ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , c ) ; } public static < T > void sortReverse ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , Collections . reverseOrder ( c ) ) ; } public static < T > int binarySearch ( List < ? extends Comparable < ? super T > > sortedList , T key ) { return Collections . binarySearch ( sortedList , key ) ; } public static < T > int binarySearch ( List < ? extends T > sortedList , T key , Comparator < ? super T > c ) { return Collections . binarySearch ( sortedList , key , c ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list ) ; } public static void shuffle ( List < ? > list , Random rnd ) { Collections . shuffle ( list , rnd ) ; } public static < T > List < T > reverse ( final List < T > list ) { return Lists . reverse ( list ) ; } public static < T > List < List < T > > partition ( List < T > list , int size ) { return Lists . partition ( list , size ) ; } public static < T > void notNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; } } } public static < T > void uniqueNotNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; Set < T > set = new HashSet < > ( ( int ) ( list . size ( ) / <NUM_LIT> + <NUM_LIT> ) ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; continue ; } if ( set . contains ( obj ) ) { ite . remove ( ) ; continue ; } set . add ( obj ) ; } } public static < E > List < E > union ( final List < ? extends E > list1 , final List < ? extends E > list2 ) { final List < E > result = new ArrayList < E > ( list1 . size ( ) + list2 . size ( ) ) ; result . addAll ( list1 ) ; result . addAll ( list2 ) ; return result ; } public static < T > List < T > intersection ( final List < ? extends T > list1 , final List < ? extends T > list2 ) { List < ? extends T > smaller = list1 ; List < ? extends T > larger = list2 ; if ( list1 . size ( ) > list2 . size ( ) ) { smaller = list2 ; larger = list1 ; } List < T > newSmaller = new ArrayList < T > ( smaller ) ;", "gt": "List < T > result = new ArrayList < T > ( smaller . size ( ) ) ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getUpdateTime ( ) ; } return <NUM_LIT> ; } @ Override public BigDecimal getPriceBySymbol ( String symbolName ) { try { return this . getPriceBySymbol ( \"<STR_LIT>\" , symbolName ) ; } catch ( Exception e ) { return BigDecimal . ZERO ; } } @ Override public MongoDetail getPriceBySymbolDetail ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ;", "gt": "Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String deptName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationUrl ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationIp ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationLocation ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationParam ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String jsonResult ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer status ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String errorMsg ;", "gt": "@ JsonFormat @ ApiModelProperty ( \"<STR_LIT>\" ) private Date operationTime ;"}
{"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ; save ( localStorage ) ; return localStorage ; } catch ( Exception e ) { FileUtil . del ( file ) ; throw e ; } } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( LocalStorage resources ) { LocalStorage localStorage = getById ( resources . getId ( ) ) ; localStorage . copy ( resources ) ; saveOrUpdate ( localStorage ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void deleteAll ( Long [ ] ids ) { for ( Long id : ids ) { LocalStorage storage = getById ( id ) ;", "gt": "FileUtil . del ( storage . getPath ( ) ) ;"}
{"input": "package me . zhengjie . modules . system . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import me . zhengjie . annotation . Log ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . service . JobService ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . Set ; @ RestController @ RequiredArgsConstructor @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class JobController { private final JobService jobService ; private static final String ENTITY_NAME = \"<STR_LIT>\" ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public void exportJob ( HttpServletResponse response , JobQueryCriteria criteria ) throws IOException { jobService . download ( jobService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < PageResult < Job > > queryJob ( JobQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( jobService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > createJob ( @ Validated @ RequestBody Job resources ) { if ( resources . getId ( ) != null ) { throw new BadRequestException ( \"<STR_LIT>\" + ENTITY_NAME + \"<STR_LIT>\" ) ; } jobService . create ( resources ) ; return new ResponseEntity < > ( HttpStatus . CREATED ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > updateJob ( @ Validated ( Job . Update . class ) @ RequestBody Job resources ) { jobService . update ( resources ) ; return new ResponseEntity < > ( HttpStatus . NO_CONTENT ) ; }", "gt": "@ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > deleteJob ( @ RequestBody Set < Long > ids ) {"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ; SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ; List < SysDictItem > toEntity ( List < DictForm . DictItem > dictFormDictItems ) ;", "gt": "DictForm . DictItem convertToDictFormDictItem ( SysDictItem entity ) ;"}
{"input": "package com . oddfar . campus . common . core . page ; import java . io . Serializable ; import java . util . List ; public class TableDataInfo implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private long total ; private List < ? > rows ; private int code ; private String msg ; public TableDataInfo ( ) { } public TableDataInfo ( List < ? > list , int total ) { this . rows = list ; this . total = total ; } public long getTotal ( ) { return total ; } public void setTotal ( long total ) { this . total = total ; } public List < ? > getRows ( ) { return rows ; } public void setRows ( List < ? > rows ) { this . rows = rows ; } public int getCode ( ) { return code ; }", "gt": "public void setCode ( int code ) {"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; }", "gt": "public static Object getBean ( String name ) {"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String deptName ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationUrl ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String operationIp ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String operationLocation ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ; users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ; } return users ; } @ Override public void switchUser ( String wxId ) { FileUtil . writeString ( wxId , DirUtil . getSwitchUserDir ( ) , \"<STR_LIT>\" ) ; } @ Override public String currentUser ( ) { String switchUserDir = DirUtil . getSwitchUserDir ( ) ; if ( ! FileUtil . exist ( switchUserDir ) ) { return Optional . of ( getWxIds ( ) ) . filter ( items -> ! items . isEmpty ( ) ) . map ( items -> items . get ( <NUM_LIT> ) ) . orElse ( null ) ; } return FileUtil . readUtf8String ( switchUserDir ) ; } @ Override public void saveUser ( UserBO userBO ) { FileUtil . writeString ( JSONUtil . toJsonStr ( userBO ) , DirUtil . getUserDir ( userBO . getWxId ( ) ) , \"<STR_LIT>\" ) ; } @ Override public String getBasePath ( String wxId ) { String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } String userJson = FileUtil . readUtf8String ( userDir ) ; return JSONUtil . toBean ( userJson , UserBO . class ) . getBasePath ( ) ; } private List < String > getWxIds ( ) { List < String > userVOList = new ArrayList < > ( ) ; Path path = Paths . get ( DirUtil . getDbDir ( ) ) ; if ( ! FileUtil . exist ( path . toFile ( ) ) ) { return userVOList ; } try ( DirectoryStream < Path > stream = Files . newDirectoryStream ( path ) ) { for ( Path entry : stream ) { if ( FileUtil . isDirectory ( entry ) ) { userVOList . add ( FileUtil . getName ( entry ) ) ; } } } catch ( IOException e ) { log . error ( \"<STR_LIT>\" , e ) ; } return userVOList ; } private String getAvatar ( String wxId ) { DynamicDataSourceContextHolder . push ( DSNameUtil . getDSName ( wxId , DataSourceType . MICRO_MSG_DB ) ) ; String avatar = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( wxId ) ; DynamicDataSourceContextHolder . clear ( ) ; return avatar ; }", "gt": "private String getNickName ( String wxId ) {"}
{"input": "package top . kangert . kspider . exception ; import java . util . HashMap ; import java . util . Map ; import lombok . extern . slf4j . Slf4j ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseBody ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ RestControllerAdvice @ Slf4j public class GlobalExceptionHandler { @ ResponseBody @ ExceptionHandler ( Exception . class ) public Map < String , Object > handleException ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; Map < String , Object > map = new HashMap < > ( ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getCode ( ) ) ; map . put ( \"<STR_LIT>\" , ExceptionCodes . ERROR . getMessage ( ) ) ; return map ; }", "gt": "@ ResponseBody @ ExceptionHandler ( BaseException . class ) public Map < String , Object > handleBaseException ( BaseException e ) {"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . ManualScore ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . service . IService ; import java . util . List ; public interface IManualScoreService extends IService < ManualScore > { Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) ;", "gt": "Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) ;"}
{"input": "package com . yf . plugins . upload . local . service . impl ; import com . yf . ability . Constant ; import com . yf . ability . upload . service . UploadService ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . plugins . upload . local . config . LocalConfig ; import com . yf . plugins . upload . local . dto . UploadRespDTO ; import com . yf . plugins . upload . local . utils . OssUtils ; import com . yf . system . modules . plugin . service . PluginDataService ; import lombok . extern . log4j . Log4j2 ; import org . apache . tika . Tika ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . util . FileCopyUtils ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . ServletOutputStream ; import javax . servlet . http . HttpServletRequest ; import javax . servlet . http . HttpServletResponse ; import java . io . File ; import java . io . FileInputStream ; import java . io . IOException ; import java . nio . file . Files ; import java . nio . file . Paths ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; @ Log4j2 @ Service public class LocalUpServiceImpl implements UploadService { private static final String PLUGIN_CODE = \"<STR_LIT>\" ; @ Autowired private PluginDataService pluginDataService ; @ Override public UploadRespDTO upload ( MultipartFile file ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { String filePath = OssUtils . processPath ( file ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( file . getInputStream ( ) , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return this . generateResult ( conf , filePath ) ; } catch ( IOException e ) { log . error ( e ) ; throw new ServiceException ( \"<STR_LIT>\" + e . getMessage ( ) ) ; } } @ Override public String upload ( String localFile ) { LocalConfig conf = this . getConfig ( ) ; String fileDir = conf . getLocalDir ( ) ; String fullPath ; try { FileInputStream is = new FileInputStream ( localFile ) ; String filePath = OssUtils . renameFile ( localFile ) ; fullPath = fileDir + filePath ; OssUtils . checkDir ( fullPath ) ; FileCopyUtils . copy ( is , Files . newOutputStream ( Paths . get ( fullPath ) ) ) ; return conf . getVisitUrl ( ) + Constant . FILE_PREFIX + filePath ; } catch ( IOException e ) {", "gt": "log . error ( e ) ;"}
{"input": "package cn . org . alan . exam . util ; import jakarta . annotation . Resource ; import org . junit . jupiter . api . Test ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Encryption ; import cn . org . alan . exam . util . CryptoUtils . Algorithm . Signing ; import java . security . NoSuchAlgorithmException ; import java . time . LocalDate ; public class CryptoUtilsTest { @ Resource private CryptoUtils cryptoUtils ; @ Test void getDate ( ) throws Exception { String secretKey = CryptoUtils . generateSymmetricKey ( Encryption . AES_ECB_PKCS5 ) ; String cipherText = CryptoUtils . encryptSymmetrically ( secretKey , null , \"<STR_LIT>\" , Encryption . AES_ECB_PKCS5 ) ; System . out . println ( \"<STR_LIT>\" + secretKey ) ; System . out . println ( \"<STR_LIT>\" + cipherText ) ;", "gt": "System . out . println ( \"<STR_LIT>\" + CryptoUtils . decryptSymmetrically ( secretKey , null , cipherText , Encryption . AES_ECB_PKCS5 ) ) ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ;", "gt": "import org . springblade . core . secure . utils . AuthUtil ;"}
{"input": "package org . example . ddduser ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; @ SpringBootApplication @ MapperScan ( \"<STR_LIT>\" ) public class Application { public static void main ( String [ ] args ) {", "gt": "SpringApplication app = new SpringApplication ( Application . class ) ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; return request . getHeader ( \"<STR_LIT>\" ) ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; }", "gt": "public static < T > T getBean ( Class < T > clazz ) {"}
{"input": "package io . github . chensheng . dddboot . excel . converter ; import io . github . chensheng . dddboot . excel . core . CellValueType ; import org . apache . poi . ss . usermodel . Cell ; import org . apache . poi . ss . usermodel . CellType ; import org . apache . poi . ss . usermodel . Workbook ; import java . lang . reflect . Field ; public class IntegerConverter implements Converter { @ Override public boolean support ( Field field , CellValueType type ) { Class < ? > fieldType = field . getType ( ) ; return Integer . class == fieldType || int . class == fieldType ; } @ Override public Object fromCellContent ( String cellContent , Field field , String format , boolean use1904DateWindowing ) { try { return Integer . parseInt ( cellContent ) ; } catch ( NumberFormatException e ) { try { return ( int ) Double . parseDouble ( cellContent ) ; } catch ( Exception ex ) { return Integer . class == field . getType ( ) ? null : <NUM_LIT> ; } } } @ Override public void setCellContent ( Workbook workbook , Cell cell , Object cellValue , String format ) { Integer value = ( Integer ) cellValue ;", "gt": "cell . setCellType ( CellType . NUMERIC ) ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ;", "gt": "if ( ! captchaEnabled ) {"}
{"input": "package org . springblade . config . constant ; public interface MjkjConstant { String FORM_SYNC_DB_NORMAL = \"<STR_LIT>\" ; String FORM_SYNC_DB_FORCE = \"<STR_LIT>\" ; String ENHANCE_ADD = \"<STR_LIT>\" ; String ENHANCE_EDIT = \"<STR_LIT>\" ; String ENHANCE_DELETE = \"<STR_LIT>\" ; String ENHANCE_IMPORT = \"<STR_LIT>\" ; String ENHANCE_EXPORT = \"<STR_LIT>\" ; String ENHANCE_QUERY = \"<STR_LIT>\" ;", "gt": "String ENHANCE_VIEW = \"<STR_LIT>\" ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) { postService . removeDeptByIds ( ids ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < PostVo > > list ( @ RequestBody PostDto postDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < PostVo > list = postService . list ( postDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addPost ( @ RequestBody @ Validated ( AddGroup . class ) PostDto postDto ) { postService . addPost ( postDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult update ( @ RequestBody @ Validated PostDto postDto ) { postService . updatePost ( postDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( includeParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" } ) public CommonResult updateStatus ( @ RequestBody PostDto postDto ) {", "gt": "postService . updateStatus ( postDto ) ;"}
{"input": "package org . springblade . cgform . model . generate . pojo . onetomany ; import java . util . List ; import java . util . Map ; public class MainTableVo { private String entityPackage ; private String tableName ; private String entityName ; private String ftlDescription ; private String primaryKeyPolicy ; private String sequenceCode ; private String ftl_mode ; List < SubTableVo > subTables ; public Integer fieldRowNum ; public Integer searchFieldNum ; public Integer fieldRequiredNum ; private Map < ? , ? > extendParams ; public MainTableVo ( ) { this . ftl_mode = \"<STR_LIT>\" ; } public Map < ? , ? > getExtendParams ( ) { return this . extendParams ; } public void setExtendParams ( Map < ? , ? > extendParams ) { this . extendParams = extendParams ; } public Integer getFieldRowNum ( ) { return this . fieldRowNum ; } public void setFieldRowNum ( Integer fieldRowNum ) { this . fieldRowNum = fieldRowNum ; } public Integer getSearchFieldNum ( ) { return this . searchFieldNum ; } public void setSearchFieldNum ( Integer searchFieldNum ) { this . searchFieldNum = searchFieldNum ; } public Integer getFieldRequiredNum ( ) { return this . fieldRequiredNum ; } public void setFieldRequiredNum ( Integer fieldRequiredNum ) { this . fieldRequiredNum = fieldRequiredNum ; } public List < SubTableVo > getSubTables ( ) { return this . subTables ; } public void setSubTables ( List < SubTableVo > subTables ) { this . subTables = subTables ; } public String getEntityPackage ( ) {", "gt": "return this . entityPackage ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return DateFormat . getDateInstance ( <NUM_LIT> , Locale . CHINA ) . format ( obj ) ; } public String time ( Object obj ) {", "gt": "if ( obj == null ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; } private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ;", "gt": "nacosPropertySource . setOrigin ( metadata . getClassName ( ) ) ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ;", "gt": "private Integer saqCount ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ; void update ( Job resources ) ; void delete ( Set < Long > ids ) ; PageResult < Job > queryAll ( JobQueryCriteria criteria , Page < Object > page ) ;", "gt": "List < Job > queryAll ( JobQueryCriteria criteria ) ;"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ; FileInputStream in = null ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; int len ; try { digest = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; in = new FileInputStream ( file ) ; while ( ( len = in . read ( buffer , <NUM_LIT> , <NUM_LIT> ) ) != - <NUM_LIT> ) { digest . update ( buffer , <NUM_LIT> , len ) ; } in . close ( ) ; }", "gt": "catch ( Exception e ) {"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import io . github . chensheng . dddboot . tools . number . RandomUtil ; import org . apache . commons . lang3 . Validate ; public class Sampler { private static final Double ALWAYS = Double . valueOf ( <NUM_LIT> ) ; private static final Double NEVER = Double . valueOf ( <NUM_LIT> ) ; private double threshold ; protected Sampler ( ) { } protected Sampler ( double selectPercent ) { Validate . isTrue ( ( selectPercent >= <NUM_LIT> ) && ( selectPercent <= <NUM_LIT> ) , \"<STR_LIT>\" + selectPercent ) ; this . threshold = selectPercent / <NUM_LIT> ; } public static Sampler create ( Double selectPercent ) { if ( selectPercent . equals ( ALWAYS ) ) { return new AlwaysSampler ( ) ; } else if ( selectPercent . equals ( NEVER ) ) { return new NeverSampler ( ) ; } else { return new Sampler ( selectPercent ) ; } } public boolean select ( ) { return RandomUtil . threadLocalRandom ( ) . nextDouble ( ) < threshold ; } protected static class AlwaysSampler extends Sampler { @ Override public boolean select ( ) { return true ; } } protected static class NeverSampler extends Sampler { @ Override public boolean select ( ) {", "gt": "return false ;"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) { return toString ( false ) ; } public String toString ( boolean isSimple ) { final StringBuilder builder = new StringBuilder ( isSimple ? <NUM_LIT> : <NUM_LIT> ) ; builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits , <NUM_LIT> ) ) ; return builder . toString ( ) ; } @ Override public int hashCode ( ) { long hilo = mostSigBits ^ leastSigBits ; return ( ( int ) ( hilo > > <NUM_LIT> ) ) ^ ( int ) hilo ; } @ Override public boolean equals ( Object obj ) { if ( ( null == obj ) || ( obj . getClass ( ) != UUID . class ) ) { return false ; } UUID id = ( UUID ) obj ; return ( mostSigBits == id . mostSigBits && leastSigBits == id . leastSigBits ) ; } @ Override public int compareTo ( UUID val ) { return ( this . mostSigBits < val . mostSigBits ? - <NUM_LIT> : ( this . mostSigBits > val . mostSigBits ? <NUM_LIT> : ( this . leastSigBits < val . leastSigBits ? - <NUM_LIT> : ( this . leastSigBits > val . leastSigBits ? <NUM_LIT> : <NUM_LIT> ) ) ) ) ; } private static String digits ( long val , int digits ) { long hi = <NUM_LIT> << ( digits * <NUM_LIT> ) ; return Long . toHexString ( hi | ( val & ( hi - <NUM_LIT> ) ) ) . substring ( <NUM_LIT> ) ; } private void checkTimeBase ( ) { if ( version ( ) != <NUM_LIT> ) { throw new UnsupportedOperationException ( \"<STR_LIT>\" ) ; } }", "gt": "public static SecureRandom getSecureRandom ( ) {"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiAlias ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String pack ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String moduleName ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String path ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiPath ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String author ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String prefix ;"}
{"input": "package com . yf . base . utils . jackson ; import com . fasterxml . jackson . core . JsonGenerator ; import com . fasterxml . jackson . core . type . TypeReference ; import com . fasterxml . jackson . databind . JsonSerializer ; import com . fasterxml . jackson . databind . SerializerProvider ; import lombok . extern . log4j . Log4j2 ; import org . apache . commons . lang3 . StringUtils ; import java . io . IOException ; import java . util . Arrays ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; @ Log4j2 public class DesensitizeSerializer extends JsonSerializer < String > { private final List < String > keys = Arrays . asList ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; @ Override public void serialize ( String json , JsonGenerator jsonGenerator , SerializerProvider serializerProvider ) throws IOException { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; if ( StringUtils . isBlank ( json ) ) { jsonGenerator . writeObject ( map ) ; return ; } try { map = JsonHelper . parseObject ( json , new TypeReference < Map < String , Object > > ( ) { } ) ; } catch ( Exception e ) { jsonGenerator . writeObject ( map ) ; log . error ( e ) ; return ; } if ( ! map . isEmpty ( ) ) { for ( String key : map . keySet ( ) ) { Object val = map . get ( key ) ; Object enc = this . encrypt ( key , val ) ; map . put ( key , enc ) ; } } jsonGenerator . writeObject ( map ) ; } public Object encrypt ( String key , Object val ) { if ( ! ( val instanceof String ) ) { return val ; } String text = String . valueOf ( val ) ; if ( StringUtils . isBlank ( text ) ) { return \"<STR_LIT>\" ; } if ( ! keys . contains ( key ) ) { return text ; } int length = text . length ( ) ; if ( length < <NUM_LIT> ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . entity ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springblade . core . tenant . mp . TenantEntity ;", "gt": "@ Data @ TableName ( \"<STR_LIT>\" ) @ EqualsAndHashCode ( callSuper = true ) @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DesformRoute extends TenantEntity {"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ;", "gt": "CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ;"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ;", "gt": "CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ;", "gt": "if ( ! StringUtils . isBlank ( currentId ) ) {"}
{"input": "package com . youlai . system . model . dto ; import lombok . Data ; import java . util . Set ; @ Data public class UserAuthInfo { private Long userId ; private String username ; private String nickname ; private Long deptId ; private String password ;", "gt": "private Integer status ;"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; } long count = this . count ( wrapper ) ; if ( count > <NUM_LIT> ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } SysDic entity = new SysDic ( ) ;", "gt": "BeanMapper . copy ( reqDTO , entity ) ;"}
{"input": "package org . springblade . web . enhance . country ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . RequiredArgsConstructor ; import org . springblade . cgform . model . CgformEnhanceJavaListInter ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . exception . BusinessException ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . core . tool . utils . WebUtil ; import org . springframework . stereotype . Component ;", "gt": "import java . util . List ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { Shape shape = new Shape ( ) ; shape . setName ( supportType ( ) ) ; shape . setLabel ( \"<STR_LIT>\" ) ; shape . setIcon ( \"<STR_LIT>\" ) ; shape . setDesc ( \"<STR_LIT>\" ) ; return shape ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < > ( ) ;", "gt": "ConfigItem remark = new ConfigItem ( \"<STR_LIT>\" , ConfigItem . ComponentType . EL_INPUT , ConfigItem . DataType . STRING , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils { private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ; public static NacosConfigProperties buildNacosConfigProperties ( ConfigurableEnvironment environment ) { NacosConfigProperties nacosConfigProperties = new NacosConfigProperties ( ) ; Binder binder = Binder . get ( environment ) ; ResolvableType type = ResolvableType . forClass ( NacosConfigProperties . class ) ; Bindable < ? > target = Bindable . of ( type ) . withExistingValue ( nacosConfigProperties ) ;", "gt": "binder . bind ( NacosConfigConstants . PREFIX , target ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; } private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; nacosPropertySource . setOrigin ( metadata . getClassName ( ) ) ; } private void initOrder ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean first = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . FIRST_ATTRIBUTE_NAME ) ) ; String before = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . BEFORE_ATTRIBUTE_NAME ) ; String after = ( String ) annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AFTER_ATTRIBUTE_NAME ) ; nacosPropertySource . setFirst ( first ) ; nacosPropertySource . setBefore ( before ) ; nacosPropertySource . setAfter ( after ) ; }", "gt": "@ Override protected NacosConfigMetadataEvent createMetaEvent ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) {"}
{"input": "package com . xcs . wx . config ; import com . baomidou . dynamic . datasource . exception . CannotFindDataSourceException ; import com . xcs . wx . domain . vo . ResponseVO ; import com . xcs . wx . exception . BizException ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . MyBatisSystemException ; import org . springframework . http . HttpStatus ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseStatus ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ Slf4j @ RestControllerAdvice @ ResponseStatus ( HttpStatus . OK ) public class ExceptionAdviceConfig { @ ExceptionHandler ( BizException . class ) public ResponseVO < String > handleException ( BizException e ) { return ResponseVO . error ( e . getCode ( ) , e . getMsg ( ) ) ; } @ ExceptionHandler ( MyBatisSystemException . class ) public ResponseVO < String > myBatisSystemException ( MyBatisSystemException e ) { if ( e . getCause ( ) . getCause ( ) instanceof CannotFindDataSourceException ) { return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } log . error ( \"<STR_LIT>\" , e ) ; return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } @ ExceptionHandler ( RuntimeException . class ) public ResponseVO < String > handleException ( RuntimeException e ) {", "gt": "log . error ( \"<STR_LIT>\" , e ) ;"}
{"input": "package com . youlai . system . config ; import io . swagger . v3 . oas . models . Components ; import io . swagger . v3 . oas . models . OpenAPI ; import io . swagger . v3 . oas . models . info . Info ; import io . swagger . v3 . oas . models . security . SecurityRequirement ; import io . swagger . v3 . oas . models . security . SecurityScheme ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springdoc . core . customizers . GlobalOpenApiCustomizer ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import org . springframework . core . env . Environment ; import org . springframework . http . HttpHeaders ; @ Configuration @ Slf4j @ RequiredArgsConstructor public class SwaggerConfig { private final Environment environment ; @ Bean public OpenAPI openApi ( ) { String appVersion = environment . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; return new OpenAPI ( ) . info ( new Info ( ) . title ( \"<STR_LIT>\" ) . version ( appVersion ) ) . components ( new Components ( ) . addSecuritySchemes ( HttpHeaders . AUTHORIZATION , new SecurityScheme ( ) . name ( HttpHeaders . AUTHORIZATION ) . type ( SecurityScheme . Type . APIKEY ) . in ( SecurityScheme . In . HEADER ) . scheme ( \"<STR_LIT>\" ) . bearerFormat ( \"<STR_LIT>\" ) ) ) ; } @ Bean public GlobalOpenApiCustomizer globalOpenApiCustomizer ( ) { return openApi -> { if ( openApi . getPaths ( ) != null ) {", "gt": "openApi . getPaths ( ) . forEach ( ( s , pathItem ) -> {"}
{"input": "package ginyi . system . domain ; import com . alibaba . fastjson2 . annotation . JSONField ; import ginyi . system . domain . SysUser ; import lombok . Data ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . Set ; @ Data public class LoginUser implements UserDetails { private static final long serialVersionUID = <NUM_LIT> ; private Long userId ; private Long deptId ; private String token ; private Long loginTime ; private Long expireTime ; private String ipaddr ; private String loginLocation ; private String browser ; private String os ; private Set < String > permissions ; private SysUser user ; public LoginUser ( ) { } public LoginUser ( SysUser user , Set < String > permissions ) { this . user = user ; this . permissions = permissions ; } public LoginUser ( Long userId , Long deptId , SysUser user , Set < String > permissions ) { this . userId = userId ; this . deptId = deptId ; this . user = user ; this . permissions = permissions ; } @ JSONField ( serialize = false ) @ Override public String getPassword ( ) { return user . getPassword ( ) ; } @ Override public String getUsername ( ) { return user . getUserName ( ) ; } @ JSONField ( serialize = false ) @ Override public boolean isAccountNonExpired ( ) { return true ; } @ JSONField ( serialize = false ) @ Override public boolean isAccountNonLocked ( ) { return true ; } @ JSONField ( serialize = false ) @ Override public boolean isCredentialsNonExpired ( ) { return true ; } @ JSONField ( serialize = false ) @ Override public boolean isEnabled ( ) {", "gt": "return true ;"}
{"input": "package com . oddfar . campus . admin . controller . system ; import cn . hutool . core . codec . Base64 ; import com . google . code . kaptcha . Producer ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . constant . CacheConstants ; import com . oddfar . campus . common . constant . Constants ; import com . oddfar . campus . common . core . RedisCache ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . utils . uuid . IdUtils ; import com . oddfar . campus . framework . api . sysconfig . ConfigExpander ; import com . oddfar . campus . framework . service . SysConfigService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . util . FastByteArrayOutputStream ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . imageio . ImageIO ; import javax . servlet . http . HttpServletResponse ; import java . awt . image . BufferedImage ; import java . io . IOException ; import java . util . concurrent . TimeUnit ; @ RestController @ Log ( openLog = false ) public class CaptchaController { @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducer ; @ Resource ( name = \"<STR_LIT>\" ) private Producer captchaProducerMath ; @ Autowired private RedisCache redisCache ; @ Autowired private SysConfigService configService ; @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R getCode ( HttpServletResponse response ) throws IOException { R ajax = R . ok ( ) ; boolean captchaEnabled = configService . selectCaptchaEnabled ( ) ; ajax . put ( \"<STR_LIT>\" , captchaEnabled ) ; if ( ! captchaEnabled ) { return ajax ; } String uuid = IdUtils . simpleUUID ( ) ; String verifyKey = CacheConstants . CAPTCHA_CODE_KEY + uuid ; String capStr = null , code = null ;", "gt": "BufferedImage image = null ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) { PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] infoIds ) { return R . ok ( logininforService . deleteLogininforByIds ( infoIds ) ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) { logininforService . cleanLogininfor ( ) ; return R . ok ( ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R unlock ( @ PathVariable ( \"<STR_LIT>\" ) String userName ) { passwordService . clearLoginRecordCache ( userName ) ;", "gt": "return R . ok ( ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) {", "gt": "this . to = to ;"}
{"input": "package com . youlai . system . converter ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . vo . DictPageVO ; import org . mapstruct . InheritInverseConfiguration ; import org . mapstruct . Mapper ; import org . mapstruct . Mapping ; import org . mapstruct . Mappings ; import java . util . List ; @ Mapper ( componentModel = \"<STR_LIT>\" ) public interface DictItemConverter { Page < DictPageVO > convertToPageVo ( Page < SysDictItem > page ) ; DictForm toForm ( SysDictItem entity ) ; SysDictItem toEntity ( DictForm . DictItem dictFormDictItems ) ; List < SysDictItem > toEntity ( List < DictForm . DictItem > dictFormDictItems ) ; DictForm . DictItem convertToDictFormDictItem ( SysDictItem entity ) ; List < DictForm . DictItem > convertToDictFormDictItem ( List < SysDictItem > entities ) ; @ Mappings ( {", "gt": "@ Mapping ( target = \"<STR_LIT>\" , source = \"<STR_LIT>\" ) , @ Mapping ( target = \"<STR_LIT>\" , source = \"<STR_LIT>\" ) }"}
{"input": "package com . yf . system . modules . dict . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . BeanMapper ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . dict . dto . SysDicDTO ; import com . yf . system . modules . dict . entity . SysDic ; import com . yf . system . modules . dict . mapper . SysDicMapper ; import com . yf . system . modules . dict . service . SysDicService ; import com . yf . system . modules . dict . service . SysDicValueService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; @ Service public class SysDicServiceImpl extends ServiceImpl < SysDicMapper , SysDic > implements SysDicService { @ Autowired private SysDicValueService sysDicValueService ; @ Override public IPage < SysDicDTO > paging ( PagingReqDTO < SysDicDTO > reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; SysDicDTO params = reqDTO . getParams ( ) ; if ( params != null ) { if ( ! StringUtils . isBlank ( params . getTitle ( ) ) ) { wrapper . lambda ( ) . and ( obj -> obj . like ( SysDic :: getCode , params . getTitle ( ) ) . or ( ) . like ( SysDic :: getTitle , params . getTitle ( ) ) ) ; } if ( params . getType ( ) != null ) { wrapper . lambda ( ) . eq ( SysDic :: getType , params . getType ( ) ) ; } } wrapper . lambda ( ) . orderByDesc ( SysDic :: getId ) ; IPage < SysDic > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysDicDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysDicDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( SysDicDTO reqDTO ) { QueryWrapper < SysDic > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysDic :: getCode , reqDTO . getCode ( ) ) ; if ( ! StringUtils . isBlank ( reqDTO . getId ( ) ) ) { wrapper . lambda ( ) . ne ( SysDic :: getId , reqDTO . getId ( ) ) ; } long count = this . count ( wrapper ) ; if ( count > <NUM_LIT> ) { throw new ServiceException ( \"<STR_LIT>\" ) ; } SysDic entity = new SysDic ( ) ; BeanMapper . copy ( reqDTO , entity ) ; this . saveOrUpdate ( entity ) ; } @ Transactional ( rollbackFor = Exception . class ) @ Override public void delete ( List < String > ids ) { List < String > codes = new ArrayList < > ( ) ; for ( String id : ids ) { SysDic dic = this . getById ( id ) ; if ( dic == null ) { continue ; } codes . add ( dic . getCode ( ) ) ; } this . removeByIds ( ids ) ;", "gt": "sysDicValueService . removeByDict ( codes ) ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ; int insertResource ( SysResourceEntity resource ) ; void truncateResource ( ) ; Set < String > selectResourceCodeByRoleId ( Long roleId ) ; List < SysResourceEntity > selectApiResourceList ( Long userId ) ; List < SysRoleAuth > selectSysRoleAuthAll ( ) ; List < SysResourceEntity > selectApiResourceList ( SysResourceEntity resource , Long userId ) ;", "gt": "List < Long > selectResourceListByRoleId ( Long roleId ) ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ; resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ; delCaches ( dictDetail ) ; } @ Override @ Cacheable ( key = \"<STR_LIT>\" ) public List < DictDetail > getDictByName ( String name ) { return dictDetailMapper . findByDictName ( name ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void delete ( Long id ) { DictDetail dictDetail = getById ( id ) ; removeById ( id ) ; delCaches ( dictDetail ) ; } public void delCaches ( DictDetail dictDetail ) {", "gt": "Dict dict = dictMapper . selectById ( dictDetail . getDictId ( ) ) ;"}
{"input": "package com . youlai . system . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import com . youlai . system . plugin . mybatis . annotation . DataPermission ; import com . youlai . system . model . entity . SysDept ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . List ;", "gt": "@ Mapper public interface SysDeptMapper extends BaseMapper < SysDept > {"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ; FileInputStream in = null ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; int len ; try { digest = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; in = new FileInputStream ( file ) ;", "gt": "while ( ( len = in . read ( buffer , <NUM_LIT> , <NUM_LIT> ) ) != - <NUM_LIT> ) {"}
{"input": "package me . zhengjie . modules . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . List ;", "gt": "import java . util . Set ;"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) { return toString ( false ) ; } public String toString ( boolean isSimple ) { final StringBuilder builder = new StringBuilder ( isSimple ? <NUM_LIT> : <NUM_LIT> ) ; builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( mostSigBits , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ; if ( ! isSimple ) { builder . append ( '<STR_LIT>' ) ; } builder . append ( digits ( leastSigBits , <NUM_LIT> ) ) ; return builder . toString ( ) ; } @ Override public int hashCode ( ) { long hilo = mostSigBits ^ leastSigBits ; return ( ( int ) ( hilo > > <NUM_LIT> ) ) ^ ( int ) hilo ; } @ Override public boolean equals ( Object obj ) { if ( ( null == obj ) || ( obj . getClass ( ) != UUID . class ) ) { return false ; } UUID id = ( UUID ) obj ; return ( mostSigBits == id . mostSigBits && leastSigBits == id . leastSigBits ) ; } @ Override public int compareTo ( UUID val ) { return ( this . mostSigBits < val . mostSigBits ? - <NUM_LIT> : ( this . mostSigBits > val . mostSigBits ? <NUM_LIT> : ( this . leastSigBits < val . leastSigBits ? - <NUM_LIT> : ( this . leastSigBits > val . leastSigBits ? <NUM_LIT> : <NUM_LIT> ) ) ) ) ; } private static String digits ( long val , int digits ) { long hi = <NUM_LIT> << ( digits * <NUM_LIT> ) ; return Long . toHexString ( hi | ( val & ( hi - <NUM_LIT> ) ) ) . substring ( <NUM_LIT> ) ; } private void checkTimeBase ( ) { if ( version ( ) != <NUM_LIT> ) { throw new UnsupportedOperationException ( \"<STR_LIT>\" ) ; } } public static SecureRandom getSecureRandom ( ) { try { return SecureRandom . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException e ) { throw new UtilException ( e ) ; } }", "gt": "public static ThreadLocalRandom getRandom ( ) {"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; } private List < SecurityScheme > securitySchemes ( ) { List < SecurityScheme > apiKeyList = new ArrayList < SecurityScheme > ( ) ; apiKeyList . add ( new ApiKey ( \"<STR_LIT>\" , \"<STR_LIT>\" , In . HEADER . toValue ( ) ) ) ; return apiKeyList ; } private List < SecurityContext > securityContexts ( ) { List < SecurityContext > securityContexts = new ArrayList < > ( ) ;", "gt": "securityContexts . add ( SecurityContext . builder ( ) . securityReferences ( defaultAuth ( ) ) . operationSelector ( o -> o . requestMappingPattern ( ) . matches ( \"<STR_LIT>\" ) ) . build ( ) ) ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;", "gt": "List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import org . springframework . core . annotation . AnnotationUtils ; import org . springframework . core . env . PropertyResolver ; import org . springframework . util . StringUtils ; import java . lang . annotation . Annotation ; import java . util . Map ; import java . util . Properties ; public class PropertiesPlaceholderResolver { private final PropertyResolver propertyResolver ; public PropertiesPlaceholderResolver ( PropertyResolver propertyResolver ) { this . propertyResolver = propertyResolver ; } public Properties resolve ( Annotation annotation ) { Map < String , Object > attributes = AnnotationUtils . getAnnotationAttributes ( annotation ) ; return resolve ( attributes ) ; } public Properties resolve ( Map < ? , ? > properties ) { Properties resolvedProperties = new Properties ( ) ;", "gt": "for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) {"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Sets ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; import io . github . chensheng . dddboot . tools . collection . type . ConcurrentHashSet ; import java . util . * ; public class SetUtil { public static < T > HashSet < T > newHashSet ( ) { return new HashSet < T > ( ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T > HashSet < T > newHashSet ( T ... elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSet ( Iterable < ? extends T > elements ) { return Sets . newHashSet ( elements ) ; } public static < T > HashSet < T > newHashSetWithCapacity ( int expectedSize ) { return Sets . newHashSetWithExpectedSize ( expectedSize ) ; } @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > TreeSet < T > newSortedSet ( ) { return new TreeSet < T > ( ) ; } public static < T > TreeSet < T > newSortedSet ( @ Nullable Comparator < ? super T > comparator ) { return Sets . newTreeSet ( comparator ) ; } public static < T > ConcurrentHashSet < T > newConcurrentHashSet ( ) { return new ConcurrentHashSet < T > ( ) ; } public static final < T > Set < T > emptySet ( ) { return Collections . emptySet ( ) ; } public static < T > Set < T > emptySetIfNull ( final Set < T > set ) { return set == null ? ( Set < T > ) Collections . EMPTY_SET : set ; } public static final < T > Set < T > singletonSet ( T o ) { return Collections . singleton ( o ) ; } public static < T > Set < T > unmodifiableSet ( Set < ? extends T > s ) { return Collections . unmodifiableSet ( s ) ; } public static < T > Set < T > newSetFromMap ( Map < T , Boolean > map ) { return Collections . newSetFromMap ( map ) ; } public static < E > Set < E > unionView ( final Set < ? extends E > set1 , final Set < ? extends E > set2 ) { return Sets . union ( set1 , set2 ) ; } public static < E > Set < E > intersectionView ( final Set < E > set1 , final Set < ? > set2 ) { return Sets . intersection ( set1 , set2 ) ; } public static < E > Set < E > differenceView ( final Set < E > set1 , final Set < ? > set2 ) { return Sets . difference ( set1 , set2 ) ; }", "gt": "public static < E > Set < E > disjointView ( final Set < ? extends E > set1 , final Set < ? extends E > set2 ) {"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange { private Map < String , ForceModelAll > forceMap ; private boolean isTriggerComplete = true ; public CoinMatchXhExchange ( ) {", "gt": "this . forceMap = new HashMap < > ( ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util . parse ; import com . alibaba . nacos . api . config . ConfigType ; import io . github . chensheng . dddboot . nacos . spring . util . AbstractConfigParse ; import org . springframework . util . StringUtils ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import javax . xml . parsers . DocumentBuilderFactory ; import java . io . ByteArrayInputStream ; import java . util . LinkedHashMap ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; public class DefaultXmlConfigParse extends AbstractConfigParse { private DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; @ Override public Map < String , Object > parse ( String configText ) { Map < String , Object > properties = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; try { Document document = factory . newDocumentBuilder ( ) . parse ( new ByteArrayInputStream ( configText . getBytes ( \"<STR_LIT>\" ) ) ) ; Element root = document . getDocumentElement ( ) ; Map < String , Object > map = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; recursionXmlToMap ( map , root ) ; mapToProperties ( \"<STR_LIT>\" , properties , map ) ; } catch ( Exception e ) { throw new ConfigParseException ( e ) ; } return properties ; } private void recursionXmlToMap ( Map < String , Object > outMap , Element element ) { NodeList nodeList = element . getChildNodes ( ) ; String name = element . getNodeName ( ) ; if ( nodeList . getLength ( ) == <NUM_LIT> && ! nodeList . item ( <NUM_LIT> ) . hasChildNodes ( ) ) { addData ( outMap , name , element . getTextContent ( ) ) ; } else { Map < String , Object > innerMap = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; int length = nodeList . getLength ( ) ; for ( int i = <NUM_LIT> ; i < length ; i ++ ) { Node node = nodeList . item ( i ) ; if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { Element tElement = ( Element ) node ; recursionXmlToMap ( innerMap , tElement ) ; } } addData ( outMap , name , innerMap ) ; } } private void addData ( Map < String , Object > map , String key , Object data ) { if ( map . containsKey ( key ) ) { if ( map . get ( key ) instanceof List ) { ( ( List ) map . get ( key ) ) . add ( data ) ; } else { List < Object > list = new LinkedList < Object > ( ) ; list . add ( map . get ( key ) ) ; map . put ( key , list ) ; } } else { map . put ( key , data ) ; } } private void mapToProperties ( String prefixName , Map < String , Object > properties , Object data ) { if ( data instanceof List ) { List list = ( List ) data ; for ( int i = <NUM_LIT> ; i < list . size ( ) ; i ++ ) { int lastIndex = prefixName . lastIndexOf ( '<STR_LIT>' ) ; String preName = prefixName . substring ( <NUM_LIT> , lastIndex ) ; String lastName = prefixName . substring ( lastIndex ) ; mapToProperties ( preName + \"<STR_LIT>\" + i + \"<STR_LIT>\" , properties , list . get ( i ) ) ; } } else if ( data instanceof Map ) { Map < String , Object > map = ( Map < String , Object > ) data ; for ( Map . Entry < String , Object > entry : map . entrySet ( ) ) { String tmpPrefix = StringUtils . isEmpty ( prefixName ) ? entry . getKey ( ) : prefixName + \"<STR_LIT>\" + entry . getKey ( ) ; mapToProperties ( tmpPrefix , properties , entry . getValue ( ) ) ; } } else { properties . put ( prefixName , String . valueOf ( data ) ) ; } }", "gt": "@ Override public String processType ( ) {"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import com . alibaba . excel . EasyExcel ; import com . xcs . wx . domain . FTSContactContent ; import com . xcs . wx . domain . dto . RecoverContactDTO ; import com . xcs . wx . domain . vo . RecoverContactVO ; import com . xcs . wx . mapping . RecoverContactMapping ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . repository . FTSContactContentRepository ; import com . xcs . wx . service . RecoverContactService ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . File ; import java . util . List ; import java . util . Set ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class RecoverContactServiceImpl implements RecoverContactService { private final FTSContactContentRepository ftsContactContentRepository ; private final ContactRepository contactRepository ; private final RecoverContactMapping recoverContactMapping ; @ Override public List < RecoverContactVO > queryRecoverContact ( RecoverContactDTO recoverContactDTO ) { List < FTSContactContent > ftsContactContents = ftsContactContentRepository . queryContactContent ( recoverContactDTO ) ; Set < String > set = contactRepository . getContactWithMp ( ) ; return ftsContactContents . stream ( ) . filter ( ftsContent -> ! set . contains ( ftsContent . getAlias ( ) ) ) . map ( recoverContactMapping :: convert ) . collect ( Collectors . toList ( ) ) ; }", "gt": "@ Override public String exportRecoverContact ( ) {"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) {", "gt": "ApiError apiError = new ApiError ( ) ;"}
{"input": "package top . kangert . kspider . executor . function . extension ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; import top . kangert . kspider . executor . FunctionExtension ; import top . kangert . kspider . util . ExtractUtils ; import org . springframework . stereotype . Component ; import cn . hutool . json . JSONUtil ; import java . util . Objects ; @ Component public class ObjectFunctionExtension implements FunctionExtension { @ Override public Class < ? > support ( ) { return Object . class ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static String string ( Object obj ) { if ( obj instanceof String ) { return ( String ) obj ; } return Objects . toString ( obj ) ; } @ Comment ( \"<STR_LIT>\" ) @ Example ( \"<STR_LIT>\" ) public static Object jsonpath ( Object obj , String path ) { if ( obj instanceof String ) {", "gt": "return ExtractUtils . getValueByJsonPath ( JSONUtil . parse ( ( String ) obj ) , path ) ;"}
{"input": "package com . yf . system . modules . user . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . baomidou . mybatisplus . extension . activerecord . Model ; import lombok . Data ; @ Data @ TableName ( \"<STR_LIT>\" ) public class SysUserRole extends Model < SysUserRole > { private static final long serialVersionUID = <NUM_LIT> ;", "gt": "@ TableId ( value = \"<STR_LIT>\" , type = IdType . ASSIGN_ID ) private String id ;"}
{"input": "package ginyi . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import ginyi . system . domain . SysDept ; import ginyi . system . domain . model . dto . DeptDto ; import org . apache . ibatis . annotations . Param ; public interface SysDeptMapper extends BaseMapper < SysDept > { public IPage < SysDept > list ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto , Page page ) ; public void insertDept ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto ) ;", "gt": "public void updateDept ( @ Param ( \"<STR_LIT>\" ) DeptDto deptDto ) ;"}
{"input": "package com . yf . system . modules . role . dto ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class SysRoleMenuDTO implements Serializable {", "gt": "private static final long serialVersionUID = <NUM_LIT> ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import com . google . common . collect . * ; import com . google . common . util . concurrent . AtomicLongMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . IntObjectHashMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . LongObjectHashMap ; import org . apache . commons . lang3 . mutable . MutableInt ; import org . apache . commons . lang3 . mutable . MutableLong ; import java . util . Comparator ; import java . util . HashMap ; import java . util . concurrent . ConcurrentMap ; public class MoreMaps { public static < K , V > ConcurrentMap < K , V > createWeakKeyConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakKeys ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < K , V > ConcurrentMap < K , V > createWeakValueConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakValues ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < V > IntObjectHashMap < V > createPrimitiveIntKeyMap ( int initialCapacity , float loadFactor ) { return new IntObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < V > LongObjectHashMap < V > createPrimitiveLongKeyMap ( int initialCapacity , float loadFactor ) { return new LongObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableInt > createMutableIntValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableInt > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableLong > createMutableLongValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableLong > ( initialCapacity , loadFactor ) ; } public static < E > AtomicLongMap < E > createConcurrentCounterMap ( ) { return AtomicLongMap . create ( ) ; } public static < K , V > ArrayListMultimap < K , V > createListMultiValueMap ( int expectedKeys , int expectedValuesPerKey ) {", "gt": "return ArrayListMultimap . create ( expectedKeys , expectedValuesPerKey ) ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) { if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( first , second ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { return isGt ( second , first ) ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return first . equals ( second ) ; } return first == second ; } else if ( \"<STR_LIT>\" . endsWith ( operator ) ) { if ( first != null && second != null ) { return ! first . equals ( second ) ; }", "gt": "return first != second ;"}
{"input": "package org . springblade . cgform . model ; import lombok . Data ; import java . io . Serializable ; import java . util . ArrayList ; import java . util . List ; @ Data public class OnlGenerateModel implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private Long headId ; private String projectPath ; private String packageStyle ; private String ftlDescription ;", "gt": "private String jformType ;"}
{"input": "package com . youlai . system . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import com . youlai . system . plugin . mybatis . annotation . DataPermission ; import com . youlai . system . model . entity . SysDept ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ;", "gt": "import java . util . List ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) { this . borderLeft = borderLeft ; } @ Override public boolean equals ( Object o ) { if ( this == o ) return true ; if ( o == null || getClass ( ) != o . getClass ( ) ) return false ; CellStyleConfig that = ( CellStyleConfig ) o ; return Objects . equals ( font , that . font ) && Objects . equals ( wrapText , that . wrapText ) && verticalAlignment == that . verticalAlignment && alignment == that . alignment && Objects . equals ( locked , that . locked ) && fillPattern == that . fillPattern && Objects . equals ( fillForegroundColor , that . fillForegroundColor ) && borderBottom == that . borderBottom && borderLeft == that . borderLeft ; } @ Override public int hashCode ( ) { return Objects . hash ( font , wrapText , verticalAlignment , alignment , locked , fillPattern , fillForegroundColor , borderBottom , borderLeft ) ; } public static class FontConfig { private String fontName ; private short fontHeightInPoints ; private boolean bold ; public String getFontName ( ) { return fontName ; } public void setFontName ( String fontName ) { this . fontName = fontName ; } public short getFontHeightInPoints ( ) { return fontHeightInPoints ; }", "gt": "public void setFontHeightInPoints ( short fontHeightInPoints ) {"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } } catch ( Exception e ) { log . error ( \"<STR_LIT>\" , delayTimes , e ) ; } } } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < > ( ) ; Map < String , Object > delayTimeAttrs = new HashMap < > ( ) ; delayTimeAttrs . put ( \"<STR_LIT>\" , <NUM_LIT> ) ;", "gt": "ConfigItem delayTime = new ConfigItem ( \"<STR_LIT>\" , ConfigItem . ComponentType . EL_NUMBER_INPUT , ConfigItem . DataType . INT , DELAY_TIME , \"<STR_LIT>\" , <NUM_LIT> , delayTimeAttrs , null ) ;"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class } ) public void response ( HttpServletResponse response , Result result ) { String s = objectMapper . writeValueAsString ( result ) ; response . setCharacterEncoding ( \"<STR_LIT>\" ) ; response . setContentType ( \"<STR_LIT>\" ) ; PrintWriter writer = response . getWriter ( ) ;", "gt": "writer . write ( s ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . util ; import io . github . chensheng . dddboot . nacos . config . NacosConfigConstants ; import io . github . chensheng . dddboot . nacos . config . properties . NacosConfigProperties ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . springframework . boot . context . properties . bind . Bindable ; import org . springframework . boot . context . properties . bind . Binder ; import org . springframework . core . ResolvableType ; import org . springframework . core . env . ConfigurableEnvironment ; public class NacosConfigPropertiesUtils {", "gt": "private static final Logger logger = LoggerFactory . getLogger ( NacosConfigPropertiesUtils . class ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util . parse ; import com . alibaba . nacos . api . config . ConfigType ; import io . github . chensheng . dddboot . nacos . spring . util . AbstractConfigParse ; import org . springframework . util . StringUtils ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . Node ; import org . w3c . dom . NodeList ; import javax . xml . parsers . DocumentBuilderFactory ; import java . io . ByteArrayInputStream ; import java . util . LinkedHashMap ; import java . util . LinkedList ; import java . util . List ; import java . util . Map ; public class DefaultXmlConfigParse extends AbstractConfigParse { private DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; @ Override public Map < String , Object > parse ( String configText ) { Map < String , Object > properties = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; try { Document document = factory . newDocumentBuilder ( ) . parse ( new ByteArrayInputStream ( configText . getBytes ( \"<STR_LIT>\" ) ) ) ; Element root = document . getDocumentElement ( ) ; Map < String , Object > map = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; recursionXmlToMap ( map , root ) ; mapToProperties ( \"<STR_LIT>\" , properties , map ) ; } catch ( Exception e ) { throw new ConfigParseException ( e ) ; } return properties ; } private void recursionXmlToMap ( Map < String , Object > outMap , Element element ) { NodeList nodeList = element . getChildNodes ( ) ; String name = element . getNodeName ( ) ; if ( nodeList . getLength ( ) == <NUM_LIT> && ! nodeList . item ( <NUM_LIT> ) . hasChildNodes ( ) ) { addData ( outMap , name , element . getTextContent ( ) ) ; } else { Map < String , Object > innerMap = new LinkedHashMap < String , Object > ( <NUM_LIT> ) ; int length = nodeList . getLength ( ) ; for ( int i = <NUM_LIT> ; i < length ; i ++ ) { Node node = nodeList . item ( i ) ; if ( node . getNodeType ( ) == Node . ELEMENT_NODE ) { Element tElement = ( Element ) node ; recursionXmlToMap ( innerMap , tElement ) ; } } addData ( outMap , name , innerMap ) ; } } private void addData ( Map < String , Object > map , String key , Object data ) { if ( map . containsKey ( key ) ) { if ( map . get ( key ) instanceof List ) { ( ( List ) map . get ( key ) ) . add ( data ) ; } else { List < Object > list = new LinkedList < Object > ( ) ; list . add ( map . get ( key ) ) ; map . put ( key , list ) ; } } else { map . put ( key , data ) ; } } private void mapToProperties ( String prefixName , Map < String , Object > properties , Object data ) { if ( data instanceof List ) { List list = ( List ) data ; for ( int i = <NUM_LIT> ; i < list . size ( ) ; i ++ ) {", "gt": "int lastIndex = prefixName . lastIndexOf ( '<STR_LIT>' ) ;"}
{"input": "package io . github . chensheng . dddboot . excel ; import io . github . chensheng . dddboot . excel . reader . ExcelReaderFactory ; import io . github . chensheng . dddboot . excel . writer . ExcelWriterFactory ; import io . github . chensheng . dddboot . tools . collection . CollectionUtil ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; public class ExcelUtil { public static < T > List < T > read ( InputStream inputStream , Class < T > rowType ) { if ( inputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( rowType == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } return ExcelReaderFactory . read ( inputStream , rowType ) ; }", "gt": "public static void write ( OutputStream outputStream , List < ? > rowDataList ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ; List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ; Long duplicateCheckCountSql ( DuplicateCheckVo duplicateCheckVo ) ;", "gt": "Long duplicateCheckCountSqlNoDataId ( DuplicateCheckVo duplicateCheckVo ) ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ; String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ; String SQLSERVER_COLUMNS_SQL = \"<STR_LIT>\" ; String POSTGRESQL_COLUMNS_SQL = \"<STR_LIT>\" ; String MYSQL_TABLES_SQL = \"<STR_LIT>\" ; String ORACLE_TABLES_SQL = \"<STR_LIT>\" ;", "gt": "String SQLSERVER_TABLES_SQL = \"<STR_LIT>\" ;"}
{"input": "package org . example . ddduser . application . dto . command ; import lombok . Data ; import org . example . ddduser . domain . user . valueobject . Gender ; import javax . validation . constraints . NotEmpty ; @ Data public class ModifyProfileCommand {", "gt": "@ NotEmpty ( message = \"<STR_LIT>\" ) private String nickName ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ;", "gt": "import org . springframework . web . bind . annotation . * ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import java . util . Comparator ; public class MoreLists { @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > SortedArrayList < T > createSortedArrayList ( ) { return new SortedArrayList < T > ( ) ; } public static < T > SortedArrayList < T > createSortedArrayList ( Comparator < ? super T > c ) {", "gt": "return new SortedArrayList < T > ( c ) ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . rmi . ServerException ; import java . sql . SQLException ;", "gt": "import java . util . * ;"}
{"input": "package top . kangert . kspider . websocket ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . http . server . ServerHttpRequest ; import org . springframework . http . server . ServerHttpResponse ; import org . springframework . http . server . ServletServerHttpRequest ; import org . springframework . web . socket . WebSocketHandler ; import org . springframework . web . socket . server . HandshakeInterceptor ; import cn . hutool . core . util . StrUtil ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; public class WebSocketEditorInterceptor implements HandshakeInterceptor { private static final String TOKEN_PARAMETER = \"<STR_LIT>\" ; @ Autowired private HttpServletRequest request ; public WebSocketEditorInterceptor ( ) { } @ Override public boolean beforeHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Map < String , Object > attributes ) throws Exception { String sessionToken = ( String ) request . getSession ( ) . getAttribute ( TOKEN_PARAMETER ) ; if ( req instanceof ServletServerHttpRequest ) {", "gt": "ServletServerHttpRequest serverRequest = ( ServletServerHttpRequest ) req ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; }", "gt": "SimpleDateFormat dateFormat = null ;"}
{"input": "package org . springblade . web . config . engine . contract ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . ContractForceModel ; import org . springblade . web . model . EntrustModel ; import java . math . BigDecimal ; import java . util . ArrayList ; import java . util . Iterator ; import java . util . List ; import java . util . Map ; @ Data public class CoinMatchContract { private String symbolName ; private BigDecimal lastPrice ; private Long lastTime ; private List < EntrustModel > entrustList ; private BigDecimal miniPriceChangeRefresh = BigDecimal . ZERO ; private List < ContractForceModel > fixedForceList ; public CoinMatchContract ( String symbolName ) { this . symbolName = symbolName ; this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; } public void init ( IMjkjBaseSqlService baseSqlService ) { synchronized ( this ) { this . entrustList = new ArrayList < > ( ) ; this . fixedForceList = new ArrayList < > ( ) ; this . addEntrust ( baseSqlService ) ; this . addFixedForce ( baseSqlService ) ; } } public void resetFixedForce ( String contractLogId , String direction ) { List < ContractForceModel > forceList = this . fixedForceList ; Iterator < ContractForceModel > iterator = forceList . iterator ( ) ; boolean addFlag = true ; while ( iterator . hasNext ( ) ) { ContractForceModel next = iterator . next ( ) ; if ( Func . equals ( contractLogId , next . getContractLogId ( ) ) ) { next . setForcePrice ( BigDecimal . ZERO ) ; addFlag = false ; } } if ( addFlag ) { ContractForceModel forceModel = new ContractForceModel ( ) ; forceModel . setForcePrice ( BigDecimal . ZERO ) ; forceModel . setContractLogId ( contractLogId ) ; forceModel . setDirection ( direction ) ; forceList . add ( forceModel ) ; } } private void addFixedForce ( IMjkjBaseSqlService baseSqlService ) { QueryWrapper < Object > wrrapper = new QueryWrapper < > ( ) ; wrrapper . eq ( \"<STR_LIT>\" , symbolName ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; wrrapper . eq ( \"<STR_LIT>\" , <NUM_LIT> ) ; wrrapper . eq ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; List < Map < String , Object > > contractList = baseSqlService . getDataListByFieldParams ( \"<STR_LIT>\" , wrrapper ) ; if ( Func . isEmpty ( contractList ) ) { return ; } for ( Map < String , Object > contractMap : contractList ) { String contractLogId = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ; String direction = MjkjUtils . getMap2Str ( contractMap , \"<STR_LIT>\" ) ;", "gt": "this . resetFixedForce ( contractLogId , direction ) ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserInfoVO > getCurrentUserInfo ( ) { UserInfoVO userInfoVO = userService . getCurrentUserInfo ( ) ;", "gt": "return Result . success ( userInfoVO ) ;"}
{"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ; save ( localStorage ) ; return localStorage ; } catch ( Exception e ) { FileUtil . del ( file ) ; throw e ; } } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( LocalStorage resources ) { LocalStorage localStorage = getById ( resources . getId ( ) ) ; localStorage . copy ( resources ) ; saveOrUpdate ( localStorage ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void deleteAll ( Long [ ] ids ) { for ( Long id : ids ) { LocalStorage storage = getById ( id ) ; FileUtil . del ( storage . getPath ( ) ) ; removeById ( storage ) ; } } @ Override public void download ( List < LocalStorage > queryAll , HttpServletResponse response ) throws IOException { List < Map < String , Object > > list = new ArrayList < > ( ) ; for ( LocalStorage localStorage : queryAll ) { Map < String , Object > map = new LinkedHashMap < > ( ) ; map . put ( \"<STR_LIT>\" , localStorage . getRealName ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getName ( ) ) ;", "gt": "map . put ( \"<STR_LIT>\" , localStorage . getType ( ) ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ; users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ; } return users ; } @ Override public void switchUser ( String wxId ) { FileUtil . writeString ( wxId , DirUtil . getSwitchUserDir ( ) , \"<STR_LIT>\" ) ; } @ Override public String currentUser ( ) { String switchUserDir = DirUtil . getSwitchUserDir ( ) ; if ( ! FileUtil . exist ( switchUserDir ) ) { return Optional . of ( getWxIds ( ) ) . filter ( items -> ! items . isEmpty ( ) ) . map ( items -> items . get ( <NUM_LIT> ) ) . orElse ( null ) ; } return FileUtil . readUtf8String ( switchUserDir ) ; } @ Override public void saveUser ( UserBO userBO ) { FileUtil . writeString ( JSONUtil . toJsonStr ( userBO ) , DirUtil . getUserDir ( userBO . getWxId ( ) ) , \"<STR_LIT>\" ) ; } @ Override public String getBasePath ( String wxId ) { String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } String userJson = FileUtil . readUtf8String ( userDir ) ; return JSONUtil . toBean ( userJson , UserBO . class ) . getBasePath ( ) ; } private List < String > getWxIds ( ) { List < String > userVOList = new ArrayList < > ( ) ; Path path = Paths . get ( DirUtil . getDbDir ( ) ) ; if ( ! FileUtil . exist ( path . toFile ( ) ) ) { return userVOList ; } try ( DirectoryStream < Path > stream = Files . newDirectoryStream ( path ) ) { for ( Path entry : stream ) { if ( FileUtil . isDirectory ( entry ) ) { userVOList . add ( FileUtil . getName ( entry ) ) ; } } } catch ( IOException e ) {", "gt": "log . error ( \"<STR_LIT>\" , e ) ;"}
{"input": "package com . yf . base . utils . file ; import java . io . File ; import java . io . FileInputStream ; import java . math . BigInteger ; import java . security . MessageDigest ; public class MD5Util { public static String MD5 ( String str ) { try { MessageDigest md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; byte [ ] array = md . digest ( str . getBytes ( \"<STR_LIT>\" ) ) ; StringBuilder sb = new StringBuilder ( ) ; for ( byte item : array ) { sb . append ( Integer . toHexString ( ( item & <NUM_LIT> ) | <NUM_LIT> ) . substring ( <NUM_LIT> , <NUM_LIT> ) ) ; } return sb . toString ( ) ; } catch ( Exception e ) { return null ; } } public static String getFileMD5 ( File file ) { if ( ! file . isFile ( ) ) { return null ; } MessageDigest digest = null ; FileInputStream in = null ; byte [ ] buffer = new byte [ <NUM_LIT> ] ; int len ; try { digest = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; in = new FileInputStream ( file ) ; while ( ( len = in . read ( buffer , <NUM_LIT> , <NUM_LIT> ) ) != - <NUM_LIT> ) { digest . update ( buffer , <NUM_LIT> , len ) ; } in . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } BigInteger bigInt = new BigInteger ( <NUM_LIT> , digest . digest ( ) ) ;", "gt": "return bigInt . toString ( <NUM_LIT> ) ;"}
{"input": "package com . yf . ability . shiro ; import com . yf . ability . shiro . dto . SysUserLoginDTO ; import com . yf . ability . shiro . jwt . JwtToken ; import com . yf . ability . shiro . jwt . JwtUtils ; import com . yf . ability . shiro . service . ShiroUserService ; import lombok . extern . slf4j . Slf4j ; import org . apache . shiro . authc . AuthenticationException ; import org . apache . shiro . authc . AuthenticationInfo ; import org . apache . shiro . authc . AuthenticationToken ; import org . apache . shiro . authc . SimpleAuthenticationInfo ; import org . apache . shiro . authz . AuthorizationInfo ; import org . apache . shiro . authz . SimpleAuthorizationInfo ; import org . apache . shiro . realm . AuthorizingRealm ; import org . apache . shiro . subject . PrincipalCollection ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . context . annotation . Lazy ; import org . springframework . stereotype . Component ; import java . util . HashSet ; import java . util . List ; @ Component @ Slf4j public class MyShiroRealm extends AuthorizingRealm { @ Autowired @ Lazy private ShiroUserService shiroUserService ; @ Override public boolean supports ( AuthenticationToken token ) { return token instanceof JwtToken ; } @ Override protected AuthorizationInfo doGetAuthorizationInfo ( PrincipalCollection principals ) { log . info ( \"<STR_LIT>\" ) ; System . out . println ( \"<STR_LIT>\" ) ; String userId = null ; if ( principals != null ) { SysUserLoginDTO user = ( SysUserLoginDTO ) principals . getPrimaryPrincipal ( ) ; userId = user . getId ( ) ; } SimpleAuthorizationInfo info = new SimpleAuthorizationInfo ( ) ; List < String > roles = shiroUserService . roles ( userId ) ; info . setRoles ( new HashSet < > ( roles ) ) ; List < String > permissions = shiroUserService . permissions ( userId ) ; info . addStringPermissions ( permissions ) ; log . info ( \"<STR_LIT>\" ) ; return info ; } @ Override protected AuthenticationInfo doGetAuthenticationInfo ( AuthenticationToken auth ) throws AuthenticationException { String token = ( String ) auth . getCredentials ( ) ; if ( token == null ) {", "gt": "throw new AuthenticationException ( \"<STR_LIT>\" ) ;"}
{"input": "package org . springblade . gateway . utils ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; }", "gt": "public static < T > T getBean ( Class < T > clazz ) {"}
{"input": "package cn . org . alan . exam . mapper ; import cn . org . alan . exam . model . entity . ExamQuAnswer ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . model . vo . exam . ExamQuAnswerExtVO ; import cn . org . alan . exam . model . vo . score . QuestionAnalyseVO ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import java . util . List ;", "gt": "public interface ExamQuAnswerMapper extends BaseMapper < ExamQuAnswer > {"}
{"input": "package cn . org . alan . exam . model . entity ; import com . alibaba . druid . sql . dialect . mysql . ast . FullTextType ; import com . baomidou . mybatisplus . annotation . * ; import java . io . Serializable ; import java . time . LocalDateTime ; @ TableName ( \"<STR_LIT>\" ) public class User implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Integer id ; private String userName ; private String realName ; @ TableField ( fill = FieldFill . INSERT ) private String password ; private String avatar ; @ TableField ( fill = FieldFill . INSERT ) private Integer roleId ; private Integer gradeId ; @ TableField ( fill = FieldFill . INSERT ) private LocalDateTime createTime ; private Integer status ; private Integer isDeleted ; public Integer getIsDeleted ( ) { return isDeleted ; } public void setIsDeleted ( Integer isDeleted ) { this . isDeleted = isDeleted ; } public Integer getId ( ) { return id ; } public void setId ( Integer id ) { this . id = id ; } public String getUserName ( ) { return userName ; } public void setUserName ( String userName ) { this . userName = userName ; } public String getRealName ( ) { return realName ; } public void setRealName ( String realName ) { this . realName = realName ; } public String getPassword ( ) { return password ; } public void setPassword ( String password ) { this . password = password ; } public String getAvatar ( ) { return avatar ; } public void setAvatar ( String avatar ) {", "gt": "this . avatar = avatar ;"}
{"input": "package com . youlai . system . model . vo ; import io . swagger . v3 . oas . annotations . media . Schema ; import lombok . Data ; @ Schema ( description = \"<STR_LIT>\" ) @ Data public class TablePageVO { @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableName ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableComment ; @ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String tableCollation ;", "gt": "@ Schema ( description = \"<STR_LIT>\" , example = \"<STR_LIT>\" ) private String engine ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ; resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ; delCaches ( dictDetail ) ; } @ Override @ Cacheable ( key = \"<STR_LIT>\" ) public List < DictDetail > getDictByName ( String name ) { return dictDetailMapper . findByDictName ( name ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void delete ( Long id ) { DictDetail dictDetail = getById ( id ) ;", "gt": "removeById ( id ) ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ; entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void enable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ; entity . enable ( ) ; exampleRepository . save ( entity ) ; } @ Override public void disable ( Long id ) {", "gt": "ExampleEntity entity = exampleRepository . getById ( id ) ;"}
{"input": "package org . springblade . config . autopoi . poi . exception . word ; import org . springblade . config . autopoi . poi . exception . word . enmus . WordExportEnum ; public class WordExportException extends RuntimeException { private static final long serialVersionUID = <NUM_LIT> ; public WordExportException ( ) { super ( ) ; } public WordExportException ( String msg ) { super ( msg ) ; } public WordExportException ( WordExportEnum exception ) {", "gt": "super ( exception . getMsg ( ) ) ;"}
{"input": "package org . example . application . example . service . impl ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . service . ExampleCommandService ; import org . example . domain . example . ExampleDomainService ; import org . example . domain . example . entity . ExampleEntity ; import org . example . domain . example . repository . ExampleRepository ; import org . example . domain . example . repository . ExampleSecurityRepository ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service @ Transactional public class ExampleCommandServiceImpl implements ExampleCommandService { @ Autowired private ExampleRepository exampleRepository ; @ Autowired private ExampleSecurityRepository securityRepository ; @ Autowired private ExampleDomainService exampleDomainService ; @ Override public void create ( ExampleCreateCommand command ) { exampleDomainService . validateUsername ( command . getUsername ( ) ) ; ExampleEntity entity = ExampleEntity . create ( command . getUsername ( ) , command . getPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void update ( ExampleUpdatePasswordCommand command ) { Long userId = securityRepository . getLoginUser ( ) ; ExampleEntity entity = exampleRepository . getById ( userId ) ; entity . updatePassword ( command . getOldPassword ( ) , command . getNewPassword ( ) ) ; exampleRepository . save ( entity ) ; } @ Override public void enable ( Long id ) { ExampleEntity entity = exampleRepository . getById ( id ) ;", "gt": "entity . enable ( ) ;"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ; apiError . setMessage ( message ) ; return apiError ; }", "gt": "public static ApiError error ( Integer status , String message ) {"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; public class CharacterStream { private final String source ; private int index = <NUM_LIT> ; private final int end ; private int spanStart = <NUM_LIT> ; public CharacterStream ( String source ) { this ( source , <NUM_LIT> , source . length ( ) ) ; } public CharacterStream ( String source , int start , int end ) { if ( start > end ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( start < <NUM_LIT> ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( start > Math . max ( <NUM_LIT> , source . length ( ) - <NUM_LIT> ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } if ( end > source . length ( ) ) { throw new IndexOutOfBoundsException ( \"<STR_LIT>\" ) ; } this . source = source ; this . index = start ; this . end = end ; } public boolean hasMore ( ) { return index < end ; } public char peek ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public char consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return source . charAt ( index ++ ) ; } public boolean match ( String needle , boolean consume ) { int needleLength = needle . length ( ) ; if ( needleLength + index > end ) { return false ; } for ( int i = <NUM_LIT> , j = index ; i < needleLength ; i ++ , j ++ ) { if ( index >= end ) { return false ; } if ( needle . charAt ( i ) != source . charAt ( j ) ) { return false ; } } if ( consume ) { index += needleLength ; } return true ; } public boolean matchDigit ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isDigit ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierStart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierStart ( c ) || c == '<STR_LIT>' ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean matchIdentifierPart ( boolean consume ) { if ( index >= end ) { return false ; } char c = source . charAt ( index ) ; if ( Character . isJavaIdentifierPart ( c ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public void skipWhiteSpace ( ) { while ( true ) { if ( index >= end ) { return ; } char c = source . charAt ( index ) ;", "gt": "if ( c == '<STR_LIT>' || c == '<STR_LIT>' || c == '<STR_LIT>' || c == '<STR_LIT>' ) {"}
{"input": "package top . kangert . kspider . io ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class Line { private long from ; private String text ; private long to ; public Line ( long from , String text , long to ) { this . from = from ; this . text = text ;", "gt": "this . to = to ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ; private String icon ; private String redirect ; private String treePath ; private Integer keepAlive ; private Integer alwaysShow ;", "gt": "@ TableField ( updateStrategy = FieldStrategy . ALWAYS ) private String params ;"}
{"input": "package org . springblade . cgform . controller ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . IdWorker ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import org . springblade . cgform . enums . MjkjAeskey ; import org . springblade . cgform . service . * ; import org . springblade . config . util . DateUtils ; import org . springblade . config . util . SqlSymbolUtil ; import org . springblade . cgform . entity . CgformButton ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformEnhanceJs ; import org . springblade . cgform . entity . CgformEnhanceSql ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import io . swagger . annotations . ApiParam ; import lombok . AllArgsConstructor ; import org . apache . commons . lang . StringEscapeUtils ; import org . springblade . core . api . crypto . annotation . decrypt . ApiDecryptAes ; import org . springblade . core . boot . ctrl . BladeController ; import org . springblade . core . mp . support . Condition ; import org . springblade . core . mp . support . Query ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . api . R ; import org . springblade . core . tool . utils . Func ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletRequest ; import java . util . HashMap ; import java . util . List ; import java . util . Map ;", "gt": "@ RestController @ AllArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( value = \"<STR_LIT>\" , tags = \"<STR_LIT>\" ) public class CgformEnhanceController extends BladeController {"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < ConfigItem > ( ) ; ConfigItem configStart = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_START_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ; configItemList . add ( configStart ) ; ConfigItem configEnd = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_END_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ;", "gt": "configItemList . add ( configEnd ) ;"}
{"input": "package com . yf . plugins . upload . local . dto ; import com . yf . base . api . api . dto . BaseDTO ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . AllArgsConstructor ;", "gt": "import lombok . Data ;"}
{"input": "package com . yf . system . modules . config . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . yf . base . utils . BeanMapper ; import com . yf . system . modules . config . dto . CfgBaseDTO ; import com . yf . system . modules . config . entity . CfgBase ; import com . yf . system . modules . config . mapper . CfgBaseMapper ; import com . yf . system . modules . config . service . CfgBaseService ; import com . yf . base . utils . CacheKey ; import org . springframework . cache . annotation . CacheEvict ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; @ Service public class CfgBaseServiceImpl extends ServiceImpl < CfgBaseMapper , CfgBase > implements CfgBaseService { @ Cacheable ( value = CacheKey . SITE , key = \"<STR_LIT>\" ) @ Override public CfgBaseDTO findSimple ( ) { QueryWrapper < CfgBase > wrapper = new QueryWrapper < > ( ) ; wrapper . last ( \"<STR_LIT>\" ) ;", "gt": "CfgBase entity = this . getOne ( wrapper , false ) ;"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ;", "gt": "Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ;"}
{"input": "package io . github . chensheng . dddboot . web . core ; public class CommonResponse extends Response < Object > { private static final long serialVersionUID = <NUM_LIT> ; public CommonResponse ( ) { } public CommonResponse ( String code , String msg ) { super ( code , msg ) ; } public CommonResponse ( String code , String msg , Object data ) { super ( code , msg , data ) ; } public static CommonResponse bizSuccess ( Object data ) { return new CommonResponse ( ResponseType . BIZ_SUCCESS . getCode ( ) , ResponseType . BIZ_SUCCESS . getMsg ( ) , data ) ; } public static CommonResponse bizError ( String msg ) { return new CommonResponse ( ResponseType . BIZ_ERROR . getCode ( ) , msg ) ; } public static CommonResponse sysError ( String msg ) {", "gt": "return new CommonResponse ( ResponseType . SYS_ERROR . getCode ( ) , msg ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . context . event . config ; import com . alibaba . nacos . api . config . ConfigService ; public class NacosConfigReceivedEvent extends NacosConfigEvent { private final String content ; private final String type ; public NacosConfigReceivedEvent ( ConfigService configService , String dataId , String groupId , String content , String type ) { super ( configService , dataId , groupId ) ; this . content = content ; this . type = type ; }", "gt": "public String getContent ( ) {"}
{"input": "package cn . org . alan . exam . common . aop ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . ProceedingJoinPoint ; import org . aspectj . lang . Signature ; import org . aspectj . lang . annotation . Around ; import org . aspectj . lang . annotation . Aspect ; import org . aspectj . lang . annotation . Before ; import org . aspectj . lang . annotation . Pointcut ; import org . springframework . stereotype . Component ; import cn . hutool . core . util . RandomUtil ; import com . alibaba . fastjson . JSONObject ; import com . alibaba . fastjson . support . spring . PropertyPreFilters ; import jakarta . servlet . ServletRequest ; import jakarta . servlet . ServletResponse ; import jakarta . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . slf4j . MDC ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import org . springframework . web . multipart . MultipartFile ; @ Aspect @ Component public class LogAsPect { private final static Logger LOG = LoggerFactory . getLogger ( LogAsPect . class ) ; @ Pointcut ( \"<STR_LIT>\" ) public void controllerPointcut ( ) { } @ Before ( \"<STR_LIT>\" ) public void doBefore ( JoinPoint joinPoint ) throws Throwable { ServletRequestAttributes attributes = ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ; HttpServletRequest request = attributes . getRequest ( ) ; Signature signature = joinPoint . getSignature ( ) ; String name = signature . getName ( ) ; LOG . info ( \"<STR_LIT>\" ) ; LOG . info ( \"<STR_LIT>\" , request . getRequestURL ( ) . toString ( ) , request . getMethod ( ) ) ; LOG . info ( \"<STR_LIT>\" , signature . getDeclaringTypeName ( ) , name ) ; LOG . info ( \"<STR_LIT>\" , request . getRemoteAddr ( ) ) ; Object [ ] args = joinPoint . getArgs ( ) ; Object [ ] arguments = new Object [ args . length ] ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] instanceof ServletRequest || args [ i ] instanceof ServletResponse || args [ i ] instanceof MultipartFile ) { continue ; } arguments [ i ] = args [ i ] ; } String [ ] excludeProperties = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" }"}
{"input": "package me . zhengjie . modules . mnt . mapper ; import me . zhengjie . modules . mnt . domain . Server ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . Set ; @ Mapper public interface DeployServerMapper {", "gt": "void insertData ( @ Param ( \"<STR_LIT>\" ) Long deployId , @ Param ( \"<STR_LIT>\" ) Set < Server > servers ) ;"}
{"input": "package cn . org . alan . exam . util ; import cn . org . alan . exam . common . result . Result ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . databind . ObjectMapper ; import jakarta . annotation . Resource ; import jakarta . servlet . http . HttpServletResponse ; import lombok . SneakyThrows ; import org . springframework . stereotype . Component ; import java . io . IOException ; import java . io . PrintWriter ; @ Component public class ResponseUtil { @ Resource private ObjectMapper objectMapper ; @ SneakyThrows ( { JsonProcessingException . class , IOException . class } ) public void response ( HttpServletResponse response , Result result ) { String s = objectMapper . writeValueAsString ( result ) ; response . setCharacterEncoding ( \"<STR_LIT>\" ) ; response . setContentType ( \"<STR_LIT>\" ) ;", "gt": "PrintWriter writer = response . getWriter ( ) ;"}
{"input": "package me . zhengjie . modules . mnt . mapper ; import me . zhengjie . modules . mnt . domain . Server ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . Set ; @ Mapper public interface DeployServerMapper { void insertData ( @ Param ( \"<STR_LIT>\" ) Long deployId , @ Param ( \"<STR_LIT>\" ) Set < Server > servers ) ;", "gt": "void deleteByDeployId ( @ Param ( \"<STR_LIT>\" ) Long deployId ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; }", "gt": "SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ;"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . collection . CollUtil ; import cn . hutool . core . date . DateUtil ; import cn . hutool . core . util . ObjUtil ; import com . xcs . wx . domain . bo . TimelineObjectBO ; import com . xcs . wx . domain . dto . FeedsDTO ; import com . xcs . wx . domain . vo . FeedsLocationVO ; import com . xcs . wx . domain . vo . FeedsMediaVO ; import com . xcs . wx . domain . vo . FeedsVO ; import com . xcs . wx . domain . vo . PageVO ; import com . xcs . wx . mapping . FeedsMapping ; import com . xcs . wx . repository . * ; import com . xcs . wx . service . FeedsService ; import com . xcs . wx . util . XmlUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . util . ArrayList ; import java . util . Date ; import java . util . List ; import java . util . Optional ; import java . util . stream . Collectors ; @ Slf4j @ Service @ RequiredArgsConstructor public class FeedsServiceImpl implements FeedsService { private final FeedsRepository feedsRepository ; private final FeedsMapping feedsMapping ; private final ContactRepository contactRepository ; private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final HardLinkVideoAttributeRepository hardLinkVideoAttributeRepository ; private final HardLinkImageAttributeRepository hardLinkImageAttributeRepository ; @ Override public PageVO < FeedsVO > queryFeeds ( FeedsDTO feedsDTO ) { return Optional . ofNullable ( feedsRepository . queryFeeds ( feedsDTO ) ) . map ( pageResult -> { List < FeedsVO > feedsVos = feedsMapping . convert ( pageResult . getRecords ( ) ) . stream ( ) . map ( feedsVO -> { TimelineObjectBO timelineObjectBO = parseXmlToObj ( feedsVO . getContent ( ) ) ; if ( timelineObjectBO == null ) { return feedsVO ; } feedsVO . setContentDesc ( timelineObjectBO . getContentDesc ( ) ) ; feedsVO . setMedias ( getMedia ( timelineObjectBO ) ) ; feedsVO . setLocation ( getLocation ( timelineObjectBO ) ) ; return feedsVO ; } ) . peek ( feedsVO -> { String strCreateTime = DateUtil . formatDateTime ( new Date ( feedsVO . getCreateTime ( ) * <NUM_LIT> ) ) ; feedsVO . setStrCreateTime ( strCreateTime ) ; } ) . peek ( feedsVO -> { String nickname = contactRepository . getContactNickname ( feedsVO . getUserName ( ) ) ; feedsVO . setNickName ( nickname ) ; } ) . peek ( feedsVO -> { String headImgUrl = contactHeadImgUrlRepository . queryHeadImgUrlByUserName ( feedsVO . getUserName ( ) ) ; feedsVO . setHeadImgUrl ( headImgUrl ) ; } ) . collect ( Collectors . toList ( ) ) ; return new PageVO < > ( pageResult . getCurrent ( ) , pageResult . getSize ( ) , pageResult . getTotal ( ) , feedsVos ) ; } ) . orElse ( new PageVO < > ( feedsDTO . getCurrent ( ) , feedsDTO . getPageSize ( ) , <NUM_LIT> , null ) ) ; } private List < FeedsMediaVO > getMedia ( TimelineObjectBO timelineObjectBO ) { List < FeedsMediaVO > feedsMediaVos = new ArrayList < > ( ) ; List < TimelineObjectBO . ContentObject . Media > mediaList = timelineObjectBO . getContentObject ( ) . getMediaList ( ) ; if ( CollUtil . isEmpty ( mediaList ) ) { return feedsMediaVos ; } for ( TimelineObjectBO . ContentObject . Media media : mediaList ) { FeedsMediaVO feedsMediaVo = new FeedsMediaVO ( ) ; feedsMediaVo . setUrl ( media . getUrl ( ) . getValue ( ) ) ; feedsMediaVo . setThumb ( media . getThumb ( ) . getValue ( ) ) ; feedsMediaVos . add ( feedsMediaVo ) ; } return feedsMediaVos ; } private FeedsLocationVO getLocation ( TimelineObjectBO timelineObjectBO ) { TimelineObjectBO . Location location = timelineObjectBO . getLocation ( ) ; if ( ObjUtil . isNotEmpty ( location ) ) { FeedsLocationVO feedsLocationVO = new FeedsLocationVO ( ) ; feedsLocationVO . setCity ( location . getCity ( ) ) ; feedsLocationVO . setPoiAddress ( location . getPoiAddress ( ) ) ; feedsLocationVO . setPoiClassifyId ( location . getPoiClassifyId ( ) ) ; feedsLocationVO . setPoiName ( location . getPoiName ( ) ) ; feedsLocationVO . setPoiClassifyType ( location . getPoiClassifyType ( ) ) ;", "gt": "return feedsLocationVO ;"}
{"input": "package me . zhengjie . modules . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Set ; @ Mapper public interface DictDetailMapper extends BaseMapper < DictDetail > { List < DictDetail > findByDictName ( @ Param ( \"<STR_LIT>\" ) String name ) ;", "gt": "IPage < DictDetail > findAll ( @ Param ( \"<STR_LIT>\" ) DictDetailQueryCriteria criteria , Page < Object > page ) ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import org . springframework . core . annotation . AnnotationUtils ; import org . springframework . core . env . PropertyResolver ; import org . springframework . util . StringUtils ; import java . lang . annotation . Annotation ; import java . util . Map ; import java . util . Properties ; public class PropertiesPlaceholderResolver { private final PropertyResolver propertyResolver ; public PropertiesPlaceholderResolver ( PropertyResolver propertyResolver ) { this . propertyResolver = propertyResolver ; } public Properties resolve ( Annotation annotation ) { Map < String , Object > attributes = AnnotationUtils . getAnnotationAttributes ( annotation ) ; return resolve ( attributes ) ; } public Properties resolve ( Map < ? , ? > properties ) { Properties resolvedProperties = new Properties ( ) ; for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) instanceof CharSequence ) {", "gt": "String key = String . valueOf ( entry . getKey ( ) ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } SimpleDateFormat simpleDateFormat = new SimpleDateFormat ( \"<STR_LIT>\" ) ; SimpleDateFormat simpleDateFormat2 = new SimpleDateFormat ( pattern ) ; Date parse ; try { parse = simpleDateFormat . parse ( obj . toString ( ) ) ; } catch ( ParseException ex ) { ex . printStackTrace ( ) ; return \"<STR_LIT>\" ; } return simpleDateFormat2 . format ( parse ) ; } public String percent ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return NumberFormat . getPercentInstance ( Locale . CHINA ) . format ( obj ) ; } public String date ( Object obj , String pattern ) { if ( obj == null ) { return \"<STR_LIT>\" ; } return new SimpleDateFormat ( pattern ) . format ( obj ) ; } public String date ( Object obj ) {", "gt": "if ( obj == null ) {"}
{"input": "package com . xcs . wx . service . impl ; import cn . hutool . core . io . FileUtil ; import cn . hutool . core . util . StrUtil ; import cn . hutool . json . JSONUtil ; import com . baomidou . dynamic . datasource . toolkit . DynamicDataSourceContextHolder ; import com . xcs . wx . constant . DataSourceType ; import com . xcs . wx . domain . bo . UserBO ; import com . xcs . wx . domain . vo . UserInfoVO ; import com . xcs . wx . domain . vo . UserVO ; import com . xcs . wx . mapping . UserMapping ; import com . xcs . wx . repository . ContactHeadImgUrlRepository ; import com . xcs . wx . repository . ContactRepository ; import com . xcs . wx . service . UserService ; import com . xcs . wx . util . DSNameUtil ; import com . xcs . wx . util . DirUtil ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . stereotype . Service ; import java . io . IOException ; import java . nio . file . DirectoryStream ; import java . nio . file . Files ; import java . nio . file . Path ; import java . nio . file . Paths ; import java . util . ArrayList ; import java . util . List ; import java . util . Optional ; @ Slf4j @ Service @ RequiredArgsConstructor public class UserServiceImpl implements UserService { private final ContactHeadImgUrlRepository contactHeadImgUrlRepository ; private final ContactRepository contactRepository ; private final UserMapping userMapping ; @ Override public UserInfoVO userInfo ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } UserBO userBO = JSONUtil . toBean ( FileUtil . readUtf8String ( userDir ) , UserBO . class ) ; if ( StrUtil . NULL . equals ( userBO . getNickname ( ) ) ) { userBO . setNickname ( getNickName ( userBO . getWxId ( ) ) ) ; } return userMapping . convert ( userBO ) ; } @ Override public String avatar ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getAvatar ( wxId ) ; } @ Override public String nickname ( ) { String wxId = currentUser ( ) ; if ( wxId == null ) { return null ; } return getNickName ( wxId ) ; } @ Override public List < UserVO > users ( ) { List < UserVO > users = new ArrayList < > ( ) ; List < String > wxIds = getWxIds ( ) ; for ( String wxId : wxIds ) { boolean current = wxId . equals ( currentUser ( ) ) ; String avatar = getAvatar ( wxId ) ; String nickName = getNickName ( wxId ) ; users . add ( new UserVO ( wxId , nickName , avatar , current ) ) ; } return users ; } @ Override public void switchUser ( String wxId ) { FileUtil . writeString ( wxId , DirUtil . getSwitchUserDir ( ) , \"<STR_LIT>\" ) ; } @ Override public String currentUser ( ) { String switchUserDir = DirUtil . getSwitchUserDir ( ) ; if ( ! FileUtil . exist ( switchUserDir ) ) { return Optional . of ( getWxIds ( ) ) . filter ( items -> ! items . isEmpty ( ) ) . map ( items -> items . get ( <NUM_LIT> ) ) . orElse ( null ) ; } return FileUtil . readUtf8String ( switchUserDir ) ; } @ Override public void saveUser ( UserBO userBO ) { FileUtil . writeString ( JSONUtil . toJsonStr ( userBO ) , DirUtil . getUserDir ( userBO . getWxId ( ) ) , \"<STR_LIT>\" ) ; } @ Override public String getBasePath ( String wxId ) { String userDir = DirUtil . getUserDir ( wxId ) ; if ( ! FileUtil . exist ( userDir ) ) { return null ; } String userJson = FileUtil . readUtf8String ( userDir ) ; return JSONUtil . toBean ( userJson , UserBO . class ) . getBasePath ( ) ; } private List < String > getWxIds ( ) { List < String > userVOList = new ArrayList < > ( ) ;", "gt": "Path path = Paths . get ( DirUtil . getDbDir ( ) ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ; private int initSize ; public StringBuilderHolder ( int initSize ) { this . initSize = initSize ; } public static StringBuilder getGlobal ( ) { StringBuilder sb = globalStringBuilder . get ( ) ; sb . setLength ( <NUM_LIT> ) ;", "gt": "return sb ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class CompressContentBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppMsg appMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsername ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int scene ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppInfo appInfo ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String titile ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String title ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String sourceDisplayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String des ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String url ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String action ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int showType ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private ReferMsg referMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private WeAppInfo weAppInfo ;", "gt": "@ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class ReferMsg {"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ; Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ; if ( exampleAnnotation != null ) { this . example = exampleAnnotation . value ( ) ; } Comment commentAnnotation = method . getDeclaredAnnotation ( Comment . class ) ;", "gt": "if ( commentAnnotation != null ) {"}
{"input": "package cn . org . alan . exam . util . excel ; import java . lang . annotation . ElementType ; import java . lang . annotation . Retention ; import java . lang . annotation . RetentionPolicy ; import java . lang . annotation . Target ;", "gt": "@ Target ( ElementType . FIELD ) @ Retention ( RetentionPolicy . RUNTIME ) public @ interface ExcelExport {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ;", "gt": "Long getIdByCode ( String code ) ;"}
{"input": "package cn . org . alan . exam . security ; import cn . org . alan . exam . model . entity . User ; import lombok . Data ; import lombok . NoArgsConstructor ; import org . springframework . security . core . GrantedAuthority ; import org . springframework . security . core . authority . SimpleGrantedAuthority ; import org . springframework . security . core . userdetails . UserDetails ; import java . util . Collection ; import java . util . List ; @ Data @ NoArgsConstructor public class SysUserDetails implements UserDetails { private List < SimpleGrantedAuthority > permissions ; private User user ; private String username ; public SysUserDetails ( User user ) { this . user = user ; } @ Override public Collection < ? extends GrantedAuthority > getAuthorities ( ) { return permissions ; } public void setPermissions ( List < SimpleGrantedAuthority > permissions ) { this . permissions = permissions ; }", "gt": "@ Override public String getPassword ( ) {"}
{"input": "package com . yf . system . modules . depart . dto . request ; import com . fasterxml . jackson . annotation . JsonIgnore ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import java . io . Serializable ; @ Data @ ApiModel ( value = \"<STR_LIT>\" , description = \"<STR_LIT>\" ) public class DepartQueryReqDTO implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String parentId ; @ JsonIgnore private String deptCodes ; @ JsonIgnore private String likeCode ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String deptCode ;", "gt": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private String deptName ;"}
{"input": "package org . springblade . config . util ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import org . springblade . config . handler . IFillRuleHandler ; import lombok . extern . slf4j . Slf4j ; import org . apache . commons . lang . StringUtils ; @ Slf4j public class FillRuleUtil { @ SuppressWarnings ( \"<STR_LIT>\" ) public static Object executeRule ( String ruleCode , JSONObject formData ) { if ( ! StringUtils . isEmpty ( ruleCode ) ) { try { ServiceImpl impl = ( ServiceImpl ) SpringContextUtils . getBean ( \"<STR_LIT>\" ) ; QueryWrapper queryWrapper = new QueryWrapper ( ) ; queryWrapper . eq ( \"<STR_LIT>\" , ruleCode ) ; JSONObject entity = JSON . parseObject ( JSON . toJSONString ( impl . getOne ( queryWrapper ) ) ) ; if ( entity == null ) { log . warn ( \"<STR_LIT>\" + ruleCode + \"<STR_LIT>\" ) ; return null ; } String ruleClass = entity . getString ( \"<STR_LIT>\" ) ; JSONObject params = entity . getJSONObject ( \"<STR_LIT>\" ) ; if ( params == null ) {", "gt": "params = new JSONObject ( ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) {", "gt": "roleService . addRole ( roleDto ) ;"}
{"input": "package com . oddfar . campus . common . enums ; import cn . hutool . core . util . DesensitizedUtil ; import lombok . AllArgsConstructor ; import java . util . function . Function ; @ AllArgsConstructor public enum SensitiveStrategy { ID_CARD ( s -> DesensitizedUtil . idCardNum ( s , <NUM_LIT> , <NUM_LIT> ) ) , PHONE ( DesensitizedUtil :: mobilePhone ) , ADDRESS ( s -> DesensitizedUtil . address ( s , <NUM_LIT> ) ) , EMAIL ( DesensitizedUtil :: email ) , BANK_CARD ( DesensitizedUtil :: bankCard ) ;", "gt": "private final Function < String , String > desensitizer ;"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; } else if ( TIME_STR . equals ( format ) ) { dateFormat = TIME_FORMAT ; } else if ( TIME__NO_S_STR . equals ( format ) ) { dateFormat = TIME__NO_S_FORMAT ; } else { dateFormat = new SimpleDateFormat ( format ) ; } return dateFormat . format ( obj ) ; } public static boolean isTrue ( Object first , String operator , Object second ) {", "gt": "if ( \"<STR_LIT>\" . endsWith ( operator ) ) {"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ;", "gt": "private String params ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) { roleService . addRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }", "gt": ") public CommonResult update ( @ RequestBody @ Validated ( UpdateGroup . class ) RoleDto roleDto ) {"}
{"input": "package com . youlai . system . model . dto ; import lombok . Data ; import java . util . Set ; @ Data public class UserAuthInfo { private Long userId ; private String username ; private String nickname ; private Long deptId ; private String password ; private Integer status ; private Set < String > roles ;", "gt": "private Set < String > perms ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class CompressContentBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppMsg appMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsername ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int scene ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppInfo appInfo ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String titile ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String title ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String sourceDisplayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String des ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String url ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String action ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int showType ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private ReferMsg referMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private WeAppInfo weAppInfo ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class ReferMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private long svrId ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsr ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String displayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String content ;", "gt": "@ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String msgSource ;"}
{"input": "package cn . org . alan . exam . common . aop ; import org . aspectj . lang . JoinPoint ; import org . aspectj . lang . ProceedingJoinPoint ; import org . aspectj . lang . Signature ; import org . aspectj . lang . annotation . Around ; import org . aspectj . lang . annotation . Aspect ; import org . aspectj . lang . annotation . Before ; import org . aspectj . lang . annotation . Pointcut ; import org . springframework . stereotype . Component ; import cn . hutool . core . util . RandomUtil ; import com . alibaba . fastjson . JSONObject ; import com . alibaba . fastjson . support . spring . PropertyPreFilters ; import jakarta . servlet . ServletRequest ; import jakarta . servlet . ServletResponse ; import jakarta . servlet . http . HttpServletRequest ; import org . slf4j . Logger ; import org . slf4j . LoggerFactory ; import org . slf4j . MDC ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import org . springframework . web . multipart . MultipartFile ; @ Aspect @ Component public class LogAsPect { private final static Logger LOG = LoggerFactory . getLogger ( LogAsPect . class ) ; @ Pointcut ( \"<STR_LIT>\" ) public void controllerPointcut ( ) { } @ Before ( \"<STR_LIT>\" ) public void doBefore ( JoinPoint joinPoint ) throws Throwable { ServletRequestAttributes attributes = ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ; HttpServletRequest request = attributes . getRequest ( ) ; Signature signature = joinPoint . getSignature ( ) ; String name = signature . getName ( ) ; LOG . info ( \"<STR_LIT>\" ) ; LOG . info ( \"<STR_LIT>\" , request . getRequestURL ( ) . toString ( ) , request . getMethod ( ) ) ; LOG . info ( \"<STR_LIT>\" , signature . getDeclaringTypeName ( ) , name ) ; LOG . info ( \"<STR_LIT>\" , request . getRemoteAddr ( ) ) ; Object [ ] args = joinPoint . getArgs ( ) ; Object [ ] arguments = new Object [ args . length ] ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) {", "gt": "if ( args [ i ] instanceof ServletRequest || args [ i ] instanceof ServletResponse || args [ i ] instanceof MultipartFile ) {"}
{"input": "package com . oddfar . campus . common . enums ; import cn . hutool . core . util . DesensitizedUtil ; import lombok . AllArgsConstructor ; import java . util . function . Function ; @ AllArgsConstructor public enum SensitiveStrategy { ID_CARD ( s -> DesensitizedUtil . idCardNum ( s , <NUM_LIT> , <NUM_LIT> ) ) , PHONE ( DesensitizedUtil :: mobilePhone ) , ADDRESS ( s -> DesensitizedUtil . address ( s , <NUM_LIT> ) ) , EMAIL ( DesensitizedUtil :: email ) , BANK_CARD ( DesensitizedUtil :: bankCard ) ; private final Function < String , String > desensitizer ;", "gt": "public Function < String , String > desensitizer ( ) {"}
{"input": "package io . github . chensheng . dddboot . excel . converter ; import io . github . chensheng . dddboot . excel . core . CellValueType ; import org . apache . poi . ss . usermodel . Cell ; import org . apache . poi . ss . usermodel . CellType ; import org . apache . poi . ss . usermodel . Workbook ; import java . lang . reflect . Field ; public class IntegerConverter implements Converter { @ Override public boolean support ( Field field , CellValueType type ) { Class < ? > fieldType = field . getType ( ) ; return Integer . class == fieldType || int . class == fieldType ; } @ Override public Object fromCellContent ( String cellContent , Field field , String format , boolean use1904DateWindowing ) { try { return Integer . parseInt ( cellContent ) ; } catch ( NumberFormatException e ) { try { return ( int ) Double . parseDouble ( cellContent ) ; } catch ( Exception ex ) { return Integer . class == field . getType ( ) ? null : <NUM_LIT> ; } } } @ Override public void setCellContent ( Workbook workbook , Cell cell , Object cellValue , String format ) {", "gt": "Integer value = ( Integer ) cellValue ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ;", "gt": "import org . springframework . core . type . AnnotationMetadata ;"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . env ; import io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySources ; import io . github . chensheng . dddboot . nacos . spring . context . event . config . NacosConfigMetadataEvent ; import org . springframework . beans . factory . annotation . AnnotatedBeanDefinition ; import org . springframework . core . type . AnnotationMetadata ; import java . util . * ; public class AnnotationNacosPropertySourceBuilder extends AbstractNacosPropertySourceBuilder < AnnotatedBeanDefinition > { public static final String BEAN_NAME = \"<STR_LIT>\" ; @ Override protected Map < String , Object > [ ] resolveRuntimeAttributesArray ( AnnotatedBeanDefinition beanDefinition , Properties globalNacosProperties ) { AnnotationMetadata metadata = beanDefinition . getMetadata ( ) ; Set < String > annotationTypes = metadata . getAnnotationTypes ( ) ; List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; for ( String annotationType : annotationTypes ) { annotationAttributesList . addAll ( getAnnotationAttributesList ( metadata , annotationType ) ) ; } return annotationAttributesList . toArray ( new Map [ <NUM_LIT> ] ) ; } private List < Map < String , Object > > getAnnotationAttributesList ( AnnotationMetadata metadata , String annotationType ) { List < Map < String , Object > > annotationAttributesList = new LinkedList < Map < String , Object > > ( ) ; if ( NacosPropertySources . class . getName ( ) . equals ( annotationType ) ) { Map < String , Object > annotationAttributes = metadata . getAnnotationAttributes ( annotationType ) ; if ( annotationAttributes != null ) { annotationAttributesList . addAll ( Arrays . asList ( ( Map < String , Object > [ ] ) annotationAttributes . get ( \"<STR_LIT>\" ) ) ) ; } } else if ( NacosPropertySource . class . getName ( ) . equals ( annotationType ) ) { annotationAttributesList . add ( metadata . getAnnotationAttributes ( annotationType ) ) ; } return annotationAttributesList ; } @ Override protected void initNacosPropertySource ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition , Map < String , Object > annotationAttributes ) { initAttributesMetadata ( nacosPropertySource , annotationAttributes ) ; initAutoRefreshed ( nacosPropertySource , annotationAttributes ) ; initOrigin ( nacosPropertySource , beanDefinition ) ; initOrder ( nacosPropertySource , annotationAttributes ) ; } private void initAttributesMetadata ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { nacosPropertySource . setAttributesMetadata ( annotationAttributes ) ; } private void initAutoRefreshed ( NacosPropertySource nacosPropertySource , Map < String , Object > annotationAttributes ) { boolean autoRefreshed = Boolean . TRUE . equals ( annotationAttributes . get ( io . github . chensheng . dddboot . nacos . spring . context . annotation . config . NacosPropertySource . AUTO_REFRESHED_ATTRIBUTE_NAME ) ) ; nacosPropertySource . setAutoRefreshed ( autoRefreshed ) ; }", "gt": "private void initOrigin ( NacosPropertySource nacosPropertySource , AnnotatedBeanDefinition beanDefinition ) {"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String method ;"}
{"input": "package com . youlai . system . controller ; import com . youlai . system . common . result . Result ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . model . form . MenuForm ; import com . youlai . system . model . query . MenuQuery ; import com . youlai . system . model . vo . MenuVO ; import com . youlai . system . common . model . Option ; import com . youlai . system . model . vo . RouteVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . security . util . SecurityUtils ; import com . youlai . system . service . SysMenuService ; import io . swagger . v3 . oas . annotations . Operation ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; import java . util . List ; import java . util . Set ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor @ Slf4j public class SysMenuController { private final SysMenuService menuService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . MENU ) public Result < List < MenuVO > > listMenus ( MenuQuery queryParams ) { List < MenuVO > menuList = menuService . listMenus ( queryParams ) ; return Result . success ( menuList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result listMenuOptions ( ) { List < Option > menus = menuService . listMenuOptions ( ) ; return Result . success ( menus ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < List < RouteVO > > listRoutes ( ) { Set < String > roles = SecurityUtils . getRoles ( ) ; List < RouteVO > routeList = menuService . listRoutes ( roles ) ; return Result . success ( routeList ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < MenuForm > getMenuForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long id ) {", "gt": "MenuForm menu = menuService . getMenuForm ( id ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; } public void setAmount ( BigDecimal amount ) { this . amount = amount ; } public String getUnit ( ) {", "gt": "return unit ;"}
{"input": "package org . springblade . cgform . model . database . util ; public interface DbConvertDef { String YES_DEF = \"<STR_LIT>\" ; String NO_DEF = \"<STR_LIT>\" ; String MYSQL = \"<STR_LIT>\" ; String ORACLE = \"<STR_LIT>\" ; String SQLSERVER = \"<STR_LIT>\" ; String POSTGRESQL = \"<STR_LIT>\" ; String MYSQL_COLUMNS_SQL = \"<STR_LIT>\" ; String ORACLE_COLUMNS_SQL = \"<STR_LIT>\" ; String SQLSERVER_COLUMNS_SQL = \"<STR_LIT>\" ;", "gt": "String POSTGRESQL_COLUMNS_SQL = \"<STR_LIT>\" ;"}
{"input": "package com . oddfar . campus . framework . service ; import com . baomidou . mybatisplus . extension . service . IService ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . TreeSelect ; import com . oddfar . campus . common . domain . entity . SysResourceEntity ; import com . oddfar . campus . common . domain . model . SysRoleAuth ; import java . util . List ; import java . util . Set ; public interface SysResourceService extends IService < SysResourceEntity > { PageResult < SysResourceEntity > page ( SysResourceEntity sysResourceEntity ) ;", "gt": "int insertResource ( SysResourceEntity resource ) ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ; import org . springblade . core . secure . utils . AuthUtil ; import org . springblade . core . tool . node . ForestNodeMerger ;", "gt": "import org . springblade . core . tool . utils . Func ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }", "gt": ") @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) public CommonResult add ( @ RequestBody @ Validated ( AddGroup . class ) NoticeDto noticeDto ) {"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . Getter ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; @ Getter @ Setter public class AuthUserDto { @ NotBlank private String username ; @ NotBlank private String password ; private String code ;", "gt": "private String uuid = \"<STR_LIT>\" ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ; import org . springblade . config . exception . DBException ; import org . springblade . config . service . DbTableHandleI ; import org . springblade . config . util . * ; import org . springblade . core . mp . base . BaseServiceImpl ; import org . springblade . core . redis . cache . BladeRedis ; import org . springblade . core . secure . BladeUser ;", "gt": "import org . springblade . core . secure . utils . AuthUtil ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ;", "gt": "List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ;"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ; @ TableField ( \"<STR_LIT>\" ) private String reserved2 ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private Integer reserved3 ;"}
{"input": "package cn . org . alan . exam . mapper ; import cn . org . alan . exam . model . entity . ExamQuAnswer ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . model . vo . exam . ExamQuAnswerExtVO ; import cn . org . alan . exam . model . vo . score . QuestionAnalyseVO ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ;", "gt": "import java . util . List ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ; UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ; if ( userExamsScore . getUserScore ( ) >= exam . getPassedScore ( ) ) {", "gt": "CertificateUser certificateUser = new CertificateUser ( ) ;"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) { return toString ( false ) ; } public String toString ( boolean isSimple ) { final StringBuilder builder = new StringBuilder ( isSimple ? <NUM_LIT> : <NUM_LIT> ) ;", "gt": "builder . append ( digits ( mostSigBits > > <NUM_LIT> , <NUM_LIT> ) ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ;", "gt": "private int initSize ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String countryId ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String merchantId ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ; if ( ! StringUtils . isBlank ( currentId ) ) { if ( LoginType . MOBILE . equals ( loginType ) ) { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } else { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } } SysUserBind bind = new SysUserBind ( ) ; bind . setUserId ( userId ) ; bind . setLoginType ( loginType ) ; bind . setOpenId ( openId ) ; this . save ( bind ) ; } @ Override public void delete ( List < String > ids ) { this . removeByIds ( ids ) ; } @ Override public String findBind ( String loginType , String openId ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ;", "gt": "wrapper . lambda ( ) . eq ( SysUserBind :: getLoginType , loginType ) . eq ( SysUserBind :: getOpenId , openId ) ;"}
{"input": "package ginyi . server . admin . controller ; import ginyi . common . result . CommonResult ; import ginyi . system . service . IVerifyService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . GetMapping ; import org . springframework . web . bind . annotation . PathVariable ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import javax . annotation . Resource ; import javax . servlet . http . HttpServletRequest ;", "gt": "import java . util . HashMap ;"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) { return fillPattern ; } public void setFillPattern ( FillPatternType fillPattern ) { this . fillPattern = fillPattern ; } public Short getFillForegroundColor ( ) { return fillForegroundColor ; } public void setFillForegroundColor ( Short fillForegroundColor ) { this . fillForegroundColor = fillForegroundColor ; } public BorderStyle getBorderBottom ( ) { return borderBottom ; } public void setBorderBottom ( BorderStyle borderBottom ) { this . borderBottom = borderBottom ; } public BorderStyle getBorderLeft ( ) { return borderLeft ; } public void setBorderLeft ( BorderStyle borderLeft ) {", "gt": "this . borderLeft = borderLeft ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ; void update ( Job resources ) ; void delete ( Set < Long > ids ) ;", "gt": "PageResult < Job > queryAll ( JobQueryCriteria criteria , Page < Object > page ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ;", "gt": "List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; } public static String isBlank ( String s ) { if ( StringUtils . isBlank ( s ) ) { return \"<STR_LIT>\" ; }", "gt": "return s ;"}
{"input": "package org . springblade . cgform . service . impl ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONArray ; import com . alibaba . fastjson . JSONObject ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import lombok . extern . slf4j . Slf4j ; import org . springblade . cgform . entity . CgformEnhanceJava ; import org . springblade . cgform . entity . CgformField ; import org . springblade . cgform . entity . CgformHead ; import org . springblade . cgform . entity . CgformIndex ; import org . springblade . cgform . enums . CgformEnum ; import org . springblade . cgform . mapper . CgformHeadMapper ; import org . springblade . cgform . model . CgformModel ; import org . springblade . cgform . model . OnlGenerateModel ; import org . springblade . cgform . model . TreeDataModel ; import org . springblade . cgform . model . database . DbReadTableUtil ; import org . springblade . cgform . model . generate . impl . CodeGenerateOne ; import org . springblade . cgform . model . generate . impl . CodeGenerateOneToMany ; import org . springblade . cgform . model . generate . pojo . ColumnExpVo ; import org . springblade . cgform . model . generate . pojo . ColumnVo ; import org . springblade . cgform . model . generate . pojo . TableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . MainTableVo ; import org . springblade . cgform . model . generate . pojo . onetomany . SubTableVo ; import org . springblade . cgform . service . * ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . config . constant . MjjyConfig ; import org . springblade . config . constant . MjkjConstant ; import org . springblade . config . db . DataBaseConfig ; import org . springblade . config . db . TableModel ; import org . springblade . config . exception . BusinessException ;", "gt": "import org . springblade . config . exception . DBException ;"}
{"input": "package org . example . ddduser ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; @ SpringBootApplication @ MapperScan ( \"<STR_LIT>\" ) public class Application {", "gt": "public static void main ( String [ ] args ) {"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class CompressContentBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppMsg appMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsername ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int scene ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppInfo appInfo ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String titile ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String title ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String sourceDisplayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String des ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String url ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String action ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int showType ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private ReferMsg referMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private WeAppInfo weAppInfo ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class ReferMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private long svrId ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsr ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String displayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String content ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String msgSource ; } @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class WeAppInfo { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String weAppIconUrl ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String weAppPageThumbRawUrl ; } } @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppInfo { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int version ;", "gt": "@ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String appName ;"}
{"input": "package org . springblade . config . util ; import org . springframework . beans . BeansException ; import org . springframework . context . ApplicationContext ; import org . springframework . context . ApplicationContextAware ; import org . springframework . stereotype . Component ; import org . springframework . web . context . request . RequestContextHolder ; import org . springframework . web . context . request . ServletRequestAttributes ; import javax . servlet . http . HttpServletRequest ; @ Component public class SpringContextUtils implements ApplicationContextAware { private static ApplicationContext applicationContext ; @ Override public void setApplicationContext ( ApplicationContext applicationContext ) throws BeansException { SpringContextUtils . applicationContext = applicationContext ; } public static ApplicationContext getApplicationContext ( ) { return applicationContext ; } public static HttpServletRequest getHttpServletRequest ( ) { return ( ( ServletRequestAttributes ) RequestContextHolder . getRequestAttributes ( ) ) . getRequest ( ) ; } public static String getDomain ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; StringBuffer url = request . getRequestURL ( ) ; return url . delete ( url . length ( ) - request . getRequestURI ( ) . length ( ) , url . length ( ) ) . toString ( ) ; } public static String getOrigin ( ) { HttpServletRequest request = getHttpServletRequest ( ) ; return request . getHeader ( \"<STR_LIT>\" ) ; } public static Object getBean ( String name ) { return getApplicationContext ( ) . getBean ( name ) ; } public static < T > T getBean ( Class < T > clazz ) { return getApplicationContext ( ) . getBean ( clazz ) ; } public static < T > T getBean ( String name , Class < T > clazz ) {", "gt": "return getApplicationContext ( ) . getBean ( name , clazz ) ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }"}
{"input": "package com . oddfar . campus . framework . mapper ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . oddfar . campus . common . core . BaseMapperX ; import com . oddfar . campus . common . domain . entity . SysRoleResourceEntity ; import java . util . List ; public interface SysRoleResourceMapper extends BaseMapperX < SysRoleResourceEntity > { default int deleteRoleResourceByRoleId ( Long roleId ) { return delete ( new QueryWrapper < SysRoleResourceEntity > ( ) . eq ( \"<STR_LIT>\" , roleId ) ) ; }", "gt": "int saveBatch ( List < SysRoleResourceEntity > rrList ) ;"}
{"input": "package com . oddfar . campus . admin . config ; import io . swagger . models . auth . In ; import io . swagger . v3 . oas . annotations . Operation ; import org . springframework . beans . factory . annotation . Value ; import org . springframework . context . annotation . Bean ; import org . springframework . context . annotation . Configuration ; import springfox . documentation . builders . ApiInfoBuilder ; import springfox . documentation . builders . PathSelectors ; import springfox . documentation . builders . RequestHandlerSelectors ; import springfox . documentation . service . * ; import springfox . documentation . spi . DocumentationType ; import springfox . documentation . spi . service . contexts . SecurityContext ; import springfox . documentation . spring . web . plugins . Docket ; import java . util . ArrayList ; import java . util . List ; @ Configuration public class SwaggerConfig { @ Value ( \"<STR_LIT>\" ) private boolean enabled ; @ Value ( \"<STR_LIT>\" ) private String version ; @ Bean public Docket createRestApi ( ) { return new Docket ( DocumentationType . OAS_30 ) . enable ( enabled ) . apiInfo ( apiInfo ( ) ) . select ( ) . apis ( RequestHandlerSelectors . withMethodAnnotation ( Operation . class ) ) . paths ( PathSelectors . any ( ) ) . build ( ) . securitySchemes ( securitySchemes ( ) ) . securityContexts ( securityContexts ( ) ) ; } private List < SecurityScheme > securitySchemes ( ) { List < SecurityScheme > apiKeyList = new ArrayList < SecurityScheme > ( ) ; apiKeyList . add ( new ApiKey ( \"<STR_LIT>\" , \"<STR_LIT>\" , In . HEADER . toValue ( ) ) ) ; return apiKeyList ; } private List < SecurityContext > securityContexts ( ) { List < SecurityContext > securityContexts = new ArrayList < > ( ) ; securityContexts . add ( SecurityContext . builder ( ) . securityReferences ( defaultAuth ( ) ) . operationSelector ( o -> o . requestMappingPattern ( ) . matches ( \"<STR_LIT>\" ) ) . build ( ) ) ; return securityContexts ; } private List < SecurityReference > defaultAuth ( ) { AuthorizationScope authorizationScope = new AuthorizationScope ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; AuthorizationScope [ ] authorizationScopes = new AuthorizationScope [ <NUM_LIT> ] ;", "gt": "authorizationScopes [ <NUM_LIT> ] = authorizationScope ;"}
{"input": "package ginyi . common . utils . uuid ; import cn . hutool . core . exceptions . UtilException ; import java . security . MessageDigest ; import java . security . NoSuchAlgorithmException ; import java . security . SecureRandom ; import java . util . Random ; import java . util . concurrent . ThreadLocalRandom ; public final class UUID implements java . io . Serializable , Comparable < UUID > { private static final long serialVersionUID = - <NUM_LIT> ; private static class Holder { static final SecureRandom numberGenerator = getSecureRandom ( ) ; } private final long mostSigBits ; private final long leastSigBits ; private UUID ( byte [ ] data ) { long msb = <NUM_LIT> ; long lsb = <NUM_LIT> ; assert data . length == <NUM_LIT> : \"<STR_LIT>\" ; for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { msb = ( msb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { lsb = ( lsb << <NUM_LIT> ) | ( data [ i ] & <NUM_LIT> ) ; } this . mostSigBits = msb ; this . leastSigBits = lsb ; } public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; } public static UUID fastUUID ( ) { return randomUUID ( false ) ; } public static UUID randomUUID ( ) { return randomUUID ( true ) ; } public static UUID randomUUID ( boolean isSecure ) { final Random ng = isSecure ? Holder . numberGenerator : getRandom ( ) ; byte [ ] randomBytes = new byte [ <NUM_LIT> ] ; ng . nextBytes ( randomBytes ) ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] &= <NUM_LIT> ; randomBytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( randomBytes ) ; } public static UUID nameUUIDFromBytes ( byte [ ] name ) { MessageDigest md ; try { md = MessageDigest . getInstance ( \"<STR_LIT>\" ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new InternalError ( \"<STR_LIT>\" ) ; } byte [ ] md5Bytes = md . digest ( name ) ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] &= <NUM_LIT> ; md5Bytes [ <NUM_LIT> ] |= <NUM_LIT> ; return new UUID ( md5Bytes ) ; } public static UUID fromString ( String name ) { String [ ] components = name . split ( \"<STR_LIT>\" ) ; if ( components . length != <NUM_LIT> ) { throw new IllegalArgumentException ( \"<STR_LIT>\" + name ) ; } for ( int i = <NUM_LIT> ; i < <NUM_LIT> ; i ++ ) { components [ i ] = \"<STR_LIT>\" + components [ i ] ; } long mostSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; mostSigBits <<= <NUM_LIT> ; mostSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; long leastSigBits = Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; leastSigBits <<= <NUM_LIT> ; leastSigBits |= Long . decode ( components [ <NUM_LIT> ] ) . longValue ( ) ; return new UUID ( mostSigBits , leastSigBits ) ; } public long getLeastSignificantBits ( ) { return leastSigBits ; } public long getMostSignificantBits ( ) { return mostSigBits ; } public int version ( ) { return ( int ) ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) ; } public int variant ( ) { return ( int ) ( ( leastSigBits > > > ( <NUM_LIT> - ( leastSigBits > > > <NUM_LIT> ) ) ) & ( leastSigBits > > <NUM_LIT> ) ) ; } public long timestamp ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( mostSigBits & <NUM_LIT> ) << <NUM_LIT> | ( ( mostSigBits > > <NUM_LIT> ) & <NUM_LIT> ) << <NUM_LIT> | mostSigBits > > > <NUM_LIT> ; } public int clockSequence ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return ( int ) ( ( leastSigBits & <NUM_LIT> ) > > > <NUM_LIT> ) ; } public long node ( ) throws UnsupportedOperationException { checkTimeBase ( ) ; return leastSigBits & <NUM_LIT> ; } @ Override public String toString ( ) {", "gt": "return toString ( false ) ;"}
{"input": "package com . oddfar . campus . common . core ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . redis . core . BoundSetOperations ; import org . springframework . data . redis . core . HashOperations ; import org . springframework . data . redis . core . RedisTemplate ; import org . springframework . data . redis . core . ValueOperations ; import org . springframework . stereotype . Component ; import java . util . * ; import java . util . concurrent . TimeUnit ; @ SuppressWarnings ( value = { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Component public class RedisCache { @ Autowired public RedisTemplate redisTemplate ; public < T > void setCacheObject ( final String key , final T value ) { redisTemplate . opsForValue ( ) . set ( key , value ) ; } public < T > void setCacheObject ( final String key , final T value , final Integer timeout , final TimeUnit timeUnit ) { redisTemplate . opsForValue ( ) . set ( key , value , timeout , timeUnit ) ; } public boolean expire ( final String key , final long timeout ) { return expire ( key , timeout , TimeUnit . SECONDS ) ; } public boolean expire ( final String key , final long timeout , final TimeUnit unit ) { return redisTemplate . expire ( key , timeout , unit ) ; } public long getExpire ( final String key ) { return redisTemplate . getExpire ( key ) ; } public Boolean hasKey ( String key ) { return redisTemplate . hasKey ( key ) ; } public < T > T getCacheObject ( final String key ) { ValueOperations < String , T > operation = redisTemplate . opsForValue ( ) ; return operation . get ( key ) ; } public boolean deleteObject ( final String key ) { return redisTemplate . delete ( key ) ; } public boolean deleteObject ( final Collection collection ) { return redisTemplate . delete ( collection ) > <NUM_LIT> ; } public < T > long setCacheList ( final String key , final List < T > dataList ) { Long count = redisTemplate . opsForList ( ) . rightPushAll ( key , dataList ) ; return count == null ? <NUM_LIT> : count ; } public < T > List < T > getCacheList ( final String key ) { return redisTemplate . opsForList ( ) . range ( key , <NUM_LIT> , - <NUM_LIT> ) ; } public < T > BoundSetOperations < String , T > setCacheSet ( final String key , final Set < T > dataSet ) { BoundSetOperations < String , T > setOperation = redisTemplate . boundSetOps ( key ) ; Iterator < T > it = dataSet . iterator ( ) ;", "gt": "while ( it . hasNext ( ) ) {"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . type ; import org . apache . commons . lang3 . Validate ; import java . util . concurrent . * ; public abstract class BasicFuture < T > implements Future < T > { private volatile boolean completed ; private volatile boolean cancelled ; private volatile T result ; private volatile Exception ex ; @ Override public boolean isCancelled ( ) { return this . cancelled ; } @ Override public boolean isDone ( ) { return this . completed ; } @ Override public synchronized T get ( ) throws InterruptedException , ExecutionException { while ( ! this . completed ) { wait ( ) ; } return getResult ( ) ; } @ Override public synchronized T get ( final long timeout , final TimeUnit unit ) throws InterruptedException , ExecutionException , TimeoutException { Validate . notNull ( unit , \"<STR_LIT>\" ) ; final long msecs = unit . toMillis ( timeout ) ; final long startTime = ( msecs <= <NUM_LIT> ) ? <NUM_LIT> : System . currentTimeMillis ( ) ; long waitTime = msecs ; if ( this . completed ) { return getResult ( ) ; } else if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } else { for ( ; ; ) { wait ( waitTime ) ; if ( this . completed ) { return getResult ( ) ; } else { waitTime = msecs - ( System . currentTimeMillis ( ) - startTime ) ; if ( waitTime <= <NUM_LIT> ) { throw new TimeoutException ( ) ; } } } } } private T getResult ( ) throws ExecutionException { if ( this . ex != null ) { throw new ExecutionException ( this . ex ) ; } if ( cancelled ) { throw new CancellationException ( ) ; } return this . result ; } public boolean completed ( final T result ) { synchronized ( this ) { if ( this . completed ) {", "gt": "return false ;"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . conditions . Wrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . core . toolkit . Constants ; import org . apache . ibatis . annotations . Param ; import org . springblade . cgform . model . KvModel ; import java . util . List ; import java . util . Map ; public interface MjkjBaseSqlMapper { List < Map < String , Object > > getDataByTable ( String selectField , String tableName ) ; Map < String , Object > getTableById ( String selectField , String tableName , String id ) ; Map < String , Object > getTableByIdL ( String selectField , String tableName , Long id ) ; List < Map < String , Object > > getDataListByField ( String selectField , String tableName , String whereFieldName , Object whereFieldValue ) ; List < Map < String , Object > > getDataListByFieldOrderBy ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String orderByField , String orderStr ) ; List < Map < String , Object > > getDataListByLike ( String selectField , String tableName , String whereFieldName , Object whereFieldValue , String type ) ; List < Map < String , Object > > getDataListByIn ( String selectField , String tableName , String whereFieldName , List < Object > whereFieldValueList ) ; List < KvModel > getSysDictItemList ( String dictCode ) ; String getSysDictItemValue ( String dictCode , String itemValue ) ; String getSysDictItemValueByText ( String dictCode , String itemText ) ; Long baseInsertSql ( Map < String , Object > map ) ; void baseUpdateSql ( Map < String , Object > map ) ; Integer baseDeleteSqlStr ( String tableName , String id ) ; Integer baseDeleteSql ( String tableName , Long id ) ; Integer baseRealDeleteSql ( String tableName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , Long id ) ; Integer baseZdyDeleteSql ( String tableName , String whereFieldName , String id ) ; List < Long > getAdminIdList ( ) ; int getProcessingProgress ( String tableName , String batchCode ) ; int getProcessingProgressTotal ( String tableName , String batchCode ) ; List < Map < String , Object > > getBladeUserOauth ( String uuid , String source ) ; List < Map < String , Object > > getBladeUserOauthByUserId ( Long userId ) ; void unBindBladeUserOauth ( Long id ) ; < T > List < Map < String , T > > getDataListByWrapper ( String tableName , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ;", "gt": "< T > IPage < Map < String , T > > getDataListByWrapper ( String tableName , IPage page , @ Param ( Constants . WRAPPER ) Wrapper < T > wrapper ) ;"}
{"input": "package cn . org . alan . exam . service ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . entity . ManualScore ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import com . baomidou . mybatisplus . core . metadata . IPage ;", "gt": "import com . baomidou . mybatisplus . extension . service . IService ;"}
{"input": "package io . github . chensheng . dddboot . excel ; import io . github . chensheng . dddboot . excel . reader . ExcelReaderFactory ; import io . github . chensheng . dddboot . excel . writer . ExcelWriterFactory ; import io . github . chensheng . dddboot . tools . collection . CollectionUtil ; import java . io . InputStream ; import java . io . OutputStream ; import java . util . List ; public class ExcelUtil { public static < T > List < T > read ( InputStream inputStream , Class < T > rowType ) { if ( inputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( rowType == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } return ExcelReaderFactory . read ( inputStream , rowType ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList ) { write ( outputStream , rowDataList , null ) ; } public static void write ( OutputStream outputStream , List < ? > rowDataList , InputStream templateIs ) { if ( outputStream == null ) { throw new IllegalArgumentException ( \"<STR_LIT>\" ) ; } if ( CollectionUtil . isEmpty ( rowDataList ) ) {", "gt": "throw new IllegalArgumentException ( \"<STR_LIT>\" ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . concurrent . limiter ; import com . google . common . util . concurrent . RateLimiter ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; public class RateLimiterUtil { public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds ) throws ReflectiveOperationException { return create ( permitsPerSecond , maxBurstSeconds , true ) ; } public static RateLimiter create ( double permitsPerSecond , double maxBurstSeconds , boolean filledWithToken ) throws ReflectiveOperationException { Class < ? > sleepingStopwatchClass = Class . forName ( \"<STR_LIT>\" ) ; Method createStopwatchMethod = sleepingStopwatchClass . getDeclaredMethod ( \"<STR_LIT>\" ) ; createStopwatchMethod . setAccessible ( true ) ; Object stopwatch = createStopwatchMethod . invoke ( null ) ; Class < ? > burstyRateLimiterClass = Class . forName ( \"<STR_LIT>\" ) ; Constructor < ? > burstyRateLimiterConstructor = burstyRateLimiterClass . getDeclaredConstructors ( ) [ <NUM_LIT> ] ; burstyRateLimiterConstructor . setAccessible ( true ) ; RateLimiter rateLimiter = ( RateLimiter ) burstyRateLimiterConstructor . newInstance ( stopwatch , maxBurstSeconds ) ; rateLimiter . setRate ( permitsPerSecond ) ; if ( filledWithToken ) { setField ( rateLimiter , \"<STR_LIT>\" , permitsPerSecond * maxBurstSeconds ) ; } return rateLimiter ; } private static boolean setField ( Object targetObject , String fieldName , Object fieldValue ) { Field field ; try { field = targetObject . getClass ( ) . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { field = null ; } Class superClass = targetObject . getClass ( ) . getSuperclass ( ) ; while ( field == null && superClass != null ) { try { field = superClass . getDeclaredField ( fieldName ) ; } catch ( NoSuchFieldException e ) { superClass = superClass . getSuperclass ( ) ; } } if ( field == null ) {", "gt": "return false ;"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; import top . kangert . kspider . expression . ExpressionError ; import java . util . List ; public class TokenStream { private final List < Token > tokens ; private int index ; private final int end ; public TokenStream ( List < Token > tokens ) { this . tokens = tokens ; this . index = <NUM_LIT> ; this . end = tokens . size ( ) ; } public boolean hasMore ( ) { return index < end ; } public boolean hasNext ( ) { return index + <NUM_LIT> < end ; } public boolean hasPrev ( ) { return index > <NUM_LIT> ; } public Token consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( index ++ ) ; } public Token next ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( ++ index ) ; } public Token prev ( ) { if ( index == <NUM_LIT> ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( -- index ) ; } public Token expect ( TokenType type ) { boolean result = match ( type , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public Token expect ( String text ) { boolean result = match ( text , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ;", "gt": "if ( span == null ) {"}
{"input": "package io . github . chensheng . dddboot . tools . base . type ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; public class Triple < L , M , R > { @ Nullable private final L left ; @ Nullable private final M middle ; @ Nullable private final R right ; public Triple ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) { this . left = left ; this . middle = middle ; this . right = right ; } @ Nullable public L getLeft ( ) { return left ; } @ Nullable public M getMiddle ( ) { return middle ; } @ Nullable public R getRight ( ) { return right ; } @ Override public int hashCode ( ) { final int prime = <NUM_LIT> ; int result = <NUM_LIT> ; result = prime * result + ( ( left == null ) ? <NUM_LIT> : left . hashCode ( ) ) ; result = prime * result + ( ( middle == null ) ? <NUM_LIT> : middle . hashCode ( ) ) ; return prime * result + ( ( right == null ) ? <NUM_LIT> : right . hashCode ( ) ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } Triple other = ( Triple ) obj ; if ( left == null ) { if ( other . left != null ) { return false ; } } else if ( ! left . equals ( other . left ) ) { return false ; }", "gt": "if ( middle == null ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . spring . util ; import org . springframework . core . annotation . AnnotationUtils ; import org . springframework . core . env . PropertyResolver ; import org . springframework . util . StringUtils ; import java . lang . annotation . Annotation ; import java . util . Map ; import java . util . Properties ; public class PropertiesPlaceholderResolver { private final PropertyResolver propertyResolver ; public PropertiesPlaceholderResolver ( PropertyResolver propertyResolver ) { this . propertyResolver = propertyResolver ; } public Properties resolve ( Annotation annotation ) { Map < String , Object > attributes = AnnotationUtils . getAnnotationAttributes ( annotation ) ; return resolve ( attributes ) ; } public Properties resolve ( Map < ? , ? > properties ) { Properties resolvedProperties = new Properties ( ) ; for ( Map . Entry < ? , ? > entry : properties . entrySet ( ) ) { if ( entry . getValue ( ) instanceof CharSequence ) { String key = String . valueOf ( entry . getKey ( ) ) ; String value = String . valueOf ( entry . getValue ( ) ) ; String resolvedValue = propertyResolver . resolvePlaceholders ( value ) ; if ( StringUtils . hasText ( resolvedValue ) ) { resolvedProperties . setProperty ( key , resolvedValue ) ; } } }", "gt": "return resolvedProperties ;"}
{"input": "package org . example . ddduser . application . dto . command ; import lombok . Data ; import org . example . ddduser . domain . user . valueobject . Gender ; import javax . validation . constraints . NotEmpty ; @ Data public class ModifyProfileCommand { @ NotEmpty ( message = \"<STR_LIT>\" ) private String nickName ; private String avatar ;", "gt": "private Gender gender ;"}
{"input": "package com . youlai . system . filter ; import jakarta . servlet . http . HttpServletRequest ; import lombok . extern . slf4j . Slf4j ; import org . springframework . context . annotation . Configuration ; import org . springframework . web . filter . CommonsRequestLoggingFilter ; @ Configuration @ Slf4j public class RequestLogFilter extends CommonsRequestLoggingFilter { @ Override protected boolean shouldLog ( HttpServletRequest request ) { return this . logger . isInfoEnabled ( ) ; } @ Override protected void beforeRequest ( HttpServletRequest request , String message ) { String requestURI = request . getRequestURI ( ) ; log . info ( \"<STR_LIT>\" , requestURI ) ; super . beforeRequest ( request , message ) ; }", "gt": "@ Override protected void afterRequest ( HttpServletRequest request , String message ) {"}
{"input": "package com . xcs . wx . util ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . dataformat . xml . XmlMapper ; import lombok . extern . slf4j . Slf4j ; @ Slf4j public class XmlUtil { private static final XmlMapper MAPPER = new XmlMapper ( ) ; private XmlUtil ( ) { } public static < T > T parseXml ( String content , Class < T > valueType ) { try { int xmlStart = content . indexOf ( \"<STR_LIT>\" ) ; if ( xmlStart > <NUM_LIT> ) { content = content . substring ( xmlStart ) ; } return MAPPER . readValue ( content , valueType ) ; } catch ( JsonProcessingException e ) {", "gt": "log . error ( \"<STR_LIT>\" , e ) ;"}
{"input": "package org . springblade . model ; import lombok . Builder ; import org . web3j . crypto . Credentials ; import java . math . BigDecimal ; import java . math . BigInteger ; @ Builder public class Payment { private String txBizNumber ; private String txid ; private Credentials credentials ; private String to ; private BigDecimal amount ; private String unit ; private BigInteger gasLimit ; private BigInteger gasPrice ; public String getTxid ( ) { return txid ; } public void setTxid ( String txid ) { this . txid = txid ; } public Credentials getCredentials ( ) { return credentials ; } public void setCredentials ( Credentials credentials ) { this . credentials = credentials ; } public String getTo ( ) { return to ; } public void setTo ( String to ) { this . to = to ; } public BigDecimal getAmount ( ) { return amount ; }", "gt": "public void setAmount ( BigDecimal amount ) {"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private Integer operatorType ;"}
{"input": "package org . springblade . config . constant ; import org . springframework . boot . context . properties . ConfigurationProperties ; import org . springframework . stereotype . Component ; import java . math . BigDecimal ; @ Component @ ConfigurationProperties ( prefix = \"<STR_LIT>\" ) public class CoinhouseConfig { private static String smsDriver ; private static String smsGateway ; private static String smsUsername ; private static String smsPassword ; private static String smsSign ; private static String emailId ; private static String emailPassword ; private static String emailFjr ; private static String emailHost ; private static String rootRole ; private static String zeroRole ; private static String firstRole ; private static String secondRole ; private static String thirdRole ; private static String generalRole ; private static String customerBladeUserId ; private static String salt ; private static BigDecimal huobiVolumePercent ; private static String defaultHeadIcon ; private static String administratorPhoneCode ; private static String administratorPhone ; private static String administratorEmail ; private static String marketJysName ; private static String apiKey ; private static String apiSecret ; private static String apiBaseurl ; private static String remindPhoneCode ; private static String remindPhone ; private static String remindEmail ; private static String tgBaseUrl = \"<STR_LIT>\" ; private static String tgBotToken = \"<STR_LIT>\" ; private static String tgBotName = \"<STR_LIT>\" ; public static String getSmsDriver ( ) { return smsDriver ; } public static String getTgBaseUrl ( ) { return tgBaseUrl ; } public static void setTgBaseUrl ( String tgBaseUrl ) { CoinhouseConfig . tgBaseUrl = tgBaseUrl ; } public static String getTgBotName ( ) { return tgBotName ; } public static String getTgBotToken ( ) { return tgBotToken ; } public static void setTgBotToken ( String tgBotToken ) { CoinhouseConfig . tgBotToken = tgBotToken ; } public static void setTgBotName ( String tgBotName ) { CoinhouseConfig . tgBotName = tgBotName ; } public void setSmsDriver ( String smsDriver ) { CoinhouseConfig . smsDriver = smsDriver ; } public static String getSmsGateway ( ) { return smsGateway ; } public void setSmsGateway ( String smsGateway ) { CoinhouseConfig . smsGateway = smsGateway ; } public static String getSmsUsername ( ) { return smsUsername ; } public void setSmsUsername ( String smsUsername ) { CoinhouseConfig . smsUsername = smsUsername ; } public static String getSmsPassword ( ) { return smsPassword ; } public void setSmsPassword ( String smsPassword ) { CoinhouseConfig . smsPassword = smsPassword ; } public static String getSmsSign ( ) { return smsSign ; } public void setSmsSign ( String smsSign ) { CoinhouseConfig . smsSign = smsSign ; } public static String getEmailId ( ) { return emailId ; } public void setEmailId ( String emailId ) { CoinhouseConfig . emailId = emailId ; } public static String getEmailPassword ( ) { return emailPassword ; } public void setEmailPassword ( String emailPassword ) { CoinhouseConfig . emailPassword = emailPassword ; } public static String getEmailFjr ( ) { return emailFjr ; } public void setEmailFjr ( String emailFjr ) { CoinhouseConfig . emailFjr = emailFjr ; } public static String getEmailHost ( ) { return emailHost ; } public void setEmailHost ( String emailHost ) { CoinhouseConfig . emailHost = emailHost ; } public static BigDecimal getHuobiVolumePercent ( ) { return huobiVolumePercent ; } public static String getRootRole ( ) { return rootRole ; } public void setRootRole ( String rootRole ) { CoinhouseConfig . rootRole = rootRole ; } public static String getZeroRole ( ) { return zeroRole ; } public void setZeroRole ( String zeroRole ) { CoinhouseConfig . zeroRole = zeroRole ; } public static String getFirstRole ( ) { return firstRole ; } public void setFirstRole ( String firstRole ) {", "gt": "CoinhouseConfig . firstRole = firstRole ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ;", "gt": "private String icon ;"}
{"input": "package com . youlai . system . model . dto ; import lombok . Data ; import java . util . Set ; @ Data public class UserAuthInfo { private Long userId ; private String username ; private String nickname ;", "gt": "private Long deptId ;"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ;", "gt": "String getDropColumnSql ( String fieldName ) ;"}
{"input": "package ginyi . server . admin ; import ginyi . framework . core . config . AppConfig ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . annotation . MapperScan ; import org . springframework . boot . SpringApplication ; import org . springframework . boot . autoconfigure . SpringBootApplication ; import org . springframework . context . ConfigurableApplicationContext ; import java . net . UnknownHostException ; @ SpringBootApplication ( scanBasePackages = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ MapperScan ( { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Slf4j public class AdminApplication {", "gt": "public static void main ( String [ ] args ) throws UnknownHostException {"}
{"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException {", "gt": "qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) { PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ; return R . ok ( ) . put ( page ) ; }", "gt": "@ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] infoIds ) {"}
{"input": "package io . github . chensheng . dddboot . excel . core ; import org . apache . poi . ss . usermodel . * ; import java . util . Objects ; public class CellStyleConfig { public static final CellStyleConfig EMPTY_STYLE = new CellStyleConfig ( ) ; public static final CellStyleConfig DEFAULT_HEADER_CELL_STYLE ; static { DEFAULT_HEADER_CELL_STYLE = createDefaultStyle ( ) ; } private static CellStyleConfig createDefaultStyle ( ) { CellStyleConfig cellStyleConfig = new CellStyleConfig ( ) ; FontConfig headerCellFont = new FontConfig ( ) ; headerCellFont . setFontName ( \"<STR_LIT>\" ) ; headerCellFont . setFontHeightInPoints ( ( short ) <NUM_LIT> ) ; headerCellFont . setBold ( true ) ; cellStyleConfig . setFont ( headerCellFont ) ; cellStyleConfig . setWrapText ( true ) ; cellStyleConfig . setVerticalAlignment ( VerticalAlignment . CENTER ) ; cellStyleConfig . setAlignment ( HorizontalAlignment . CENTER ) ; cellStyleConfig . setLocked ( true ) ; cellStyleConfig . setFillPattern ( FillPatternType . SOLID_FOREGROUND ) ; cellStyleConfig . setFillForegroundColor ( IndexedColors . GREY_25_PERCENT . getIndex ( ) ) ; cellStyleConfig . setBorderBottom ( BorderStyle . THIN ) ; cellStyleConfig . setBorderLeft ( BorderStyle . THIN ) ; return cellStyleConfig ; } private FontConfig font ; private Boolean wrapText ; private VerticalAlignment verticalAlignment ; private HorizontalAlignment alignment ; private Boolean locked ; private FillPatternType fillPattern ; private Short fillForegroundColor ; private BorderStyle borderBottom ; private BorderStyle borderLeft ; public FontConfig getFont ( ) { return font ; } public void setFont ( FontConfig font ) { this . font = font ; } public Boolean getWrapText ( ) { return wrapText ; } public void setWrapText ( Boolean wrapText ) { this . wrapText = wrapText ; } public VerticalAlignment getVerticalAlignment ( ) { return verticalAlignment ; } public void setVerticalAlignment ( VerticalAlignment verticalAlignment ) { this . verticalAlignment = verticalAlignment ; } public HorizontalAlignment getAlignment ( ) { return alignment ; } public void setAlignment ( HorizontalAlignment alignment ) { this . alignment = alignment ; } public Boolean getLocked ( ) { return locked ; } public void setLocked ( Boolean locked ) { this . locked = locked ; } public FillPatternType getFillPattern ( ) {", "gt": "return fillPattern ;"}
{"input": "package me . zhengjie . service ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . domain . vo . TradeVo ; import me . zhengjie . domain . AlipayConfig ; public interface AliPayService extends IService < AlipayConfig > { AlipayConfig find ( ) ; AlipayConfig config ( AlipayConfig alipayConfig ) ;", "gt": "String toPayAsPc ( AlipayConfig alipay , TradeVo trade ) throws Exception ;"}
{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) { timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ; apiError . setMessage ( message ) ; return apiError ; } public static ApiError error ( Integer status , String message ) { ApiError apiError = new ApiError ( ) ; apiError . setStatus ( status ) ; apiError . setMessage ( message ) ;", "gt": "return apiError ;"}
{"input": "package io . github . chensheng . dddboot . tools . io ; import com . google . common . io . Resources ; import io . github . chensheng . dddboot . tools . collection . ListUtil ; import io . github . chensheng . dddboot . tools . reflect . ClassLoaderUtil ; import io . github . chensheng . dddboot . tools . text . Charsets ; import java . io . IOException ; import java . io . InputStream ; import java . net . URL ; import java . util . ArrayList ; import java . util . Enumeration ; import java . util . List ; public class ResourceUtil { public static URL asUrl ( String resourceName ) { return Resources . getResource ( resourceName ) ; } public static URL asUrl ( Class < ? > contextClass , String resourceName ) { return Resources . getResource ( contextClass , resourceName ) ; } public static InputStream asStream ( String resourceName ) throws IOException { return Resources . getResource ( resourceName ) . openStream ( ) ; } public static InputStream asStream ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . getResource ( contextClass , resourceName ) . openStream ( ) ; } public static String toString ( String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ; } public static String toString ( Class < ? > contextClass , String resourceName ) throws IOException { return Resources . toString ( Resources . getResource ( contextClass , resourceName ) , Charsets . UTF_8 ) ; } public static List < String > toLines ( String resourceName ) throws IOException { return Resources . readLines ( Resources . getResource ( resourceName ) , Charsets . UTF_8 ) ; }", "gt": "public static List < String > toLines ( Class < ? > contextClass , String resourceName ) throws IOException {"}
{"input": "package com . xcs . wx . util ; import com . fasterxml . jackson . core . JsonProcessingException ; import com . fasterxml . jackson . dataformat . xml . XmlMapper ; import lombok . extern . slf4j . Slf4j ; @ Slf4j public class XmlUtil { private static final XmlMapper MAPPER = new XmlMapper ( ) ; private XmlUtil ( ) { } public static < T > T parseXml ( String content , Class < T > valueType ) { try { int xmlStart = content . indexOf ( \"<STR_LIT>\" ) ; if ( xmlStart > <NUM_LIT> ) { content = content . substring ( xmlStart ) ; }", "gt": "return MAPPER . readValue ( content , valueType ) ;"}
{"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ; save ( localStorage ) ; return localStorage ; } catch ( Exception e ) { FileUtil . del ( file ) ; throw e ; } } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( LocalStorage resources ) { LocalStorage localStorage = getById ( resources . getId ( ) ) ; localStorage . copy ( resources ) ; saveOrUpdate ( localStorage ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void deleteAll ( Long [ ] ids ) { for ( Long id : ids ) { LocalStorage storage = getById ( id ) ; FileUtil . del ( storage . getPath ( ) ) ;", "gt": "removeById ( storage ) ;"}
{"input": "package com . youlai . system . service . impl ; import cn . hutool . core . collection . CollectionUtil ; import cn . hutool . core . lang . Assert ; import cn . hutool . core . util . StrUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . youlai . system . converter . DictConverter ; import com . youlai . system . converter . DictItemConverter ; import com . youlai . system . model . entity . SysDict ; import com . youlai . system . model . entity . SysDictItem ; import com . youlai . system . common . model . Option ; import com . youlai . system . mapper . SysDictMapper ; import com . youlai . system . model . form . DictForm ; import com . youlai . system . model . query . DictPageQuery ; import com . youlai . system . model . vo . DictPageVO ; import com . youlai . system . service . SysDictItemService ; import com . youlai . system . service . SysDictService ; import lombok . RequiredArgsConstructor ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . * ; import java . util . stream . Collectors ; @ Service @ RequiredArgsConstructor public class SysDictServiceImpl extends ServiceImpl < SysDictMapper , SysDict > implements SysDictService { private final SysDictItemService dictItemService ; private final DictConverter dictConverter ; private final DictItemConverter dictItemConverter ; @ Override public Page < DictPageVO > getDictPage ( DictPageQuery queryParams ) { int pageNum = queryParams . getPageNum ( ) ; int pageSize = queryParams . getPageSize ( ) ; return this . baseMapper . getDictPage ( new Page < > ( pageNum , pageSize ) , queryParams ) ; } @ Override public boolean saveDict ( DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . save ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; dictItems . forEach ( dictItem -> dictItem . setDictId ( entity . getId ( ) ) ) ; dictItemService . saveBatch ( dictItems ) ; } return result ; } @ Override public DictForm getDictForm ( Long id ) { SysDict entity = this . getById ( id ) ; Assert . isTrue ( entity != null , \"<STR_LIT>\" ) ; DictForm dictForm = dictConverter . toForm ( entity ) ; List < SysDictItem > dictItems = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; List < DictForm . DictItem > dictItemList = dictItemConverter . convertToDictFormDictItem ( dictItems ) ; dictForm . setDictItems ( dictItemList ) ; return dictForm ; } @ Override public boolean updateDict ( Long id , DictForm dictForm ) { SysDict entity = dictConverter . toEntity ( dictForm ) ; long count = this . count ( new LambdaQueryWrapper < SysDict > ( ) . eq ( SysDict :: getCode , entity . getCode ( ) ) . ne ( SysDict :: getId , id ) ) ; Assert . isTrue ( count == <NUM_LIT> , \"<STR_LIT>\" ) ; boolean result = this . updateById ( entity ) ; if ( result ) { List < DictForm . DictItem > dictFormDictItems = dictForm . getDictItems ( ) ; List < SysDictItem > dictItems = dictItemConverter . toEntity ( dictFormDictItems ) ; List < SysDictItem > currentDictItemEntities = dictItemService . list ( new LambdaQueryWrapper < SysDictItem > ( ) . eq ( SysDictItem :: getDictId , id ) ) ; Set < Long > currentDictItemIds = currentDictItemEntities . stream ( ) . map ( SysDictItem :: getId ) . collect ( Collectors . toSet ( ) ) ; Set < Long > newAttrIds = dictItems . stream ( ) . map ( SysDictItem :: getId ) . filter ( Objects :: nonNull ) . collect ( Collectors . toSet ( ) ) ; Set < Long > idsToDelete = new HashSet < > ( currentDictItemIds ) ; idsToDelete . removeAll ( newAttrIds ) ; if ( ! idsToDelete . isEmpty ( ) ) { dictItemService . removeByIds ( idsToDelete ) ; } for ( SysDictItem dictItem : dictItems ) { if ( dictItem . getId ( ) != null && currentDictItemIds . contains ( dictItem . getId ( ) ) ) { dictItemService . updateById ( dictItem ) ; } else { dictItem . setDictId ( id ) ; dictItemService . save ( dictItem ) ; } } }", "gt": "return result ;"}
{"input": "package cn . org . alan . exam . mapper ; import cn . org . alan . exam . model . entity . ExamQuAnswer ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . model . vo . exam . ExamQuAnswerExtVO ; import cn . org . alan . exam . model . vo . score . QuestionAnalyseVO ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import java . util . List ; public interface ExamQuAnswerMapper extends BaseMapper < ExamQuAnswer > {", "gt": "List < ExamQuAnswerExtVO > list ( String examId , String questionId ) ;"}
{"input": "package top . kangert . kspider . driver ; import com . google . common . collect . ImmutableMap ; import org . openqa . selenium . Capabilities ; import org . openqa . selenium . remote . CommandExecutor ; import org . openqa . selenium . remote . CommandInfo ; import org . openqa . selenium . remote . HttpCommandExecutor ; import org . openqa . selenium . remote . RemoteWebDriver ; import org . openqa . selenium . remote . http . HttpMethod ; import java . net . URL ; import java . util . HashMap ; import java . util . Map ; import java . util . Objects ; public class CdpRemoteWebDriver extends RemoteWebDriver { private static final Map < String , CommandInfo > CHROME_COMMAND_NAME_TO_URL = new HashMap < String , CommandInfo > ( ) ; static { CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . DELETE ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . GET ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; CHROME_COMMAND_NAME_TO_URL . put ( \"<STR_LIT>\" , new CommandInfo ( \"<STR_LIT>\" , HttpMethod . POST ) ) ; } public CdpRemoteWebDriver ( URL remoteAddress , Capabilities capabilities ) { super ( ( CommandExecutor ) ( new HttpCommandExecutor ( ImmutableMap . copyOf ( CHROME_COMMAND_NAME_TO_URL ) , remoteAddress ) ) , capabilities ) ; } public Map < String , Object > executeCdpCommand ( String commandName , Map < String , Object > parameters ) { Objects . requireNonNull ( commandName , \"<STR_LIT>\" ) ; Objects . requireNonNull ( parameters , \"<STR_LIT>\" ) ;", "gt": "Map < String , Object > toReturn = ( Map ) this . getExecuteMethod ( ) . execute ( \"<STR_LIT>\" , ImmutableMap . of ( \"<STR_LIT>\" , commandName , \"<STR_LIT>\" , parameters ) ) ;"}
{"input": "package com . yf . system . modules . user . service . impl ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import com . fasterxml . jackson . core . type . TypeReference ; import com . yf . base . api . api . dto . PagingReqDTO ; import com . yf . base . api . exception . ServiceException ; import com . yf . base . utils . jackson . JsonHelper ; import com . yf . system . modules . user . dto . SysUserBindDTO ; import com . yf . system . modules . user . entity . SysUserBind ; import com . yf . system . modules . user . enums . LoginType ; import com . yf . system . modules . user . mapper . SysUserBindMapper ; import com . yf . system . modules . user . service . SysUserBindService ; import org . apache . commons . lang3 . StringUtils ; import org . springframework . stereotype . Service ; import java . text . MessageFormat ; import java . util . List ; @ Service public class SysUserBindServiceImpl extends ServiceImpl < SysUserBindMapper , SysUserBind > implements SysUserBindService { @ Override public IPage < SysUserBindDTO > paging ( PagingReqDTO < SysUserBindDTO > reqDTO ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; SysUserBindDTO params = reqDTO . getParams ( ) ; IPage < SysUserBind > page = this . page ( reqDTO . toPage ( ) , wrapper ) ; IPage < SysUserBindDTO > pageData = JsonHelper . parseObject ( page , new TypeReference < Page < SysUserBindDTO > > ( ) { } ) ; return pageData ; } @ Override public void save ( boolean clear , String userId , String loginType , String openId ) { if ( clear ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getUserId , userId ) . eq ( SysUserBind :: getLoginType , loginType ) ; this . remove ( wrapper ) ; } String currentId = this . findBind ( loginType , openId ) ; if ( ! StringUtils . isBlank ( currentId ) ) { if ( LoginType . MOBILE . equals ( loginType ) ) { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } else { throw new ServiceException ( MessageFormat . format ( \"<STR_LIT>\" , openId ) ) ; } } SysUserBind bind = new SysUserBind ( ) ; bind . setUserId ( userId ) ; bind . setLoginType ( loginType ) ; bind . setOpenId ( openId ) ; this . save ( bind ) ; } @ Override public void delete ( List < String > ids ) { this . removeByIds ( ids ) ; } @ Override public String findBind ( String loginType , String openId ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ; wrapper . lambda ( ) . eq ( SysUserBind :: getLoginType , loginType ) . eq ( SysUserBind :: getOpenId , openId ) ; SysUserBind bind = this . getOne ( wrapper , false ) ; if ( bind != null ) { return bind . getUserId ( ) ; } return null ; } @ Override public boolean hasBind ( String loginType , String openId ) { QueryWrapper < SysUserBind > wrapper = new QueryWrapper < > ( ) ;", "gt": "wrapper . lambda ( ) . eq ( SysUserBind :: getLoginType , loginType ) . eq ( SysUserBind :: getOpenId , openId ) ;"}
{"input": "package cn . org . alan . exam . service . impl ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . mapper . * ; import cn . org . alan . exam . model . entity . * ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import cn . org . alan . exam . util . ClassTokenGenerator ; import cn . org . alan . exam . util . SecurityUtil ; import com . baomidou . mybatisplus . core . conditions . query . LambdaQueryWrapper ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import jakarta . annotation . Resource ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . ArrayList ; import java . util . List ; import java . util . concurrent . atomic . AtomicInteger ; @ Service public class ManualScoreServiceImpl extends ServiceImpl < ManualScoreMapper , ManualScore > implements IManualScoreService { @ Resource private ExamMapper examMapper ; @ Resource private ExamGradeMapper examGradeMapper ; @ Resource private UserExamsScoreMapper userExamsScoreMapper ; @ Resource private ExamQuAnswerMapper examQuAnswerMapper ; @ Resource private ManualScoreMapper manualScoreMapper ; @ Resource private CertificateUserMapper certificateUserMapper ; @ Override public Result < List < UserAnswerDetailVO > > getDetail ( Integer userId , Integer examId ) { List < UserAnswerDetailVO > list = examQuAnswerMapper . selectUserAnswer ( userId , examId ) ; return Result . success ( null , list ) ; } @ Override @ Transactional public Result < String > correct ( List < CorrectAnswerFrom > correctAnswerFroms ) { List < ManualScore > list = new ArrayList < > ( correctAnswerFroms . size ( ) ) ; AtomicInteger manualTotalScore = new AtomicInteger ( ) ; correctAnswerFroms . forEach ( correctAnswerFrom -> { LambdaQueryWrapper < ExamQuAnswer > wrapper = new LambdaQueryWrapper < ExamQuAnswer > ( ) . select ( ExamQuAnswer :: getId ) . eq ( ExamQuAnswer :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( ExamQuAnswer :: getUserId , correctAnswerFrom . getUserId ( ) ) . eq ( ExamQuAnswer :: getQuestionId , correctAnswerFrom . getQuestionId ( ) ) ; ManualScore manualScore = new ManualScore ( ) ; manualScore . setExamQuAnswerId ( examQuAnswerMapper . selectOne ( wrapper ) . getId ( ) ) ; manualScore . setScore ( correctAnswerFrom . getScore ( ) ) ; list . add ( manualScore ) ; manualTotalScore . addAndGet ( correctAnswerFrom . getScore ( ) ) ; } ) ; manualScoreMapper . insertList ( list ) ; CorrectAnswerFrom correctAnswerFrom = correctAnswerFroms . get ( <NUM_LIT> ) ; LambdaUpdateWrapper < UserExamsScore > userExamsScoreLambdaUpdateWrapper = new LambdaUpdateWrapper < UserExamsScore > ( ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) . set ( UserExamsScore :: getWhetherMark , <NUM_LIT> ) . setSql ( \"<STR_LIT>\" + manualTotalScore . get ( ) ) ; userExamsScoreMapper . update ( userExamsScoreLambdaUpdateWrapper ) ; LambdaQueryWrapper < Exam > examWrapper = new LambdaQueryWrapper < Exam > ( ) . select ( Exam :: getId , Exam :: getCertificateId , Exam :: getPassedScore ) . eq ( Exam :: getId , correctAnswerFrom . getExamId ( ) ) ; Exam exam = examMapper . selectOne ( examWrapper ) ; if ( exam . getCertificateId ( ) != null && exam . getCertificateId ( ) > <NUM_LIT> ) { LambdaQueryWrapper < UserExamsScore > examsScoreWrapper = new LambdaQueryWrapper < UserExamsScore > ( ) . select ( UserExamsScore :: getId , UserExamsScore :: getUserScore ) . eq ( UserExamsScore :: getExamId , correctAnswerFrom . getExamId ( ) ) . eq ( UserExamsScore :: getUserId , correctAnswerFrom . getUserId ( ) ) ;", "gt": "UserExamsScore userExamsScore = userExamsScoreMapper . selectOne ( examsScoreWrapper ) ;"}
{"input": "package org . springblade . web . model . param ; import io . swagger . annotations . ApiModelProperty ; import io . swagger . annotations . ApiParam ; import lombok . Data ; import org . springblade . core . mp . support . Query ; @ Data public class AdQueryParam extends Query { @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer type ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String coinId ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String countryId ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . * ; import com . youlai . system . enums . MenuTypeEnum ; import lombok . Getter ; import lombok . Setter ; import java . time . LocalDateTime ; @ Getter @ Setter public class SysMenu { @ TableId ( type = IdType . AUTO ) private Long id ; private Long parentId ; private String name ; private MenuTypeEnum type ; private String routeName ; private String routePath ; private String component ; private String perm ; private Integer visible ; private Integer sort ; private String icon ; private String redirect ; private String treePath ; private Integer keepAlive ; private Integer alwaysShow ; @ TableField ( updateStrategy = FieldStrategy . ALWAYS ) private String params ;", "gt": "@ TableField ( fill = FieldFill . INSERT ) private LocalDateTime createTime ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import com . google . common . collect . * ; import com . google . common . util . concurrent . AtomicLongMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . IntObjectHashMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . LongObjectHashMap ; import org . apache . commons . lang3 . mutable . MutableInt ; import org . apache . commons . lang3 . mutable . MutableLong ; import java . util . Comparator ; import java . util . HashMap ; import java . util . concurrent . ConcurrentMap ; public class MoreMaps { public static < K , V > ConcurrentMap < K , V > createWeakKeyConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakKeys ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < K , V > ConcurrentMap < K , V > createWeakValueConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakValues ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < V > IntObjectHashMap < V > createPrimitiveIntKeyMap ( int initialCapacity , float loadFactor ) { return new IntObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < V > LongObjectHashMap < V > createPrimitiveLongKeyMap ( int initialCapacity , float loadFactor ) { return new LongObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableInt > createMutableIntValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableInt > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableLong > createMutableLongValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableLong > ( initialCapacity , loadFactor ) ; } public static < E > AtomicLongMap < E > createConcurrentCounterMap ( ) { return AtomicLongMap . create ( ) ; } public static < K , V > ArrayListMultimap < K , V > createListMultiValueMap ( int expectedKeys , int expectedValuesPerKey ) { return ArrayListMultimap . create ( expectedKeys , expectedValuesPerKey ) ; } public static < K , V extends Comparable > SortedSetMultimap < K , V > createSortedSetMultiValueMap ( ) {", "gt": "return MultimapBuilder . hashKeys ( ) . treeSetValues ( ) . build ( ) ;"}
{"input": "package com . xcs . wx . domain . bo ; import com . fasterxml . jackson . annotation . JsonIgnoreProperties ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlProperty ; import com . fasterxml . jackson . dataformat . xml . annotation . JacksonXmlRootElement ; import lombok . Data ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) @ JacksonXmlRootElement ( localName = \"<STR_LIT>\" ) public class CompressContentBO { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppMsg appMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String fromUsername ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int scene ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private AppInfo appInfo ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String titile ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class AppMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String title ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String sourceDisplayName ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String des ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String url ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private String action ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int showType ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private ReferMsg referMsg ; @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private WeAppInfo weAppInfo ; @ Data @ JsonIgnoreProperties ( ignoreUnknown = true ) public static class ReferMsg { @ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private int type ;", "gt": "@ JacksonXmlProperty ( localName = \"<STR_LIT>\" ) private long svrId ;"}
{"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > {", "gt": "Job findById ( Long id ) ;"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) { PageResult < SysOperLogEntity > page = operLogService . selectOperLogPage ( operLog ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] operIds ) { return R . ok ( operLogService . deleteOperLogByIds ( operIds ) ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) {", "gt": "operLogService . cleanOperLog ( ) ;"}
{"input": "package org . example . api . web . example ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import org . example . application . example . dto . command . ExampleCreateCommand ; import org . example . application . example . dto . command . ExampleUpdatePasswordCommand ; import org . example . application . example . dto . query . ExampleListQuery ; import org . example . application . example . dto . query . ExamplePageQuery ; import org . example . application . example . dto . result . ExampleResult ; import org . example . application . example . service . ExampleCommandService ; import org . example . application . example . service . ExampleQueryService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . web . bind . annotation . * ; import javax . validation . Valid ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class ExampleController { @ Autowired private ExampleQueryService exampleQueryService ; @ Autowired private ExampleCommandService exampleCommandService ; @ GetMapping ( \"<STR_LIT>\" ) public Page < ExampleResult > page ( @ Valid ExamplePageQuery query ) { return exampleQueryService . page ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public List < ExampleResult > list ( @ Valid ExampleListQuery query ) { return exampleQueryService . list ( query ) ; } @ GetMapping ( \"<STR_LIT>\" ) public ExampleResult detail ( @ PathVariable Long id ) { return exampleQueryService . detail ( id ) ; } @ PostMapping public void create ( @ Valid @ RequestBody ExampleCreateCommand command ) { exampleCommandService . create ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void updatePassword ( @ Valid @ RequestBody ExampleUpdatePasswordCommand command ) { exampleCommandService . update ( command ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void enable ( @ PathVariable Long id ) { exampleCommandService . enable ( id ) ; } @ PutMapping ( \"<STR_LIT>\" ) public void disable ( @ PathVariable Long id ) { exampleCommandService . disable ( id ) ; }", "gt": "@ DeleteMapping ( \"<STR_LIT>\" ) public void delete ( @ PathVariable Long id ) {"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysLoginLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysLoginLogService ; import com . oddfar . campus . framework . web . service . SysPasswordService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysLogininforController { @ Autowired private SysLoginLogService logininforService ; @ Autowired private SysPasswordService passwordService ; @ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysLoginLogEntity logininfor ) { PageResult < SysLoginLogEntity > page = logininforService . selectLogininforPage ( logininfor ) ; return R . ok ( ) . put ( page ) ; } @ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R remove ( @ PathVariable Long [ ] infoIds ) { return R . ok ( logininforService . deleteLogininforByIds ( infoIds ) ) ; }", "gt": "@ PreAuthorize ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R clean ( ) {"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; import top . kangert . kspider . expression . ExpressionError ; import java . util . List ; public class TokenStream { private final List < Token > tokens ; private int index ; private final int end ; public TokenStream ( List < Token > tokens ) { this . tokens = tokens ; this . index = <NUM_LIT> ; this . end = tokens . size ( ) ; } public boolean hasMore ( ) { return index < end ; } public boolean hasNext ( ) { return index + <NUM_LIT> < end ; } public boolean hasPrev ( ) { return index > <NUM_LIT> ; } public Token consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( index ++ ) ; } public Token next ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( ++ index ) ; } public Token prev ( ) { if ( index == <NUM_LIT> ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( -- index ) ; } public Token expect ( TokenType type ) { boolean result = match ( type , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public Token expect ( String text ) { boolean result = match ( text , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) {", "gt": "ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" , this ) ;"}
{"input": "package cn . org . alan . exam . mapper ; import cn . org . alan . exam . model . entity . ExamQuAnswer ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . model . vo . exam . ExamQuAnswerExtVO ; import cn . org . alan . exam . model . vo . score . QuestionAnalyseVO ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import java . util . List ; public interface ExamQuAnswerMapper extends BaseMapper < ExamQuAnswer > { List < ExamQuAnswerExtVO > list ( String examId , String questionId ) ; QuestionAnalyseVO questionAnalyse ( Integer examId , Integer questionId ) ; Integer deleteByUserIds ( List < Integer > userIds ) ;", "gt": "List < UserAnswerDetailVO > selectUserAnswer ( Integer userId , Integer examId ) ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < ConfigItem > ( ) ; ConfigItem configStart = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_START_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ; configItemList . add ( configStart ) ; ConfigItem configEnd = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . INT , Constants . NODE_LOOP_END_INDEX , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ; configItemList . add ( configEnd ) ; ConfigItem configIndex = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . STRING , Constants . NODE_LOOP_COUNT , \"<STR_LIT>\" , \"<STR_LIT>\" , null , null ) ; configItemList . add ( configIndex ) ; ConfigItem configValue = new ConfigItem ( \"<STR_LIT>\" , ComponentType . EL_INPUT , DataType . STRING , Constants . NODE_LOOP_INDEX , \"<STR_LIT>\" , Constants . NODE_LOOP_INDEX , null , null ) ; configItemList . add ( configValue ) ;", "gt": "return configItemList ;"}
{"input": "package io . github . chensheng . dddboot . tools . text ; public class StringBuilderHolder { private static ThreadLocal < StringBuilder > globalStringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( <NUM_LIT> ) ; } } ; private ThreadLocal < StringBuilder > stringBuilder = new ThreadLocal < StringBuilder > ( ) { @ Override protected StringBuilder initialValue ( ) { return new StringBuilder ( initSize ) ; } } ; private int initSize ; public StringBuilderHolder ( int initSize ) { this . initSize = initSize ; } public static StringBuilder getGlobal ( ) { StringBuilder sb = globalStringBuilder . get ( ) ; sb . setLength ( <NUM_LIT> ) ; return sb ; } public StringBuilder get ( ) { StringBuilder sb = stringBuilder . get ( ) ;", "gt": "sb . setLength ( <NUM_LIT> ) ;"}
{"input": "package com . oddfar . campus . common . core . page ; import java . io . Serializable ; import java . util . List ; public class TableDataInfo implements Serializable { private static final long serialVersionUID = <NUM_LIT> ; private long total ; private List < ? > rows ; private int code ; private String msg ; public TableDataInfo ( ) { } public TableDataInfo ( List < ? > list , int total ) { this . rows = list ; this . total = total ; } public long getTotal ( ) { return total ; } public void setTotal ( long total ) { this . total = total ; } public List < ? > getRows ( ) { return rows ; } public void setRows ( List < ? > rows ) { this . rows = rows ; } public int getCode ( ) {", "gt": "return code ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ; import org . springblade . web . service . IWebService ; import java . math . BigDecimal ; import java . util . * ; @ Data public class CoinMatchXhExchange { private Map < String , ForceModelAll > forceMap ;", "gt": "private boolean isTriggerComplete = true ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . dto . RoleDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . RoleVo ; import ginyi . system . service . ISysRoleService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysRoleController { @ Resource private ISysRoleService roleService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult < BaseVo < RoleVo > > list ( @ RequestBody @ Validated RoleDto roleDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < RoleVo > list = roleService . list ( roleDto , page , pageSize ) ; return CommonResult . success ( list ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult getRoleByRoleId ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { RoleVo role = roleService . getRoleByRoleId ( roleId ) ; return CommonResult . success ( role ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult addRole ( @ RequestBody @ Validated ( AddGroup . class ) RoleDto roleDto ) { roleService . addRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . UPDATE ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) public CommonResult update ( @ RequestBody @ Validated ( UpdateGroup . class ) RoleDto roleDto ) { roleService . updateRole ( roleDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long roleId ) { roleService . removeByRoleId ( roleId ) ; return CommonResult . success ( ) ; }", "gt": "@ ApiOperation ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) {"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ;", "gt": "context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection ; import com . google . common . collect . Lists ; import java . util . * ; import java . util . concurrent . CopyOnWriteArrayList ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ListUtil { public static boolean isEmpty ( List < ? > list ) { return ( list == null ) || list . isEmpty ( ) ; } public static boolean isNotEmpty ( List < ? > list ) { return ( list != null ) && ! ( list . isEmpty ( ) ) ; } public static < T > T getFirst ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( <NUM_LIT> ) ; } public static < T > T getLast ( List < T > list ) { if ( isEmpty ( list ) ) { return null ; } return list . get ( list . size ( ) - <NUM_LIT> ) ; } @ Deprecated public static < T > ArrayList < T > newArrayList ( ) { return new ArrayList < T > ( ) ; } public static < T > ArrayList < T > newArrayList ( T ... elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayList ( Iterable < T > elements ) { return Lists . newArrayList ( elements ) ; } public static < T > ArrayList < T > newArrayListWithCapacity ( int initSize ) { return new ArrayList < T > ( initSize ) ; } @ Deprecated public static < T > LinkedList < T > newLinkedList ( ) { return new LinkedList < T > ( ) ; } public static < T > LinkedList < T > newLinkedList ( Iterable < ? extends T > elements ) { return Lists . newLinkedList ( elements ) ; } @ Deprecated public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( ) { return new CopyOnWriteArrayList < T > ( ) ; } public static < T > CopyOnWriteArrayList < T > newCopyOnWriteArrayList ( T ... elements ) { return new CopyOnWriteArrayList < T > ( elements ) ; } public static final < T > List < T > emptyList ( ) { return Collections . emptyList ( ) ; } public static < T > List < T > emptyListIfNull ( final List < T > list ) { return list == null ? ( List < T > ) Collections . EMPTY_LIST : list ; } public static < T > List < T > singletonList ( T o ) { return Collections . singletonList ( o ) ; } public static < T > List < T > unmodifiableList ( List < ? extends T > list ) { return Collections . unmodifiableList ( list ) ; } public static < T > List < T > synchronizedList ( List < T > list ) { return Collections . synchronizedList ( list ) ; } public static < T extends Comparable < ? super T > > void sort ( List < T > list ) { Collections . sort ( list ) ; } public static < T extends Comparable < ? super T > > void sortReverse ( List < T > list ) { Collections . sort ( list , Collections . reverseOrder ( ) ) ; } public static < T > void sort ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , c ) ; } public static < T > void sortReverse ( List < T > list , Comparator < ? super T > c ) { Collections . sort ( list , Collections . reverseOrder ( c ) ) ; } public static < T > int binarySearch ( List < ? extends Comparable < ? super T > > sortedList , T key ) { return Collections . binarySearch ( sortedList , key ) ; } public static < T > int binarySearch ( List < ? extends T > sortedList , T key , Comparator < ? super T > c ) { return Collections . binarySearch ( sortedList , key , c ) ; } public static void shuffle ( List < ? > list ) { Collections . shuffle ( list ) ; } public static void shuffle ( List < ? > list , Random rnd ) { Collections . shuffle ( list , rnd ) ; } public static < T > List < T > reverse ( final List < T > list ) { return Lists . reverse ( list ) ; } public static < T > List < List < T > > partition ( List < T > list , int size ) { return Lists . partition ( list , size ) ; } public static < T > void notNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; } } } public static < T > void uniqueNotNullList ( List < T > list ) { if ( isEmpty ( list ) ) { return ; } Iterator < T > ite = list . iterator ( ) ; Set < T > set = new HashSet < > ( ( int ) ( list . size ( ) / <NUM_LIT> + <NUM_LIT> ) ) ; while ( ite . hasNext ( ) ) { T obj = ite . next ( ) ; if ( null == obj ) { ite . remove ( ) ; continue ; } if ( set . contains ( obj ) ) { ite . remove ( ) ; continue ; } set . add ( obj ) ; } }", "gt": "public static < E > List < E > union ( final List < ? extends E > list1 , final List < ? extends E > list2 ) {"}
{"input": "package com . oddfar . campus . admin . controller . monitor ; import com . oddfar . campus . common . annotation . ApiResource ; import com . oddfar . campus . common . annotation . Log ; import com . oddfar . campus . common . domain . PageResult ; import com . oddfar . campus . common . domain . R ; import com . oddfar . campus . common . domain . entity . SysOperLogEntity ; import com . oddfar . campus . common . enums . ResBizTypeEnum ; import com . oddfar . campus . framework . service . SysOperLogService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . web . bind . annotation . * ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Log ( openLog = false ) @ ApiResource ( name = \"<STR_LIT>\" , resBizType = ResBizTypeEnum . SYSTEM ) public class SysOperlogController { @ Autowired private SysOperLogService operLogService ;", "gt": "@ PreAuthorize ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) public R list ( SysOperLogEntity operLog ) {"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ; import org . springframework . core . type . AnnotationMetadata ; @ Configuration public class NacosConfigBootBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar , BeanFactoryAware { @ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException { DefaultListableBeanFactory defaultListableBeanFactory = ( DefaultListableBeanFactory ) beanFactory ; BeanDefinitionBuilder beanDefinitionBuilder = BeanDefinitionBuilder . rootBeanDefinition ( NacosBootConfigurationPropertiesBinder . class ) ;", "gt": "defaultListableBeanFactory . registerBeanDefinition ( NacosBootConfigurationPropertiesBinder . BEAN_NAME , beanDefinitionBuilder . getBeanDefinition ( ) ) ;"}
{"input": "package org . springblade . web . service . impl ; import lombok . extern . slf4j . Slf4j ; import org . springblade . config . market . MarketKlineUtils ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . KLine ; import org . springblade . web . model . MongoDetail ; import org . springblade . web . service . IMongoService ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . data . domain . Sort ; import org . springframework . data . mongodb . core . MongoTemplate ; import org . springframework . data . mongodb . core . query . Criteria ; import org . springframework . data . mongodb . core . query . Query ; import org . springframework . stereotype . Service ; import java . math . BigDecimal ; import java . util . List ; @ Slf4j @ Service public class MongoServiceImpl implements IMongoService { @ Autowired private MongoTemplate mongoTemplate ; @ Override public List < KLine > findAllKLine ( String type , String symbolName , long fromTime , long toTime , String period ) { String mangodbKey = MarketKlineUtils . getKLineMongdbKey ( type , symbolName , period ) ; Criteria criteria = Criteria . where ( \"<STR_LIT>\" ) . gte ( fromTime ) . andOperator ( Criteria . where ( \"<STR_LIT>\" ) . lte ( toTime ) ) ; Sort sort = Sort . by ( new Sort . Order ( Sort . Direction . ASC , \"<STR_LIT>\" ) ) ; Query query = new Query ( criteria ) . with ( sort ) ; List < KLine > kLines = mongoTemplate . find ( query , KLine . class , mangodbKey ) ; return kLines ; } @ Override public BigDecimal getPriceBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ; if ( Func . isNotEmpty ( selectModel ) ) { return selectModel . getClose ( ) ; } return BigDecimal . ZERO ; } @ Override public Long getUpdateTimeBySymbol ( String type , String symbolName ) { String mangodbkey = MarketKlineUtils . getDetailMongdbKey ( type , symbolName ) ; Query query = new Query ( Criteria . where ( \"<STR_LIT>\" ) . is ( symbolName . toUpperCase ( ) ) ) . limit ( <NUM_LIT> ) ; MongoDetail selectModel = mongoTemplate . findOne ( query , MongoDetail . class , mangodbkey ) ; ;", "gt": "if ( Func . isNotEmpty ( selectModel ) ) {"}
{"input": "package top . kangert . kspider . executor . node ; import lombok . extern . slf4j . Slf4j ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . support . ExpressionEngine ; import top . kangert . kspider . websocket . WebSocketEvent ; import org . springframework . stereotype . Component ; import cn . hutool . core . convert . Convert ; import cn . hutool . core . util . StrUtil ; import javax . annotation . Resource ; import java . util . ArrayList ; import java . util . HashMap ; import java . util . List ; import java . util . Map ; import java . util . concurrent . TimeUnit ; @ Component @ Slf4j public class DelayExecutor implements NodeExecutor { private static final String DELAY_TIME = \"<STR_LIT>\" ; @ Resource private ExpressionEngine expressionEngine ; @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { String delayTimes = node . getJsonProperty ( DELAY_TIME ) ; if ( StrUtil . isNotBlank ( delayTimes ) ) { try { Object value = expressionEngine . execute ( delayTimes , variables ) ; Long times = <NUM_LIT> ; if ( value instanceof String ) { times = Convert . toLong ( value , <NUM_LIT> ) ; } else if ( value instanceof Integer ) { times = ( ( Integer ) value ) . longValue ( ) ; } else { times = ( Long ) value ; } if ( times > <NUM_LIT> ) { try { log . info ( \"<STR_LIT>\" , times ) ; context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , DELAY_TIME , times ) ; TimeUnit . MILLISECONDS . sleep ( times ) ; } catch ( Throwable t ) { log . error ( \"<STR_LIT>\" , t ) ; } } } catch ( Exception e ) { log . error ( \"<STR_LIT>\" , delayTimes , e ) ; } } } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public List < ConfigItem > configItems ( ) { List < ConfigItem > configItemList = new ArrayList < > ( ) ; Map < String , Object > delayTimeAttrs = new HashMap < > ( ) ; delayTimeAttrs . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; ConfigItem delayTime = new ConfigItem ( \"<STR_LIT>\" , ConfigItem . ComponentType . EL_NUMBER_INPUT , ConfigItem . DataType . INT , DELAY_TIME , \"<STR_LIT>\" , <NUM_LIT> , delayTimeAttrs , null ) ;", "gt": "configItemList . add ( delayTime ) ;"}
{"input": "package io . github . chensheng . dddboot . excel . converter ; import io . github . chensheng . dddboot . excel . core . CellValueType ; import org . apache . poi . ss . usermodel . Cell ; import org . apache . poi . ss . usermodel . CellType ; import org . apache . poi . ss . usermodel . Workbook ; import java . lang . reflect . Field ; public class IntegerConverter implements Converter { @ Override public boolean support ( Field field , CellValueType type ) { Class < ? > fieldType = field . getType ( ) ; return Integer . class == fieldType || int . class == fieldType ; } @ Override public Object fromCellContent ( String cellContent , Field field , String format , boolean use1904DateWindowing ) { try { return Integer . parseInt ( cellContent ) ; } catch ( NumberFormatException e ) { try { return ( int ) Double . parseDouble ( cellContent ) ; } catch ( Exception ex ) {", "gt": "return Integer . class == field . getType ( ) ? null : <NUM_LIT> ;"}
{"input": "package org . springblade . web . config . engine . exchange ; import com . baomidou . mybatisplus . core . conditions . query . QueryWrapper ; import lombok . Data ; import org . springblade . cgform . service . IMjkjBaseSqlService ; import org . springblade . common . utils . MjkjUtils ; import org . springblade . core . tool . jackson . JsonUtil ; import org . springblade . core . tool . utils . Func ; import org . springblade . web . model . EntrustModel ; import org . springblade . web . model . ForceModel ; import org . springblade . web . model . ForceModelAll ;", "gt": "import org . springblade . web . service . IWebService ;"}
{"input": "package com . youlai . system . controller ; import com . alibaba . excel . EasyExcel ; import com . alibaba . excel . ExcelWriter ; import com . baomidou . mybatisplus . core . conditions . update . LambdaUpdateWrapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . youlai . system . common . result . PageResult ; import com . youlai . system . common . result . Result ; import com . youlai . system . common . util . ExcelUtils ; import com . youlai . system . enums . LogModuleEnum ; import com . youlai . system . model . dto . UserImportDTO ; import com . youlai . system . plugin . norepeat . annotation . PreventRepeatSubmit ; import com . youlai . system . plugin . easyexcel . UserImportListener ; import com . youlai . system . model . form . UserForm ; import com . youlai . system . model . entity . SysUser ; import com . youlai . system . model . query . UserPageQuery ; import com . youlai . system . model . dto . UserExportDTO ; import com . youlai . system . model . vo . UserInfoVO ; import com . youlai . system . model . vo . UserPageVO ; import com . youlai . system . plugin . syslog . annotation . LogAnnotation ; import com . youlai . system . service . SysUserService ; import io . swagger . v3 . oas . annotations . Parameter ; import io . swagger . v3 . oas . annotations . tags . Tag ; import io . swagger . v3 . oas . annotations . Operation ; import lombok . RequiredArgsConstructor ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import jakarta . servlet . ServletOutputStream ; import jakarta . servlet . http . HttpServletResponse ; import jakarta . validation . Valid ; import org . springframework . web . multipart . MultipartFile ; import java . io . File ; import java . io . IOException ; import java . io . InputStream ; import java . net . URLEncoder ; import java . nio . charset . StandardCharsets ; import java . util . List ; @ Tag ( name = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ RequiredArgsConstructor public class SysUserController { private final SysUserService userService ; @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ LogAnnotation ( value = \"<STR_LIT>\" , module = LogModuleEnum . USER ) public PageResult < UserPageVO > listPagedUsers ( UserPageQuery queryParams ) { IPage < UserPageVO > result = userService . listPagedUsers ( queryParams ) ; return PageResult . success ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) @ PreventRepeatSubmit public Result saveUser ( @ RequestBody @ Valid UserForm userForm ) { boolean result = userService . saveUser ( userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserForm > getUserForm ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId ) { UserForm formData = userService . getUserFormData ( userId ) ; return Result . success ( formData ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updateUser ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestBody @ Validated UserForm userForm ) { boolean result = userService . updateUser ( userId , userForm ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ DeleteMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result deleteUsers ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable String ids ) { boolean result = userService . deleteUsers ( ids ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result updatePassword ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ RequestParam String password ) { boolean result = userService . updatePassword ( userId , password ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PatchMapping ( value = \"<STR_LIT>\" ) public Result updateUserStatus ( @ Parameter ( description = \"<STR_LIT>\" ) @ PathVariable Long userId , @ Parameter ( description = \"<STR_LIT>\" ) @ RequestParam Integer status ) { boolean result = userService . update ( new LambdaUpdateWrapper < SysUser > ( ) . eq ( SysUser :: getId , userId ) . set ( SysUser :: getStatus , status ) ) ; return Result . judge ( result ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public Result < UserInfoVO > getCurrentUserInfo ( ) { UserInfoVO userInfoVO = userService . getCurrentUserInfo ( ) ; return Result . success ( userInfoVO ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) public void downloadTemplate ( HttpServletResponse response ) throws IOException { String fileName = \"<STR_LIT>\" ; response . setContentType ( \"<STR_LIT>\" ) ; response . setHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" + URLEncoder . encode ( fileName , StandardCharsets . UTF_8 ) ) ; String fileClassPath = \"<STR_LIT>\" + File . separator + \"<STR_LIT>\" + File . separator + fileName ; InputStream inputStream = this . getClass ( ) . getClassLoader ( ) . getResourceAsStream ( fileClassPath ) ; ServletOutputStream outputStream = response . getOutputStream ( ) ; ExcelWriter excelWriter = EasyExcel . write ( outputStream ) . withTemplate ( inputStream ) . build ( ) ; excelWriter . finish ( ) ; } @ Operation ( summary = \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) public Result importUsers ( MultipartFile file ) throws IOException { UserImportListener listener = new UserImportListener ( ) ; String msg = ExcelUtils . importExcel ( file . getInputStream ( ) , UserImportDTO . class , listener ) ;", "gt": "return Result . success ( msg ) ;"}
{"input": "package io . github . chensheng . dddboot . tools . base . type ; import io . github . chensheng . dddboot . tools . base . annotation . Nullable ; public class Triple < L , M , R > { @ Nullable private final L left ; @ Nullable private final M middle ; @ Nullable private final R right ; public Triple ( @ Nullable L left , @ Nullable M middle , @ Nullable R right ) { this . left = left ; this . middle = middle ; this . right = right ; } @ Nullable public L getLeft ( ) { return left ; } @ Nullable public M getMiddle ( ) { return middle ; } @ Nullable public R getRight ( ) { return right ; } @ Override public int hashCode ( ) { final int prime = <NUM_LIT> ; int result = <NUM_LIT> ; result = prime * result + ( ( left == null ) ? <NUM_LIT> : left . hashCode ( ) ) ; result = prime * result + ( ( middle == null ) ? <NUM_LIT> : middle . hashCode ( ) ) ; return prime * result + ( ( right == null ) ? <NUM_LIT> : right . hashCode ( ) ) ; } @ Override public boolean equals ( Object obj ) { if ( this == obj ) { return true ; } if ( obj == null || getClass ( ) != obj . getClass ( ) ) { return false ; } Triple other = ( Triple ) obj ; if ( left == null ) { if ( other . left != null ) { return false ; } } else if ( ! left . equals ( other . left ) ) { return false ; } if ( middle == null ) { if ( other . middle != null ) { return false ; } } else if ( ! middle . equals ( other . middle ) ) { return false ; }", "gt": "if ( right == null ) {"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import com . google . common . collect . * ; import com . google . common . util . concurrent . AtomicLongMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . IntObjectHashMap ; import io . github . chensheng . dddboot . tools . collection . type . primitive . LongObjectHashMap ; import org . apache . commons . lang3 . mutable . MutableInt ; import org . apache . commons . lang3 . mutable . MutableLong ; import java . util . Comparator ; import java . util . HashMap ; import java . util . concurrent . ConcurrentMap ; public class MoreMaps { public static < K , V > ConcurrentMap < K , V > createWeakKeyConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakKeys ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < K , V > ConcurrentMap < K , V > createWeakValueConcurrentMap ( int initialCapacity , int concurrencyLevel ) { return new MapMaker ( ) . weakValues ( ) . initialCapacity ( initialCapacity ) . concurrencyLevel ( concurrencyLevel ) . makeMap ( ) ; } public static < V > IntObjectHashMap < V > createPrimitiveIntKeyMap ( int initialCapacity , float loadFactor ) { return new IntObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < V > LongObjectHashMap < V > createPrimitiveLongKeyMap ( int initialCapacity , float loadFactor ) { return new LongObjectHashMap < V > ( initialCapacity , loadFactor ) ; } public static < K > HashMap < K , MutableInt > createMutableIntValueMap ( int initialCapacity , float loadFactor ) { return new HashMap < K , MutableInt > ( initialCapacity , loadFactor ) ; }", "gt": "public static < K > HashMap < K , MutableLong > createMutableLongValueMap ( int initialCapacity , float loadFactor ) {"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ; @ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ; @ TableField ( \"<STR_LIT>\" ) private Integer reserved1 ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private String reserved2 ;"}
{"input": "package me . zhengjie . modules . system . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import me . zhengjie . annotation . Log ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . service . JobService ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . Set ; @ RestController @ RequiredArgsConstructor @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class JobController { private final JobService jobService ; private static final String ENTITY_NAME = \"<STR_LIT>\" ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public void exportJob ( HttpServletResponse response , JobQueryCriteria criteria ) throws IOException { jobService . download ( jobService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < PageResult < Job > > queryJob ( JobQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( jobService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > createJob ( @ Validated @ RequestBody Job resources ) { if ( resources . getId ( ) != null ) { throw new BadRequestException ( \"<STR_LIT>\" + ENTITY_NAME + \"<STR_LIT>\" ) ; } jobService . create ( resources ) ; return new ResponseEntity < > ( HttpStatus . CREATED ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > updateJob ( @ Validated ( Job . Update . class ) @ RequestBody Job resources ) { jobService . update ( resources ) ; return new ResponseEntity < > ( HttpStatus . NO_CONTENT ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > deleteJob ( @ RequestBody Set < Long > ids ) {", "gt": "jobService . verification ( ids ) ;"}
{"input": "package cn . org . alan . exam . controller ; import cn . org . alan . exam . common . group . AnswerGroup ; import cn . org . alan . exam . common . result . Result ; import cn . org . alan . exam . model . form . answer . CorrectAnswerFrom ; import cn . org . alan . exam . model . vo . answer . AnswerExamVO ; import cn . org . alan . exam . model . vo . answer . UncorrectedUserVO ; import cn . org . alan . exam . model . vo . answer . UserAnswerDetailVO ; import cn . org . alan . exam . service . IManualScoreService ; import com . baomidou . mybatisplus . core . metadata . IPage ; import jakarta . annotation . Resource ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import java . util . List ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class AnswerController { @ Resource private IManualScoreService manualScoreService ; @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < List < UserAnswerDetailVO > > getDetail ( @ RequestParam Integer userId , @ RequestParam Integer examId ) { return manualScoreService . getDetail ( userId , examId ) ; } @ PutMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < String > Correct ( @ RequestBody @ Validated ( AnswerGroup . CorrectGroup . class ) List < CorrectAnswerFrom > correctAnswerFroms ) { return manualScoreService . correct ( correctAnswerFroms ) ; }", "gt": "@ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public Result < IPage < AnswerExamVO > > examPage ( @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageNum , @ RequestParam ( value = \"<STR_LIT>\" , required = false , defaultValue = \"<STR_LIT>\" ) Integer pageSize , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) String examName ) {"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ; private Integer radioScore ; private Integer multiCount ; private Integer multiScore ; private Integer judgeCount ; private Integer judgeScore ; private Integer saqCount ; private Integer saqScore ; @ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime startTime ;", "gt": "@ JsonFormat ( shape = JsonFormat . Shape . STRING , pattern = \"<STR_LIT>\" ) private LocalDateTime endTime ;"}
{"input": "package io . github . chensheng . dddboot . nacos . config . autoconfigure ; import io . github . chensheng . dddboot . nacos . config . binder . NacosBootConfigurationPropertiesBinder ; import org . springframework . beans . BeansException ; import org . springframework . beans . factory . BeanFactory ; import org . springframework . beans . factory . BeanFactoryAware ; import org . springframework . beans . factory . support . BeanDefinitionBuilder ; import org . springframework . beans . factory . support . BeanDefinitionRegistry ; import org . springframework . beans . factory . support . DefaultListableBeanFactory ; import org . springframework . context . annotation . Configuration ; import org . springframework . context . annotation . ImportBeanDefinitionRegistrar ; import org . springframework . core . type . AnnotationMetadata ; @ Configuration public class NacosConfigBootBeanDefinitionRegistrar implements ImportBeanDefinitionRegistrar , BeanFactoryAware {", "gt": "@ Override public void setBeanFactory ( BeanFactory beanFactory ) throws BeansException {"}
{"input": "package org . springblade . config . service ; import org . springblade . config . exception . DBException ; import org . springblade . config . util . ColumnMeta ; public interface DbTableHandleI { String getAddColumnSql ( ColumnMeta columnMeta ) ; String getReNameFieldName ( ColumnMeta columnMeta ) ; String getUpdateColumnSql ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) throws DBException ; String getMatchClassTypeByDataType ( String var1 , int var2 ) ; String dropTableSQL ( String tableName ) ; String getDropColumnSql ( String fieldName ) ; String getCommentSql ( ColumnMeta columnMeta ) ;", "gt": "String getSpecialHandle ( ColumnMeta cgformcolumnMeta , ColumnMeta datacolumnMeta ) ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import org . apache . commons . lang . StringUtils ; public class StringBoolUtil { public static String strBool ( String s ) { if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } if ( \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) || \"<STR_LIT>\" . equals ( s ) ) { return \"<STR_LIT>\" ; } return null ; }", "gt": "public static String isBlank ( String s ) {"}
{"input": "package org . springblade . config . autopoi . poi . util ; import org . springblade . config . autopoi . poi . exception . excel . ExcelExportException ; import java . lang . reflect . Array ; import java . text . DecimalFormat ; import java . text . SimpleDateFormat ; import java . util . Collection ; import java . util . Map ; public final class PoiFunctionUtil { private static final String TWO_DECIMAL_STR = \"<STR_LIT>\" ; private static final String THREE_DECIMAL_STR = \"<STR_LIT>\" ; private static final DecimalFormat TWO_DECIMAL = new DecimalFormat ( TWO_DECIMAL_STR ) ; private static final DecimalFormat THREE_DECIMAL = new DecimalFormat ( THREE_DECIMAL_STR ) ; private static final String DAY_STR = \"<STR_LIT>\" ; private static final String TIME_STR = \"<STR_LIT>\" ; private static final String TIME__NO_S_STR = \"<STR_LIT>\" ; private static final SimpleDateFormat DAY_FORMAT = new SimpleDateFormat ( DAY_STR ) ; private static final SimpleDateFormat TIME_FORMAT = new SimpleDateFormat ( TIME_STR ) ; private static final SimpleDateFormat TIME__NO_S_FORMAT = new SimpleDateFormat ( TIME__NO_S_STR ) ; private PoiFunctionUtil ( ) { } @ SuppressWarnings ( \"<STR_LIT>\" ) public static int length ( Object obj ) { if ( obj == null ) { return <NUM_LIT> ; } if ( obj instanceof Map ) { return ( ( Map ) obj ) . size ( ) ; } if ( obj instanceof Collection ) { return ( ( Collection ) obj ) . size ( ) ; } if ( obj . getClass ( ) . isArray ( ) ) { return Array . getLength ( obj ) ; } return String . valueOf ( obj ) . length ( ) ; } public static String formatNumber ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } double number = Double . valueOf ( obj . toString ( ) ) ; DecimalFormat decimalFormat = null ; if ( TWO_DECIMAL . equals ( format ) ) { decimalFormat = TWO_DECIMAL ; } else if ( THREE_DECIMAL_STR . equals ( format ) ) { decimalFormat = THREE_DECIMAL ; } else { decimalFormat = new DecimalFormat ( format ) ; } return decimalFormat . format ( number ) ; } public static String formatDate ( Object obj , String format ) { if ( obj == null || obj . toString ( ) == \"<STR_LIT>\" ) { return \"<STR_LIT>\" ; } SimpleDateFormat dateFormat = null ; if ( DAY_STR . equals ( format ) ) { dateFormat = DAY_FORMAT ; }", "gt": "else if ( TIME_STR . equals ( format ) ) {"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . system . domain . model . dto . DeptDto ; import ginyi . system . domain . model . dto . PostDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . PostVo ; import ginyi . system . service . ISysPostService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; import java . util . Set ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysPostController { @ Resource private ISysPostService postService ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < PostVo > getPostByDeptId ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { PostVo postVo = postService . getPostByPostId ( postId ) ; return CommonResult . success ( postVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ PathVariable ( \"<STR_LIT>\" ) Long postId ) { postService . removePostById ( postId ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . DELETE ) public CommonResult delete ( @ RequestBody Set < Long > ids ) {", "gt": "postService . removeDeptByIds ( ids ) ;"}
{"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ; private String requestIp ; private String address ; private String browser ; private Long time ;", "gt": "@ JSONField ( serialize = false ) private String exceptionDetail ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ;", "gt": "private Integer gender ;"}
{"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) {", "gt": "resources . setDictId ( resources . getDict ( ) . getId ( ) ) ;"}
{"input": "package com . yf . system . modules . user . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import com . baomidou . mybatisplus . extension . activerecord . Model ;", "gt": "import lombok . Data ;"}
{"input": "package ginyi . system . domain ; import com . fasterxml . jackson . annotation . JsonFormat ; import io . swagger . annotations . ApiModel ; import io . swagger . annotations . ApiModelProperty ; import lombok . Data ; import lombok . EqualsAndHashCode ; import org . springframework . data . mongodb . core . mapping . Document ; import java . util . Date ; @ EqualsAndHashCode ( callSuper = true ) @ Data @ ApiModel ( \"<STR_LIT>\" ) @ Document ( \"<STR_LIT>\" ) public class SysLogOperation extends BaseEntity { private static final long serialVersionUID = <NUM_LIT> ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String id ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String title ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer businessType ; @ ApiModelProperty ( \"<STR_LIT>\" ) private Integer [ ] businessTypes ; @ ApiModelProperty ( \"<STR_LIT>\" ) private String method ;", "gt": "@ ApiModelProperty ( \"<STR_LIT>\" ) private String requestMethod ;"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) public CommonResult add ( @ RequestBody @ Validated ( AddGroup . class ) NoticeDto noticeDto ) { noticeService . add ( noticeDto ) ; return CommonResult . success ( ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = {", "gt": "\"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , }"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . constant . Constants ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import top . kangert . kspider . model . ConfigItem . ComponentType ; import top . kangert . kspider . model . ConfigItem . DataType ; import top . kangert . kspider . websocket . WebSocketEvent ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class LoopExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { context . pause ( node . getNodeId ( ) , WebSocketEvent . COMMON_EVENT , Constants . NODE_LOOP_INDEX , variables . get ( Constants . NODE_LOOP_INDEX ) ) ; } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) {", "gt": "return new Shape ( supportType ( ) , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ; private Long deptId ; private String avatar ; private String mobile ;", "gt": "private Integer status ;"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ; private Long deptId ;", "gt": "private String avatar ;"}
{"input": "package cn . org . alan . exam . model . vo . exam ; import com . baomidou . mybatisplus . annotation . FieldFill ; import com . baomidou . mybatisplus . annotation . TableField ; import com . fasterxml . jackson . annotation . JsonFormat ; import lombok . Data ; import java . time . LocalDateTime ; @ Data public class ExamVO { private Integer id ; private String title ; private Integer examDuration ; private Integer passedScore ; private Integer grossScore ; private Integer maxCount ; private Integer userId ; private Integer certificateId ; private Integer radioCount ;", "gt": "private Integer radioScore ;"}
{"input": "package me . zhengjie . modules . security . service . dto ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ; import java . util . Date ; @ Data @ AllArgsConstructor @ NoArgsConstructor public class OnlineUserDto { private String userName ; private String nickName ; private String dept ; private String browser ; private String ip ; private String address ;", "gt": "private String key ;"}
{"input": "package top . kangert . kspider . executor . node ; import org . springframework . stereotype . Component ; import top . kangert . kspider . context . SpiderContext ; import top . kangert . kspider . executor . NodeExecutor ; import top . kangert . kspider . model . ConfigItem ; import top . kangert . kspider . model . Shape ; import top . kangert . kspider . model . SpiderNode ; import java . util . ArrayList ; import java . util . List ; import java . util . Map ; @ Component public class CommentExecutor implements NodeExecutor { @ Override public void execute ( SpiderNode node , SpiderContext context , Map < String , Object > variables ) { } @ Override public String supportType ( ) { return \"<STR_LIT>\" ; } @ Override public Shape shape ( ) { Shape shape = new Shape ( ) ; shape . setName ( supportType ( ) ) ; shape . setLabel ( \"<STR_LIT>\" ) ; shape . setIcon ( \"<STR_LIT>\" ) ;", "gt": "shape . setDesc ( \"<STR_LIT>\" ) ;"}
{"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ;", "gt": "@ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ;"}
{"input": "package io . github . chensheng . dddboot . tools . collection . type ; import java . util . Comparator ; public class MoreLists { @ SuppressWarnings ( \"<STR_LIT>\" ) public static < T extends Comparable > SortedArrayList < T > createSortedArrayList ( ) { return new SortedArrayList < T > ( ) ; }", "gt": "public static < T > SortedArrayList < T > createSortedArrayList ( Comparator < ? super T > c ) {"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) { this . ruleValue = ruleValue ; } public Date getCreateTime ( ) { return createTime ; }", "gt": "public void setCreateTime ( Date createTime ) {"}
{"input": "package org . springblade . cgform . model . query ; import org . springblade . config . util . ConvertUtils ; public enum MatchTypeEnum { AND ( \"<STR_LIT>\" ) , OR ( \"<STR_LIT>\" ) ; private String value ; MatchTypeEnum ( String value ) { this . value = value ; } public String getValue ( ) { return value ; } public static MatchTypeEnum getByValue ( Object value ) { if ( ConvertUtils . isEmpty ( value ) ) { return null ; } return getByValue ( value . toString ( ) ) ; } public static MatchTypeEnum getByValue ( String value ) {", "gt": "if ( ConvertUtils . isEmpty ( value ) ) {"}
{"input": "package top . kangert . kspider . expression . parsing ; import javax . xml . transform . Source ; import top . kangert . kspider . expression . ExpressionError ; import java . util . List ; public class TokenStream { private final List < Token > tokens ; private int index ; private final int end ; public TokenStream ( List < Token > tokens ) { this . tokens = tokens ; this . index = <NUM_LIT> ; this . end = tokens . size ( ) ; } public boolean hasMore ( ) { return index < end ; } public boolean hasNext ( ) { return index + <NUM_LIT> < end ; } public boolean hasPrev ( ) { return index > <NUM_LIT> ; } public Token consume ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( index ++ ) ; } public Token next ( ) { if ( ! hasMore ( ) ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( ++ index ) ; } public Token prev ( ) { if ( index == <NUM_LIT> ) { throw new RuntimeException ( \"<STR_LIT>\" ) ; } return tokens . get ( -- index ) ; } public Token expect ( TokenType type ) { boolean result = match ( type , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + type . getError ( ) + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public Token expect ( String text ) { boolean result = match ( text , true ) ; if ( ! result ) { Token token = index < tokens . size ( ) ? tokens . get ( index ) : null ; Span span = token != null ? token . getSpan ( ) : null ; if ( span == null ) { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" , this ) ; } else { ExpressionError . error ( \"<STR_LIT>\" + text + \"<STR_LIT>\" + token . getText ( ) + \"<STR_LIT>\" , span ) ; } return null ; } else { return tokens . get ( index - <NUM_LIT> ) ; } } public boolean match ( TokenType type , boolean consume ) { if ( index >= end ) { return false ; } if ( tokens . get ( index ) . getType ( ) == type ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean match ( String text , boolean consume ) { if ( index >= end ) { return false ; } if ( tokens . get ( index ) . getText ( ) . equals ( text ) ) { if ( consume ) { index ++ ; } return true ; } return false ; } public boolean match ( boolean consume , TokenType ... types ) { for ( TokenType type : types ) { if ( match ( type , consume ) ) { return true ; } } return false ; } public boolean match ( boolean consume , String ... tokenTexts ) { for ( String text : tokenTexts ) { if ( match ( text , consume ) ) { return true ; } }", "gt": "return false ;"}
{"input": "package org . springblade . cgform . model ; import java . util . Date ; public class SysPermissionDataRuleModel { private String id ; private String permissionId ; private String ruleName ; private String ruleColumn ; private String ruleConditions ; private String ruleValue ; private Date createTime ; private String createBy ; private Date updateTime ; private String updateBy ; public String getId ( ) { return id ; } public void setId ( String id ) { this . id = id ; } public String getPermissionId ( ) { return permissionId ; } public void setPermissionId ( String permissionId ) { this . permissionId = permissionId ; } public String getRuleName ( ) { return ruleName ; } public void setRuleName ( String ruleName ) { this . ruleName = ruleName ; } public String getRuleColumn ( ) { return ruleColumn ; } public void setRuleColumn ( String ruleColumn ) { this . ruleColumn = ruleColumn ; } public String getRuleConditions ( ) { return ruleConditions ; } public void setRuleConditions ( String ruleConditions ) { this . ruleConditions = ruleConditions ; } public String getRuleValue ( ) { return ruleValue ; } public void setRuleValue ( String ruleValue ) { this . ruleValue = ruleValue ; }", "gt": "public Date getCreateTime ( ) {"}
{"input": "package top . kangert . kspider . expression ; import java . lang . reflect . Method ; import java . lang . reflect . Parameter ; import java . util . ArrayList ; import java . util . List ; import top . kangert . kspider . annotation . Comment ; import top . kangert . kspider . annotation . Example ; public class ExpressionObject { private String className ; private List < ExpressionMethod > methods = new ArrayList < > ( ) ; private List < ExpressionAttribute > attributes = new ArrayList < > ( ) ; private String superClass ; private List < String > interfaces = new ArrayList < > ( ) ; public void addAttribute ( ExpressionAttribute attribute ) { this . attributes . add ( attribute ) ; } public void addMethod ( ExpressionMethod method ) { this . methods . add ( method ) ; } public void addInterface ( String interfaceName ) { this . interfaces . add ( interfaceName ) ; } public String getClassName ( ) { return className ; } public void setClassName ( String className ) { this . className = className ; } public List < ExpressionMethod > getMethods ( ) { return methods ; } public void setMethods ( List < ExpressionMethod > methods ) { this . methods = methods ; } public String getSuperClass ( ) { return superClass ; } public void setSuperClass ( String superClass ) { this . superClass = superClass ; } public List < String > getInterfaces ( ) { return interfaces ; } public void setInterfaces ( List < String > interfaces ) { this . interfaces = interfaces ; } public List < ExpressionAttribute > getAttributes ( ) { return attributes ; } public void setAttributes ( List < ExpressionAttribute > attributes ) { this . attributes = attributes ; } static class ExpressionAttribute { private String type ; private String name ; public ExpressionAttribute ( String type , String name ) { this . type = type ; this . name = name ; } public String getType ( ) { return type ; } public String getName ( ) { return name ; } } static class ExpressionMethod { private String name ; private String returnType ; private String example ; private String comment ; private List < ExpressionMethodParameter > parameters = new ArrayList < > ( ) ; public ExpressionMethod ( Method method ) { this . name = method . getName ( ) ; this . returnType = method . getReturnType ( ) . getSimpleName ( ) ; Example exampleAnnotation = method . getDeclaredAnnotation ( Example . class ) ; if ( exampleAnnotation != null ) { this . example = exampleAnnotation . value ( ) ; } Comment commentAnnotation = method . getDeclaredAnnotation ( Comment . class ) ; if ( commentAnnotation != null ) { this . comment = commentAnnotation . value ( ) ; } Parameter [ ] parameters = method . getParameters ( ) ; if ( parameters != null ) { for ( int i = <NUM_LIT> ; i < parameters . length ; i ++ ) { this . parameters . add ( new ExpressionMethodParameter ( parameters [ i ] ) ) ; } } } public String getComment ( ) { return comment ; } public String getName ( ) { return name ; } public String getReturnType ( ) { return returnType ; } public String getExample ( ) { return example ; }", "gt": "public List < ExpressionMethodParameter > getParameters ( ) {"}
{"input": "package ginyi . server . admin . controller ; import com . github . xiaoymin . knife4j . annotations . ApiOperationSupport ; import ginyi . common . annotation . Log ; import ginyi . common . enums . BusinessType ; import ginyi . common . result . CommonResult ; import ginyi . common . swagger . AddGroup ; import ginyi . common . swagger . UpdateGroup ; import ginyi . system . domain . SysNotice ; import ginyi . system . domain . model . dto . NoticeDto ; import ginyi . system . domain . model . vo . BaseVo ; import ginyi . system . domain . model . vo . NoticeVo ; import ginyi . system . service . ISysNoticeService ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . annotation . Resource ; @ Api ( tags = \"<STR_LIT>\" ) @ RestController @ RequestMapping ( \"<STR_LIT>\" ) public class SysNoticeController { @ Resource private ISysNoticeService noticeService ; @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < SysNotice > > list ( @ RequestBody NoticeDto noticeDto , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < SysNotice > baseVo = noticeService . list ( noticeDto , page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public CommonResult < BaseVo < NoticeVo > > getUserNoticeList ( @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long page , @ RequestParam ( value = \"<STR_LIT>\" , required = false ) Long pageSize ) { BaseVo < NoticeVo > baseVo = noticeService . getUserNoticeList ( page , pageSize ) ; return CommonResult . success ( baseVo ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( \"<STR_LIT>\" ) @ ApiOperationSupport ( ignoreParameters = { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , } ) @ PreAuthorize ( \"<STR_LIT>\" ) @ Log ( title = \"<STR_LIT>\" , businessType = BusinessType . INSERT ) public CommonResult add ( @ RequestBody @ Validated ( AddGroup . class ) NoticeDto noticeDto ) {", "gt": "noticeService . add ( noticeDto ) ;"}
{"input": "package com . xcs . wx . config ; import com . baomidou . dynamic . datasource . exception . CannotFindDataSourceException ; import com . xcs . wx . domain . vo . ResponseVO ; import com . xcs . wx . exception . BizException ; import lombok . extern . slf4j . Slf4j ; import org . mybatis . spring . MyBatisSystemException ; import org . springframework . http . HttpStatus ; import org . springframework . web . bind . annotation . ExceptionHandler ; import org . springframework . web . bind . annotation . ResponseStatus ; import org . springframework . web . bind . annotation . RestControllerAdvice ; @ Slf4j @ RestControllerAdvice @ ResponseStatus ( HttpStatus . OK ) public class ExceptionAdviceConfig { @ ExceptionHandler ( BizException . class ) public ResponseVO < String > handleException ( BizException e ) { return ResponseVO . error ( e . getCode ( ) , e . getMsg ( ) ) ; } @ ExceptionHandler ( MyBatisSystemException . class ) public ResponseVO < String > myBatisSystemException ( MyBatisSystemException e ) { if ( e . getCause ( ) . getCause ( ) instanceof CannotFindDataSourceException ) { return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } log . error ( \"<STR_LIT>\" , e ) ; return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; } @ ExceptionHandler ( RuntimeException . class ) public ResponseVO < String > handleException ( RuntimeException e ) { log . error ( \"<STR_LIT>\" , e ) ; return ResponseVO . error ( - <NUM_LIT> , \"<STR_LIT>\" ) ; }", "gt": "@ ExceptionHandler ( Exception . class ) public ResponseVO < String > handleException ( Exception e ) {"}
{"input": "package com . xcs . wx . domain ; import com . baomidou . mybatisplus . annotation . TableField ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import lombok . Data ; import org . apache . ibatis . type . ByteArrayTypeHandler ; @ Data @ TableName ( value = \"<STR_LIT>\" , autoResultMap = true ) public class ChatRoom { @ TableId ( \"<STR_LIT>\" ) private String chatRoomName ; @ TableField ( \"<STR_LIT>\" ) private String userNameList ; @ TableField ( \"<STR_LIT>\" ) private String displayNameList ; @ TableField ( \"<STR_LIT>\" ) private Integer chatRoomFlag ; @ TableField ( \"<STR_LIT>\" ) private Integer owner ; @ TableField ( \"<STR_LIT>\" ) private Integer isShowName ;", "gt": "@ TableField ( \"<STR_LIT>\" ) private String selfDisplayName ;"}
{"input": "package org . springblade . cgform . model . generate . util ; import java . text . * ; import java . util . Date ; import java . util . Iterator ; import java . util . List ; import java . util . Locale ; public class SimpleFormat { public static String underlineToHump ( String para ) { final StringBuilder sb = new StringBuilder ( ) ; for ( String s : para . split ( \"<STR_LIT>\" ) ) { if ( ! para . contains ( \"<STR_LIT>\" ) ) { sb . append ( s ) ; } else if ( sb . length ( ) == <NUM_LIT> ) { sb . append ( s . toLowerCase ( ) ) ; } else { sb . append ( s . substring ( <NUM_LIT> , <NUM_LIT> ) . toUpperCase ( ) ) ; sb . append ( s . substring ( <NUM_LIT> ) . toLowerCase ( ) ) ; } } return sb . toString ( ) ; } public static String humpToUnderline ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public static String humpToShortbar ( String para ) { StringBuilder sb = new StringBuilder ( para ) ; int n = <NUM_LIT> ; if ( ! para . contains ( \"<STR_LIT>\" ) ) { for ( int i = <NUM_LIT> ; i < para . length ( ) ; ++ i ) { if ( Character . isUpperCase ( para . charAt ( i ) ) ) { sb . insert ( i + n , \"<STR_LIT>\" ) ; ++ n ; } } } if ( sb . toString ( ) . toLowerCase ( ) . startsWith ( \"<STR_LIT>\" ) ) { return sb . toString ( ) . toLowerCase ( ) . substring ( <NUM_LIT> ) ; } return sb . toString ( ) . toLowerCase ( ) ; } public String number ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String number ( Object obj , String pattern ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( pattern ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String round ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; if ( obj . toString ( ) . equalsIgnoreCase ( \"<STR_LIT>\" ) ) { return \"<STR_LIT>\" ; } return new DecimalFormat ( \"<STR_LIT>\" ) . format ( Double . parseDouble ( obj . toString ( ) ) ) ; } public String currency ( Object obj ) { obj = ( ( obj == null || obj . toString ( ) . length ( ) == <NUM_LIT> ) ? Integer . valueOf ( <NUM_LIT> ) : obj ) ; return NumberFormat . getCurrencyInstance ( Locale . CHINA ) . format ( obj ) ; } public String timestampToString ( Object obj , String pattern ) {", "gt": "if ( obj == null ) {"}
{"input": "package com . youlai . system . model . entity ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . youlai . system . common . base . BaseEntity ; import lombok . Getter ; import lombok . Setter ; @ Getter @ Setter public class SysUser extends BaseEntity { @ TableId ( type = IdType . AUTO ) private Long id ; private String username ; private String nickname ; private Integer gender ; private String password ;", "gt": "private Long deptId ;"}
{"input": "package top . kangert . kspider . websocket ; import org . springframework . beans . factory . annotation . Autowired ; import org . springframework . http . server . ServerHttpRequest ; import org . springframework . http . server . ServerHttpResponse ; import org . springframework . http . server . ServletServerHttpRequest ; import org . springframework . web . socket . WebSocketHandler ; import org . springframework . web . socket . server . HandshakeInterceptor ; import cn . hutool . core . util . StrUtil ; import java . util . Map ; import javax . servlet . http . HttpServletRequest ; public class WebSocketEditorInterceptor implements HandshakeInterceptor { private static final String TOKEN_PARAMETER = \"<STR_LIT>\" ; @ Autowired private HttpServletRequest request ; public WebSocketEditorInterceptor ( ) { } @ Override public boolean beforeHandshake ( ServerHttpRequest req , ServerHttpResponse resp , WebSocketHandler handler , Map < String , Object > attributes ) throws Exception { String sessionToken = ( String ) request . getSession ( ) . getAttribute ( TOKEN_PARAMETER ) ;", "gt": "if ( req instanceof ServletServerHttpRequest ) {"}
{"input": "package org . springblade . cgform . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import org . springblade . cgform . entity . SysDict ; import org . springblade . cgform . model . DictModel ; import org . springblade . cgform . model . DuplicateCheckVo ; import org . springblade . cgform . model . TreeSelectModel ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Map ; public interface DictMapper extends BaseMapper < SysDict > { List < DictModel > queryTableDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryDictItemsByCode ( @ Param ( \"<STR_LIT>\" ) String code ) ; List < DictModel > queryTableDictItemsByCodeAndFilter ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String filterSql ) ; List < TreeSelectModel > queryTreeList ( @ Param ( \"<STR_LIT>\" ) Map < String , String > query , @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String pidField , @ Param ( \"<STR_LIT>\" ) String pid , @ Param ( \"<STR_LIT>\" ) String hasChildField ) ; List < DictModel > queryTableDictByKeys ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String [ ] keyArray ) ; Long getIdByCode ( String code ) ; List < DictModel > queryTableDictItems ( @ Param ( \"<STR_LIT>\" ) String table , @ Param ( \"<STR_LIT>\" ) String text , @ Param ( \"<STR_LIT>\" ) String code , @ Param ( \"<STR_LIT>\" ) String keyword ) ; Long duplicateCheckCountSql ( DuplicateCheckVo duplicateCheckVo ) ; Long duplicateCheckCountSqlNoDataId ( DuplicateCheckVo duplicateCheckVo ) ;", "gt": "List < Map < String , Object > > getAllTenantList ( ) ;"}
