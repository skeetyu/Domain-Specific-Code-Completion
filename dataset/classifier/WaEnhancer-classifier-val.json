{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . webkit . MimeTypeMap ; public class MimeTypeUtils { public static String getMimeTypeFromExtension ( String url ) { String type = \"<STR_LIT>\" ; String extension = MimeTypeMap . getFileExtensionFromUrl ( url ) ; if ( extension != null ) { type = MimeTypeMap . getSingleton ( ) . getMimeTypeFromExtension ( extension ) ; }", "gt": "return type ;"}
{"input": "package com . wmods . wppenhacer . preference ; import android . content . Context ; import android . util . AttributeSet ; import android . widget . Toast ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . preference . Preference ; import androidx . preference . PreferenceManager ; import com . wmods . wppenhacer . FilePicker ; import com . wmods . wppenhacer . R ; import java . io . File ; import java . nio . file . Files ; import java . util . Arrays ; public class FileSelectPreference extends Preference implements Preference . OnPreferenceClickListener , FilePicker . OnFilePickedListener { private String [ ] mineTypes ; private boolean selectDirectory ; public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; } @ Override public boolean onPreferenceClick ( @ NonNull Preference preference ) { FilePicker . setOnFilePickedListener ( this ) ; if ( selectDirectory ) { FilePicker . directoryCapture . launch ( null ) ; return true ; } FilePicker . fileCapture . launch ( mineTypes ) ; return false ; } @ Override public void onFilePicked ( File file ) { if ( file . isDirectory ( ) ) { try { var tmpFile = Files . write ( new File ( file , \"<STR_LIT>\" ) . toPath ( ) , new byte [ <NUM_LIT> ] ) . toFile ( ) ; boolean delete = tmpFile . delete ( ) ; } catch ( Exception ignored ) { Toast . makeText ( this . getContext ( ) , R . string . failed_save_directory , Toast . LENGTH_SHORT ) . show ( ) ; return ; } } else if ( ! file . canRead ( ) ) { Toast . makeText ( this . getContext ( ) , R . string . unable_to_read_this_file , Toast . LENGTH_SHORT ) . show ( ) ; return ; } getSharedPreferences ( ) . edit ( ) . putString ( getKey ( ) , file . getAbsolutePath ( ) ) . apply ( ) ; setSummary ( file . getAbsolutePath ( ) ) ; } public void init ( Context context , AttributeSet attrs ) { setOnPreferenceClickListener ( this ) ; var typedArray = context . getTheme ( ) . obtainStyledAttributes ( attrs , R . styleable . FileSelectPreference , <NUM_LIT> , <NUM_LIT> ) ; var attrsArray = typedArray . getTextArray ( R . styleable . FileSelectPreference_android_entryValues ) ; if ( attrsArray != null ) { mineTypes = Arrays . stream ( attrsArray ) . map ( String :: valueOf ) . toArray ( String [ ] :: new ) ; } else {", "gt": "mineTypes = new String [ ] {"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; messages . add ( new MessageItem ( id , message , timestamp ) ) ; } while ( history . moveToNext ( ) ) ; return messages ; } @ Override public void onCreate ( SQLiteDatabase sqLiteDatabase ) { sqLiteDatabase . execSQL ( \"<STR_LIT>\" ) ; } @ Override public void onUpgrade ( SQLiteDatabase sqLiteDatabase , int oldVersion , int newVersion ) { } public static class MessageItem { public long id ; public String message ; public long timestamp ; public MessageItem ( long id , String message , long timestamp ) { this . id = id ; this . message = message ;", "gt": "this . timestamp = timestamp ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . privacy ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ViewOnce extends Feature { private boolean isFromMe ; public ViewOnce ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var methods = Unobfuscator . loadViewOnceMethod ( classLoader ) ; var classViewOnce = Unobfuscator . loadViewOnceClass ( classLoader ) ; logDebug ( classViewOnce ) ; var viewOnceStoreMethod = Unobfuscator . loadViewOnceStoreMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( viewOnceStoreMethod ) ) ; XposedBridge . hookMethod ( viewOnceStoreMethod , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; isFromMe = false ; var messageObject = param . args [ <NUM_LIT> ] ; if ( messageObject == null ) return ; isFromMe = new FMessageWpp ( messageObject ) . getKey ( ) . isFromMe ; } } ) ; for ( var method : methods ) { logDebug ( Unobfuscator . getMethodDescriptor ( method ) ) ; XposedBridge . hookMethod ( method , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ;", "gt": "if ( ( int ) param . getResult ( ) != <NUM_LIT> && ( Unobfuscator . isCalledFromClass ( classViewOnce ) ) ) {"}
{"input": "package com . wmods . wppenhacer . preference ; import android . content . Context ; import android . util . AttributeSet ; import android . widget . Toast ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . preference . Preference ; import androidx . preference . PreferenceManager ; import com . wmods . wppenhacer . FilePicker ; import com . wmods . wppenhacer . R ; import java . io . File ; import java . nio . file . Files ; import java . util . Arrays ; public class FileSelectPreference extends Preference implements Preference . OnPreferenceClickListener , FilePicker . OnFilePickedListener { private String [ ] mineTypes ; private boolean selectDirectory ; public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; } @ Override public boolean onPreferenceClick ( @ NonNull Preference preference ) { FilePicker . setOnFilePickedListener ( this ) ; if ( selectDirectory ) { FilePicker . directoryCapture . launch ( null ) ; return true ; } FilePicker . fileCapture . launch ( mineTypes ) ; return false ; } @ Override public void onFilePicked ( File file ) { if ( file . isDirectory ( ) ) { try { var tmpFile = Files . write ( new File ( file , \"<STR_LIT>\" ) . toPath ( ) , new byte [ <NUM_LIT> ] ) . toFile ( ) ; boolean delete = tmpFile . delete ( ) ; } catch ( Exception ignored ) { Toast . makeText ( this . getContext ( ) , R . string . failed_save_directory , Toast . LENGTH_SHORT ) . show ( ) ; return ; } } else if ( ! file . canRead ( ) ) { Toast . makeText ( this . getContext ( ) , R . string . unable_to_read_this_file , Toast . LENGTH_SHORT ) . show ( ) ; return ; } getSharedPreferences ( ) . edit ( ) . putString ( getKey ( ) , file . getAbsolutePath ( ) ) . apply ( ) ; setSummary ( file . getAbsolutePath ( ) ) ; } public void init ( Context context , AttributeSet attrs ) {", "gt": "setOnPreferenceClickListener ( this ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . privacy ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ViewOnce extends Feature { private boolean isFromMe ; public ViewOnce ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var methods = Unobfuscator . loadViewOnceMethod ( classLoader ) ; var classViewOnce = Unobfuscator . loadViewOnceClass ( classLoader ) ; logDebug ( classViewOnce ) ; var viewOnceStoreMethod = Unobfuscator . loadViewOnceStoreMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( viewOnceStoreMethod ) ) ; XposedBridge . hookMethod ( viewOnceStoreMethod , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; isFromMe = false ; var messageObject = param . args [ <NUM_LIT> ] ; if ( messageObject == null ) return ; isFromMe = new FMessageWpp ( messageObject ) . getKey ( ) . isFromMe ; } } ) ; for ( var method : methods ) { logDebug ( Unobfuscator . getMethodDescriptor ( method ) ) ; XposedBridge . hookMethod ( method , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; if ( ( int ) param . getResult ( ) != <NUM_LIT> && ( Unobfuscator . isCalledFromClass ( classViewOnce ) ) ) {", "gt": "param . setResult ( <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } public static String getDataColumn ( Context context , Uri uri , String selection , String [ ] selectionArgs ) { Cursor cursor = null ; final String column = \"<STR_LIT>\" ; final String [ ] projection = { column } ; try { cursor = context . getContentResolver ( ) . query ( uri , projection , selection , selectionArgs , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) {", "gt": "final int index = cursor . getColumnIndexOrThrow ( column ) ;"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; }", "gt": "else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import android . util . Pair ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . IntStream ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class ChatFilters extends Feature { public ChatFilters ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var filterAdaperClass = Unobfuscator . loadFilterAdaperClass ( classLoader ) ; XposedBridge . hookAllConstructors ( filterAdaperClass , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var argResult = IntStream . range ( <NUM_LIT> , param . args . length ) . mapToObj ( i -> new Pair < > ( i , param . args [ i ] ) ) . filter ( p -> p . second instanceof List ) . findFirst ( ) . orElse ( null ) ; if ( argResult != null ) { var newList = new ArrayList < Object > ( ( List ) argResult . second ) ; newList . removeIf ( item -> { var name = XposedHelpers . getObjectField ( item , \"<STR_LIT>\" ) ; return name == null || name == \"<STR_LIT>\" || name == \"<STR_LIT>\" ; } ) ; param . args [ argResult . first ] = newList ; } } } ) ; var methodSetFilter = Arrays . stream ( filterAdaperClass . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( int . class ) ) . findFirst ( ) . orElse ( null ) ; XposedBridge . hookMethod ( methodSetFilter , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var index = ( int ) param . args [ <NUM_LIT> ] ;", "gt": "var field = Unobfuscator . getFieldByType ( methodSetFilter . getDeclaringClass ( ) , List . class ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . annotation . SuppressLint ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import android . text . TextUtils ; import android . view . Gravity ; import android . widget . LinearLayout ; import android . widget . TextView ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . WppCore ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import com . wmods . wppenhacer . xposed . utils . ResId ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . lang . reflect . Method ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Date ; import java . util . Locale ; import java . util . Objects ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class CustomToolbar extends Feature { private String mDateExpiration ; public CustomToolbar ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var showName = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var showBio = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var typeArchive = prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; var methodHook = new MethodHook ( showName , showBio , typeArchive ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , Bundle . class , methodHook ) ; expirationAboutInfo ( ) ; } @ NonNull @ Override public String getPluginName ( ) { return \"<STR_LIT>\" ; } public void expirationAboutInfo ( ) throws Exception { var expirationClass = Unobfuscator . loadExpirationClass ( classLoader ) ; XposedBridge . hookAllConstructors ( expirationClass , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var method = ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass ( ) , m -> m . getReturnType ( ) . equals ( Date . class ) ) ; var date = ( Date ) method . invoke ( param . thisObject ) ; mDateExpiration = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . getDefault ( ) ) . format ( Objects . requireNonNull ( date ) ) ; } } ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , classLoader . loadClass ( \"<STR_LIT>\" ) , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var activity = ( Activity ) param . thisObject ; var viewRoot = activity . getWindow ( ) . getDecorView ( ) ; var version = ( TextView ) viewRoot . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( version != null ) { version . setText ( version . getText ( ) + \"<STR_LIT>\" + activity . getString ( ResId . string . expiration , mDateExpiration ) ) ; } } } ) ; } public static class MethodHook extends XC_MethodHook { private final boolean showName ; private final boolean showBio ; private final String typeArchive ; public MethodHook ( boolean showName , boolean showBio , String typeArchive ) { this . showName = showName ; this . showBio = showBio ; this . typeArchive = typeArchive ; } @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var homeActivity = ( Activity ) param . thisObject ; var actionbar = XposedHelpers . callMethod ( homeActivity , \"<STR_LIT>\" ) ; var toolbar = homeActivity . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var logo = toolbar . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var name = WppCore . getMyName ( ) ; var bio = WppCore . getMyBio ( ) ; if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { var ref = new Object ( ) { int clickCount = <NUM_LIT> ;", "gt": "long lastClickTime = <NUM_LIT> ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ;", "gt": "String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . annotation . SuppressLint ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import android . text . TextUtils ; import android . view . Gravity ; import android . widget . LinearLayout ; import android . widget . TextView ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . WppCore ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import com . wmods . wppenhacer . xposed . utils . ResId ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . lang . reflect . Method ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Date ; import java . util . Locale ; import java . util . Objects ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class CustomToolbar extends Feature { private String mDateExpiration ; public CustomToolbar ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var showName = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var showBio = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var typeArchive = prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; var methodHook = new MethodHook ( showName , showBio , typeArchive ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , Bundle . class , methodHook ) ; expirationAboutInfo ( ) ; } @ NonNull @ Override public String getPluginName ( ) { return \"<STR_LIT>\" ; } public void expirationAboutInfo ( ) throws Exception { var expirationClass = Unobfuscator . loadExpirationClass ( classLoader ) ; XposedBridge . hookAllConstructors ( expirationClass , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var method = ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass ( ) , m -> m . getReturnType ( ) . equals ( Date . class ) ) ; var date = ( Date ) method . invoke ( param . thisObject ) ; mDateExpiration = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . getDefault ( ) ) . format ( Objects . requireNonNull ( date ) ) ; } } ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , classLoader . loadClass ( \"<STR_LIT>\" ) , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var activity = ( Activity ) param . thisObject ; var viewRoot = activity . getWindow ( ) . getDecorView ( ) ; var version = ( TextView ) viewRoot . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( version != null ) { version . setText ( version . getText ( ) + \"<STR_LIT>\" + activity . getString ( ResId . string . expiration , mDateExpiration ) ) ; } } } ) ; } public static class MethodHook extends XC_MethodHook { private final boolean showName ; private final boolean showBio ; private final String typeArchive ; public MethodHook ( boolean showName , boolean showBio , String typeArchive ) { this . showName = showName ; this . showBio = showBio ; this . typeArchive = typeArchive ; } @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var homeActivity = ( Activity ) param . thisObject ; var actionbar = XposedHelpers . callMethod ( homeActivity , \"<STR_LIT>\" ) ; var toolbar = homeActivity . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var logo = toolbar . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var name = WppCore . getMyName ( ) ; var bio = WppCore . getMyBio ( ) ; if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { var ref = new Object ( ) { int clickCount = <NUM_LIT> ; long lastClickTime = <NUM_LIT> ; } ; toolbar . setOnClickListener ( v -> { long currentTime = System . currentTimeMillis ( ) ; if ( currentTime - ref . lastClickTime < <NUM_LIT> ) { ref . clickCount ++ ; } else { ref . clickCount = <NUM_LIT> ; } ref . lastClickTime = currentTime ; if ( ref . clickCount == <NUM_LIT> ) { ref . clickCount = <NUM_LIT> ; Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; } } ) ; } else if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { toolbar . setOnLongClickListener ( v -> { Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; return true ; } ) ; } if ( ! showBio && ! showName ) return ; if ( ! ( logo . getParent ( ) instanceof LinearLayout parent ) ) { var methods = Arrays . stream ( actionbar . getClass ( ) . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] == CharSequence . class ) . toArray ( Method [ ] :: new ) ; if ( showName ) { methods [ <NUM_LIT> ] . invoke ( actionbar , name ) ; }", "gt": "if ( showBio ) {"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class MediaFragment extends BasePreferenceFragment { @ Override public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; } @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) {", "gt": "super . onCreatePreferences ( savedInstanceState , rootKey ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import de . robv . android . xposed . XSharedPreferences ; public class DebugFeature extends Feature { public DebugFeature ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { }", "gt": "@ NonNull @ Override public String getPluginName ( ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import android . util . Pair ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . IntStream ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class ChatFilters extends Feature { public ChatFilters ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var filterAdaperClass = Unobfuscator . loadFilterAdaperClass ( classLoader ) ; XposedBridge . hookAllConstructors ( filterAdaperClass , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var argResult = IntStream . range ( <NUM_LIT> , param . args . length ) . mapToObj ( i -> new Pair < > ( i , param . args [ i ] ) ) . filter ( p -> p . second instanceof List ) . findFirst ( ) . orElse ( null ) ; if ( argResult != null ) { var newList = new ArrayList < Object > ( ( List ) argResult . second ) ; newList . removeIf ( item -> { var name = XposedHelpers . getObjectField ( item , \"<STR_LIT>\" ) ; return name == null || name == \"<STR_LIT>\" || name == \"<STR_LIT>\" ; } ) ; param . args [ argResult . first ] = newList ; } } } ) ; var methodSetFilter = Arrays . stream ( filterAdaperClass . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( int . class ) ) . findFirst ( ) . orElse ( null ) ; XposedBridge . hookMethod ( methodSetFilter , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var index = ( int ) param . args [ <NUM_LIT> ] ; var field = Unobfuscator . getFieldByType ( methodSetFilter . getDeclaringClass ( ) , List . class ) ; var list = ( List ) field . get ( param . thisObject ) ; if ( list == null || index >= list . size ( ) ) { param . setResult ( null ) ; } } } ) ; }", "gt": "@ NonNull @ Override public String getPluginName ( ) {"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } public static String getDataColumn ( Context context , Uri uri , String selection , String [ ] selectionArgs ) { Cursor cursor = null ; final String column = \"<STR_LIT>\" ; final String [ ] projection = { column } ; try { cursor = context . getContentResolver ( ) . query ( uri , projection , selection , selectionArgs , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { final int index = cursor . getColumnIndexOrThrow ( column ) ; return cursor . getString ( index ) ; } } finally { if ( cursor != null ) cursor . close ( ) ; } return null ; } public static boolean isExternalStorageDocument ( Uri uri ) { return \"<STR_LIT>\" . equals ( uri . getAuthority ( ) ) ; } public static boolean isDownloadsDocument ( Uri uri ) { return \"<STR_LIT>\" . equals ( uri . getAuthority ( ) ) ; } public static boolean isMediaDocument ( Uri uri ) { return \"<STR_LIT>\" . equals ( uri . getAuthority ( ) ) ; }", "gt": "public static boolean isGooglePhotosUri ( Uri uri ) {"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } public static String getDataColumn ( Context context , Uri uri , String selection , String [ ] selectionArgs ) { Cursor cursor = null ; final String column = \"<STR_LIT>\" ; final String [ ] projection = { column } ; try { cursor = context . getContentResolver ( ) . query ( uri , projection , selection , selectionArgs , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { final int index = cursor . getColumnIndexOrThrow ( column ) ; return cursor . getString ( index ) ; } } finally { if ( cursor != null ) cursor . close ( ) ; }", "gt": "return null ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ;", "gt": "messages . add ( new MessageItem ( id , message , timestamp ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; messages . add ( new MessageItem ( id , message , timestamp ) ) ; } while ( history . moveToNext ( ) ) ; return messages ; } @ Override public void onCreate ( SQLiteDatabase sqLiteDatabase ) { sqLiteDatabase . execSQL ( \"<STR_LIT>\" ) ; } @ Override public void onUpgrade ( SQLiteDatabase sqLiteDatabase , int oldVersion , int newVersion ) { } public static class MessageItem { public long id ; public String message ; public long timestamp ; public MessageItem ( long id , String message , long timestamp ) { this . id = id ;", "gt": "this . message = message ;"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ;", "gt": "return getDataColumn ( context , contentUri , selection , selectionArgs ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import android . util . Pair ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . IntStream ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class ChatFilters extends Feature { public ChatFilters ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var filterAdaperClass = Unobfuscator . loadFilterAdaperClass ( classLoader ) ; XposedBridge . hookAllConstructors ( filterAdaperClass , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var argResult = IntStream . range ( <NUM_LIT> , param . args . length ) . mapToObj ( i -> new Pair < > ( i , param . args [ i ] ) ) . filter ( p -> p . second instanceof List ) . findFirst ( ) . orElse ( null ) ; if ( argResult != null ) { var newList = new ArrayList < Object > ( ( List ) argResult . second ) ; newList . removeIf ( item -> { var name = XposedHelpers . getObjectField ( item , \"<STR_LIT>\" ) ; return name == null || name == \"<STR_LIT>\" || name == \"<STR_LIT>\" ; } ) ; param . args [ argResult . first ] = newList ; } } } ) ; var methodSetFilter = Arrays . stream ( filterAdaperClass . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( int . class ) ) . findFirst ( ) . orElse ( null ) ; XposedBridge . hookMethod ( methodSetFilter , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var index = ( int ) param . args [ <NUM_LIT> ] ; var field = Unobfuscator . getFieldByType ( methodSetFilter . getDeclaringClass ( ) , List . class ) ; var list = ( List ) field . get ( param . thisObject ) ; if ( list == null || index >= list . size ( ) ) {", "gt": "param . setResult ( null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import de . robv . android . xposed . XSharedPreferences ; public class DebugFeature extends Feature { public DebugFeature ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; }", "gt": "@ Override public void doHook ( ) throws Throwable {"}
{"input": "package com . wmods . wppenhacer . preference ; import android . content . Context ; import android . util . AttributeSet ; import android . widget . Toast ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . preference . Preference ; import androidx . preference . PreferenceManager ; import com . wmods . wppenhacer . FilePicker ; import com . wmods . wppenhacer . R ; import java . io . File ; import java . nio . file . Files ; import java . util . Arrays ; public class FileSelectPreference extends Preference implements Preference . OnPreferenceClickListener , FilePicker . OnFilePickedListener { private String [ ] mineTypes ; private boolean selectDirectory ; public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; } @ Override public boolean onPreferenceClick ( @ NonNull Preference preference ) { FilePicker . setOnFilePickedListener ( this ) ; if ( selectDirectory ) { FilePicker . directoryCapture . launch ( null ) ; return true ; } FilePicker . fileCapture . launch ( mineTypes ) ; return false ; } @ Override public void onFilePicked ( File file ) { if ( file . isDirectory ( ) ) { try { var tmpFile = Files . write ( new File ( file , \"<STR_LIT>\" ) . toPath ( ) , new byte [ <NUM_LIT> ] ) . toFile ( ) ; boolean delete = tmpFile . delete ( ) ; } catch ( Exception ignored ) { Toast . makeText ( this . getContext ( ) , R . string . failed_save_directory , Toast . LENGTH_SHORT ) . show ( ) ; return ; } } else if ( ! file . canRead ( ) ) { Toast . makeText ( this . getContext ( ) , R . string . unable_to_read_this_file , Toast . LENGTH_SHORT ) . show ( ) ; return ; } getSharedPreferences ( ) . edit ( ) . putString ( getKey ( ) , file . getAbsolutePath ( ) ) . apply ( ) ; setSummary ( file . getAbsolutePath ( ) ) ; } public void init ( Context context , AttributeSet attrs ) { setOnPreferenceClickListener ( this ) ; var typedArray = context . getTheme ( ) . obtainStyledAttributes ( attrs , R . styleable . FileSelectPreference , <NUM_LIT> , <NUM_LIT> ) ; var attrsArray = typedArray . getTextArray ( R . styleable . FileSelectPreference_android_entryValues ) ; if ( attrsArray != null ) {", "gt": "mineTypes = Arrays . stream ( attrsArray ) . map ( String :: valueOf ) . toArray ( String [ ] :: new ) ;"}
{"input": "package com . wmods . wppenhacer . preference ; import android . content . Context ; import android . util . AttributeSet ; import android . widget . Toast ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . preference . Preference ; import androidx . preference . PreferenceManager ; import com . wmods . wppenhacer . FilePicker ; import com . wmods . wppenhacer . R ; import java . io . File ; import java . nio . file . Files ; import java . util . Arrays ; public class FileSelectPreference extends Preference implements Preference . OnPreferenceClickListener , FilePicker . OnFilePickedListener { private String [ ] mineTypes ; private boolean selectDirectory ; public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; } @ Override public boolean onPreferenceClick ( @ NonNull Preference preference ) { FilePicker . setOnFilePickedListener ( this ) ; if ( selectDirectory ) { FilePicker . directoryCapture . launch ( null ) ; return true ; } FilePicker . fileCapture . launch ( mineTypes ) ; return false ; }", "gt": "@ Override public void onFilePicked ( File file ) {"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) {", "gt": "final String docId = DocumentsContract . getTreeDocumentId ( uri ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; }", "gt": "if ( ! history . moveToFirst ( ) ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . annotation . SuppressLint ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import android . text . TextUtils ; import android . view . Gravity ; import android . widget . LinearLayout ; import android . widget . TextView ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . WppCore ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import com . wmods . wppenhacer . xposed . utils . ResId ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . lang . reflect . Method ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Date ; import java . util . Locale ; import java . util . Objects ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class CustomToolbar extends Feature { private String mDateExpiration ; public CustomToolbar ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var showName = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var showBio = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var typeArchive = prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; var methodHook = new MethodHook ( showName , showBio , typeArchive ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , Bundle . class , methodHook ) ; expirationAboutInfo ( ) ; } @ NonNull @ Override public String getPluginName ( ) { return \"<STR_LIT>\" ; } public void expirationAboutInfo ( ) throws Exception { var expirationClass = Unobfuscator . loadExpirationClass ( classLoader ) ; XposedBridge . hookAllConstructors ( expirationClass , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var method = ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass ( ) , m -> m . getReturnType ( ) . equals ( Date . class ) ) ; var date = ( Date ) method . invoke ( param . thisObject ) ; mDateExpiration = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . getDefault ( ) ) . format ( Objects . requireNonNull ( date ) ) ; } } ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , classLoader . loadClass ( \"<STR_LIT>\" ) , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var activity = ( Activity ) param . thisObject ; var viewRoot = activity . getWindow ( ) . getDecorView ( ) ; var version = ( TextView ) viewRoot . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( version != null ) { version . setText ( version . getText ( ) + \"<STR_LIT>\" + activity . getString ( ResId . string . expiration , mDateExpiration ) ) ; } } } ) ; } public static class MethodHook extends XC_MethodHook { private final boolean showName ; private final boolean showBio ; private final String typeArchive ; public MethodHook ( boolean showName , boolean showBio , String typeArchive ) { this . showName = showName ; this . showBio = showBio ; this . typeArchive = typeArchive ; } @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var homeActivity = ( Activity ) param . thisObject ; var actionbar = XposedHelpers . callMethod ( homeActivity , \"<STR_LIT>\" ) ; var toolbar = homeActivity . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var logo = toolbar . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var name = WppCore . getMyName ( ) ; var bio = WppCore . getMyBio ( ) ; if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { var ref = new Object ( ) { int clickCount = <NUM_LIT> ; long lastClickTime = <NUM_LIT> ; } ; toolbar . setOnClickListener ( v -> { long currentTime = System . currentTimeMillis ( ) ; if ( currentTime - ref . lastClickTime < <NUM_LIT> ) { ref . clickCount ++ ; } else { ref . clickCount = <NUM_LIT> ; } ref . lastClickTime = currentTime ; if ( ref . clickCount == <NUM_LIT> ) { ref . clickCount = <NUM_LIT> ; Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; } } ) ; } else if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { toolbar . setOnLongClickListener ( v -> { Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; return true ; } ) ; } if ( ! showBio && ! showName ) return ; if ( ! ( logo . getParent ( ) instanceof LinearLayout parent ) ) { var methods = Arrays . stream ( actionbar . getClass ( ) . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] == CharSequence . class ) . toArray ( Method [ ] :: new ) ; if ( showName ) { methods [ <NUM_LIT> ] . invoke ( actionbar , name ) ; } if ( showBio ) { methods [ <NUM_LIT> ] . invoke ( actionbar , bio ) ; } XposedBridge . hookMethod ( methods [ <NUM_LIT> ] , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( showName ) { param . args [ <NUM_LIT> ] = name ; } } } ) ; return ; } var mTitle = new TextView ( homeActivity ) ; mTitle . setText ( showName ? name : \"<STR_LIT>\" ) ; mTitle . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . WRAP_CONTENT , LinearLayout . LayoutParams . MATCH_PARENT , <NUM_LIT> ) ) ; mTitle . setTextSize ( <NUM_LIT> ) ; mTitle . setTextColor ( DesignUtils . getPrimaryTextColor ( ) ) ; parent . addView ( mTitle ) ; if ( showBio ) { TextView mSubtitle = new TextView ( homeActivity ) ; mSubtitle . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . WRAP_CONTENT , LinearLayout . LayoutParams . MATCH_PARENT ) ) ; mSubtitle . setText ( bio ) ; mSubtitle . setTextSize ( <NUM_LIT> ) ; mSubtitle . setTextColor ( DesignUtils . getPrimaryTextColor ( ) ) ; mSubtitle . setMarqueeRepeatLimit ( - <NUM_LIT> ) ; mSubtitle . setEllipsize ( TextUtils . TruncateAt . MARQUEE ) ; mSubtitle . setSingleLine ( ) ; mSubtitle . setSelected ( true ) ; parent . addView ( mSubtitle ) ; } else {", "gt": "mTitle . setGravity ( Gravity . CENTER ) ;"}
{"input": "package com . wmods . wppenhacer . preference ; import android . content . Context ; import android . util . AttributeSet ; import android . widget . Toast ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . preference . Preference ; import androidx . preference . PreferenceManager ; import com . wmods . wppenhacer . FilePicker ; import com . wmods . wppenhacer . R ; import java . io . File ; import java . nio . file . Files ; import java . util . Arrays ; public class FileSelectPreference extends Preference implements Preference . OnPreferenceClickListener , FilePicker . OnFilePickedListener { private String [ ] mineTypes ; private boolean selectDirectory ; public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr , int defStyleRes ) { super ( context , attrs , defStyleAttr , defStyleRes ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs , int defStyleAttr ) { super ( context , attrs , defStyleAttr ) ; init ( context , attrs ) ; } public FileSelectPreference ( @ NonNull Context context , @ Nullable AttributeSet attrs ) { super ( context , attrs ) ; init ( context , attrs ) ; } @ Override public boolean onPreferenceClick ( @ NonNull Preference preference ) { FilePicker . setOnFilePickedListener ( this ) ; if ( selectDirectory ) { FilePicker . directoryCapture . launch ( null ) ; return true ; } FilePicker . fileCapture . launch ( mineTypes ) ; return false ; } @ Override public void onFilePicked ( File file ) { if ( file . isDirectory ( ) ) { try { var tmpFile = Files . write ( new File ( file , \"<STR_LIT>\" ) . toPath ( ) , new byte [ <NUM_LIT> ] ) . toFile ( ) ; boolean delete = tmpFile . delete ( ) ; } catch ( Exception ignored ) { Toast . makeText ( this . getContext ( ) , R . string . failed_save_directory , Toast . LENGTH_SHORT ) . show ( ) ; return ; } } else if ( ! file . canRead ( ) ) {", "gt": "Toast . makeText ( this . getContext ( ) , R . string . unable_to_read_this_file , Toast . LENGTH_SHORT ) . show ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import android . util . Pair ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . IntStream ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class ChatFilters extends Feature { public ChatFilters ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var filterAdaperClass = Unobfuscator . loadFilterAdaperClass ( classLoader ) ; XposedBridge . hookAllConstructors ( filterAdaperClass , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var argResult = IntStream . range ( <NUM_LIT> , param . args . length ) . mapToObj ( i -> new Pair < > ( i , param . args [ i ] ) ) . filter ( p -> p . second instanceof List ) . findFirst ( ) . orElse ( null ) ; if ( argResult != null ) { var newList = new ArrayList < Object > ( ( List ) argResult . second ) ; newList . removeIf ( item -> { var name = XposedHelpers . getObjectField ( item , \"<STR_LIT>\" ) ; return name == null || name == \"<STR_LIT>\" || name == \"<STR_LIT>\" ; } ) ; param . args [ argResult . first ] = newList ; } } } ) ; var methodSetFilter = Arrays . stream ( filterAdaperClass . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( int . class ) ) . findFirst ( ) . orElse ( null ) ;", "gt": "XposedBridge . hookMethod ( methodSetFilter , new XC_MethodHook ( ) {"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class MediaFragment extends BasePreferenceFragment { @ Override public void onCreate ( @ Nullable Bundle savedInstanceState ) {", "gt": "super . onCreate ( savedInstanceState ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; messages . add ( new MessageItem ( id , message , timestamp ) ) ; } while ( history . moveToNext ( ) ) ; return messages ; } @ Override public void onCreate ( SQLiteDatabase sqLiteDatabase ) {", "gt": "sqLiteDatabase . execSQL ( \"<STR_LIT>\" ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) {", "gt": "return null ;"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class MediaFragment extends BasePreferenceFragment { @ Override public void onCreate ( @ Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; } @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ;", "gt": "setPreferencesFromResource ( R . xml . fragment_media , rootKey ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . annotation . SuppressLint ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import android . text . TextUtils ; import android . view . Gravity ; import android . widget . LinearLayout ; import android . widget . TextView ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . WppCore ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import com . wmods . wppenhacer . xposed . utils . ResId ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . lang . reflect . Method ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Date ; import java . util . Locale ; import java . util . Objects ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class CustomToolbar extends Feature { private String mDateExpiration ; public CustomToolbar ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var showName = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var showBio = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var typeArchive = prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; var methodHook = new MethodHook ( showName , showBio , typeArchive ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , Bundle . class , methodHook ) ; expirationAboutInfo ( ) ; } @ NonNull @ Override public String getPluginName ( ) { return \"<STR_LIT>\" ; } public void expirationAboutInfo ( ) throws Exception { var expirationClass = Unobfuscator . loadExpirationClass ( classLoader ) ; XposedBridge . hookAllConstructors ( expirationClass , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var method = ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass ( ) , m -> m . getReturnType ( ) . equals ( Date . class ) ) ; var date = ( Date ) method . invoke ( param . thisObject ) ; mDateExpiration = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . getDefault ( ) ) . format ( Objects . requireNonNull ( date ) ) ; } } ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , classLoader . loadClass ( \"<STR_LIT>\" ) , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var activity = ( Activity ) param . thisObject ; var viewRoot = activity . getWindow ( ) . getDecorView ( ) ; var version = ( TextView ) viewRoot . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( version != null ) { version . setText ( version . getText ( ) + \"<STR_LIT>\" + activity . getString ( ResId . string . expiration , mDateExpiration ) ) ; } } } ) ; } public static class MethodHook extends XC_MethodHook { private final boolean showName ; private final boolean showBio ; private final String typeArchive ; public MethodHook ( boolean showName , boolean showBio , String typeArchive ) { this . showName = showName ; this . showBio = showBio ; this . typeArchive = typeArchive ; } @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var homeActivity = ( Activity ) param . thisObject ; var actionbar = XposedHelpers . callMethod ( homeActivity , \"<STR_LIT>\" ) ; var toolbar = homeActivity . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var logo = toolbar . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var name = WppCore . getMyName ( ) ; var bio = WppCore . getMyBio ( ) ; if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { var ref = new Object ( ) { int clickCount = <NUM_LIT> ; long lastClickTime = <NUM_LIT> ; } ; toolbar . setOnClickListener ( v -> { long currentTime = System . currentTimeMillis ( ) ; if ( currentTime - ref . lastClickTime < <NUM_LIT> ) { ref . clickCount ++ ; } else { ref . clickCount = <NUM_LIT> ; } ref . lastClickTime = currentTime ; if ( ref . clickCount == <NUM_LIT> ) { ref . clickCount = <NUM_LIT> ; Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; } } ) ; } else if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { toolbar . setOnLongClickListener ( v -> { Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ;", "gt": "return true ;"}
{"input": "package com . wmods . wppenhacer . utils ; import android . annotation . SuppressLint ; import android . content . ContentUris ; import android . content . Context ; import android . database . Cursor ; import android . net . Uri ; import android . os . Environment ; import android . provider . DocumentsContract ; import android . provider . MediaStore ; public class RealPathUtil { @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFilePath ( final Context context , final Uri uri ) { if ( DocumentsContract . isDocumentUri ( context , uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + split [ <NUM_LIT> ] ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } @ SuppressLint ( \"<STR_LIT>\" ) public static String getRealFolderPath ( final Context context , final Uri uri ) { if ( DocumentsContract . isTreeUri ( uri ) ) { if ( isExternalStorageDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; if ( \"<STR_LIT>\" . equalsIgnoreCase ( type ) ) { return Environment . getExternalStorageDirectory ( ) + \"<STR_LIT>\" + ( split . length > <NUM_LIT> ? split [ <NUM_LIT> ] : \"<STR_LIT>\" ) ; } } else if ( isDownloadsDocument ( uri ) ) { final String id = DocumentsContract . getTreeDocumentId ( uri ) ; final Uri contentUri = ContentUris . withAppendedId ( Uri . parse ( \"<STR_LIT>\" ) , Long . parseLong ( id ) ) ; return getDataColumn ( context , contentUri , null , null ) ; } else if ( isMediaDocument ( uri ) ) { final String docId = DocumentsContract . getTreeDocumentId ( uri ) ; final String [ ] split = docId . split ( \"<STR_LIT>\" ) ; final String type = split [ <NUM_LIT> ] ; Uri contentUri ; if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Images . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Video . Media . EXTERNAL_CONTENT_URI ; } else if ( \"<STR_LIT>\" . equals ( type ) ) { contentUri = MediaStore . Audio . Media . EXTERNAL_CONTENT_URI ; } else { contentUri = MediaStore . Files . getContentUri ( \"<STR_LIT>\" ) ; } final String selection = \"<STR_LIT>\" ; final String [ ] selectionArgs = new String [ ] { split [ <NUM_LIT> ] } ; return getDataColumn ( context , contentUri , selection , selectionArgs ) ; } } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { if ( isGooglePhotosUri ( uri ) ) return uri . getLastPathSegment ( ) ; return getDataColumn ( context , uri , null , null ) ; } else if ( \"<STR_LIT>\" . equalsIgnoreCase ( uri . getScheme ( ) ) ) { return uri . getPath ( ) ; } return null ; } public static String getDataColumn ( Context context , Uri uri , String selection , String [ ] selectionArgs ) { Cursor cursor = null ; final String column = \"<STR_LIT>\" ; final String [ ] projection = { column } ; try { cursor = context . getContentResolver ( ) . query ( uri , projection , selection , selectionArgs , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { final int index = cursor . getColumnIndexOrThrow ( column ) ; return cursor . getString ( index ) ; } } finally { if ( cursor != null ) cursor . close ( ) ; } return null ; } public static boolean isExternalStorageDocument ( Uri uri ) { return \"<STR_LIT>\" . equals ( uri . getAuthority ( ) ) ; } public static boolean isDownloadsDocument ( Uri uri ) { return \"<STR_LIT>\" . equals ( uri . getAuthority ( ) ) ; } public static boolean isMediaDocument ( Uri uri ) {", "gt": "return \"<STR_LIT>\" . equals ( uri . getAuthority ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . annotation . SuppressLint ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import android . text . TextUtils ; import android . view . Gravity ; import android . widget . LinearLayout ; import android . widget . TextView ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . WppCore ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import com . wmods . wppenhacer . xposed . utils . ResId ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . lang . reflect . Method ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Date ; import java . util . Locale ; import java . util . Objects ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class CustomToolbar extends Feature { private String mDateExpiration ; public CustomToolbar ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var showName = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var showBio = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var typeArchive = prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; var methodHook = new MethodHook ( showName , showBio , typeArchive ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , Bundle . class , methodHook ) ; expirationAboutInfo ( ) ; } @ NonNull @ Override public String getPluginName ( ) { return \"<STR_LIT>\" ; } public void expirationAboutInfo ( ) throws Exception { var expirationClass = Unobfuscator . loadExpirationClass ( classLoader ) ; XposedBridge . hookAllConstructors ( expirationClass , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var method = ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass ( ) , m -> m . getReturnType ( ) . equals ( Date . class ) ) ; var date = ( Date ) method . invoke ( param . thisObject ) ; mDateExpiration = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . getDefault ( ) ) . format ( Objects . requireNonNull ( date ) ) ; } } ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , classLoader . loadClass ( \"<STR_LIT>\" ) , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var activity = ( Activity ) param . thisObject ; var viewRoot = activity . getWindow ( ) . getDecorView ( ) ; var version = ( TextView ) viewRoot . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( version != null ) { version . setText ( version . getText ( ) + \"<STR_LIT>\" + activity . getString ( ResId . string . expiration , mDateExpiration ) ) ; } } } ) ; } public static class MethodHook extends XC_MethodHook { private final boolean showName ; private final boolean showBio ; private final String typeArchive ; public MethodHook ( boolean showName , boolean showBio , String typeArchive ) { this . showName = showName ; this . showBio = showBio ; this . typeArchive = typeArchive ; } @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var homeActivity = ( Activity ) param . thisObject ; var actionbar = XposedHelpers . callMethod ( homeActivity , \"<STR_LIT>\" ) ; var toolbar = homeActivity . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var logo = toolbar . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var name = WppCore . getMyName ( ) ; var bio = WppCore . getMyBio ( ) ; if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { var ref = new Object ( ) { int clickCount = <NUM_LIT> ; long lastClickTime = <NUM_LIT> ; } ; toolbar . setOnClickListener ( v -> { long currentTime = System . currentTimeMillis ( ) ; if ( currentTime - ref . lastClickTime < <NUM_LIT> ) { ref . clickCount ++ ; } else { ref . clickCount = <NUM_LIT> ; } ref . lastClickTime = currentTime ; if ( ref . clickCount == <NUM_LIT> ) { ref . clickCount = <NUM_LIT> ; Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; } } ) ; } else if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { toolbar . setOnLongClickListener ( v -> { Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; return true ; } ) ; } if ( ! showBio && ! showName ) return ; if ( ! ( logo . getParent ( ) instanceof LinearLayout parent ) ) { var methods = Arrays . stream ( actionbar . getClass ( ) . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] == CharSequence . class ) . toArray ( Method [ ] :: new ) ; if ( showName ) { methods [ <NUM_LIT> ] . invoke ( actionbar , name ) ; } if ( showBio ) { methods [ <NUM_LIT> ] . invoke ( actionbar , bio ) ; } XposedBridge . hookMethod ( methods [ <NUM_LIT> ] , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable {", "gt": "if ( showName ) {"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; messages . add ( new MessageItem ( id , message , timestamp ) ) ; } while ( history . moveToNext ( ) ) ; return messages ; } @ Override public void onCreate ( SQLiteDatabase sqLiteDatabase ) { sqLiteDatabase . execSQL ( \"<STR_LIT>\" ) ; } @ Override public void onUpgrade ( SQLiteDatabase sqLiteDatabase , int oldVersion , int newVersion ) { } public static class MessageItem { public long id ; public String message ;", "gt": "public long timestamp ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . privacy ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ViewOnce extends Feature { private boolean isFromMe ; public ViewOnce ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var methods = Unobfuscator . loadViewOnceMethod ( classLoader ) ; var classViewOnce = Unobfuscator . loadViewOnceClass ( classLoader ) ; logDebug ( classViewOnce ) ; var viewOnceStoreMethod = Unobfuscator . loadViewOnceStoreMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( viewOnceStoreMethod ) ) ; XposedBridge . hookMethod ( viewOnceStoreMethod , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; isFromMe = false ; var messageObject = param . args [ <NUM_LIT> ] ; if ( messageObject == null ) return ; isFromMe = new FMessageWpp ( messageObject ) . getKey ( ) . isFromMe ; } } ) ;", "gt": "for ( var method : methods ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . privacy ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ViewOnce extends Feature { private boolean isFromMe ; public ViewOnce ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var methods = Unobfuscator . loadViewOnceMethod ( classLoader ) ; var classViewOnce = Unobfuscator . loadViewOnceClass ( classLoader ) ; logDebug ( classViewOnce ) ; var viewOnceStoreMethod = Unobfuscator . loadViewOnceStoreMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( viewOnceStoreMethod ) ) ; XposedBridge . hookMethod ( viewOnceStoreMethod , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; isFromMe = false ; var messageObject = param . args [ <NUM_LIT> ] ; if ( messageObject == null ) return ; isFromMe = new FMessageWpp ( messageObject ) . getKey ( ) . isFromMe ; } } ) ; for ( var method : methods ) { logDebug ( Unobfuscator . getMethodDescriptor ( method ) ) ; XposedBridge . hookMethod ( method , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; if ( ( int ) param . getResult ( ) != <NUM_LIT> && ( Unobfuscator . isCalledFromClass ( classViewOnce ) ) ) { param . setResult ( <NUM_LIT> ) ; } else if ( ( int ) param . getResult ( ) != <NUM_LIT> && ! isFromMe && ( Unobfuscator . isCalledFromClass ( viewOnceStoreMethod . getDeclaringClass ( ) ) ) ) { param . setResult ( <NUM_LIT> ) ; } } } ) ; } } @ NonNull @ Override public String getPluginName ( ) {", "gt": "return \"<STR_LIT>\" ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import android . util . Pair ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . IntStream ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class ChatFilters extends Feature { public ChatFilters ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var filterAdaperClass = Unobfuscator . loadFilterAdaperClass ( classLoader ) ; XposedBridge . hookAllConstructors ( filterAdaperClass , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var argResult = IntStream . range ( <NUM_LIT> , param . args . length ) . mapToObj ( i -> new Pair < > ( i , param . args [ i ] ) ) . filter ( p -> p . second instanceof List ) . findFirst ( ) . orElse ( null ) ; if ( argResult != null ) { var newList = new ArrayList < Object > ( ( List ) argResult . second ) ; newList . removeIf ( item -> { var name = XposedHelpers . getObjectField ( item , \"<STR_LIT>\" ) ; return name == null || name == \"<STR_LIT>\" || name == \"<STR_LIT>\" ; } ) ;", "gt": "param . args [ argResult . first ] = newList ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . others ; import android . util . Pair ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . stream . IntStream ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class ChatFilters extends Feature { public ChatFilters ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var filterAdaperClass = Unobfuscator . loadFilterAdaperClass ( classLoader ) ; XposedBridge . hookAllConstructors ( filterAdaperClass , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { var argResult = IntStream . range ( <NUM_LIT> , param . args . length ) . mapToObj ( i -> new Pair < > ( i , param . args [ i ] ) ) . filter ( p -> p . second instanceof List ) . findFirst ( ) . orElse ( null ) ; if ( argResult != null ) { var newList = new ArrayList < Object > ( ( List ) argResult . second ) ; newList . removeIf ( item -> { var name = XposedHelpers . getObjectField ( item , \"<STR_LIT>\" ) ; return name == null || name == \"<STR_LIT>\" || name == \"<STR_LIT>\" ; } ) ; param . args [ argResult . first ] = newList ; } } } ) ; var methodSetFilter = Arrays . stream ( filterAdaperClass . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( int . class ) ) . findFirst ( ) . orElse ( null ) ; XposedBridge . hookMethod ( methodSetFilter , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable {", "gt": "var index = ( int ) param . args [ <NUM_LIT> ] ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . webkit . MimeTypeMap ; public class MimeTypeUtils { public static String getMimeTypeFromExtension ( String url ) { String type = \"<STR_LIT>\" ; String extension = MimeTypeMap . getFileExtensionFromUrl ( url ) ;", "gt": "if ( extension != null ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . annotation . SuppressLint ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import android . text . TextUtils ; import android . view . Gravity ; import android . widget . LinearLayout ; import android . widget . TextView ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . WppCore ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import com . wmods . wppenhacer . xposed . utils . ResId ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . lang . reflect . Method ; import java . text . SimpleDateFormat ; import java . util . Arrays ; import java . util . Date ; import java . util . Locale ; import java . util . Objects ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class CustomToolbar extends Feature { private String mDateExpiration ; public CustomToolbar ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var showName = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var showBio = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; var typeArchive = prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; var methodHook = new MethodHook ( showName , showBio , typeArchive ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , Bundle . class , methodHook ) ; expirationAboutInfo ( ) ; } @ NonNull @ Override public String getPluginName ( ) { return \"<STR_LIT>\" ; } public void expirationAboutInfo ( ) throws Exception { var expirationClass = Unobfuscator . loadExpirationClass ( classLoader ) ; XposedBridge . hookAllConstructors ( expirationClass , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var method = ReflectionUtils . findMethodUsingFilter ( param . thisObject . getClass ( ) , m -> m . getReturnType ( ) . equals ( Date . class ) ) ; var date = ( Date ) method . invoke ( param . thisObject ) ; mDateExpiration = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . getDefault ( ) ) . format ( Objects . requireNonNull ( date ) ) ; } } ) ; XposedHelpers . findAndHookMethod ( \"<STR_LIT>\" , classLoader , \"<STR_LIT>\" , classLoader . loadClass ( \"<STR_LIT>\" ) , new XC_MethodHook ( ) { @ SuppressLint ( \"<STR_LIT>\" ) @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var activity = ( Activity ) param . thisObject ; var viewRoot = activity . getWindow ( ) . getDecorView ( ) ; var version = ( TextView ) viewRoot . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( version != null ) { version . setText ( version . getText ( ) + \"<STR_LIT>\" + activity . getString ( ResId . string . expiration , mDateExpiration ) ) ; } } } ) ; } public static class MethodHook extends XC_MethodHook { private final boolean showName ; private final boolean showBio ; private final String typeArchive ; public MethodHook ( boolean showName , boolean showBio , String typeArchive ) { this . showName = showName ; this . showBio = showBio ; this . typeArchive = typeArchive ; } @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var homeActivity = ( Activity ) param . thisObject ; var actionbar = XposedHelpers . callMethod ( homeActivity , \"<STR_LIT>\" ) ; var toolbar = homeActivity . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var logo = toolbar . findViewById ( Utils . getID ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; var name = WppCore . getMyName ( ) ; var bio = WppCore . getMyBio ( ) ; if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { var ref = new Object ( ) { int clickCount = <NUM_LIT> ; long lastClickTime = <NUM_LIT> ; } ; toolbar . setOnClickListener ( v -> { long currentTime = System . currentTimeMillis ( ) ; if ( currentTime - ref . lastClickTime < <NUM_LIT> ) { ref . clickCount ++ ; } else { ref . clickCount = <NUM_LIT> ; } ref . lastClickTime = currentTime ; if ( ref . clickCount == <NUM_LIT> ) { ref . clickCount = <NUM_LIT> ; Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; } } ) ; } else if ( typeArchive . equals ( \"<STR_LIT>\" ) ) { toolbar . setOnLongClickListener ( v -> { Intent intent = new Intent ( ) ; intent . setClassName ( Utils . getApplication ( ) . getPackageName ( ) , \"<STR_LIT>\" ) ; homeActivity . startActivity ( intent ) ; return true ; } ) ; } if ( ! showBio && ! showName ) return ; if ( ! ( logo . getParent ( ) instanceof LinearLayout parent ) ) { var methods = Arrays . stream ( actionbar . getClass ( ) . getDeclaredMethods ( ) ) . filter ( m -> m . getParameterCount ( ) == <NUM_LIT> && m . getParameterTypes ( ) [ <NUM_LIT> ] == CharSequence . class ) . toArray ( Method [ ] :: new ) ; if ( showName ) { methods [ <NUM_LIT> ] . invoke ( actionbar , name ) ; } if ( showBio ) { methods [ <NUM_LIT> ] . invoke ( actionbar , bio ) ; } XposedBridge . hookMethod ( methods [ <NUM_LIT> ] , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( showName ) { param . args [ <NUM_LIT> ] = name ; } } } ) ; return ; } var mTitle = new TextView ( homeActivity ) ; mTitle . setText ( showName ? name : \"<STR_LIT>\" ) ; mTitle . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . WRAP_CONTENT , LinearLayout . LayoutParams . MATCH_PARENT , <NUM_LIT> ) ) ; mTitle . setTextSize ( <NUM_LIT> ) ; mTitle . setTextColor ( DesignUtils . getPrimaryTextColor ( ) ) ; parent . addView ( mTitle ) ; if ( showBio ) { TextView mSubtitle = new TextView ( homeActivity ) ; mSubtitle . setLayoutParams ( new LinearLayout . LayoutParams ( LinearLayout . LayoutParams . WRAP_CONTENT , LinearLayout . LayoutParams . MATCH_PARENT ) ) ; mSubtitle . setText ( bio ) ; mSubtitle . setTextSize ( <NUM_LIT> ) ; mSubtitle . setTextColor ( DesignUtils . getPrimaryTextColor ( ) ) ; mSubtitle . setMarqueeRepeatLimit ( - <NUM_LIT> ) ;", "gt": "mSubtitle . setEllipsize ( TextUtils . TruncateAt . MARQUEE ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . privacy ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ViewOnce extends Feature { private boolean isFromMe ; public ViewOnce ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } @ Override public void doHook ( ) throws Exception { var methods = Unobfuscator . loadViewOnceMethod ( classLoader ) ; var classViewOnce = Unobfuscator . loadViewOnceClass ( classLoader ) ; logDebug ( classViewOnce ) ; var viewOnceStoreMethod = Unobfuscator . loadViewOnceStoreMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( viewOnceStoreMethod ) ) ; XposedBridge . hookMethod ( viewOnceStoreMethod , new XC_MethodHook ( ) { @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; isFromMe = false ; var messageObject = param . args [ <NUM_LIT> ] ; if ( messageObject == null ) return ; isFromMe = new FMessageWpp ( messageObject ) . getKey ( ) . isFromMe ; } } ) ; for ( var method : methods ) {", "gt": "logDebug ( Unobfuscator . getMethodDescriptor ( method ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . db ; import android . content . ContentValues ; import android . content . Context ; import android . database . Cursor ; import android . database . sqlite . SQLiteDatabase ; import android . database . sqlite . SQLiteOpenHelper ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . ArrayList ; public class MessageHistory extends SQLiteOpenHelper { private static MessageHistory mInstance ; private SQLiteDatabase dbWrite ; public MessageHistory ( Context context ) { super ( context , \"<STR_LIT>\" , null , <NUM_LIT> ) ; } public static MessageHistory getInstance ( ) { synchronized ( MessageHistory . class ) { if ( mInstance == null || ! mInstance . getReadableDatabase ( ) . isOpen ( ) ) { mInstance = new MessageHistory ( Utils . getApplication ( ) ) ; mInstance . dbWrite = mInstance . getWritableDatabase ( ) ; } } return mInstance ; } public final void insertMessage ( long id , String message , long timestamp ) { synchronized ( this ) { ContentValues contentValues0 = new ContentValues ( ) ; contentValues0 . put ( \"<STR_LIT>\" , id ) ; contentValues0 . put ( \"<STR_LIT>\" , message ) ; contentValues0 . put ( \"<STR_LIT>\" , timestamp ) ; dbWrite . insert ( \"<STR_LIT>\" , null , contentValues0 ) ; } } public ArrayList < MessageItem > getMessages ( long v ) { Cursor history = dbWrite . query ( \"<STR_LIT>\" , new String [ ] { \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" } , \"<STR_LIT>\" , new String [ ] { String . valueOf ( v ) } , null , null , null ) ; if ( history == null ) { return null ; } if ( ! history . moveToFirst ( ) ) { history . close ( ) ; return null ; } ArrayList < MessageItem > messages = new ArrayList < > ( ) ; do { long id = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; long timestamp = history . getLong ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; String message = history . getString ( history . getColumnIndexOrThrow ( \"<STR_LIT>\" ) ) ; messages . add ( new MessageItem ( id , message , timestamp ) ) ; } while ( history . moveToNext ( ) ) ; return messages ; } @ Override public void onCreate ( SQLiteDatabase sqLiteDatabase ) { sqLiteDatabase . execSQL ( \"<STR_LIT>\" ) ; }", "gt": "@ Override public void onUpgrade ( SQLiteDatabase sqLiteDatabase , int oldVersion , int newVersion ) {"}
