{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List", "gt": "< Comment . PictureInfo > pictureInfos ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this", "gt": ". pictureInfos = pictureInfos ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this", "gt": ". linearLayoutManager = linearLayoutManager ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return", "gt": "new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView", "gt": "imageView = holder . imageView ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder", "gt": ". itemView . setOnClickListener ( new View . OnClickListener ( ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview", "gt": ". with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager", "gt": ". scrollToPosition ( position ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } )", "gt": ". onLongClickListener ( new OnLongClickListener ( ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String", "gt": "imgSrc = pictureInfos . get ( position ) . img_src ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String imgSrc = pictureInfos . get ( position ) . img_src ; File", "gt": "pictureFile = PictureStorage . getPictureFile ( context , imgSrc ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String imgSrc = pictureInfos . get ( position ) . img_src ; File pictureFile = PictureStorage . getPictureFile ( context , imgSrc ) ; context", "gt": ". savePicFileLauncher . launch ( pictureFile ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String imgSrc = pictureInfos . get ( position ) . img_src ; File pictureFile = PictureStorage . getPictureFile ( context , imgSrc ) ; context . savePicFileLauncher . launch ( pictureFile ) ; return false ; } } )", "gt": ". build ( ) . show ( new IFindThumbnailView ( ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String imgSrc = pictureInfos . get ( position ) . img_src ; File pictureFile = PictureStorage . getPictureFile ( context , imgSrc ) ; context . savePicFileLauncher . launch ( pictureFile ) ; return false ; } } ) . build ( ) . show ( new IFindThumbnailView ( ) { @ Override public View findView ( int position ) { return", "gt": "linearLayoutManager . findViewByPosition ( position ) . findViewById ( R . id . picture ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String imgSrc = pictureInfos . get ( position ) . img_src ; File pictureFile = PictureStorage . getPictureFile ( context , imgSrc ) ; context . savePicFileLauncher . launch ( pictureFile ) ; return false ; } } ) . build ( ) . show ( new IFindThumbnailView ( ) { @ Override public View findView ( int position ) { return linearLayoutManager . findViewByPosition ( position ) . findViewById ( R . id . picture ) ; } } ) ; } } ) ; } @ Override public int getItemCount ( ) { return", "gt": "pictureInfos . size ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . view . LayoutInflater ; import android . view . View ; import android . view . ViewGroup ; import android . widget . FrameLayout ; import android . widget . ImageView ; import androidx . annotation . NonNull ; import androidx . annotation . Nullable ; import androidx . recyclerview . widget . LinearLayoutManager ; import androidx . recyclerview . widget . RecyclerView ; import androidx . viewpager . widget . ViewPager ; import com . wgw . photo . preview . IndicatorType ; import com . wgw . photo . preview . PhotoPreview ; import com . wgw . photo . preview . interfaces . IFindThumbnailView ; import com . wgw . photo . preview . interfaces . ImageLoader ; import com . wgw . photo . preview . interfaces . OnLongClickListener ; import java . io . File ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureLoader ; import icu . freedomIntrovert . biliSendCommAntifraud . picturestorage . PictureStorage ; public class PicturesAdapter extends RecyclerView . Adapter < PicturesAdapter . ViewHolder > { HistoryCommentActivity context ; List < Comment . PictureInfo > pictureInfos ; LinearLayoutManager linearLayoutManager ; public PicturesAdapter ( HistoryCommentActivity context , List < Comment . PictureInfo > pictureInfos , LinearLayoutManager linearLayoutManager ) { this . context = context ; this . pictureInfos = pictureInfos ; this . linearLayoutManager = linearLayoutManager ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { return new ViewHolder ( LayoutInflater . from ( context ) . inflate ( R . layout . item_pictrues , parent , false ) ) ; } @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { ImageView imageView = holder . imageView ; PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; holder . itemView . setOnClickListener ( new View . OnClickListener ( ) { @ Override public void onClick ( View v ) { PhotoPreview . with ( context ) . sources ( pictureInfos ) . indicatorType ( IndicatorType . TEXT ) . showThumbnailViewMask ( true ) . fullScreen ( true ) . animDuration ( <NUM_LIT> ) . defaultShowPosition ( holder . getLayoutPosition ( ) ) . imageLoader ( new ImageLoader ( ) { @ Override public void onLoadImage ( int position , @ Nullable Object source , @ NonNull ImageView imageView ) { PictureLoader . with ( context ) . load ( pictureInfos . get ( position ) . img_src ) . into ( imageView ) ; } } ) . onPageChangeListener ( new ViewPager . OnPageChangeListener ( ) { @ Override public void onPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { } @ Override public void onPageSelected ( int position ) { linearLayoutManager . scrollToPosition ( position ) ; } @ Override public void onPageScrollStateChanged ( int state ) { } } ) . onLongClickListener ( new OnLongClickListener ( ) { @ Override public boolean onLongClick ( int position , FrameLayout customViewRoot , ImageView imageView ) { String imgSrc = pictureInfos . get ( position ) . img_src ; File pictureFile = PictureStorage . getPictureFile ( context , imgSrc ) ; context . savePicFileLauncher . launch ( pictureFile ) ; return false ; } } ) . build ( ) . show ( new IFindThumbnailView ( ) { @ Override public View findView ( int position ) { return linearLayoutManager . findViewByPosition ( position ) . findViewById ( R . id . picture ) ; } } ) ; } } ) ; } @ Override public int getItemCount ( ) { return pictureInfos . size ( ) ; } public static class ViewHolder extends RecyclerView . ViewHolder { ImageView imageView ; public ViewHolder ( @ NonNull View itemView ) { super", "gt": "( itemView ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory", "gt": "factory = DocumentBuilderFactory . newInstance ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder", "gt": "builder = factory . newDocumentBuilder ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte", "gt": "[ ] decompress ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document", "gt": "document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String", "gt": "thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ; System", "gt": ". out . println ( thisDmid ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ; System . out . println ( thisDmid ) ; if", "gt": "( Long . parseLong ( thisDmid ) == dmid ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ; System . out . println ( thisDmid ) ; if ( Long . parseLong ( thisDmid ) == dmid ) { return true ; } } return false ; } public static byte [ ] decompress ( byte [ ] data ) throws IOException { byte [ ] decompressData = null ; Inflater decompressor = new Inflater ( true ) ; decompressor . reset ( ) ; decompressor . setInput ( data ) ; ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( data . length ) ; try { byte", "gt": "[ ] buf = new byte [ <NUM_LIT> ] ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ; System . out . println ( thisDmid ) ; if ( Long . parseLong ( thisDmid ) == dmid ) { return true ; } } return false ; } public static byte [ ] decompress ( byte [ ] data ) throws IOException { byte [ ] decompressData = null ; Inflater decompressor = new Inflater ( true ) ; decompressor . reset ( ) ; decompressor . setInput ( data ) ; ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( data . length ) ; try { byte [ ] buf = new byte [ <NUM_LIT> ] ; while ( ! decompressor . finished ( ) ) { int i = decompressor . inflate ( buf ) ; outputStream . write ( buf , <NUM_LIT> , i ) ; } decompressData", "gt": "= outputStream . toByteArray ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ; System . out . println ( thisDmid ) ; if ( Long . parseLong ( thisDmid ) == dmid ) { return true ; } } return false ; } public static byte [ ] decompress ( byte [ ] data ) throws IOException { byte [ ] decompressData = null ; Inflater decompressor = new Inflater ( true ) ; decompressor . reset ( ) ; decompressor . setInput ( data ) ; ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( data . length ) ; try { byte [ ] buf = new byte [ <NUM_LIT> ] ; while ( ! decompressor . finished ( ) ) { int i = decompressor . inflate ( buf ) ; outputStream . write ( buf , <NUM_LIT> , i ) ; } decompressData = outputStream . toByteArray ( ) ; } catch", "gt": "( Exception e ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import org . w3c . dom . Document ; import org . w3c . dom . Element ; import org . w3c . dom . NodeList ; import org . xml . sax . SAXException ; import java . io . ByteArrayInputStream ; import java . io . ByteArrayOutputStream ; import java . io . IOException ; import java . util . zip . Inflater ; import javax . xml . parsers . DocumentBuilder ; import javax . xml . parsers . DocumentBuilderFactory ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; public class DanmakuManipulator { OkHttpClient httpClient ; public DanmakuManipulator ( ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; } public boolean findDanmaku ( long oid , long dmid , String accessKey ) throws IOException , ParserConfigurationException , SAXException { DocumentBuilderFactory factory = DocumentBuilderFactory . newInstance ( ) ; DocumentBuilder builder = factory . newDocumentBuilder ( ) ; Request request ; byte [ ] decompress ; if ( accessKey == null ) { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid ) . build ( ) ; } else { request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + oid + \"<STR_LIT>\" + accessKey ) . build ( ) ; } decompress = decompress ( httpClient . newCall ( request ) . execute ( ) . body ( ) . bytes ( ) ) ; Document document = builder . parse ( new ByteArrayInputStream ( decompress ) ) ; NodeList nodeList = document . getDocumentElement ( ) . getElementsByTagName ( \"<STR_LIT>\" ) ; for ( int i = <NUM_LIT> ; i < nodeList . getLength ( ) ; i ++ ) { Element element = ( Element ) nodeList . item ( i ) ; String p = element . getAttribute ( \"<STR_LIT>\" ) ; String thisDmid = p . split ( \"<STR_LIT>\" ) [ <NUM_LIT> ] ; System . out . println ( thisDmid ) ; if ( Long . parseLong ( thisDmid ) == dmid ) { return true ; } } return false ; } public static byte [ ] decompress ( byte [ ] data ) throws IOException { byte [ ] decompressData = null ; Inflater decompressor = new Inflater ( true ) ; decompressor . reset ( ) ; decompressor . setInput ( data ) ; ByteArrayOutputStream outputStream = new ByteArrayOutputStream ( data . length ) ; try { byte [ ] buf = new byte [ <NUM_LIT> ] ; while ( ! decompressor . finished ( ) ) { int i = decompressor . inflate ( buf ) ; outputStream . write ( buf , <NUM_LIT> , i ) ; } decompressData = outputStream . toByteArray ( ) ; } catch ( Exception e ) { } finally { outputStream", "gt": ". close ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this", "gt": ". historyComment = historyComment ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if", "gt": "( ! commentManipulator . checkCookieNotFailed ( ) ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea", "gt": "commentArea = historyComment . commentArea ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long", "gt": "rpid = historyComment . rpid ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse", "gt": "< CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil", "gt": ". respNotNull ( resp ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil", "gt": ". respNotNull ( resp1 ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if", "gt": "( resp1 . isSuccess ( ) ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if", "gt": "( foundComment == null ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler", "gt": ". sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler", "gt": ". sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler", "gt": ". sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler", "gt": ". sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil", "gt": ". respNotNull ( body ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment", "gt": "foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if", "gt": "( foundReply != null ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB", "gt": ". updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler", "gt": ". sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if", "gt": "( foundReplyHasAcc != null ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if ( foundReplyHasAcc != null ) { statisticsDB", "gt": ". updateHistoryCommentStates ( foundReplyHasAcc . rpid , HistoryComment . STATE_SHADOW_BAN , foundReplyHasAcc . like , foundReplyHasAcc . rcount , new Date ( ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if ( foundReplyHasAcc != null ) { statisticsDB . updateHistoryCommentStates ( foundReplyHasAcc . rpid , HistoryComment . STATE_SHADOW_BAN , foundReplyHasAcc . like , foundReplyHasAcc . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , foundReplyHasAcc ) ; } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler", "gt": ". sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if ( foundReplyHasAcc != null ) { statisticsDB . updateHistoryCommentStates ( foundReplyHasAcc . rpid , HistoryComment . STATE_SHADOW_BAN , foundReplyHasAcc . like , foundReplyHasAcc . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , foundReplyHasAcc ) ; } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ; } } } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_SHADOW_BAN , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler", "gt": ". sendEmptyEventMessage ( EventHandler . WHAT_ROOT_COMMENT_IS_SHADOW_BAN ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if ( foundReplyHasAcc != null ) { statisticsDB . updateHistoryCommentStates ( foundReplyHasAcc . rpid , HistoryComment . STATE_SHADOW_BAN , foundReplyHasAcc . like , foundReplyHasAcc . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , foundReplyHasAcc ) ; } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ; } } } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_SHADOW_BAN , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_ROOT_COMMENT_IS_SHADOW_BAN ) ; } } } else if ( resp . code == CommentAddResult . CODE_DELETED ) { statisticsDB", "gt": ". updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if ( foundReplyHasAcc != null ) { statisticsDB . updateHistoryCommentStates ( foundReplyHasAcc . rpid , HistoryComment . STATE_SHADOW_BAN , foundReplyHasAcc . like , foundReplyHasAcc . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , foundReplyHasAcc ) ; } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ; } } } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_SHADOW_BAN , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_ROOT_COMMENT_IS_SHADOW_BAN ) ; } } } else if ( resp . code == CommentAddResult . CODE_DELETED ) { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler", "gt": ". sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async . commentcheck ; import java . util . Date ; import icu . freedomIntrovert . async . BackstageTask ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiRequestHandler ; import icu . freedomIntrovert . biliSendCommAntifraud . async . CookieFailedException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentManipulator ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . HistoryComment ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; public class ReviewCommentStatusTask extends BackstageTask < ReviewCommentStatusTask . EventHandler > { private CommentManipulator commentManipulator ; private StatisticsDBOpenHelper statisticsDB ; private HistoryComment historyComment ; public ReviewCommentStatusTask ( EventHandler handle , CommentManipulator commentManipulator , StatisticsDBOpenHelper statisticsDB , HistoryComment historyComment ) { super ( handle ) ; this . commentManipulator = commentManipulator ; this . statisticsDB = statisticsDB ; this . historyComment = historyComment ; } @ Override protected void onStart ( EventHandler eventHandler ) throws Throwable { if ( ! commentManipulator . checkCookieNotFailed ( ) ) { eventHandler . sendError ( new CookieFailedException ( ) ) ; return ; } CommentArea commentArea = historyComment . commentArea ; long rpid = historyComment . rpid ; GeneralResponse < CommentReplyPage > resp = commentManipulator . getCommentReplyHasAccount ( commentArea , rpid , <NUM_LIT> , false ) ; OkHttpUtil . respNotNull ( resp ) ; if ( resp . isSuccess ( ) ) { BiliComment rootComment = resp . data . root ; if ( rootComment . rpid == rpid ) { GeneralResponse < CommentReplyPage > resp1 = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( resp1 ) ; if ( resp1 . isSuccess ( ) ) { BiliComment foundComment = commentManipulator . findCommentUsingSeekRpid ( historyComment , false ) ; if ( foundComment == null ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_UNDER_REVIEW , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_UNDER_REVIEW , rootComment ) ; } else { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_INVISIBLE , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , rootComment ) ; } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_NORMAL , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_OK , rootComment ) ; } } } else { statisticsDB . updateHistoryCommentStates ( rootComment . rpid , HistoryComment . STATE_SHADOW_BAN , rootComment . like , rootComment . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , rootComment ) ; } } else { GeneralResponse < CommentReplyPage > body = commentManipulator . getCommentReplyNoAccount ( commentArea , rpid , <NUM_LIT> ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { BiliComment foundReply = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , false ) ; if ( foundReply != null ) { if ( rootComment . invisible ) { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_INVISIBLE , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_INVISIBLE , foundReply ) ; } else { statisticsDB . updateHistoryCommentStates ( foundReply . rpid , HistoryComment . STATE_NORMAL , foundReply . like , foundReply . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_REPLY_OK , foundReply ) ; } } else { BiliComment foundReplyHasAcc = commentManipulator . findCommentFromCommentReplyArea ( commentArea , rpid , rootComment . rpid , true ) ; if ( foundReplyHasAcc != null ) { statisticsDB . updateHistoryCommentStates ( foundReplyHasAcc . rpid , HistoryComment . STATE_SHADOW_BAN , foundReplyHasAcc . like , foundReplyHasAcc . rcount , new Date ( ) ) ; eventHandler . sendEventMessage ( EventHandler . WHAT_SHADOW_BANNED , foundReplyHasAcc ) ; } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ; } } } else { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_SHADOW_BAN , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_ROOT_COMMENT_IS_SHADOW_BAN ) ; } } } else if ( resp . code == CommentAddResult . CODE_DELETED ) { statisticsDB . updateHistoryCommentStates ( historyComment . rpid , HistoryComment . STATE_DELETED , historyComment . like , historyComment . replyCount , new Date ( ) ) ; eventHandler . sendEmptyEventMessage ( EventHandler . WHAT_DELETED ) ; } else { eventHandler", "gt": ". sendError ( new BiliBiliApiException ( resp , \"<STR_LIT>\" ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . okretro ; import android . util . Log ; import androidx . annotation . Nullable ; import retrofit2 . Call ; import retrofit2 . Callback ; import retrofit2 . HttpException ; import retrofit2 . Response ; public abstract class BiliApiCallback < T > implements Callback < T > { public boolean isCancel ( ) { return false ; } public abstract void onError ( Throwable th ) ; @ Override public void onFailure ( @ Nullable Call < T > call , Throwable th ) { if ( isCancel ( ) ) { return ; } if", "gt": "( call != null ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . okretro ; import android . util . Log ; import androidx . annotation . Nullable ; import retrofit2 . Call ; import retrofit2 . Callback ; import retrofit2 . HttpException ; import retrofit2 . Response ; public abstract class BiliApiCallback < T > implements Callback < T > { public boolean isCancel ( ) { return false ; } public abstract void onError ( Throwable th ) ; @ Override public void onFailure ( @ Nullable Call < T > call , Throwable th ) { if ( isCancel ( ) ) { return ; } if ( call != null ) { Log . e ( \"<STR_LIT>\" , call . request ( ) . url ( ) + \"<STR_LIT>\" + th . getMessage ( ) ) ; } else { Log", "gt": ". e ( \"<STR_LIT>\" , \"<STR_LIT>\" , th ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . okretro ; import android . util . Log ; import androidx . annotation . Nullable ; import retrofit2 . Call ; import retrofit2 . Callback ; import retrofit2 . HttpException ; import retrofit2 . Response ; public abstract class BiliApiCallback < T > implements Callback < T > { public boolean isCancel ( ) { return false ; } public abstract void onError ( Throwable th ) ; @ Override public void onFailure ( @ Nullable Call < T > call , Throwable th ) { if ( isCancel ( ) ) { return ; } if ( call != null ) { Log . e ( \"<STR_LIT>\" , call . request ( ) . url ( ) + \"<STR_LIT>\" + th . getMessage ( ) ) ; } else { Log . e ( \"<STR_LIT>\" , \"<STR_LIT>\" , th ) ; } onError ( th ) ; } @ Override public void onResponse ( @ Nullable Call < T > call , Response < T > response ) { if", "gt": "( isCancel ( ) ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . okretro ; import android . util . Log ; import androidx . annotation . Nullable ; import retrofit2 . Call ; import retrofit2 . Callback ; import retrofit2 . HttpException ; import retrofit2 . Response ; public abstract class BiliApiCallback < T > implements Callback < T > { public boolean isCancel ( ) { return false ; } public abstract void onError ( Throwable th ) ; @ Override public void onFailure ( @ Nullable Call < T > call , Throwable th ) { if ( isCancel ( ) ) { return ; } if ( call != null ) { Log . e ( \"<STR_LIT>\" , call . request ( ) . url ( ) + \"<STR_LIT>\" + th . getMessage ( ) ) ; } else { Log . e ( \"<STR_LIT>\" , \"<STR_LIT>\" , th ) ; } onError ( th ) ; } @ Override public void onResponse ( @ Nullable Call < T > call , Response < T > response ) { if ( isCancel ( ) ) { return ; } if ( ! response . isSuccessful ( ) ) { onFailure", "gt": "( call , new HttpException ( response ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . okretro ; import android . util . Log ; import androidx . annotation . Nullable ; import retrofit2 . Call ; import retrofit2 . Callback ; import retrofit2 . HttpException ; import retrofit2 . Response ; public abstract class BiliApiCallback < T > implements Callback < T > { public boolean isCancel ( ) { return false ; } public abstract void onError ( Throwable th ) ; @ Override public void onFailure ( @ Nullable Call < T > call , Throwable th ) { if ( isCancel ( ) ) { return ; } if ( call != null ) { Log . e ( \"<STR_LIT>\" , call . request ( ) . url ( ) + \"<STR_LIT>\" + th . getMessage ( ) ) ; } else { Log . e ( \"<STR_LIT>\" , \"<STR_LIT>\" , th ) ; } onError ( th ) ; } @ Override public void onResponse ( @ Nullable Call < T > call , Response < T > response ) { if ( isCancel ( ) ) { return ; } if ( ! response . isSuccessful ( ) ) { onFailure ( call , new HttpException ( response ) ) ; return ; } onSuccess", "gt": "( response . body ( ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this", "gt": ". danmakuManipulator = danmakuManipulator ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this", "gt": ". statisticsDBOpenHelper = statisticsDBOpenHelper ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this", "gt": ". enableStatistics = enableStatistics ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this", "gt": ". waitTime = waitTime ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor", "gt": "= Executors . newSingleThreadExecutor ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread", "gt": ". sleep ( waitTime ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e", "gt": ". printStackTrace ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler", "gt": ". post ( callBack :: onGettingNoAccountDMList ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if", "gt": "( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if", "gt": "( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler", "gt": ". post ( callBack :: thenShadowBan ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler . post ( callBack :: thenShadowBan ) ; } else { handler . post ( callBack :: thenDeleted ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; handler", "gt": ". post ( ( ) -> callBack . onNetworkError ( e ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler . post ( callBack :: thenShadowBan ) ; } else { handler . post ( callBack :: thenDeleted ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; handler . post ( ( ) -> callBack . onNetworkError ( e ) ) ; } catch", "gt": "( ParserConfigurationException | SAXException e ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler . post ( callBack :: thenShadowBan ) ; } else { handler . post ( callBack :: thenDeleted ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; handler . post ( ( ) -> callBack . onNetworkError ( e ) ) ; } catch ( ParserConfigurationException | SAXException e ) { e", "gt": ". printStackTrace ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler . post ( callBack :: thenShadowBan ) ; } else { handler . post ( callBack :: thenDeleted ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; handler . post ( ( ) -> callBack . onNetworkError ( e ) ) ; } catch ( ParserConfigurationException | SAXException e ) { e . printStackTrace ( ) ; } } ) ; } public interface CheckDanmakuCallBack extends NetworkCallBack { void", "gt": "onSleeping ( long waitTime ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler . post ( callBack :: thenShadowBan ) ; } else { handler . post ( callBack :: thenDeleted ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; handler . post ( ( ) -> callBack . onNetworkError ( e ) ) ; } catch ( ParserConfigurationException | SAXException e ) { e . printStackTrace ( ) ; } } ) ; } public interface CheckDanmakuCallBack extends NetworkCallBack { void onSleeping ( long waitTime ) ; void", "gt": "onGettingHasAccountDMList ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . danmaku ; import android . os . Handler ; import org . xml . sax . SAXException ; import java . io . IOException ; import java . util . concurrent . Executor ; import java . util . concurrent . Executors ; import javax . xml . parsers . ParserConfigurationException ; import icu . freedomIntrovert . biliSendCommAntifraud . NetworkCallBack ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class DanmakuPresenter { private Handler handler ; public DanmakuManipulator danmakuManipulator ; public StatisticsDBOpenHelper statisticsDBOpenHelper ; private boolean enableStatistics ; public long waitTime ; private Executor executor ; public DanmakuPresenter ( Handler handler , DanmakuManipulator danmakuManipulator , StatisticsDBOpenHelper statisticsDBOpenHelper , long waitTime , boolean enableStatistics ) { this . handler = handler ; this . danmakuManipulator = danmakuManipulator ; this . statisticsDBOpenHelper = statisticsDBOpenHelper ; this . enableStatistics = enableStatistics ; this . waitTime = waitTime ; executor = Executors . newSingleThreadExecutor ( ) ; } public void checkDanmaku ( long oid , long dmid , String content , String accessKey , long avid , CheckDanmakuCallBack callBack ) { executor . execute ( ( ) -> { try { handler . post ( ( ) -> callBack . onSleeping ( waitTime ) ) ; try { Thread . sleep ( waitTime ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } handler . post ( callBack :: onGettingNoAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , null ) ) { handler . post ( callBack :: thenOk ) ; } else { handler . post ( callBack :: onGettingHasAccountDMList ) ; if ( danmakuManipulator . findDanmaku ( oid , dmid , accessKey ) ) { handler . post ( callBack :: thenShadowBan ) ; } else { handler . post ( callBack :: thenDeleted ) ; } } } catch ( IOException e ) { e . printStackTrace ( ) ; handler . post ( ( ) -> callBack . onNetworkError ( e ) ) ; } catch ( ParserConfigurationException | SAXException e ) { e . printStackTrace ( ) ; } } ) ; } public interface CheckDanmakuCallBack extends NetworkCallBack { void onSleeping ( long waitTime ) ; void onGettingHasAccountDMList ( ) ; void onGettingNoAccountDMList ( ) ; void thenOk ( ) ; void thenDeleted ( ) ; void", "gt": "thenShadowBan ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this", "gt": ". errorHandle = errorHandle ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th", "gt": ". printStackTrace ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle", "gt": ". handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else", "gt": "if ( th instanceof IOException ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle", "gt": ". handleNetIOException ( ( IOException ) th ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void", "gt": "handleNetIOException ( IOException e ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void", "gt": "handleCookieFiledException ( CookieFailedException e ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void", "gt": "handleBiliBiliApiException ( BiliBiliApiException e ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void", "gt": "dialogMessage ( String title , String message ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this", "gt": ". toDismissDialog = toDismissDialog ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this", "gt": ". listener = listener ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this . listener = listener ; } @ Override public void handleNetIOException ( IOException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , e . getMessage ( ) ) ; } @ Override public void handleCookieFiledException ( CookieFailedException e ) { toDismissDialog", "gt": ". dismiss ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this . listener = listener ; } @ Override public void handleNetIOException ( IOException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , e . getMessage ( ) ) ; } @ Override public void handleCookieFiledException ( CookieFailedException e ) { toDismissDialog . dismiss ( ) ; listener", "gt": ". dialogMessage ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this . listener = listener ; } @ Override public void handleNetIOException ( IOException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , e . getMessage ( ) ) ; } @ Override public void handleCookieFiledException ( CookieFailedException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public void handleBiliBiliApiException ( BiliBiliApiException e ) { toDismissDialog . dismiss ( ) ; String msg ; if", "gt": "( e . tipsMessage != null ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this . listener = listener ; } @ Override public void handleNetIOException ( IOException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , e . getMessage ( ) ) ; } @ Override public void handleCookieFiledException ( CookieFailedException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public void handleBiliBiliApiException ( BiliBiliApiException e ) { toDismissDialog . dismiss ( ) ; String msg ; if ( e . tipsMessage != null ) { msg = String . format ( \"<STR_LIT>\" , e . tipsMessage , e . code , e . message ) ; } else { msg", "gt": "= String . format ( \"<STR_LIT>\" , e . code , e . message ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this . listener = listener ; } @ Override public void handleNetIOException ( IOException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , e . getMessage ( ) ) ; } @ Override public void handleCookieFiledException ( CookieFailedException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public void handleBiliBiliApiException ( BiliBiliApiException e ) { toDismissDialog . dismiss ( ) ; String msg ; if ( e . tipsMessage != null ) { msg = String . format ( \"<STR_LIT>\" , e . tipsMessage , e . code , e . message ) ; } else { msg = String . format ( \"<STR_LIT>\" , e . code , e . message ) ; } listener . dialogMessage ( \"<STR_LIT>\" , msg ) ; } @ Override public void handleOtherExceptions ( Throwable th ) { toDismissDialog", "gt": ". dismiss ( ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . async ; import android . content . DialogInterface ; import java . io . IOException ; import icu . freedomIntrovert . async . EventHandler ; public abstract class BiliBiliApiRequestHandler extends EventHandler { ErrorHandle errorHandle ; public BiliBiliApiRequestHandler ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } public void setErrorHandle ( ErrorHandle errorHandle ) { this . errorHandle = errorHandle ; } @ Override public void handleError ( Throwable th ) { th . printStackTrace ( ) ; if ( errorHandle != null ) { if ( th instanceof CookieFailedException ) { errorHandle . handleCookieFiledException ( ( CookieFailedException ) th ) ; } else if ( th instanceof BiliBiliApiException ) { errorHandle . handleBiliBiliApiException ( ( BiliBiliApiException ) th ) ; } else if ( th instanceof IOException ) { errorHandle . handleNetIOException ( ( IOException ) th ) ; } else { errorHandle . handleOtherExceptions ( th ) ; } } } public interface ErrorHandle { void handleNetIOException ( IOException e ) ; void handleCookieFiledException ( CookieFailedException e ) ; void handleBiliBiliApiException ( BiliBiliApiException e ) ; void handleOtherExceptions ( Throwable th ) ; } public static class DialogErrorHandle implements ErrorHandle { DialogInterface toDismissDialog ; public interface OnDialogMessageListener { void dialogMessage ( String title , String message ) ; } public OnDialogMessageListener listener ; public DialogErrorHandle ( DialogInterface toDismissDialog , OnDialogMessageListener listener ) { this . toDismissDialog = toDismissDialog ; this . listener = listener ; } @ Override public void handleNetIOException ( IOException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , e . getMessage ( ) ) ; } @ Override public void handleCookieFiledException ( CookieFailedException e ) { toDismissDialog . dismiss ( ) ; listener . dialogMessage ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } @ Override public void handleBiliBiliApiException ( BiliBiliApiException e ) { toDismissDialog . dismiss ( ) ; String msg ; if ( e . tipsMessage != null ) { msg = String . format ( \"<STR_LIT>\" , e . tipsMessage , e . code , e . message ) ; } else { msg = String . format ( \"<STR_LIT>\" , e . code , e . message ) ; } listener . dialogMessage ( \"<STR_LIT>\" , msg ) ; } @ Override public void handleOtherExceptions ( Throwable th ) { toDismissDialog . dismiss ( ) ; listener", "gt": ". dialogMessage ( \"<STR_LIT>\" , th . toString ( ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . xposed ; import android . content . Context ; import android . content . SharedPreferences ; public class InAppXConfig extends XConfig { protected InAppXConfig ( SharedPreferences sharedPreferences ) { super", "gt": "( sharedPreferences ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . xposed ; import android . content . Context ; import android . content . SharedPreferences ; public class InAppXConfig extends XConfig { protected InAppXConfig ( SharedPreferences sharedPreferences ) { super ( sharedPreferences ) ; } public static InAppXConfig newInstance ( Context context ) { SharedPreferences pref ; try { pref = context . getSharedPreferences ( PREF_NAME , Context . MODE_WORLD_READABLE ) ; } catch", "gt": "( SecurityException ignored ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . xposed ; import android . content . Context ; import android . content . SharedPreferences ; public class InAppXConfig extends XConfig { protected InAppXConfig ( SharedPreferences sharedPreferences ) { super ( sharedPreferences ) ; } public static InAppXConfig newInstance ( Context context ) { SharedPreferences pref ; try { pref = context . getSharedPreferences ( PREF_NAME , Context . MODE_WORLD_READABLE ) ; } catch ( SecurityException ignored ) { pref = null ; } if", "gt": "( pref != null ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent", "gt": ". setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if", "gt": "( root != <NUM_LIT> ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras", "gt": ". putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras", "gt": ". putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras", "gt": ". putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else", "gt": "if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if", "gt": "( root != <NUM_LIT> ) {"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras", "gt": ". putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras", "gt": ". putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" + sourceId ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras", "gt": ". putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" + sourceId ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } else if ( areaType == CommentArea . AREA_TYPE_ARTICLE ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent", "gt": ". putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" + sourceId ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } else if ( areaType == CommentArea . AREA_TYPE_ARTICLE ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras", "gt": ". putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . content . Context ; import android . content . Intent ; import android . os . Bundle ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; public class CommentLocator { public static void lunch ( Context context , int areaType , long oid , long rpid , long root , String sourceId ) { Intent intent = new Intent ( ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_DOCUMENT ) ; Bundle extras = new Bundle ( ) ; if ( areaType == CommentArea . AREA_TYPE_VIDEO ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; } else if ( areaType == CommentArea . AREA_TYPE_DYNAMIC11 || areaType == CommentArea . AREA_TYPE_DYNAMIC17 ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" + sourceId ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } else if ( areaType == CommentArea . AREA_TYPE_ARTICLE ) { intent . setClassName ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; intent . putExtra ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; if ( root != <NUM_LIT> ) { extras . putString ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; } else { extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; } extras . putString ( \"<STR_LIT>\" , String . valueOf ( rpid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( oid ) ) ; extras . putString ( \"<STR_LIT>\" , String . valueOf ( areaType ) ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" + oid ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; extras . putString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; } intent", "gt": ". putExtra ( \"<STR_LIT>\" , extras ) ;"}
