{"input": "SECRET_KEY = \"<STR_LIT>\" <EOL> INSTALLED_APPS = [ <EOL> \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" , <EOL> ] <EOL> DATABASES = { <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> } <EOL> } <EOL> DEFAULT_AUTO_FIELD = \"<STR_LIT>\" <EOL> ROOT_URLCONF = \"<STR_LIT>\" <EOL> ALLOWED_HOSTS = [ \"<STR_LIT>\" , \"<STR_LIT>\" ] <EOL> TEMPLATES = [ <EOL> { <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : True , <EOL> \"<STR_LIT>\" : { } , <EOL> } , <EOL> ] <EOL> LOGGING = { <EOL> \"<STR_LIT>\" : <NUM_LIT> , <EOL> \"<STR_LIT>\" : False , <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> } , <EOL> } , <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\"", "gt": ": [ \"<STR_LIT>\" ] ,"}
{"input": "SECRET_KEY = \"<STR_LIT>\" <EOL> INSTALLED_APPS = [ <EOL> \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" , <EOL> ] <EOL> DATABASES = { <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> } <EOL> } <EOL> DEFAULT_AUTO_FIELD = \"<STR_LIT>\" <EOL> ROOT_URLCONF = \"<STR_LIT>\" <EOL> ALLOWED_HOSTS = [ \"<STR_LIT>\" , \"<STR_LIT>\" ] <EOL> TEMPLATES = [ <EOL> { <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : True , <EOL> \"<STR_LIT>\" : { } , <EOL> } , <EOL> ] <EOL> LOGGING = { <EOL> \"<STR_LIT>\" : <NUM_LIT> , <EOL> \"<STR_LIT>\" : False , <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> } , <EOL> } , <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : [ \"<STR_LIT>\" ] , <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> } , <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\" : [ \"<STR_LIT>\" ] , <EOL> \"<STR_LIT>\" : \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : False , <EOL> } , <EOL> \"<STR_LIT>\" : { <EOL> \"<STR_LIT>\"", "gt": ": [ \"<STR_LIT>\" ] ,"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view", "gt": "= ListModelViewTest ( )"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name", "gt": "= \"<STR_LIT>\" , model_view_class = ListModelView"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self", "gt": ". assertEqual ( associated_model_view , ExampleModelViewSet . list_view )"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def", "gt": "test_check_all_model_views_associated_ok ( self ) :"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class", "gt": "ExampleModelViewSet ( ModelViewSet ) :"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view", "gt": "= ListModelViewTest ( )"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet", "gt": ". model_viewset_class = ExampleModelViewSet"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views", "gt": "= [ ExampleModelViewSet . list_view ]"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def", "gt": "test_check_all_model_views_associated_not_found ( self ) :"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def test_check_all_model_views_associated_not_found ( self ) : <EOL> class", "gt": "ExampleModelViewSet ( ModelViewSet ) :"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def test_check_all_model_views_associated_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> other_list_view", "gt": "= ListModelView ( response_body = List [ DepartmentOut ] )"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def test_check_all_model_views_associated_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> other_list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class", "gt": "TestExampleModelViewSet ( ModelViewSetTestCase ) :"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def test_check_all_model_views_associated_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> other_list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet", "gt": ". model_viewset_class = ExampleModelViewSet"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def test_check_all_model_views_associated_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> other_list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with patch ( <EOL> \"<STR_LIT>\" <EOL> ) as mock_logger : <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views", "gt": "= [ ExampleModelViewSet . list_view ]"}
{"input": "import unittest <EOL> from typing import List <EOL> from unittest . mock import patch <EOL> from examples . models import Department <EOL> from examples . schemas import DepartmentOut <EOL> from ninja_crud . testing . views import ListModelViewTest <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from ninja_crud . views import ListModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class TestModelViewSetTestCase ( unittest . TestCase ) : <EOL> def test_get_associated_model_view_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> associated_model_view = TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> self . assertEqual ( associated_model_view , ExampleModelViewSet . list_view ) <EOL> def test_get_associated_model_view_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> TestExampleModelViewSet . _get_associated_model_view ( <EOL> test_attr_name = \"<STR_LIT>\" , model_view_class = ListModelView <EOL> ) <EOL> def test_check_all_model_views_associated_ok ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> def test_check_all_model_views_associated_not_found ( self ) : <EOL> class ExampleModelViewSet ( ModelViewSet ) : <EOL> model = Department <EOL> list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> other_list_view = ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> class TestExampleModelViewSet ( ModelViewSetTestCase ) : <EOL> test_list_view = ListModelViewTest ( ) <EOL> TestExampleModelViewSet . model_viewset_class = ExampleModelViewSet <EOL> with patch ( <EOL> \"<STR_LIT>\" <EOL> ) as mock_logger : <EOL> TestExampleModelViewSet . _check_all_model_views_associated ( <EOL> associated_model_views = [ ExampleModelViewSet . list_view ] <EOL> ) <EOL> mock_logger", "gt": ". warning . assert_called_once ( )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class", "gt": "TestViewTestManager ( django . test . TestCase ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def", "gt": "assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self", "gt": ". assertEqual ( first . ok , second . ok )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def", "gt": "test_simulate_request ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def", "gt": "get_path_parameters ( test_case ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager", "gt": ". get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def", "gt": "test_get_path_parameters_type_error ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self", "gt": ". assertEqual ( first . ok , second . ok )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def", "gt": "test_get_query_parameters_constant ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters", "gt": "= QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def", "gt": "test_get_query_parameters_callable ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return", "gt": "QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager", "gt": ". get_query_parameters ( self ) , get_query_parameters ( self )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def", "gt": "test_get_query_parameters_none ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters", "gt": "= property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager", "gt": ". get_query_parameters ( self ) ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters", "gt": "( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self", "gt": ". assertEqual ( first . ok , second . ok )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self", "gt": ". assertEqual ( first . conflict , second . conflict )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads", "gt": "= Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self", "gt": ". assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def", "gt": "test_get_payloads_callable ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return", "gt": "Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self", "gt": ". assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads", "gt": "= property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager", "gt": ". get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager", "gt": ". get_payloads ( self )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def", "gt": "assertHeadersEqual ( self , first : Headers , second : Headers ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self", "gt": ". assertEqual ( first . unauthorized , second . unauthorized )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def", "gt": "test_get_headers_constant ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self", "gt": ". assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def", "gt": "test_get_headers_callable ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def test_get_headers_callable ( self ) : <EOL> def get_headers ( test_case ) : <EOL> return Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def test_get_headers_callable ( self ) : <EOL> def get_headers ( test_case ) : <EOL> return Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = get_headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , get_headers ( self ) ) <EOL> def test_get_headers_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , Headers ( ok = { } ) ) <EOL> def test_get_headers_property ( self ) : <EOL> headers = property ( lambda test_case : Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request", "gt": "= self . simulate_request ,"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def test_get_headers_callable ( self ) : <EOL> def get_headers ( test_case ) : <EOL> return Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = get_headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , get_headers ( self ) ) <EOL> def test_get_headers_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , Headers ( ok = { } ) ) <EOL> def test_get_headers_property ( self ) : <EOL> headers = property ( lambda test_case : Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( <EOL> view_test_manager", "gt": ". get_headers ( self ) , Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } )"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def test_get_headers_callable ( self ) : <EOL> def get_headers ( test_case ) : <EOL> return Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = get_headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , get_headers ( self ) ) <EOL> def test_get_headers_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , Headers ( ok = { } ) ) <EOL> def test_get_headers_property ( self ) : <EOL> headers = property ( lambda test_case : Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( <EOL> view_test_manager . get_headers ( self ) , Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def", "gt": "test_get_headers_type_error ( self ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def test_get_headers_callable ( self ) : <EOL> def get_headers ( test_case ) : <EOL> return Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = get_headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , get_headers ( self ) ) <EOL> def test_get_headers_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , Headers ( ok = { } ) ) <EOL> def test_get_headers_property ( self ) : <EOL> headers = property ( lambda test_case : Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( <EOL> view_test_manager . get_headers ( self ) , Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_headers_type_error ( self ) : <EOL> headers = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> with", "gt": "self . assertRaises ( TypeError ) :"}
{"input": "import django . test <EOL> from django . http import HttpResponse <EOL> from ninja_crud . testing . core import ViewTestManager <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> class TestViewTestManager ( django . test . TestCase ) : <EOL> def assertPathParametersEqual ( self , first : PathParameters , second : PathParameters ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . not_found , second . not_found ) <EOL> @ staticmethod <EOL> def simulate_request ( <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> request_headers : dict , <EOL> request_body : dict , <EOL> ) -> HttpResponse : <EOL> return HttpResponse ( ) <EOL> def test_simulate_request ( self ) : <EOL> self . assertIsInstance ( self . simulate_request ( { } , { } , { } , { } ) , HttpResponse ) <EOL> def test_get_path_parameters_constant ( self ) : <EOL> path_parameters = PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , path_parameters <EOL> ) <EOL> def test_get_path_parameters_callable ( self ) : <EOL> def get_path_parameters ( test_case ) : <EOL> return PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = get_path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , get_path_parameters ( self ) <EOL> ) <EOL> def test_get_path_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { } ) <EOL> ) <EOL> def test_get_path_parameters_property ( self ) : <EOL> path_parameters = property ( lambda test_case : PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . assertPathParametersEqual ( <EOL> view_test_manager . get_path_parameters ( self ) , PathParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> ) <EOL> def test_get_path_parameters_type_error ( self ) : <EOL> path_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_path_parameters ( self ) <EOL> def assertQueryParametersEqual ( <EOL> self , first : QueryParameters , second : QueryParameters <EOL> ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> def test_get_query_parameters_constant ( self ) : <EOL> query_parameters = QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , query_parameters <EOL> ) <EOL> def test_get_query_parameters_callable ( self ) : <EOL> def get_query_parameters ( test_case ) : <EOL> return QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = get_query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , get_query_parameters ( self ) <EOL> ) <EOL> def test_get_query_parameters_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , QueryParameters ( ok = { } ) <EOL> ) <EOL> def test_get_query_parameters_property ( self ) : <EOL> query_parameters = property ( lambda test_case : QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> self . assertQueryParametersEqual ( <EOL> view_test_manager . get_query_parameters ( self ) , <EOL> QueryParameters ( ok = { \"<STR_LIT>\" : <NUM_LIT> } ) , <EOL> ) <EOL> def test_get_query_parameters_type_error ( self ) : <EOL> query_parameters = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_query_parameters ( self ) <EOL> def assertPayloadsEqual ( self , first : Payloads , second : Payloads ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . bad_request , second . bad_request ) <EOL> self . assertEqual ( first . conflict , second . conflict ) <EOL> def test_get_payloads_constant ( self ) : <EOL> payloads = Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , payloads ) <EOL> def test_get_payloads_callable ( self ) : <EOL> def get_payloads ( test_case ) : <EOL> return Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = get_payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , get_payloads ( self ) <EOL> ) <EOL> def test_get_payloads_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertPayloadsEqual ( view_test_manager . get_payloads ( self ) , Payloads ( ok = { } ) ) <EOL> def test_get_payloads_property ( self ) : <EOL> payloads = property ( lambda test_case : Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> self . assertPayloadsEqual ( <EOL> view_test_manager . get_payloads ( self ) , Payloads ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_payloads_type_error ( self ) : <EOL> payloads = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> payloads = payloads , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager . get_payloads ( self ) <EOL> def assertHeadersEqual ( self , first : Headers , second : Headers ) : <EOL> self . assertEqual ( first . ok , second . ok ) <EOL> self . assertEqual ( first . forbidden , second . forbidden ) <EOL> self . assertEqual ( first . unauthorized , second . unauthorized ) <EOL> def test_get_headers_constant ( self ) : <EOL> headers = Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , headers ) <EOL> def test_get_headers_callable ( self ) : <EOL> def get_headers ( test_case ) : <EOL> return Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = get_headers , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , get_headers ( self ) ) <EOL> def test_get_headers_none ( self ) : <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> ) <EOL> self . assertHeadersEqual ( view_test_manager . get_headers ( self ) , Headers ( ok = { } ) ) <EOL> def test_get_headers_property ( self ) : <EOL> headers = property ( lambda test_case : Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) ) <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> self . assertHeadersEqual ( <EOL> view_test_manager . get_headers ( self ) , Headers ( ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } ) <EOL> ) <EOL> def test_get_headers_type_error ( self ) : <EOL> headers = \"<STR_LIT>\" <EOL> view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> headers = headers , <EOL> ) <EOL> with self . assertRaises ( TypeError ) : <EOL> view_test_manager", "gt": ". get_headers ( self )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router", "gt": "= Router ( )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def", "gt": "user_is_creator ( func ) :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def", "gt": "wrapper ( request , * args , ** kwargs ) :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection", "gt": "= Collection . objects . get ( id = collection_id )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return", "gt": "func ( request , * args , ** kwargs )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class", "gt": "CollectionViewSet ( ModelViewSet ) :"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body", "gt": "= List [ CollectionOut ] , query_parameters = CollectionFilter"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save", "gt": "= lambda request , instance : instance . full_clean ( ) ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection", "gt": "= ReadModelView ( response_body = CollectionOut )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete", "gt": "= lambda request , instance : None ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators", "gt": "= [ user_is_creator ] ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id", "gt": "= getattr ( path_parameters , \"<STR_LIT>\" , None )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ ItemOut ] , <EOL> decorators", "gt": "= [ user_is_creator ] ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ ItemOut ] , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> create_collection_item = CreateModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> init_model", "gt": "= lambda request , path_parameters : Item ("}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ ItemOut ] , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> create_collection_item = CreateModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> init_model = lambda request , path_parameters : Item ( <EOL> collection_id", "gt": "= getattr ( path_parameters , \"<STR_LIT>\" , None )"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ ItemOut ] , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> create_collection_item = CreateModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> init_model = lambda request , path_parameters : Item ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save", "gt": "= lambda request , instance : None ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ ItemOut ] , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> create_collection_item = CreateModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> init_model = lambda request , path_parameters : Item ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> decorators", "gt": "= [ user_is_creator ] ,"}
{"input": "from functools import wraps <EOL> from typing import List <EOL> from django . core . exceptions import PermissionDenied <EOL> from ninja import Router <EOL> from ninja_crud . views import ( <EOL> CreateModelView , <EOL> DeleteModelView , <EOL> ListModelView , <EOL> ReadModelView , <EOL> UpdateModelView , <EOL> ) <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Collection , Item <EOL> from tests . test_app . schemas import ( <EOL> CollectionFilter , <EOL> CollectionIn , <EOL> CollectionOut , <EOL> ItemIn , <EOL> ItemOut , <EOL> ) <EOL> router = Router ( ) <EOL> def user_is_creator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( request , * args , ** kwargs ) : <EOL> collection_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) <EOL> collection = Collection . objects . get ( id = collection_id ) <EOL> if collection . created_by != request . auth : <EOL> raise PermissionDenied ( ) <EOL> return func ( request , * args , ** kwargs ) <EOL> return wrapper <EOL> class CollectionViewSet ( ModelViewSet ) : <EOL> model = Collection <EOL> list_collections = ListModelView ( <EOL> response_body = List [ CollectionOut ] , query_parameters = CollectionFilter <EOL> ) <EOL> create_collection = CreateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> init_model = lambda request , path_parameters : Collection ( created_by = request . auth ) , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> ) <EOL> read_collection = ReadModelView ( response_body = CollectionOut ) <EOL> update_collection = UpdateModelView ( <EOL> request_body = CollectionIn , <EOL> response_body = CollectionOut , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> delete_collection = DeleteModelView ( <EOL> pre_delete = lambda request , instance : None , <EOL> post_delete = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> list_collection_items = ListModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> get_queryset = lambda request , path_parameters : Item . objects . filter ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> response_body = List [ ItemOut ] , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> create_collection_item = CreateModelView ( <EOL> path = \"<STR_LIT>\" , <EOL> init_model = lambda request , path_parameters : Item ( <EOL> collection_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) <EOL> ) , <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> pre_save = lambda request , instance : instance . full_clean ( ) , <EOL> post_save = lambda request , instance : None , <EOL> decorators = [ user_is_creator ] , <EOL> ) <EOL> CollectionViewSet", "gt": ". register_routes ( router )"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class", "gt": "AbstractModelView ( AbstractView , abc . ABC ) :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status", "gt": ": http . HTTPStatus = http . HTTPStatus . OK ,"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators", "gt": ": Optional [ List [ Callable ] ] = None ,"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs", "gt": ": Optional [ Dict ] = None ,"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def", "gt": "model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def", "gt": "model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self", "gt": ". _model_viewset_class = model_viewset_class"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self", "gt": ". _inherit_model_viewset_class_attributes ( )"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def", "gt": "_inherit_model_viewset_class_attributes ( self ) -> None :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def", "gt": "_infer_path_parameters_schema_class ( self ) :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path", "gt": "= self . path"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self", "gt": ". path_parameters = pydantic . create_model ("}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self . path_parameters = pydantic . create_model ( <EOL> __model_name", "gt": "= \"<STR_LIT>\" , ** path_parameter_field_definitions"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self . path_parameters = pydantic . create_model ( <EOL> __model_name = \"<STR_LIT>\" , ** path_parameter_field_definitions <EOL> ) <EOL> @ classmethod <EOL> def", "gt": "_infer_field_type ( cls , model_class : Type [ Model ] , field_name : str ) -> Type :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self . path_parameters = pydantic . create_model ( <EOL> __model_name = \"<STR_LIT>\" , ** path_parameter_field_definitions <EOL> ) <EOL> @ classmethod <EOL> def _infer_field_type ( cls , model_class : Type [ Model ] , field_name : str ) -> Type : <EOL> field", "gt": ": Field = model_class . _meta . get_field ( field_name )"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self . path_parameters = pydantic . create_model ( <EOL> __model_name = \"<STR_LIT>\" , ** path_parameter_field_definitions <EOL> ) <EOL> @ classmethod <EOL> def _infer_field_type ( cls , model_class : Type [ Model ] , field_name : str ) -> Type : <EOL> field : Field = model_class . _meta . get_field ( field_name ) <EOL> if", "gt": "isinstance ( field , ForeignKey ) and field_name == field . attname :"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self . path_parameters = pydantic . create_model ( <EOL> __model_name = \"<STR_LIT>\" , ** path_parameter_field_definitions <EOL> ) <EOL> @ classmethod <EOL> def _infer_field_type ( cls , model_class : Type [ Model ] , field_name : str ) -> Type : <EOL> field : Field = model_class . _meta . get_field ( field_name ) <EOL> if isinstance ( field , ForeignKey ) and field_name == field . attname : <EOL> related_model_class : Type [ Model ] = field . related_model <EOL> return cls . _infer_field_type ( <EOL> model_class = related_model_class , <EOL> field_name", "gt": "= related_model_class . _meta . pk . name ,"}
{"input": "import abc <EOL> import http <EOL> import uuid <EOL> from typing import TYPE_CHECKING , Callable , Dict , List , Optional , Type , Union <EOL> import ninja <EOL> import ninja . signature <EOL> import pydantic <EOL> from django . db . models import Field , ForeignKey , Model <EOL> from ninja_crud . views . abstract_view import AbstractView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> class AbstractModelView ( AbstractView , abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = response_status , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . _model_viewset_class : Optional [ Type [ \"<STR_LIT>\" ] ] = None <EOL> @ property <EOL> def model_viewset_class ( self ) -> Type [ \"<STR_LIT>\" ] : <EOL> if self . _model_viewset_class is None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> \"<STR_LIT>\" <EOL> ) <EOL> return self . _model_viewset_class <EOL> @ model_viewset_class . setter <EOL> def model_viewset_class ( self , model_viewset_class : Type [ \"<STR_LIT>\" ] ) -> None : <EOL> if self . _model_viewset_class is not None : <EOL> raise ValueError ( <EOL> f\"<STR_LIT>\" <EOL> ) <EOL> self . _model_viewset_class = model_viewset_class <EOL> self . _inherit_model_viewset_class_attributes ( ) <EOL> if not self . path_parameters : <EOL> self . _infer_path_parameters_schema_class ( ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> pass <EOL> def _infer_path_parameters_schema_class ( self ) : <EOL> path_parameter_names = ninja . signature . utils . get_path_param_names ( <EOL> path = self . path <EOL> ) <EOL> if not path_parameter_names : <EOL> return <EOL> path_parameter_field_definitions = { <EOL> path_parameter_name : ( <EOL> self . _infer_field_type ( <EOL> model_class = self . model_viewset_class . model , <EOL> field_name = path_parameter_name , <EOL> ) , <EOL> ... , <EOL> ) <EOL> for path_parameter_name in path_parameter_names <EOL> } <EOL> self . path_parameters = pydantic . create_model ( <EOL> __model_name = \"<STR_LIT>\" , ** path_parameter_field_definitions <EOL> ) <EOL> @ classmethod <EOL> def _infer_field_type ( cls , model_class : Type [ Model ] , field_name : str ) -> Type : <EOL> field : Field = model_class . _meta . get_field ( field_name ) <EOL> if isinstance ( field , ForeignKey ) and field_name == field . attname : <EOL> related_model_class : Type [ Model ] = field . related_model <EOL> return cls . _infer_field_type ( <EOL> model_class = related_model_class , <EOL> field_name = related_model_class . _meta . pk . name , <EOL> ) <EOL> type_mapping = { <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\" : int , <EOL> \"<STR_LIT>\"", "gt": ": uuid . UUID ,"}
{"input": "import uuid <EOL> from django . db import models <EOL> class Identifiable ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> class Meta : <EOL> abstract = True <EOL> class", "gt": "Department ( Identifiable ) :"}
{"input": "import uuid <EOL> from django . db import models <EOL> class Identifiable ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> class Meta : <EOL> abstract = True <EOL> class Department ( Identifiable ) : <EOL> title", "gt": "= models . CharField ( max_length = <NUM_LIT> , unique = True )"}
{"input": "import uuid <EOL> from django . db import models <EOL> class Identifiable ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> class Meta : <EOL> abstract = True <EOL> class Department ( Identifiable ) : <EOL> title = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> class", "gt": "Employee ( Identifiable ) :"}
{"input": "import uuid <EOL> from django . db import models <EOL> class Identifiable ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> class Meta : <EOL> abstract = True <EOL> class Department ( Identifiable ) : <EOL> title = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> class Employee ( Identifiable ) : <EOL> first_name", "gt": "= models . CharField ( max_length = <NUM_LIT> )"}
{"input": "import uuid <EOL> from django . db import models <EOL> class Identifiable ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> class Meta : <EOL> abstract = True <EOL> class Department ( Identifiable ) : <EOL> title = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> class Employee ( Identifiable ) : <EOL> first_name = models . CharField ( max_length = <NUM_LIT> ) <EOL> last_name = models . CharField ( max_length = <NUM_LIT> ) <EOL> department", "gt": "= models . ForeignKey ( Department , on_delete = models . CASCADE )"}
