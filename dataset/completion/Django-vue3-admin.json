{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class", "gt": "GitRepository ( object ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self", "gt": ". local_path = local_path"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self", "gt": ". repo_url = repo_url"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def", "gt": "initial ( self , repo_url , branch ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if", "gt": "not os . path . exists ( self . local_path ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self", "gt": ". repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch )"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self", "gt": ". repo = Repo ( self . local_path )"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def", "gt": "pull ( self ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def", "gt": "branches ( self ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches", "gt": "= self . repo . remote ( ) . refs"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def", "gt": "commits ( self ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list", "gt": "= commit_log . split ( \"<STR_LIT>\" )"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def", "gt": "tags ( self ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def tags ( self ) : <EOL> return [ tag . name for tag in self . repo . tags ] <EOL> def", "gt": "tags_exists ( self , tag ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def tags ( self ) : <EOL> return [ tag . name for tag in self . repo . tags ] <EOL> def tags_exists ( self , tag ) : <EOL> return", "gt": "tag in self . tags ( )"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def tags ( self ) : <EOL> return [ tag . name for tag in self . repo . tags ] <EOL> def tags_exists ( self , tag ) : <EOL> return tag in self . tags ( ) <EOL> def", "gt": "change_to_branch ( self , branch ) :"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def tags ( self ) : <EOL> return [ tag . name for tag in self . repo . tags ] <EOL> def tags_exists ( self , tag ) : <EOL> return tag in self . tags ( ) <EOL> def change_to_branch ( self , branch ) : <EOL> self", "gt": ". repo . git . checkout ( branch )"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def tags ( self ) : <EOL> return [ tag . name for tag in self . repo . tags ] <EOL> def tags_exists ( self , tag ) : <EOL> return tag in self . tags ( ) <EOL> def change_to_branch ( self , branch ) : <EOL> self . repo . git . checkout ( branch ) <EOL> def change_to_commit ( self , branch , commit ) : <EOL> self", "gt": ". change_to_branch ( branch = branch )"}
{"input": "import os <EOL> from git . repo import Repo <EOL> from git . repo . fun import is_git_dir <EOL> class GitRepository ( object ) : <EOL> def __init__ ( self , local_path , repo_url , branch = '<STR_LIT>' ) : <EOL> self . local_path = local_path <EOL> self . repo_url = repo_url <EOL> self . repo = None <EOL> self . initial ( self . repo_url , branch ) <EOL> def initial ( self , repo_url , branch ) : <EOL> if not os . path . exists ( self . local_path ) : <EOL> os . makedirs ( self . local_path ) <EOL> git_local_path = os . path . join ( self . local_path , '<STR_LIT>' ) <EOL> if not is_git_dir ( git_local_path ) : <EOL> self . repo = Repo . clone_from ( repo_url , to_path = self . local_path , branch = branch ) <EOL> else : <EOL> self . repo = Repo ( self . local_path ) <EOL> def pull ( self ) : <EOL> self . repo . git . pull ( ) <EOL> def branches ( self ) : <EOL> branches = self . repo . remote ( ) . refs <EOL> return [ item . remote_head for item in branches if item . remote_head not in [ '<STR_LIT>' , ] ] <EOL> def commits ( self ) : <EOL> commit_log = self . repo . git . log ( '<STR_LIT>' , <EOL> max_count = <NUM_LIT> , <EOL> date = '<STR_LIT>' ) <EOL> log_list = commit_log . split ( \"<STR_LIT>\" ) <EOL> return [ eval ( item ) for item in log_list ] <EOL> def tags ( self ) : <EOL> return [ tag . name for tag in self . repo . tags ] <EOL> def tags_exists ( self , tag ) : <EOL> return tag in self . tags ( ) <EOL> def change_to_branch ( self , branch ) : <EOL> self . repo . git . checkout ( branch ) <EOL> def change_to_commit ( self , branch , commit ) : <EOL> self . change_to_branch ( branch = branch ) <EOL> self . repo . git . reset ( '<STR_LIT>' , commit ) <EOL> def", "gt": "change_to_tag ( self , tag ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def", "gt": "serializer_data ( self , serializer , query_set : QuerySet ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer", "gt": "= serializer ( query_set , many = True )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with", "gt": "open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def", "gt": "add_arguments ( self , parser ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self", "gt": ". serializer_data ( UsersInitSerializer , Users . objects . all ( ) )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def", "gt": "generate_role ( self ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self", "gt": ". serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self", "gt": ". serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def", "gt": "generate_dictionary ( self ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self", "gt": ". serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def", "gt": "generate_system_config ( self ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def", "gt": "handle ( self , * args , ** options ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\"", "gt": ": self . generate_role ,"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\"", "gt": ": self . generate_api_white_list ,"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\"", "gt": ": self . generate_dictionary ,"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\"", "gt": ": self . generate_system_config ,"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for", "gt": "ele in generate_name_dict . keys ( ) :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for ele in generate_name_dict . keys ( ) : <EOL> generate_name_dict", "gt": "[ ele ] ( )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for ele in generate_name_dict . keys ( ) : <EOL> generate_name_dict [ ele ] ( ) <EOL> return <EOL> for generate_name in generate_name : <EOL> if", "gt": "generate_name not in generate_name_dict :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for ele in generate_name_dict . keys ( ) : <EOL> generate_name_dict [ ele ] ( ) <EOL> return <EOL> for generate_name in generate_name : <EOL> if generate_name not in generate_name_dict : <EOL> print ( f\"<STR_LIT>\" ) <EOL> raise", "gt": "Exception ( f\"<STR_LIT>\" )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for ele in generate_name_dict . keys ( ) : <EOL> generate_name_dict [ ele ] ( ) <EOL> return <EOL> for generate_name in generate_name : <EOL> if generate_name not in generate_name_dict : <EOL> print ( f\"<STR_LIT>\" ) <EOL> raise Exception ( f\"<STR_LIT>\" ) <EOL> generate_name_dict [ generate_name ] ( ) <EOL> return <EOL> if", "gt": "__name__ == '<STR_LIT>' :"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for ele in generate_name_dict . keys ( ) : <EOL> generate_name_dict [ ele ] ( ) <EOL> return <EOL> for generate_name in generate_name : <EOL> if generate_name not in generate_name_dict : <EOL> print ( f\"<STR_LIT>\" ) <EOL> raise Exception ( f\"<STR_LIT>\" ) <EOL> generate_name_dict [ generate_name ] ( ) <EOL> return <EOL> if __name__ == '<STR_LIT>' : <EOL> a", "gt": "= Users . objects . filter ( )"}
{"input": "import json <EOL> import logging <EOL> import os <EOL> import django <EOL> from django . db . models import QuerySet <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from django . core . management . base import BaseCommand <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Menu , Users , Dept , Role , ApiWhiteList , Dictionary , SystemConfig <EOL> from dvadmin . system . fixtures . initSerializer import UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def serializer_data ( self , serializer , query_set : QuerySet ) : <EOL> serializer = serializer ( query_set , many = True ) <EOL> data = json . loads ( json . dumps ( serializer . data , ensure_ascii = False ) ) <EOL> with open ( os . path . join ( BASE_DIR , f'<STR_LIT>' ) , '<STR_LIT>' ) as f : <EOL> json . dump ( data , f , indent = <NUM_LIT> , ensure_ascii = False ) <EOL> return <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( \"<STR_LIT>\" , nargs = \"<STR_LIT>\" , type = str , help = \"<STR_LIT>\" ) <EOL> def generate_users ( self ) : <EOL> self . serializer_data ( UsersInitSerializer , Users . objects . all ( ) ) <EOL> def generate_role ( self ) : <EOL> self . serializer_data ( RoleInitSerializer , Role . objects . all ( ) ) <EOL> def generate_dept ( self ) : <EOL> self . serializer_data ( DeptInitSerializer , Dept . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_menu ( self ) : <EOL> self . serializer_data ( MenuInitSerializer , Menu . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_api_white_list ( self ) : <EOL> self . serializer_data ( ApiWhiteListInitSerializer , ApiWhiteList . objects . all ( ) ) <EOL> def generate_dictionary ( self ) : <EOL> self . serializer_data ( DictionaryInitSerializer , Dictionary . objects . filter ( parent_id__isnull = True ) ) <EOL> def generate_system_config ( self ) : <EOL> self . serializer_data ( SystemConfigInitSerializer , SystemConfig . objects . filter ( parent_id__isnull = True ) ) <EOL> def handle ( self , * args , ** options ) : <EOL> generate_name = options . get ( '<STR_LIT>' ) <EOL> generate_name_dict = { <EOL> \"<STR_LIT>\" : self . generate_users , <EOL> \"<STR_LIT>\" : self . generate_role , <EOL> \"<STR_LIT>\" : self . generate_dept , <EOL> \"<STR_LIT>\" : self . generate_menu , <EOL> \"<STR_LIT>\" : self . generate_api_white_list , <EOL> \"<STR_LIT>\" : self . generate_dictionary , <EOL> \"<STR_LIT>\" : self . generate_system_config , <EOL> } <EOL> if not generate_name : <EOL> for ele in generate_name_dict . keys ( ) : <EOL> generate_name_dict [ ele ] ( ) <EOL> return <EOL> for generate_name in generate_name : <EOL> if generate_name not in generate_name_dict : <EOL> print ( f\"<STR_LIT>\" ) <EOL> raise Exception ( f\"<STR_LIT>\" ) <EOL> generate_name_dict [ generate_name ] ( ) <EOL> return <EOL> if __name__ == '<STR_LIT>' : <EOL> a = Users . objects . filter ( ) <EOL> print", "gt": "( type ( Users . objects . filter ( ) ) )"}
{"input": "import json <EOL> import os <EOL> import django <EOL> import pypinyin <EOL> from django . core . management import BaseCommand <EOL> from django . db import connection <EOL> from application import dispatch <EOL> os", "gt": ". environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' )"}
{"input": "import json <EOL> import os <EOL> import django <EOL> import pypinyin <EOL> from django . core . management import BaseCommand <EOL> from django . db import connection <EOL> from application import dispatch <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Area <EOL> area_code_list = [ ] <EOL> def", "gt": "area_list ( code_list , pcode = None , depth = <NUM_LIT> ) :"}
{"input": "import json <EOL> import os <EOL> import django <EOL> import pypinyin <EOL> from django . core . management import BaseCommand <EOL> from django . db import connection <EOL> from application import dispatch <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Area <EOL> area_code_list = [ ] <EOL> def area_list ( code_list , pcode = None , depth = <NUM_LIT> ) : <EOL> for code_dict in code_list : <EOL> code = code_dict . get ( '<STR_LIT>' , None ) <EOL> name = code_dict . get ( '<STR_LIT>' , None ) <EOL> children = code_dict . get ( '<STR_LIT>' , None ) <EOL> pinyin", "gt": "= '<STR_LIT>' . join ( [ '<STR_LIT>' . join ( i ) for i in pypinyin . pinyin ( name , style = pypinyin . NORMAL ) ] )"}
{"input": "import json <EOL> import os <EOL> import django <EOL> import pypinyin <EOL> from django . core . management import BaseCommand <EOL> from django . db import connection <EOL> from application import dispatch <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Area <EOL> area_code_list = [ ] <EOL> def area_list ( code_list , pcode = None , depth = <NUM_LIT> ) : <EOL> for code_dict in code_list : <EOL> code = code_dict . get ( '<STR_LIT>' , None ) <EOL> name = code_dict . get ( '<STR_LIT>' , None ) <EOL> children = code_dict . get ( '<STR_LIT>' , None ) <EOL> pinyin = '<STR_LIT>' . join ( [ '<STR_LIT>' . join ( i ) for i in pypinyin . pinyin ( name , style = pypinyin . NORMAL ) ] ) <EOL> area_code_list . append ( <EOL> { <EOL> \"<STR_LIT>\" : name , <EOL> \"<STR_LIT>\" : code , <EOL> \"<STR_LIT>\" : depth , <EOL> \"<STR_LIT>\" : pinyin , <EOL> \"<STR_LIT>\" : pinyin [ <NUM_LIT> ] . upper ( ) if pinyin else \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : pcode , <EOL> } <EOL> ) <EOL> if children : <EOL> area_list ( code_list = children , pcode = code , depth = depth + <NUM_LIT> ) <EOL> def main ( ) : <EOL> with", "gt": "open ( os . path . join ( BASE_DIR , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) , '<STR_LIT>' , encoding = \"<STR_LIT>\" ) as load_f :"}
{"input": "import json <EOL> import os <EOL> import django <EOL> import pypinyin <EOL> from django . core . management import BaseCommand <EOL> from django . db import connection <EOL> from application import dispatch <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Area <EOL> area_code_list = [ ] <EOL> def area_list ( code_list , pcode = None , depth = <NUM_LIT> ) : <EOL> for code_dict in code_list : <EOL> code = code_dict . get ( '<STR_LIT>' , None ) <EOL> name = code_dict . get ( '<STR_LIT>' , None ) <EOL> children = code_dict . get ( '<STR_LIT>' , None ) <EOL> pinyin = '<STR_LIT>' . join ( [ '<STR_LIT>' . join ( i ) for i in pypinyin . pinyin ( name , style = pypinyin . NORMAL ) ] ) <EOL> area_code_list . append ( <EOL> { <EOL> \"<STR_LIT>\" : name , <EOL> \"<STR_LIT>\" : code , <EOL> \"<STR_LIT>\" : depth , <EOL> \"<STR_LIT>\" : pinyin , <EOL> \"<STR_LIT>\" : pinyin [ <NUM_LIT> ] . upper ( ) if pinyin else \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : pcode , <EOL> } <EOL> ) <EOL> if children : <EOL> area_list ( code_list = children , pcode = code , depth = depth + <NUM_LIT> ) <EOL> def main ( ) : <EOL> with open ( os . path . join ( BASE_DIR , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) , '<STR_LIT>' , encoding = \"<STR_LIT>\" ) as load_f : <EOL> code_list = json . load ( load_f ) <EOL> area_list ( code_list ) <EOL> if", "gt": "Area . objects . count ( ) == <NUM_LIT> :"}
{"input": "import json <EOL> import os <EOL> import django <EOL> import pypinyin <EOL> from django . core . management import BaseCommand <EOL> from django . db import connection <EOL> from application import dispatch <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from application . settings import BASE_DIR <EOL> from dvadmin . system . models import Area <EOL> area_code_list = [ ] <EOL> def area_list ( code_list , pcode = None , depth = <NUM_LIT> ) : <EOL> for code_dict in code_list : <EOL> code = code_dict . get ( '<STR_LIT>' , None ) <EOL> name = code_dict . get ( '<STR_LIT>' , None ) <EOL> children = code_dict . get ( '<STR_LIT>' , None ) <EOL> pinyin = '<STR_LIT>' . join ( [ '<STR_LIT>' . join ( i ) for i in pypinyin . pinyin ( name , style = pypinyin . NORMAL ) ] ) <EOL> area_code_list . append ( <EOL> { <EOL> \"<STR_LIT>\" : name , <EOL> \"<STR_LIT>\" : code , <EOL> \"<STR_LIT>\" : depth , <EOL> \"<STR_LIT>\" : pinyin , <EOL> \"<STR_LIT>\" : pinyin [ <NUM_LIT> ] . upper ( ) if pinyin else \"<STR_LIT>\" , <EOL> \"<STR_LIT>\" : pcode , <EOL> } <EOL> ) <EOL> if children : <EOL> area_list ( code_list = children , pcode = code , depth = depth + <NUM_LIT> ) <EOL> def main ( ) : <EOL> with open ( os . path . join ( BASE_DIR , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) , '<STR_LIT>' , encoding = \"<STR_LIT>\" ) as load_f : <EOL> code_list = json . load ( load_f ) <EOL> area_list ( code_list ) <EOL> if Area . objects . count ( ) == <NUM_LIT> : <EOL> Area . objects . bulk_create ( [ Area ( ** ele ) for ele in area_code_list ] ) <EOL> else : <EOL> for ele in area_code_list : <EOL> code", "gt": "= ele . pop ( \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def", "gt": "is_tenants_mode ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def", "gt": "_get_all_dictionary ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for", "gt": "instance in queryset :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\"", "gt": ": instance . id ,"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary", "gt": ". objects . filter ( parent = instance . id )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> .", "gt": "values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def", "gt": "_get_all_system_config ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> .", "gt": "values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> .", "gt": "order_by ( \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value", "gt": "= system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if", "gt": "value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value", "gt": "= value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if", "gt": "value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for", "gt": "ele in value :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\"", "gt": ": ele . get ( '<STR_LIT>' ) ,"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\"", "gt": ": ele . get ( '<STR_LIT>' ) ,"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value", "gt": ". sort ( key = lambda s : s [ \"<STR_LIT>\" ] )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data", "gt": "[ f\"<STR_LIT>\" ] = value"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if", "gt": "is_tenants_mode ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings", "gt": ". DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if", "gt": "is_tenants_mode ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings", "gt": ". SYSTEM_CONFIG = _get_all_system_config ( )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except", "gt": "Exception as e :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def", "gt": "refresh_dictionary ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for", "gt": "tenant in get_tenant_model ( ) . objects . filter ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with", "gt": "tenant_context ( tenant ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for", "gt": "tenant in get_tenant_model ( ) . objects . filter ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with", "gt": "tenant_context ( tenant ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings", "gt": ". SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if", "gt": "is_tenants_mode ( ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config", "gt": "= settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ]"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config", "gt": "= settings . DICTIONARY_CONFIG"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return", "gt": "dictionary_config or { }"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def", "gt": "get_dictionary_values ( key , schema_name = None ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config", "gt": "= get_dictionary_config ( schema_name )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def", "gt": "get_dictionary_label ( key , name , schema_name = None ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for", "gt": "ele in children :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return", "gt": "ele . get ( \"<STR_LIT>\" )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return ele . get ( \"<STR_LIT>\" ) <EOL> return \"<STR_LIT>\" <EOL> def get_system_config ( schema_name = None ) : <EOL> if not settings . SYSTEM_CONFIG : <EOL> refresh_system_config ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . SYSTEM_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config", "gt": "= settings . SYSTEM_CONFIG"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return ele . get ( \"<STR_LIT>\" ) <EOL> return \"<STR_LIT>\" <EOL> def get_system_config ( schema_name = None ) : <EOL> if not settings . SYSTEM_CONFIG : <EOL> refresh_system_config ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . SYSTEM_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . SYSTEM_CONFIG <EOL> return dictionary_config or { } <EOL> def get_system_config_values ( key , schema_name = None ) : <EOL> system_config", "gt": "= get_system_config ( schema_name )"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return ele . get ( \"<STR_LIT>\" ) <EOL> return \"<STR_LIT>\" <EOL> def get_system_config ( schema_name = None ) : <EOL> if not settings . SYSTEM_CONFIG : <EOL> refresh_system_config ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . SYSTEM_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . SYSTEM_CONFIG <EOL> return dictionary_config or { } <EOL> def get_system_config_values ( key , schema_name = None ) : <EOL> system_config = get_system_config ( schema_name ) <EOL> return system_config . get ( key ) <EOL> def", "gt": "get_system_config_label ( key , name , schema_name = None ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return ele . get ( \"<STR_LIT>\" ) <EOL> return \"<STR_LIT>\" <EOL> def get_system_config ( schema_name = None ) : <EOL> if not settings . SYSTEM_CONFIG : <EOL> refresh_system_config ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . SYSTEM_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . SYSTEM_CONFIG <EOL> return dictionary_config or { } <EOL> def get_system_config_values ( key , schema_name = None ) : <EOL> system_config = get_system_config ( schema_name ) <EOL> return system_config . get ( key ) <EOL> def get_system_config_label ( key , name , schema_name = None ) : <EOL> children = get_system_config_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if", "gt": "ele . get ( \"<STR_LIT>\" ) == str ( name ) :"}
{"input": "from django . conf import settings <EOL> from django . db import connection <EOL> def is_tenants_mode ( ) : <EOL> return hasattr ( connection , \"<STR_LIT>\" ) and connection . tenant . schema_name <EOL> def _get_all_dictionary ( ) : <EOL> from dvadmin . system . models import Dictionary <EOL> queryset = Dictionary . objects . filter ( status = True , is_value = False ) <EOL> data = [ ] <EOL> for instance in queryset : <EOL> data . append ( <EOL> { <EOL> \"<STR_LIT>\" : instance . id , <EOL> \"<STR_LIT>\" : instance . value , <EOL> \"<STR_LIT>\" : list ( <EOL> Dictionary . objects . filter ( parent = instance . id ) <EOL> . filter ( status = <NUM_LIT> ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> ) , <EOL> } <EOL> ) <EOL> return { ele . get ( \"<STR_LIT>\" ) : ele for ele in data } <EOL> def _get_all_system_config ( ) : <EOL> data = { } <EOL> from dvadmin . system . models import SystemConfig <EOL> system_config_obj = ( <EOL> SystemConfig . objects . filter ( parent_id__isnull = False ) <EOL> . values ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> . order_by ( \"<STR_LIT>\" ) <EOL> ) <EOL> for system_config in system_config_obj : <EOL> value = system_config . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> value = value [ <NUM_LIT> ] . get ( \"<STR_LIT>\" ) <EOL> if value and system_config . get ( \"<STR_LIT>\" ) == <NUM_LIT> : <EOL> new_value = [ ] <EOL> for ele in value : <EOL> new_value . append ( { <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> \"<STR_LIT>\" : ele . get ( '<STR_LIT>' ) , <EOL> } ) <EOL> new_value . sort ( key = lambda s : s [ \"<STR_LIT>\" ] ) <EOL> value = new_value <EOL> data [ f\"<STR_LIT>\" ] = value <EOL> return data <EOL> def init_dictionary ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def init_system_config ( ) : <EOL> try : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> except Exception as e : <EOL> print ( \"<STR_LIT>\" ) <EOL> return <EOL> def refresh_dictionary ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . DICTIONARY_CONFIG [ connection . tenant . schema_name ] = _get_all_dictionary ( ) <EOL> else : <EOL> settings . DICTIONARY_CONFIG = _get_all_dictionary ( ) <EOL> def refresh_system_config ( ) : <EOL> if is_tenants_mode ( ) : <EOL> from django_tenants . utils import tenant_context , get_tenant_model <EOL> for tenant in get_tenant_model ( ) . objects . filter ( ) : <EOL> with tenant_context ( tenant ) : <EOL> settings . SYSTEM_CONFIG [ connection . tenant . schema_name ] = _get_all_system_config ( ) <EOL> else : <EOL> settings . SYSTEM_CONFIG = _get_all_system_config ( ) <EOL> def get_dictionary_config ( schema_name = None ) : <EOL> if not settings . DICTIONARY_CONFIG : <EOL> refresh_dictionary ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . DICTIONARY_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . DICTIONARY_CONFIG <EOL> return dictionary_config or { } <EOL> def get_dictionary_values ( key , schema_name = None ) : <EOL> dictionary_config = get_dictionary_config ( schema_name ) <EOL> return dictionary_config . get ( key ) <EOL> def get_dictionary_label ( key , name , schema_name = None ) : <EOL> children = get_dictionary_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return ele . get ( \"<STR_LIT>\" ) <EOL> return \"<STR_LIT>\" <EOL> def get_system_config ( schema_name = None ) : <EOL> if not settings . SYSTEM_CONFIG : <EOL> refresh_system_config ( ) <EOL> if is_tenants_mode ( ) : <EOL> dictionary_config = settings . SYSTEM_CONFIG [ schema_name or connection . tenant . schema_name ] <EOL> else : <EOL> dictionary_config = settings . SYSTEM_CONFIG <EOL> return dictionary_config or { } <EOL> def get_system_config_values ( key , schema_name = None ) : <EOL> system_config = get_system_config ( schema_name ) <EOL> return system_config . get ( key ) <EOL> def get_system_config_label ( key , name , schema_name = None ) : <EOL> children = get_system_config_values ( key , schema_name ) or [ ] <EOL> for ele in children : <EOL> if ele . get ( \"<STR_LIT>\" ) == str ( name ) : <EOL> return", "gt": "ele . get ( \"<STR_LIT>\" )"}
