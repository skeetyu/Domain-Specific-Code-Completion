{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def", "gt": "__call__ ( self ) -> None :"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self", "gt": ". list_all ( )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def", "gt": "download ( self ) :"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions", "gt": "= self . read_registry ( )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension", "gt": "= extensions . get ( self . name )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise", "gt": "cappa . Exit ( msg , code = <NUM_LIT> )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url", "gt": "= extension . get ( \"<STR_LIT>\" )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response", "gt": "= httpx . get ( download_url , follow_redirects = True )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file", "gt": "= self . resolve_filepath ( )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file", "gt": ". parent . mkdir ( parents = True , exist_ok = True )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file", "gt": ". write_text ( response . text )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle", "gt": "= extension . get ( \"<STR_LIT>\" ) ,"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if", "gt": "self . output :"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return", "gt": "self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\""}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if", "gt": "self . output is None and pyproject_path :"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config", "gt": "= read_falco_config ( pyproject_path = pyproject_path )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config", "gt": "= Htmx . read_from_config ( falco_config = falco_config )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return", "gt": "htmx_filepath . parent / f\"<STR_LIT>\""}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return htmx_filepath . parent / f\"<STR_LIT>\" <EOL> return Path ( f\"<STR_LIT>\" ) <EOL> def", "gt": "list_all ( self ) :"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return htmx_filepath . parent / f\"<STR_LIT>\" <EOL> return Path ( f\"<STR_LIT>\" ) <EOL> def list_all ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> table = Table ( <EOL> title = \"<STR_LIT>\" , <EOL> caption = \"<STR_LIT>\" , <EOL> show_lines = True , <EOL> ) <EOL> table", "gt": ". add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return htmx_filepath . parent / f\"<STR_LIT>\" <EOL> return Path ( f\"<STR_LIT>\" ) <EOL> def list_all ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> table = Table ( <EOL> title = \"<STR_LIT>\" , <EOL> caption = \"<STR_LIT>\" , <EOL> show_lines = True , <EOL> ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> table", "gt": ". add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return htmx_filepath . parent / f\"<STR_LIT>\" <EOL> return Path ( f\"<STR_LIT>\" ) <EOL> def list_all ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> table = Table ( <EOL> title = \"<STR_LIT>\" , <EOL> caption = \"<STR_LIT>\" , <EOL> show_lines = True , <EOL> ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> for", "gt": "name , metadata in extensions . items ( ) :"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return htmx_filepath . parent / f\"<STR_LIT>\" <EOL> return Path ( f\"<STR_LIT>\" ) <EOL> def list_all ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> table = Table ( <EOL> title = \"<STR_LIT>\" , <EOL> caption = \"<STR_LIT>\" , <EOL> show_lines = True , <EOL> ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> for name , metadata in extensions . items ( ) : <EOL> table . add_row ( name , metadata . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) <EOL> console = Console ( ) <EOL> console", "gt": ". print ( table )"}
{"input": "from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . console import Console <EOL> from rich . panel import Panel <EOL> from rich . table import Table <EOL> from . htmx import Htmx <EOL> REGISTRY_URL = \"<STR_LIT>\" <EOL> @ cappa . command ( help = \"<STR_LIT>\" , name = \"<STR_LIT>\" ) <EOL> class HtmxExtension : <EOL> name : Annotated [ <EOL> str | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> output : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( <EOL> default = None , <EOL> help = \"<STR_LIT>\" , <EOL> short = \"<STR_LIT>\" , <EOL> long = \"<STR_LIT>\" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self ) -> None : <EOL> if self . name : <EOL> self . download ( ) <EOL> else : <EOL> self . list_all ( ) <EOL> def download ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> extension = extensions . get ( self . name ) <EOL> if not extension : <EOL> msg = f\"<STR_LIT>\" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> with simple_progress ( f\"<STR_LIT>\" ) : <EOL> download_url = extension . get ( \"<STR_LIT>\" ) <EOL> response = httpx . get ( download_url , follow_redirects = True ) <EOL> output_file = self . resolve_filepath ( ) <EOL> output_file . parent . mkdir ( parents = True , exist_ok = True ) <EOL> output_file . write_text ( response . text ) <EOL> rich_print ( <EOL> Panel ( <EOL> f\"<STR_LIT>\" , <EOL> subtitle = extension . get ( \"<STR_LIT>\" ) , <EOL> ) <EOL> ) <EOL> def resolve_filepath ( self ) -> Path : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> except cappa . Exit : <EOL> pyproject_path = None <EOL> if self . output : <EOL> return self . output if self . output . name . endswith ( \"<STR_LIT>\" ) else self . output / f\"<STR_LIT>\" <EOL> if self . output is None and pyproject_path : <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) <EOL> htmx_config = Htmx . read_from_config ( falco_config = falco_config ) <EOL> htmx_filepath , _ = htmx_config <EOL> return htmx_filepath . parent / f\"<STR_LIT>\" <EOL> return Path ( f\"<STR_LIT>\" ) <EOL> def list_all ( self ) : <EOL> extensions = self . read_registry ( ) <EOL> table = Table ( <EOL> title = \"<STR_LIT>\" , <EOL> caption = \"<STR_LIT>\" , <EOL> show_lines = True , <EOL> ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> table . add_column ( \"<STR_LIT>\" , style = \"<STR_LIT>\" ) <EOL> for name , metadata in extensions . items ( ) : <EOL> table . add_row ( name , metadata . get ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) <EOL> console = Console ( ) <EOL> console . print ( table ) <EOL> @ classmethod <EOL> def read_registry ( cls ) : <EOL> with", "gt": "network_request_with_progress ( REGISTRY_URL , \"<STR_LIT>\" ) as response :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def", "gt": "product_list ( request : HttpRequest ) :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products", "gt": "= Product . objects . all ( )"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def", "gt": "product_detail ( request : HttpRequest , pk : int ) :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def", "gt": "product_create ( request : HttpRequest ) :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def product_create ( request : HttpRequest ) : <EOL> form", "gt": "= ProductForm ( request . POST or None )"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def product_create ( request : HttpRequest ) : <EOL> form = ProductForm ( request . POST or None ) <EOL> if", "gt": "request . method == \"<STR_LIT>\" and form . is_valid ( ) :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def product_create ( request : HttpRequest ) : <EOL> form = ProductForm ( request . POST or None ) <EOL> if request . method == \"<STR_LIT>\" and form . is_valid ( ) : <EOL> form . save ( ) <EOL> return", "gt": "redirect ( \"<STR_LIT>\" )"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def product_create ( request : HttpRequest ) : <EOL> form = ProductForm ( request . POST or None ) <EOL> if request . method == \"<STR_LIT>\" and form . is_valid ( ) : <EOL> form . save ( ) <EOL> return redirect ( \"<STR_LIT>\" ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : form } , <EOL> ) <EOL> def", "gt": "product_update ( request : HttpRequest , pk : int ) :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def product_create ( request : HttpRequest ) : <EOL> form = ProductForm ( request . POST or None ) <EOL> if request . method == \"<STR_LIT>\" and form . is_valid ( ) : <EOL> form . save ( ) <EOL> return redirect ( \"<STR_LIT>\" ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : form } , <EOL> ) <EOL> def product_update ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> form = ProductForm ( request . POST or None , instance = product ) <EOL> if request . method == \"<STR_LIT>\" and form . is_valid ( ) : <EOL> form . save ( ) <EOL> return redirect ( \"<STR_LIT>\" , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product , \"<STR_LIT>\" : form } , <EOL> ) <EOL> @ require_http_methods ( [ \"<STR_LIT>\" ] ) <EOL> def", "gt": "product_delete ( _ : HttpRequest , pk : int ) :"}
{"input": "from demo . core . utils import paginate_queryset <EOL> from django . http import HttpRequest <EOL> from django . http import HttpResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . shortcuts import redirect <EOL> from django . template . response import TemplateResponse <EOL> from django . views . decorators . http import require_http_methods <EOL> from . forms import ProductForm <EOL> from . models import Product <EOL> def product_list ( request : HttpRequest ) : <EOL> products = Product . objects . all ( ) <EOL> template_name = \"<STR_LIT>\" if request . htmx else \"<STR_LIT>\" <EOL> return TemplateResponse ( <EOL> request , <EOL> template_name , <EOL> context = { \"<STR_LIT>\" : paginate_queryset ( request , products ) } , <EOL> ) <EOL> def product_detail ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product } , <EOL> ) <EOL> def product_create ( request : HttpRequest ) : <EOL> form = ProductForm ( request . POST or None ) <EOL> if request . method == \"<STR_LIT>\" and form . is_valid ( ) : <EOL> form . save ( ) <EOL> return redirect ( \"<STR_LIT>\" ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : form } , <EOL> ) <EOL> def product_update ( request : HttpRequest , pk : int ) : <EOL> product = get_object_or_404 ( Product . objects , pk = pk ) <EOL> form = ProductForm ( request . POST or None , instance = product ) <EOL> if request . method == \"<STR_LIT>\" and form . is_valid ( ) : <EOL> form . save ( ) <EOL> return redirect ( \"<STR_LIT>\" , pk = pk ) <EOL> return TemplateResponse ( <EOL> request , <EOL> \"<STR_LIT>\" , <EOL> context = { \"<STR_LIT>\" : product , \"<STR_LIT>\" : form } , <EOL> ) <EOL> @ require_http_methods ( [ \"<STR_LIT>\" ] ) <EOL> def product_delete ( _ : HttpRequest , pk : int ) : <EOL> Product . objects . filter ( pk = pk ) . delete ( ) <EOL> return", "gt": "HttpResponse ( \"<STR_LIT>\" )"}
{"input": "import cappa <EOL> from falco . commands import Htmx <EOL> from falco . commands import HtmxExtension <EOL> from falco . commands import InstallCrudUtils <EOL> from falco . commands import ModelCRUD <EOL> from falco . commands import ResetMigrations <EOL> from falco . commands import RmMigrations <EOL> from falco . commands import StartApp <EOL> from falco . commands import StartProject <EOL> from falco . commands import SyncDotenv <EOL> from falco . commands import Work <EOL> @ cappa . command ( <EOL> help = \"<STR_LIT>\" , <EOL> ) <EOL> class Falco : <EOL> subcommand : cappa . Subcommands [ <EOL> StartProject <EOL> | StartApp <EOL> | ModelCRUD <EOL> | InstallCrudUtils <EOL> | Htmx <EOL> | HtmxExtension <EOL> | Work <EOL> | SyncDotenv <EOL> | RmMigrations <EOL> | ResetMigrations <EOL> ] <EOL> def main ( ) : <EOL> cappa . invoke ( Falco ) <EOL> if", "gt": "__name__ == \"<STR_LIT>\" :"}
