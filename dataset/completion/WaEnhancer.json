{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog", "gt": "= Unobfuscator . loadMaterialAlertDialog ( loader ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass", "gt": "= getAlertDialog . getReturnType ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod", "gt": "= ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ; setMessageMethod", "gt": "= ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ; setMessageMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; var buttons = ReflectionUtils . findAllMethodsUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; setNegativeButtonMethod = buttons [ <NUM_LIT> ] ; setPositiveButtonMethod = buttons [ <NUM_LIT> ] ; isAvailable = true ; } catch ( Throwable e ) { isAvailable = false ; XposedBridge . log ( e ) ; } } public AlertDialogWpp ( Context context ) { mContext = context ; if ( isSystemDialog ( ) ) { mAlertDialog = new AlertDialog . Builder ( context ) ; return ; } try { mAlertDialogWpp = getAlertDialog . invoke ( null , context ) ; setMessage ( null ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } } public Context getContext ( ) { return mContext ; } public static boolean isSystemDialog ( ) { return ! isAvailable ; } public AlertDialogWpp setTitle ( String title ) { if ( isSystemDialog ( ) ) { mAlertDialog . setTitle ( title ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , title ) ; return this ; } public AlertDialogWpp setMessage ( String message ) { if ( isSystemDialog ( ) ) { mAlertDialog . setMessage ( message ) ; return this ; } try { setMessageMethod . invoke ( mAlertDialogWpp , message ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setItems ( CharSequence [ ] items , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setItems ( items , listener ) ; return this ; } try { setItemsMethod", "gt": ". invoke ( mAlertDialogWpp , listener , items ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ; setMessageMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; var buttons = ReflectionUtils . findAllMethodsUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; setNegativeButtonMethod = buttons [ <NUM_LIT> ] ; setPositiveButtonMethod = buttons [ <NUM_LIT> ] ; isAvailable = true ; } catch ( Throwable e ) { isAvailable = false ; XposedBridge . log ( e ) ; } } public AlertDialogWpp ( Context context ) { mContext = context ; if ( isSystemDialog ( ) ) { mAlertDialog = new AlertDialog . Builder ( context ) ; return ; } try { mAlertDialogWpp = getAlertDialog . invoke ( null , context ) ; setMessage ( null ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } } public Context getContext ( ) { return mContext ; } public static boolean isSystemDialog ( ) { return ! isAvailable ; } public AlertDialogWpp setTitle ( String title ) { if ( isSystemDialog ( ) ) { mAlertDialog . setTitle ( title ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , title ) ; return this ; } public AlertDialogWpp setMessage ( String message ) { if ( isSystemDialog ( ) ) { mAlertDialog . setMessage ( message ) ; return this ; } try { setMessageMethod . invoke ( mAlertDialogWpp , message ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setItems ( CharSequence [ ] items , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setItems ( items , listener ) ; return this ; } try { setItemsMethod . invoke ( mAlertDialogWpp , listener , items ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setNegativeButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setNegativeButton ( text , listener ) ; return this ; } try { setNegativeButtonMethod", "gt": ". invoke ( mAlertDialogWpp , listener , text ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ; setMessageMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; var buttons = ReflectionUtils . findAllMethodsUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; setNegativeButtonMethod = buttons [ <NUM_LIT> ] ; setPositiveButtonMethod = buttons [ <NUM_LIT> ] ; isAvailable = true ; } catch ( Throwable e ) { isAvailable = false ; XposedBridge . log ( e ) ; } } public AlertDialogWpp ( Context context ) { mContext = context ; if ( isSystemDialog ( ) ) { mAlertDialog = new AlertDialog . Builder ( context ) ; return ; } try { mAlertDialogWpp = getAlertDialog . invoke ( null , context ) ; setMessage ( null ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } } public Context getContext ( ) { return mContext ; } public static boolean isSystemDialog ( ) { return ! isAvailable ; } public AlertDialogWpp setTitle ( String title ) { if ( isSystemDialog ( ) ) { mAlertDialog . setTitle ( title ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , title ) ; return this ; } public AlertDialogWpp setMessage ( String message ) { if ( isSystemDialog ( ) ) { mAlertDialog . setMessage ( message ) ; return this ; } try { setMessageMethod . invoke ( mAlertDialogWpp , message ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setItems ( CharSequence [ ] items , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setItems ( items , listener ) ; return this ; } try { setItemsMethod . invoke ( mAlertDialogWpp , listener , items ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setNegativeButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setNegativeButton ( text , listener ) ; return this ; } try { setNegativeButtonMethod . invoke ( mAlertDialogWpp , listener , text ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setPositiveButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setPositiveButton ( text , listener ) ; return this ; } try { setPositiveButtonMethod", "gt": ". invoke ( mAlertDialogWpp , listener , text ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ; setMessageMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; var buttons = ReflectionUtils . findAllMethodsUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; setNegativeButtonMethod = buttons [ <NUM_LIT> ] ; setPositiveButtonMethod = buttons [ <NUM_LIT> ] ; isAvailable = true ; } catch ( Throwable e ) { isAvailable = false ; XposedBridge . log ( e ) ; } } public AlertDialogWpp ( Context context ) { mContext = context ; if ( isSystemDialog ( ) ) { mAlertDialog = new AlertDialog . Builder ( context ) ; return ; } try { mAlertDialogWpp = getAlertDialog . invoke ( null , context ) ; setMessage ( null ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } } public Context getContext ( ) { return mContext ; } public static boolean isSystemDialog ( ) { return ! isAvailable ; } public AlertDialogWpp setTitle ( String title ) { if ( isSystemDialog ( ) ) { mAlertDialog . setTitle ( title ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , title ) ; return this ; } public AlertDialogWpp setMessage ( String message ) { if ( isSystemDialog ( ) ) { mAlertDialog . setMessage ( message ) ; return this ; } try { setMessageMethod . invoke ( mAlertDialogWpp , message ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setItems ( CharSequence [ ] items , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setItems ( items , listener ) ; return this ; } try { setItemsMethod . invoke ( mAlertDialogWpp , listener , items ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setNegativeButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setNegativeButton ( text , listener ) ; return this ; } try { setNegativeButtonMethod . invoke ( mAlertDialogWpp , listener , text ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setPositiveButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setPositiveButton ( text , listener ) ; return this ; } try { setPositiveButtonMethod . invoke ( mAlertDialogWpp , listener , text ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setView ( View view ) { if ( isSystemDialog ( ) ) { mAlertDialog . setView ( view ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , view ) ; return this ; } public Dialog create ( ) { if ( mCreate != null ) return mCreate ; if ( isSystemDialog ( ) ) { mCreate = mAlertDialog . create ( ) ; } else { mCreate", "gt": "= ( Dialog ) XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . core . components ; import android . app . AlertDialog ; import android . app . Dialog ; import android . content . Context ; import android . content . DialogInterface ; import android . view . View ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Method ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class AlertDialogWpp { private static Method getAlertDialog ; private static Class < ? > alertDialogClass ; private static Method setItemsMethod ; private static boolean isAvailable ; private static Method setMessageMethod ; private static Method setNegativeButtonMethod ; private static Method setPositiveButtonMethod ; private final Context mContext ; private AlertDialog . Builder mAlertDialog ; private Object mAlertDialogWpp ; private Dialog mCreate ; public static void initDialog ( ClassLoader loader ) { try { getAlertDialog = Unobfuscator . loadMaterialAlertDialog ( loader ) ; alertDialogClass = getAlertDialog . getReturnType ( ) ; setItemsMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence [ ] . class ) ) ; setMessageMethod = ReflectionUtils . findMethodUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; var buttons = ReflectionUtils . findAllMethodsUsingFilter ( alertDialogClass , method -> method . getParameterCount ( ) == <NUM_LIT> && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( DialogInterface . OnClickListener . class ) && method . getParameterTypes ( ) [ <NUM_LIT> ] . equals ( CharSequence . class ) ) ; setNegativeButtonMethod = buttons [ <NUM_LIT> ] ; setPositiveButtonMethod = buttons [ <NUM_LIT> ] ; isAvailable = true ; } catch ( Throwable e ) { isAvailable = false ; XposedBridge . log ( e ) ; } } public AlertDialogWpp ( Context context ) { mContext = context ; if ( isSystemDialog ( ) ) { mAlertDialog = new AlertDialog . Builder ( context ) ; return ; } try { mAlertDialogWpp = getAlertDialog . invoke ( null , context ) ; setMessage ( null ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } } public Context getContext ( ) { return mContext ; } public static boolean isSystemDialog ( ) { return ! isAvailable ; } public AlertDialogWpp setTitle ( String title ) { if ( isSystemDialog ( ) ) { mAlertDialog . setTitle ( title ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , title ) ; return this ; } public AlertDialogWpp setMessage ( String message ) { if ( isSystemDialog ( ) ) { mAlertDialog . setMessage ( message ) ; return this ; } try { setMessageMethod . invoke ( mAlertDialogWpp , message ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setItems ( CharSequence [ ] items , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setItems ( items , listener ) ; return this ; } try { setItemsMethod . invoke ( mAlertDialogWpp , listener , items ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setNegativeButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setNegativeButton ( text , listener ) ; return this ; } try { setNegativeButtonMethod . invoke ( mAlertDialogWpp , listener , text ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setPositiveButton ( CharSequence text , DialogInterface . OnClickListener listener ) { if ( isSystemDialog ( ) ) { mAlertDialog . setPositiveButton ( text , listener ) ; return this ; } try { setPositiveButtonMethod . invoke ( mAlertDialogWpp , listener , text ) ; } catch ( Exception e ) { XposedBridge . log ( e ) ; } return this ; } public AlertDialogWpp setView ( View view ) { if ( isSystemDialog ( ) ) { mAlertDialog . setView ( view ) ; return this ; } XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" , view ) ; return this ; } public Dialog create ( ) { if ( mCreate != null ) return mCreate ; if ( isSystemDialog ( ) ) { mCreate = mAlertDialog . create ( ) ; } else { mCreate = ( Dialog ) XposedHelpers . callMethod ( mAlertDialogWpp , \"<STR_LIT>\" ) ; } return mCreate ; } public void dismiss ( ) { if", "gt": "( mCreate == null ) return ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug", "gt": "( \"<STR_LIT>\" + mediaClass . getName ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var", "gt": "menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug", "gt": "( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var", "gt": "menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug", "gt": "( \"<STR_LIT>\" + menuField . getName ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class", "gt": "< ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var", "gt": "listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var", "gt": "clazz = param . thisObject . getClass ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var clazz = param . thisObject . getClass ( ) ; Field", "gt": "subMenuField = ReflectionUtils . findFieldUsingFilter ( clazz , f -> f . getType ( ) == Object . class && clazzSubMenu . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var clazz = param . thisObject . getClass ( ) ; Field subMenuField = ReflectionUtils . findFieldUsingFilter ( clazz , f -> f . getType ( ) == Object . class && clazzSubMenu . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; Object", "gt": "subMenu = ReflectionUtils . getField ( subMenuField , param . thisObject ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var clazz = param . thisObject . getClass ( ) ; Field subMenuField = ReflectionUtils . findFieldUsingFilter ( clazz , f -> f . getType ( ) == Object . class && clazzSubMenu . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; Object subMenu = ReflectionUtils . getField ( subMenuField , param . thisObject ) ; menu = ( Menu ) ReflectionUtils . getField ( menuField , subMenu ) ; var", "gt": "fragment = ReflectionUtils . findFieldUsingFilter ( clazz , f -> StatusPlaybackBaseFragmentClass . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var clazz = param . thisObject . getClass ( ) ; Field subMenuField = ReflectionUtils . findFieldUsingFilter ( clazz , f -> f . getType ( ) == Object . class && clazzSubMenu . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; Object subMenu = ReflectionUtils . getField ( subMenuField , param . thisObject ) ; menu = ( Menu ) ReflectionUtils . getField ( menuField , subMenu ) ; var fragment = ReflectionUtils . findFieldUsingFilter ( clazz , f -> StatusPlaybackBaseFragmentClass . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; if ( fragment == null ) { logDebug ( \"<STR_LIT>\" ) ; return ; } fragmentInstance", "gt": "= fragment . get ( param . thisObject ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var clazz = param . thisObject . getClass ( ) ; Field subMenuField = ReflectionUtils . findFieldUsingFilter ( clazz , f -> f . getType ( ) == Object . class && clazzSubMenu . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; Object subMenu = ReflectionUtils . getField ( subMenuField , param . thisObject ) ; menu = ( Menu ) ReflectionUtils . getField ( menuField , subMenu ) ; var fragment = ReflectionUtils . findFieldUsingFilter ( clazz , f -> StatusPlaybackBaseFragmentClass . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; if ( fragment == null ) { logDebug ( \"<STR_LIT>\" ) ; return ; } fragmentInstance = fragment . get ( param . thisObject ) ; } var index = ( int ) XposedHelpers . getObjectField ( fragmentInstance , \"<STR_LIT>\" ) ; var", "gt": "listStatus = ( List ) listStatusField . get ( fragmentInstance ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import android . view . Menu ; import android . view . MenuItem ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . components . FMessageWpp ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . ReflectionUtils ; import java . lang . reflect . Field ; import java . util . HashSet ; import java . util . List ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; import de . robv . android . xposed . XposedHelpers ; public class MenuStatus extends Feature { public static HashSet < MenuItemStatus > menuStatuses = new HashSet < > ( ) ; public MenuStatus ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { super ( classLoader , preferences ) ; } @ Override public void doHook ( ) throws Throwable { var mediaClass = Unobfuscator . loadStatusDownloadMediaClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + mediaClass . getName ( ) ) ; var menuStatusMethod = Unobfuscator . loadMenuStatusMethod ( classLoader ) ; logDebug ( \"<STR_LIT>\" + menuStatusMethod . getName ( ) ) ; var fieldFile = Unobfuscator . loadStatusDownloadFileField ( classLoader ) ; logDebug ( \"<STR_LIT>\" + fieldFile . getName ( ) ) ; var clazzSubMenu = Unobfuscator . loadStatusDownloadSubMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzSubMenu . getName ( ) ) ; var clazzMenu = Unobfuscator . loadStatusDownloadMenuClass ( classLoader ) ; logDebug ( \"<STR_LIT>\" + clazzMenu . getName ( ) ) ; var menuField = Unobfuscator . getFieldByType ( clazzSubMenu , clazzMenu ) ; logDebug ( \"<STR_LIT>\" + menuField . getName ( ) ) ; Class < ? > StatusPlaybackBaseFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; Class < ? > StatusPlaybackContactFragmentClass = classLoader . loadClass ( \"<STR_LIT>\" ) ; var listStatusField = ReflectionUtils . getFieldsByExtendType ( StatusPlaybackContactFragmentClass , List . class ) . get ( <NUM_LIT> ) ; XposedBridge . hookMethod ( menuStatusMethod , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { Object fragmentInstance ; Menu menu ; if ( param . args [ <NUM_LIT> ] instanceof Menu ) { menu = ( Menu ) param . args [ <NUM_LIT> ] ; fragmentInstance = param . thisObject ; } else { var clazz = param . thisObject . getClass ( ) ; Field subMenuField = ReflectionUtils . findFieldUsingFilter ( clazz , f -> f . getType ( ) == Object . class && clazzSubMenu . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; Object subMenu = ReflectionUtils . getField ( subMenuField , param . thisObject ) ; menu = ( Menu ) ReflectionUtils . getField ( menuField , subMenu ) ; var fragment = ReflectionUtils . findFieldUsingFilter ( clazz , f -> StatusPlaybackBaseFragmentClass . isInstance ( ReflectionUtils . getField ( f , param . thisObject ) ) ) ; if ( fragment == null ) { logDebug ( \"<STR_LIT>\" ) ; return ; } fragmentInstance = fragment . get ( param . thisObject ) ; } var index = ( int ) XposedHelpers . getObjectField ( fragmentInstance , \"<STR_LIT>\" ) ; var listStatus = ( List ) listStatusField . get ( fragmentInstance ) ; var fMessage = new FMessageWpp ( listStatus . get ( index ) ) ; for ( MenuItemStatus menuStatus : menuStatuses ) { var menuItem = menuStatus . addMenu ( menu , fMessage ) ; if", "gt": "( menuItem == null ) continue ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . widget . FrameLayout ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . adapter . IGStatusAdapter ; public class IGStatusView extends FrameLayout { public HorizontalListView mStatusListView ; public IGStatusAdapter mStatusAdapter ; public IGStatusView ( @ NonNull Context context ) { super ( context ) ; init ( context ) ; } private void init ( Context context ) { mStatusListView", "gt": "= new HorizontalListView ( context ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . widget . FrameLayout ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . adapter . IGStatusAdapter ; public class IGStatusView extends FrameLayout { public HorizontalListView mStatusListView ; public IGStatusAdapter mStatusAdapter ; public IGStatusView ( @ NonNull Context context ) { super ( context ) ; init ( context ) ; } private void init ( Context context ) { mStatusListView = new HorizontalListView ( context ) ; var", "gt": "layoutParams = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . WRAP_CONTENT ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . widget . FrameLayout ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . adapter . IGStatusAdapter ; public class IGStatusView extends FrameLayout { public HorizontalListView mStatusListView ; public IGStatusAdapter mStatusAdapter ; public IGStatusView ( @ NonNull Context context ) { super ( context ) ; init ( context ) ; } private void init ( Context context ) { mStatusListView = new HorizontalListView ( context ) ; var layoutParams = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . WRAP_CONTENT ) ; mStatusListView . setLayoutParams ( layoutParams ) ; addView ( mStatusListView ) ; } @ Override public void setTranslationY ( float f ) { if", "gt": "( this . getHeight ( ) > <NUM_LIT> ) {"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . widget . FrameLayout ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . adapter . IGStatusAdapter ; public class IGStatusView extends FrameLayout { public HorizontalListView mStatusListView ; public IGStatusAdapter mStatusAdapter ; public IGStatusView ( @ NonNull Context context ) { super ( context ) ; init ( context ) ; } private void init ( Context context ) { mStatusListView = new HorizontalListView ( context ) ; var layoutParams = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . WRAP_CONTENT ) ; mStatusListView . setLayoutParams ( layoutParams ) ; addView ( mStatusListView ) ; } @ Override public void setTranslationY ( float f ) { if ( this . getHeight ( ) > <NUM_LIT> ) { int v = f > ( ( float ) this . getHeight ( ) ) ? GONE : VISIBLE ; if ( v == VISIBLE ) { super . setTranslationY ( f ) ; } this . setVisibility ( v ) ; } } public void updateList ( ) { post ( ( ) -> { if", "gt": "( mStatusAdapter == null ) return ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . HashMap ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ShareLimit extends Feature { public ShareLimit ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } public void doHook ( ) throws Exception { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var shareLimitMethod = Unobfuscator . loadShareLimitMethod ( classLoader ) ; logDebug", "gt": "( Unobfuscator . getMethodDescriptor ( shareLimitMethod ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . HashMap ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ShareLimit extends Feature { public ShareLimit ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } public void doHook ( ) throws Exception { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var shareLimitMethod = Unobfuscator . loadShareLimitMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( shareLimitMethod ) ) ; var", "gt": "shareItemField = Unobfuscator . loadShareMapItemField ( classLoader ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . HashMap ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ShareLimit extends Feature { public ShareLimit ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } public void doHook ( ) throws Exception { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var shareLimitMethod = Unobfuscator . loadShareLimitMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( shareLimitMethod ) ) ; var shareItemField = Unobfuscator . loadShareMapItemField ( classLoader ) ; logDebug ( Unobfuscator . getFieldDescriptor ( shareItemField ) ) ; XposedBridge", "gt": ". hookMethod ( shareLimitMethod , new XC_MethodHook ( ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . HashMap ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ShareLimit extends Feature { public ShareLimit ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } public void doHook ( ) throws Exception { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var shareLimitMethod = Unobfuscator . loadShareLimitMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( shareLimitMethod ) ) ; var shareItemField = Unobfuscator . loadShareMapItemField ( classLoader ) ; logDebug ( Unobfuscator . getFieldDescriptor ( shareItemField ) ) ; XposedBridge . hookMethod ( shareLimitMethod , new XC_MethodHook ( ) { private HashMap < Object , Object > fakeMap ; private HashMap < Object , Object > mMap ; @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { fakeMap", "gt": "= new HashMap < > ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . general ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import java . util . HashMap ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class ShareLimit extends Feature { public ShareLimit ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } public void doHook ( ) throws Exception { if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) ) return ; var shareLimitMethod = Unobfuscator . loadShareLimitMethod ( classLoader ) ; logDebug ( Unobfuscator . getMethodDescriptor ( shareLimitMethod ) ) ; var shareItemField = Unobfuscator . loadShareMapItemField ( classLoader ) ; logDebug ( Unobfuscator . getFieldDescriptor ( shareItemField ) ) ; XposedBridge . hookMethod ( shareLimitMethod , new XC_MethodHook ( ) { private HashMap < Object , Object > fakeMap ; private HashMap < Object , Object > mMap ; @ Override protected void beforeHookedMethod ( MethodHookParam param ) throws Throwable { fakeMap = new HashMap < > ( ) ; mMap = ( HashMap < Object , Object > ) shareItemField . get ( param . thisObject ) ; shareItemField", "gt": ". set ( param . thisObject , fakeMap ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return", "gt": "switch ( animationName . toLowerCase ( ) ) {"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation", "gt": "anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation", "gt": "anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation", "gt": "anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation", "gt": "anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation", "gt": "anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation", "gt": ". setInterpolator ( new BounceInterpolator ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation . setInterpolator ( new BounceInterpolator ( ) ) ; AnimationSet animationSet = new AnimationSet ( true ) ; animationSet . addAnimation ( scaleAnimation ) ; animationSet . setFillAfter ( true ) ; return animationSet ; } private static Animation createShrinkAnimation ( ) { ScaleAnimation", "gt": "anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation . setInterpolator ( new BounceInterpolator ( ) ) ; AnimationSet animationSet = new AnimationSet ( true ) ; animationSet . addAnimation ( scaleAnimation ) ; animationSet . setFillAfter ( true ) ; return animationSet ; } private static Animation createShrinkAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFlipAnimation ( ) { ScaleAnimation", "gt": "anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation . setInterpolator ( new BounceInterpolator ( ) ) ; AnimationSet animationSet = new AnimationSet ( true ) ; animationSet . addAnimation ( scaleAnimation ) ; animationSet . setFillAfter ( true ) ; return animationSet ; } private static Animation createShrinkAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFlipAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; anim . setRepeatCount ( <NUM_LIT> ) ; anim", "gt": ". setRepeatMode ( Animation . REVERSE ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation . setInterpolator ( new BounceInterpolator ( ) ) ; AnimationSet animationSet = new AnimationSet ( true ) ; animationSet . addAnimation ( scaleAnimation ) ; animationSet . setFillAfter ( true ) ; return animationSet ; } private static Animation createShrinkAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFlipAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; anim . setRepeatCount ( <NUM_LIT> ) ; anim . setRepeatMode ( Animation . REVERSE ) ; return anim ; } public static Animation createHyperspaceOutAnimation ( ) { ScaleAnimation", "gt": "firstScaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation . setInterpolator ( new BounceInterpolator ( ) ) ; AnimationSet animationSet = new AnimationSet ( true ) ; animationSet . addAnimation ( scaleAnimation ) ; animationSet . setFillAfter ( true ) ; return animationSet ; } private static Animation createShrinkAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFlipAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; anim . setRepeatCount ( <NUM_LIT> ) ; anim . setRepeatMode ( Animation . REVERSE ) ; return anim ; } public static Animation createHyperspaceOutAnimation ( ) { ScaleAnimation firstScaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; firstScaleAnimation . setDuration ( <NUM_LIT> ) ; firstScaleAnimation . setInterpolator ( new AccelerateDecelerateInterpolator ( ) ) ; firstScaleAnimation . setFillAfter ( false ) ; ScaleAnimation", "gt": "secondScaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . view . animation . AccelerateDecelerateInterpolator ; import android . view . animation . AccelerateInterpolator ; import android . view . animation . AlphaAnimation ; import android . view . animation . Animation ; import android . view . animation . AnimationSet ; import android . view . animation . BounceInterpolator ; import android . view . animation . RotateAnimation ; import android . view . animation . ScaleAnimation ; import android . view . animation . TranslateAnimation ; public class AnimationUtil { public static Animation getAnimation ( String animationName ) { return switch ( animationName . toLowerCase ( ) ) { case \"<STR_LIT>\" -> createFadeInAnimation ( ) ; case \"<STR_LIT>\" -> createFadeOutAnimation ( ) ; case \"<STR_LIT>\" -> createScaleUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideUpAnimation ( ) ; case \"<STR_LIT>\" -> createSlideRightToLeftAnimation ( ) ; case \"<STR_LIT>\" -> createRotateAnimation ( ) ; case \"<STR_LIT>\" -> createBounceAnimation ( ) ; case \"<STR_LIT>\" -> createShrinkAnimation ( ) ; case \"<STR_LIT>\" -> createFlipAnimation ( ) ; case \"<STR_LIT>\" -> createHyperspaceOutAnimation ( ) ; default -> null ; } ; } private static Animation createFadeInAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFadeOutAnimation ( ) { AlphaAnimation anim = new AlphaAnimation ( <NUM_LIT> , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createScaleUpAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideUpAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createSlideRightToLeftAnimation ( ) { TranslateAnimation anim = new TranslateAnimation ( Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> , Animation . RELATIVE_TO_PARENT , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createRotateAnimation ( ) { RotateAnimation anim = new RotateAnimation ( <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } public static Animation createBounceAnimation ( ) { ScaleAnimation scaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; scaleAnimation . setDuration ( <NUM_LIT> ) ; scaleAnimation . setInterpolator ( new BounceInterpolator ( ) ) ; AnimationSet animationSet = new AnimationSet ( true ) ; animationSet . addAnimation ( scaleAnimation ) ; animationSet . setFillAfter ( true ) ; return animationSet ; } private static Animation createShrinkAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; return anim ; } private static Animation createFlipAnimation ( ) { ScaleAnimation anim = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; anim . setDuration ( <NUM_LIT> ) ; anim . setRepeatCount ( <NUM_LIT> ) ; anim . setRepeatMode ( Animation . REVERSE ) ; return anim ; } public static Animation createHyperspaceOutAnimation ( ) { ScaleAnimation firstScaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; firstScaleAnimation . setDuration ( <NUM_LIT> ) ; firstScaleAnimation . setInterpolator ( new AccelerateDecelerateInterpolator ( ) ) ; firstScaleAnimation . setFillAfter ( false ) ; ScaleAnimation secondScaleAnimation = new ScaleAnimation ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; secondScaleAnimation . setDuration ( <NUM_LIT> ) ; RotateAnimation rotateAnimation = new RotateAnimation ( <NUM_LIT> , - <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> , Animation . RELATIVE_TO_SELF , <NUM_LIT> ) ; rotateAnimation . setDuration ( <NUM_LIT> ) ; AnimationSet innerSet = new AnimationSet ( true ) ; innerSet . setInterpolator ( new AccelerateInterpolator ( ) ) ; innerSet . setStartOffset ( <NUM_LIT> ) ; innerSet . addAnimation ( secondScaleAnimation ) ; innerSet . addAnimation ( rotateAnimation ) ; AnimationSet", "gt": "outerSet = new AnimationSet ( false ) ;"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import static com . wmods . wppenhacer . preference . ContactPickerPreference . REQUEST_CONTACT_PICKER ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . preference . ContactPickerPreference ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class PrivacyFragment extends BasePreferenceFragment { @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) { super", "gt": ". onCreatePreferences ( savedInstanceState , rootKey ) ;"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import static com . wmods . wppenhacer . preference . ContactPickerPreference . REQUEST_CONTACT_PICKER ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . preference . ContactPickerPreference ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class PrivacyFragment extends BasePreferenceFragment { @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ; setPreferencesFromResource", "gt": "( R . xml . fragment_privacy , rootKey ) ;"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import static com . wmods . wppenhacer . preference . ContactPickerPreference . REQUEST_CONTACT_PICKER ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . preference . ContactPickerPreference ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class PrivacyFragment extends BasePreferenceFragment { @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ; setPreferencesFromResource ( R . xml . fragment_privacy , rootKey ) ; } @ Override public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super", "gt": ". onActivityResult ( requestCode , resultCode , data ) ;"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import static com . wmods . wppenhacer . preference . ContactPickerPreference . REQUEST_CONTACT_PICKER ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . preference . ContactPickerPreference ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class PrivacyFragment extends BasePreferenceFragment { @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ; setPreferencesFromResource ( R . xml . fragment_privacy , rootKey ) ; } @ Override public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( requestCode == REQUEST_CONTACT_PICKER && resultCode == Activity . RESULT_OK ) { ContactPickerPreference", "gt": "contactPickerPref = findPreference ( data . getStringExtra ( \"<STR_LIT>\" ) ) ;"}
{"input": "package com . wmods . wppenhacer . ui . fragments ; import static com . wmods . wppenhacer . preference . ContactPickerPreference . REQUEST_CONTACT_PICKER ; import android . app . Activity ; import android . content . Intent ; import android . os . Bundle ; import androidx . annotation . Nullable ; import com . wmods . wppenhacer . R ; import com . wmods . wppenhacer . preference . ContactPickerPreference ; import com . wmods . wppenhacer . ui . fragments . base . BasePreferenceFragment ; public class PrivacyFragment extends BasePreferenceFragment { @ Override public void onCreatePreferences ( @ Nullable Bundle savedInstanceState , @ Nullable String rootKey ) { super . onCreatePreferences ( savedInstanceState , rootKey ) ; setPreferencesFromResource ( R . xml . fragment_privacy , rootKey ) ; } @ Override public void onActivityResult ( int requestCode , int resultCode , Intent data ) { super . onActivityResult ( requestCode , resultCode , data ) ; if ( requestCode == REQUEST_CONTACT_PICKER && resultCode == Activity . RESULT_OK ) { ContactPickerPreference contactPickerPref = findPreference ( data . getStringExtra ( \"<STR_LIT>\" ) ) ; if ( contactPickerPref != null ) { contactPickerPref", "gt": ". handleActivityResult ( requestCode , resultCode , data ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var", "gt": "results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while", "gt": "( ( clazz = clazz . getSuperclass ( ) ) != null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var", "gt": "results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if", "gt": "( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var", "gt": "results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var", "gt": "results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if", "gt": "( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while", "gt": "( ( clazz = clazz . getSuperclass ( ) ) != null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if", "gt": "( results . isPresent ( ) ) return results . get ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while", "gt": "( ( clazz = clazz . getSuperclass ( ) ) != null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var", "gt": "results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while", "gt": "( ( clazz = clazz . getSuperclass ( ) ) != null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var", "gt": "results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if", "gt": "( results . isPresent ( ) ) return results . get ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class", "gt": "< ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method", "gt": "parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return", "gt": "Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return", "gt": "Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return", "gt": "Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return", "gt": "method . invoke ( instance , args ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if", "gt": "( args [ i ] == null ) continue ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if", "gt": "( args [ i ] instanceof Class ) {"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if", "gt": "( arg == null ) continue ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if", "gt": "( type . isAssignableFrom ( ( Class ) arg ) ) {"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result", "gt": ". add ( new Pair < > ( i , arg ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if", "gt": "( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) {"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result", "gt": ". add ( new Pair < > ( i , arg ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var", "gt": "text = Arrays . toString ( trace ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; return", "gt": "text . contains ( contains ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; return text . contains ( contains ) ; } public static boolean isCalledFromStrings ( String ... contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var", "gt": "text = Arrays . toString ( trace ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; return text . contains ( contains ) ; } public static boolean isCalledFromStrings ( String ... contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; for", "gt": "( String s : contains ) {"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; return text . contains ( contains ) ; } public static boolean isCalledFromStrings ( String ... contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; for ( String s : contains ) { if ( text . contains ( s ) ) return true ; } return false ; } public static boolean isClassSimpleNameString ( Class < ? > aClass , String s ) { try { Class", "gt": "< ? > search = XposedHelpers . findClassIfExists ( \"<STR_LIT>\" + s , aClass . getClassLoader ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; return text . contains ( contains ) ; } public static boolean isCalledFromStrings ( String ... contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; for ( String s : contains ) { if ( text . contains ( s ) ) return true ; } return false ; } public static boolean isClassSimpleNameString ( Class < ? > aClass , String s ) { try { Class < ? > search = XposedHelpers . findClassIfExists ( \"<STR_LIT>\" + s , aClass . getClassLoader ( ) ) ; if ( search != null ) search = XposedHelpers . findClassIfExists ( \"<STR_LIT>\" + s , aClass . getClassLoader ( ) ) ; Class", "gt": "< ? > cls = aClass ;"}
{"input": "package com . wmods . wppenhacer . xposed . utils ; import android . util . Pair ; import java . lang . reflect . Constructor ; import java . lang . reflect . Field ; import java . lang . reflect . Method ; import java . util . ArrayList ; import java . util . Arrays ; import java . util . List ; import java . util . function . Predicate ; import java . util . stream . Collectors ; import de . robv . android . xposed . XposedHelpers ; @ SuppressWarnings ( \"<STR_LIT>\" ) public class ReflectionUtils { public static Method findMethodUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Method [ ] findAllMethodsUsingFilter ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Method [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field findFieldUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Constructor [ ] findAllConstructorsUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Constructor [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Constructor [ <NUM_LIT> ] ; } public static Constructor findConstructorUsingFilter ( Class < ? > clazz , Predicate < Constructor > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredConstructors ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; throw new RuntimeException ( \"<STR_LIT>\" ) ; } public static Field [ ] findAllFieldsUsingFilter ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . collect ( Collectors . toList ( ) ) ; if ( ! results . isEmpty ( ) ) return results . toArray ( new Field [ <NUM_LIT> ] ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return new Field [ <NUM_LIT> ] ; } public static Method findMethodUsingFilterIfExists ( Class < ? > clazz , Predicate < Method > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredMethods ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static Field findFieldUsingFilterIfExists ( Class < ? > clazz , Predicate < Field > predicate ) { do { var results = Arrays . stream ( clazz . getDeclaredFields ( ) ) . filter ( predicate ) . findFirst ( ) ; if ( results . isPresent ( ) ) return results . get ( ) ; } while ( ( clazz = clazz . getSuperclass ( ) ) != null ) ; return null ; } public static boolean isOverridden ( Method method ) { try { Class < ? > superclass = method . getDeclaringClass ( ) . getSuperclass ( ) ; if ( superclass == null ) return false ; Method parentMethod = superclass . getMethod ( method . getName ( ) , method . getParameterTypes ( ) ) ; return ! parentMethod . equals ( method ) ; } catch ( NoSuchMethodException e ) { return false ; } } public static List < Field > getFieldsByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . collect ( Collectors . toList ( ) ) ; } public static List < Field > getFieldsByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . collect ( Collectors . toList ( ) ) ; } public static Field getFieldByExtendType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type . isAssignableFrom ( f . getType ( ) ) ) . findFirst ( ) . orElse ( null ) ; } public static Field getFieldByType ( Class < ? > cls , Class < ? > type ) { return Arrays . stream ( cls . getFields ( ) ) . filter ( f -> type == f . getType ( ) ) . findFirst ( ) . orElse ( null ) ; } public static Object callMethod ( Method method , Object instance , Object ... args ) { try { return method . invoke ( instance , args ) ; } catch ( Exception e ) { return null ; } } public static Object getField ( Field loadProfileInfoField , Object thisObject ) { try { return loadProfileInfoField . get ( thisObject ) ; } catch ( Exception e ) { return null ; } } public static int findIndexOfType ( Object [ ] args , Class < ? > type ) { for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { if ( args [ i ] == null ) continue ; if ( args [ i ] instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) args [ i ] ) ) return i ; continue ; } if ( type . isAssignableFrom ( args [ i ] . getClass ( ) ) ) return i ; } return - <NUM_LIT> ; } public static List < Pair < Integer , Object > > findArrayOfType ( Object [ ] args , Class < ? > type ) { var result = new ArrayList < Pair < Integer , Object > > ( ) ; for ( int i = <NUM_LIT> ; i < args . length ; i ++ ) { var arg = args [ i ] ; if ( arg == null ) continue ; if ( arg instanceof Class ) { if ( type . isAssignableFrom ( ( Class ) arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } continue ; } if ( type . isAssignableFrom ( arg . getClass ( ) ) || type . isInstance ( arg ) ) { result . add ( new Pair < > ( i , arg ) ) ; } } return result ; } public static boolean isCalledFromString ( String contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; return text . contains ( contains ) ; } public static boolean isCalledFromStrings ( String ... contains ) { var trace = Thread . currentThread ( ) . getStackTrace ( ) ; var text = Arrays . toString ( trace ) ; for ( String s : contains ) { if ( text . contains ( s ) ) return true ; } return false ; } public static boolean isClassSimpleNameString ( Class < ? > aClass , String s ) { try { Class < ? > search = XposedHelpers . findClassIfExists ( \"<STR_LIT>\" + s , aClass . getClassLoader ( ) ) ; if ( search != null ) search = XposedHelpers . findClassIfExists ( \"<STR_LIT>\" + s , aClass . getClassLoader ( ) ) ; Class < ? > cls = aClass ; do { if ( search != null ) { if ( cls . getName ( ) . equals ( search . getName ( ) ) ) return true ; if", "gt": "( cls . getName ( ) . startsWith ( \"<STR_LIT>\" ) || cls . getName ( ) . startsWith ( \"<STR_LIT>\" ) ) return false ;"}
{"input": "package com . wmods . wppenhacer . xposed . core ; import android . util . Log ; import androidx . annotation . NonNull ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public abstract class Feature { public final ClassLoader classLoader ; public final XSharedPreferences prefs ; public static boolean DEBUG = false ; public Feature ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { this . classLoader = classLoader ; this . prefs = preferences ; } public abstract void doHook ( ) throws Throwable ; @ NonNull public abstract String getPluginName ( ) ; public void logDebug ( Object object ) { if ( ! DEBUG ) return ; log ( object ) ; if", "gt": "( object instanceof Throwable th ) {"}
{"input": "package com . wmods . wppenhacer . xposed . core ; import android . util . Log ; import androidx . annotation . NonNull ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public abstract class Feature { public final ClassLoader classLoader ; public final XSharedPreferences prefs ; public static boolean DEBUG = false ; public Feature ( @ NonNull ClassLoader classLoader , @ NonNull XSharedPreferences preferences ) { this . classLoader = classLoader ; this . prefs = preferences ; } public abstract void doHook ( ) throws Throwable ; @ NonNull public abstract String getPluginName ( ) ; public void logDebug ( Object object ) { if ( ! DEBUG ) return ; log ( object ) ; if ( object instanceof Throwable th ) { Log", "gt": ". i ( this . getPluginName ( ) , th . getMessage ( ) , th ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var", "gt": "drawable = DesignUtils . getDrawableByName ( drawableName ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils", "gt": ". setReplacementDrawable ( drawableName , drawable ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties", "gt": "properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int", "gt": "bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; int bubbleRightColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; if ( bubbleRightColor != <NUM_LIT> ) { var", "gt": "ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; int bubbleRightColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; if ( bubbleRightColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for", "gt": "( var balloon : ballons ) {"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; int bubbleRightColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; if ( bubbleRightColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleRightColor ) ; } } if ( bubbleLeftColor != <NUM_LIT> ) { var", "gt": "ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; int bubbleRightColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; if ( bubbleRightColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleRightColor ) ; } } if ( bubbleLeftColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleLeftColor ) ; } } var", "gt": "methods = Unobfuscator . loadNineDrawableMethods ( classLoader ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; int bubbleRightColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; if ( bubbleRightColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleRightColor ) ; } } if ( bubbleLeftColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleLeftColor ) ; } } var methods = Unobfuscator . loadNineDrawableMethods ( classLoader ) ; for ( var method : methods ) { XposedBridge . hookMethod ( method , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var", "gt": "draw = ( NinePatchDrawable ) param . getResult ( ) ;"}
{"input": "package com . wmods . wppenhacer . xposed . features . customization ; import android . graphics . Color ; import android . graphics . PorterDuff ; import android . graphics . PorterDuffColorFilter ; import android . graphics . drawable . NinePatchDrawable ; import androidx . annotation . NonNull ; import com . wmods . wppenhacer . xposed . core . Feature ; import com . wmods . wppenhacer . xposed . core . devkit . Unobfuscator ; import com . wmods . wppenhacer . xposed . utils . DesignUtils ; import com . wmods . wppenhacer . xposed . utils . Utils ; import java . util . List ; import java . util . Objects ; import java . util . Properties ; import de . robv . android . xposed . XC_MethodHook ; import de . robv . android . xposed . XSharedPreferences ; import de . robv . android . xposed . XposedBridge ; public class BubbleColors extends Feature { public BubbleColors ( ClassLoader loader , XSharedPreferences preferences ) { super ( loader , preferences ) ; } private static void replaceColor ( String drawableName , int color ) { try { var drawable = DesignUtils . getDrawableByName ( drawableName ) ; if ( drawable == null ) return ; drawable . setTint ( color ) ; drawable . setColorFilter ( new PorterDuffColorFilter ( color , PorterDuff . Mode . SRC_IN ) ) ; DesignUtils . setReplacementDrawable ( drawableName , drawable ) ; } catch ( Exception ignored ) { } } @ Override public void doHook ( ) throws Exception { Properties properties = Utils . extractProperties ( prefs . getString ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ; if ( ! prefs . getBoolean ( \"<STR_LIT>\" , false ) && ! Objects . equals ( properties . getProperty ( \"<STR_LIT>\" ) , \"<STR_LIT>\" ) ) return ; boolean bubbleColor = prefs . getBoolean ( \"<STR_LIT>\" , false ) ; int bubbleLeftColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; int bubbleRightColor = bubbleColor ? prefs . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) : Color . parseColor ( DesignUtils . checkSystemColor ( properties . getProperty ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ) ) ; if ( bubbleRightColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleRightColor ) ; } } if ( bubbleLeftColor != <NUM_LIT> ) { var ballons = List . of ( \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ) ; for ( var balloon : ballons ) { replaceColor ( balloon , bubbleLeftColor ) ; } } var methods = Unobfuscator . loadNineDrawableMethods ( classLoader ) ; for ( var method : methods ) { XposedBridge . hookMethod ( method , new XC_MethodHook ( ) { @ Override protected void afterHookedMethod ( MethodHookParam param ) throws Throwable { var draw = ( NinePatchDrawable ) param . getResult ( ) ; var right = ( boolean ) param . args [ <NUM_LIT> ] ; if ( right ) { if ( bubbleRightColor == <NUM_LIT> ) return ; draw", "gt": ". setColorFilter ( new PorterDuffColorFilter ( bubbleRightColor , PorterDuff . Mode . SRC_IN ) ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller", "gt": "= new Scroller ( getContext ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return", "gt": "HorizontalListView . this . onDown ( e ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent", "gt": "( ) . requestDisallowInterceptTouchEvent ( true ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int", "gt": "left = child . getLeft ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int", "gt": "top = child . getTop ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int", "gt": "bottom = child . getBottom ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect", "gt": ". set ( left , top , right , bottom ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if", "gt": "( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) {"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int", "gt": "x = ( int ) e . getX ( ) - left ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int", "gt": "y = ( int ) e . getY ( ) - top ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int", "gt": "top = child . getTop ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect", "gt": ". set ( left , top , right , bottom ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while", "gt": "( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) {"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while", "gt": "( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) {"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View", "gt": "child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge", "gt": "-= child . getMeasuredWidth ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset", "gt": "-= child . getMeasuredWidth ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset", "gt": "+= child . getMeasuredWidth ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset += child . getMeasuredWidth ( ) ; mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mLeftViewIndex ++ ; child = getChildAt ( <NUM_LIT> ) ; } child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; while", "gt": "( child != null && child . getLeft ( ) + dx >= getWidth ( ) ) {"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset += child . getMeasuredWidth ( ) ; mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mLeftViewIndex ++ ; child = getChildAt ( <NUM_LIT> ) ; } child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; while ( child != null && child . getLeft ( ) + dx >= getWidth ( ) ) { mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mRightViewIndex -- ; child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; } } private void positionItems ( final int dx ) { if", "gt": "( getChildCount ( ) > <NUM_LIT> ) {"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset += child . getMeasuredWidth ( ) ; mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mLeftViewIndex ++ ; child = getChildAt ( <NUM_LIT> ) ; } child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; while ( child != null && child . getLeft ( ) + dx >= getWidth ( ) ) { mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mRightViewIndex -- ; child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; } } private void positionItems ( final int dx ) { if ( getChildCount ( ) > <NUM_LIT> ) { mDisplayOffset += dx ; int left = mDisplayOffset ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int", "gt": "childWidth = child . getMeasuredWidth ( ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset += child . getMeasuredWidth ( ) ; mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mLeftViewIndex ++ ; child = getChildAt ( <NUM_LIT> ) ; } child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; while ( child != null && child . getLeft ( ) + dx >= getWidth ( ) ) { mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mRightViewIndex -- ; child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; } } private void positionItems ( final int dx ) { if ( getChildCount ( ) > <NUM_LIT> ) { mDisplayOffset += dx ; int left = mDisplayOffset ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int childWidth = child . getMeasuredWidth ( ) ; child", "gt": ". layout ( left , <NUM_LIT> , left + childWidth , child . getMeasuredHeight ( ) ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset += child . getMeasuredWidth ( ) ; mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mLeftViewIndex ++ ; child = getChildAt ( <NUM_LIT> ) ; } child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; while ( child != null && child . getLeft ( ) + dx >= getWidth ( ) ) { mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mRightViewIndex -- ; child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; } } private void positionItems ( final int dx ) { if ( getChildCount ( ) > <NUM_LIT> ) { mDisplayOffset += dx ; int left = mDisplayOffset ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int childWidth = child . getMeasuredWidth ( ) ; child . layout ( left , <NUM_LIT> , left + childWidth , child . getMeasuredHeight ( ) ) ; left += childWidth ; } } } public synchronized void scrollTo ( int x ) { mScroller . startScroll ( mNextX , <NUM_LIT> , x - mNextX , <NUM_LIT> ) ; requestLayout ( ) ; } @ Override public boolean dispatchTouchEvent ( MotionEvent ev ) { boolean handled = mGesture . onTouchEvent ( ev ) ; return handled ; } protected boolean onFling ( MotionEvent e1 , MotionEvent e2 , float velocityX , float velocityY ) { synchronized ( HorizontalListView . this ) { mScroller", "gt": ". fling ( mNextX , <NUM_LIT> , ( int ) - velocityX , <NUM_LIT> , <NUM_LIT> , mMaxX , <NUM_LIT> , <NUM_LIT> ) ;"}
{"input": "package com . wmods . wppenhacer . views ; import android . content . Context ; import android . database . DataSetObserver ; import android . graphics . Rect ; import android . os . SystemClock ; import android . util . AttributeSet ; import android . view . GestureDetector ; import android . view . MotionEvent ; import android . view . View ; import android . widget . AdapterView ; import android . widget . ListAdapter ; import android . widget . Scroller ; import androidx . annotation . NonNull ; import java . util . LinkedList ; import java . util . Queue ; public class HorizontalListView extends AdapterView < ListAdapter > { protected ListAdapter mAdapter ; private int mLeftViewIndex = - <NUM_LIT> ; private int mRightViewIndex = <NUM_LIT> ; protected int mCurrentX ; protected int mNextX ; private int mMaxX = Integer . MAX_VALUE ; private int mDisplayOffset = <NUM_LIT> ; protected Scroller mScroller ; private GestureDetector mGesture ; private final Queue < View > mRemovedViewQueue = new LinkedList < View > ( ) ; private OnItemSelectedListener mOnItemSelected ; private OnItemClickListener mOnItemClicked ; private OnItemLongClickListener mOnItemLongClicked ; private boolean mDataChanged = false ; public HorizontalListView ( Context context , AttributeSet attrs ) { super ( context , attrs ) ; initView ( ) ; } public HorizontalListView ( Context context ) { super ( context ) ; initView ( ) ; } private synchronized void initView ( ) { mLeftViewIndex = - <NUM_LIT> ; mRightViewIndex = <NUM_LIT> ; mDisplayOffset = <NUM_LIT> ; mCurrentX = <NUM_LIT> ; mNextX = <NUM_LIT> ; mMaxX = Integer . MAX_VALUE ; mScroller = new Scroller ( getContext ( ) ) ; mGesture = new GestureDetector ( getContext ( ) , mOnGesture ) ; } @ Override public void setOnItemSelectedListener ( OnItemSelectedListener listener ) { mOnItemSelected = listener ; } @ Override public void setOnItemClickListener ( OnItemClickListener listener ) { mOnItemClicked = listener ; } @ Override public void setOnItemLongClickListener ( OnItemLongClickListener listener ) { mOnItemLongClicked = listener ; } private final DataSetObserver mDataObserver = new DataSetObserver ( ) { @ Override public void onChanged ( ) { synchronized ( HorizontalListView . this ) { mDataChanged = true ; } setEmptyView ( getEmptyView ( ) ) ; invalidate ( ) ; requestLayout ( ) ; } @ Override public void onInvalidated ( ) { reset ( ) ; invalidate ( ) ; requestLayout ( ) ; } } ; @ Override public ListAdapter getAdapter ( ) { return mAdapter ; } @ Override public View getSelectedView ( ) { return null ; } @ Override public void setAdapter ( ListAdapter adapter ) { if ( mAdapter != null ) { mAdapter . unregisterDataSetObserver ( mDataObserver ) ; } mAdapter = adapter ; mAdapter . registerDataSetObserver ( mDataObserver ) ; reset ( ) ; } private synchronized void reset ( ) { initView ( ) ; removeAllViewsInLayout ( ) ; requestLayout ( ) ; } @ Override public void setSelection ( int position ) { } private void addAndMeasureChild ( final View child , int viewPos ) { LayoutParams params = child . getLayoutParams ( ) ; if ( params == null ) { params = new LayoutParams ( LayoutParams . MATCH_PARENT , LayoutParams . MATCH_PARENT ) ; } addViewInLayout ( child , viewPos , params , true ) ; child . measure ( MeasureSpec . makeMeasureSpec ( getWidth ( ) , MeasureSpec . AT_MOST ) , MeasureSpec . makeMeasureSpec ( getHeight ( ) , MeasureSpec . AT_MOST ) ) ; } private final GestureDetector . OnGestureListener mOnGesture = new GestureDetector . SimpleOnGestureListener ( ) { @ Override public boolean onDown ( @ NonNull MotionEvent e ) { return HorizontalListView . this . onDown ( e ) ; } @ Override public boolean onFling ( MotionEvent e1 , @ NonNull MotionEvent e2 , float velocityX , float velocityY ) { return HorizontalListView . this . onFling ( e1 , e2 , velocityX , velocityY ) ; } @ Override public boolean onScroll ( MotionEvent e1 , @ NonNull MotionEvent e2 , float distanceX , float distanceY ) { getParent ( ) . requestDisallowInterceptTouchEvent ( true ) ; synchronized ( HorizontalListView . this ) { mNextX += ( int ) distanceX ; } requestLayout ( ) ; return true ; } @ Override public boolean onSingleTapConfirmed ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemClicked != null ) { mOnItemClicked . onItemClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } if ( mOnItemSelected != null ) { mOnItemSelected . onItemSelected ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } int x = ( int ) e . getX ( ) - left ; int y = ( int ) e . getY ( ) - top ; MotionEvent motionEvent = MotionEvent . obtain ( SystemClock . uptimeMillis ( ) , SystemClock . uptimeMillis ( ) , MotionEvent . ACTION_DOWN , x , y , <NUM_LIT> ) ; child . dispatchTouchEvent ( motionEvent ) ; motionEvent . recycle ( ) ; child . performClick ( ) ; break ; } } return true ; } @ Override public void onLongPress ( @ NonNull MotionEvent e ) { Rect viewRect = new Rect ( ) ; int childCount = getChildCount ( ) ; for ( int i = <NUM_LIT> ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; int left = child . getLeft ( ) ; int right = child . getRight ( ) ; int top = child . getTop ( ) ; int bottom = child . getBottom ( ) ; viewRect . set ( left , top , right , bottom ) ; if ( viewRect . contains ( ( int ) e . getX ( ) , ( int ) e . getY ( ) ) ) { if ( mOnItemLongClicked != null ) { mOnItemLongClicked . onItemLongClick ( HorizontalListView . this , child , mLeftViewIndex + <NUM_LIT> + i , mAdapter . getItemId ( mLeftViewIndex + <NUM_LIT> + i ) ) ; } break ; } } } } ; private void fillList ( final int dx ) { int edge = <NUM_LIT> ; View child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; if ( child != null ) { edge = child . getRight ( ) ; } fillListRight ( edge , dx ) ; edge = <NUM_LIT> ; child = getChildAt ( <NUM_LIT> ) ; if ( child != null ) { edge = child . getLeft ( ) ; } fillListLeft ( edge , dx ) ; } private void fillListRight ( int rightEdge , final int dx ) { while ( rightEdge + dx < getWidth ( ) && mRightViewIndex < mAdapter . getCount ( ) ) { View child = mAdapter . getView ( mRightViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , - <NUM_LIT> ) ; rightEdge += child . getMeasuredWidth ( ) ; if ( mRightViewIndex == mAdapter . getCount ( ) - <NUM_LIT> ) { mMaxX = mCurrentX + rightEdge - getWidth ( ) ; } if ( mMaxX < <NUM_LIT> ) { mMaxX = <NUM_LIT> ; } mRightViewIndex ++ ; } } private void fillListLeft ( int leftEdge , final int dx ) { while ( leftEdge + dx > <NUM_LIT> && mLeftViewIndex >= <NUM_LIT> ) { View child = mAdapter . getView ( mLeftViewIndex , mRemovedViewQueue . poll ( ) , this ) ; addAndMeasureChild ( child , <NUM_LIT> ) ; leftEdge -= child . getMeasuredWidth ( ) ; mLeftViewIndex -- ; mDisplayOffset -= child . getMeasuredWidth ( ) ; } } private void removeNonVisibleItems ( final int dx ) { View child = getChildAt ( <NUM_LIT> ) ; while ( child != null && child . getRight ( ) + dx <= <NUM_LIT> ) { mDisplayOffset += child . getMeasuredWidth ( ) ; mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mLeftViewIndex ++ ; child = getChildAt ( <NUM_LIT> ) ; } child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; while ( child != null && child . getLeft ( ) + dx >= getWidth ( ) ) { mRemovedViewQueue . offer ( child ) ; removeViewInLayout ( child ) ; mRightViewIndex -- ; child = getChildAt ( getChildCount ( ) - <NUM_LIT> ) ; } } private void positionItems ( final int dx ) { if ( getChildCount ( ) > <NUM_LIT> ) { mDisplayOffset += dx ; int left = mDisplayOffset ; for ( int i = <NUM_LIT> ; i < getChildCount ( ) ; i ++ ) { View child = getChildAt ( i ) ; int childWidth = child . getMeasuredWidth ( ) ; child . layout ( left , <NUM_LIT> , left + childWidth , child . getMeasuredHeight ( ) ) ; left += childWidth ; } } } public synchronized void scrollTo ( int x ) { mScroller . startScroll ( mNextX , <NUM_LIT> , x - mNextX , <NUM_LIT> ) ; requestLayout ( ) ; } @ Override public boolean dispatchTouchEvent ( MotionEvent ev ) { boolean handled = mGesture . onTouchEvent ( ev ) ; return handled ; } protected boolean onFling ( MotionEvent e1 , MotionEvent e2 , float velocityX , float velocityY ) { synchronized ( HorizontalListView . this ) { mScroller . fling ( mNextX , <NUM_LIT> , ( int ) - velocityX , <NUM_LIT> , <NUM_LIT> , mMaxX , <NUM_LIT> , <NUM_LIT> ) ; } requestLayout ( ) ; return true ; } protected boolean onDown ( MotionEvent e ) { mScroller . forceFinished ( true ) ; return true ; } @ Override protected synchronized void onLayout ( boolean changed , int left , int top , int right , int bottom ) { super . onLayout ( changed , left , top , right , bottom ) ; if ( mAdapter == null ) { return ; } if ( mDataChanged ) { int oldCurrentX = mCurrentX ; initView ( ) ; removeAllViewsInLayout ( ) ; mNextX = oldCurrentX ; mDataChanged = false ; } if ( mScroller . computeScrollOffset ( ) ) { mNextX", "gt": "= mScroller . getCurrX ( ) ;"}
