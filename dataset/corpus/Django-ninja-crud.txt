<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemOut <EOL> class TestReadModelView ( TestCase ) : <EOL> def test_register_route_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> read_item = views . ReadModelView ( <EOL> response_body = ItemOut , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . read_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> def test_bind_to_viewset_with_response_body ( self ) : <EOL> model_view = views . ReadModelView ( response_body = ItemOut ) <EOL> class ItemModelViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = None <EOL> default_response_body = None <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> def test_bind_to_viewset_without_response_body ( self ) : <EOL> model_view = views . ReadModelView ( ) <EOL> class ItemModelViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = None <EOL> default_response_body = ItemOut <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> def test_bind_to_viewset_without_response_body_error ( self ) : <EOL> model_view = views . ReadModelView ( ) <EOL> class ItemModelViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> with self . assertRaises ( AttributeError ) : <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> </s>
<s> import inspect <EOL> from typing import Optional , Type <EOL> from django . db . models import Model <EOL> from ninja import Router , Schema <EOL> from ninja_crud . views import AbstractModelView <EOL> class ModelViewSet : <EOL> model : Type [ Model ] <EOL> default_request_body : Optional [ Type [ Schema ] ] <EOL> default_response_body : Optional [ Type [ Schema ] ] <EOL> def __init_subclass__ ( cls , * args , ** kwargs ) -> None : <EOL> super ( ) . __init_subclass__ ( * args , ** kwargs ) <EOL> if hasattr ( cls , "<STR_LIT>" ) : <EOL> cls . _bind_model_views ( ) <EOL> @ classmethod <EOL> def _bind_model_views ( cls ) -> None : <EOL> for _ , model_view in inspect . getmembers ( <EOL> cls , lambda member : isinstance ( member , AbstractModelView ) <EOL> ) : <EOL> model_view . model_viewset_class = cls <EOL> @ classmethod <EOL> def register_routes ( cls , router : Router ) -> None : <EOL> view_attributes = { <EOL> name : view <EOL> for name , view in inspect . getmembers ( cls ) <EOL> if isinstance ( view , AbstractModelView ) <EOL> } <EOL> attribute_order = list ( cls . __dict__ ) <EOL> ordered_view_attributes = sorted ( <EOL> view_attributes . items ( ) , key = lambda item : attribute_order . index ( item [ <NUM_LIT> ] ) <EOL> ) <EOL> for name , view in ordered_view_attributes : <EOL> view . register_route ( router , route_name = name ) <EOL> </s>
<s> import http <EOL> import uuid <EOL> from typing import Any , Optional , Tuple , Union <EOL> import django . core . exceptions <EOL> import django . http <EOL> import django . test <EOL> import ninja <EOL> from ninja_crud import views <EOL> from tests . test_app . models import Item <EOL> class TestAbstractModelView ( django . test . TestCase ) : <EOL> def test_property_model_viewset_class ( self ) : <EOL> class ModelView ( views . AbstractModelView ) : <EOL> def handle_request ( <EOL> self , <EOL> request : django . http . HttpRequest , <EOL> path_parameters : Optional [ ninja . Schema ] , <EOL> query_parameters : Optional [ ninja . Schema ] , <EOL> request_body : Optional [ ninja . Schema ] , <EOL> ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : <EOL> pass <EOL> class ItemViewSet : <EOL> model = Item <EOL> model_view = ModelView ( method = views . enums . HTTPMethod . GET , path = "<STR_LIT>" ) <EOL> self . assertIsNone ( <EOL> model_view . handle_request ( <EOL> request = django . http . HttpRequest ( ) , <EOL> path_parameters = None , <EOL> query_parameters = None , <EOL> request_body = None , <EOL> ) <EOL> ) <EOL> with self . assertRaises ( ValueError ) : <EOL> _ = model_view . model_viewset_class <EOL> model_view . model_viewset_class = ItemViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> model_view . model_viewset_class = ItemViewSet <EOL> def test_infer_field_type ( self ) : <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> uuid . UUID , <EOL> ) <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> str , <EOL> ) <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> str , <EOL> ) <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> uuid . UUID , <EOL> ) <EOL> with self . assertRaises ( ValueError ) : <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) <EOL> with self . assertRaises ( django . core . exceptions . FieldDoesNotExist ) : <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemIn , ItemOut <EOL> class TestCreateModelView ( TestCase ) : <EOL> def test_register_route_with_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> create_item = views . CreateModelView ( <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . create_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> </s>
<s> from django . urls import path <EOL> from tests . test_api import api <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , api . urls ) , <EOL> ] <EOL> </s>
<s> from django . contrib . auth . models import Group , User <EOL> from django . test import TestCase <EOL> from tests . test_app . models import Collection , Item <EOL> class BaseTestCase ( TestCase ) : <EOL> user_1 : User <EOL> user_2 : User <EOL> collection_1 : Collection <EOL> collection_2 : Collection <EOL> item_1 : Item <EOL> item_2 : Item <EOL> @ classmethod <EOL> def setUpTestData ( cls ) : <EOL> super ( ) . setUpTestData ( ) <EOL> cls . user_1 = User . objects . create ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" , email = "<STR_LIT>" <EOL> ) <EOL> cls . user_2 = User . objects . create ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" , email = "<STR_LIT>" <EOL> ) <EOL> cls . collection_1 = Collection . objects . create ( <EOL> name = "<STR_LIT>" , created_by = cls . user_1 <EOL> ) <EOL> cls . collection_2 = Collection . objects . create ( <EOL> name = "<STR_LIT>" , created_by = cls . user_2 <EOL> ) <EOL> cls . item_1 = Item . objects . create ( name = "<STR_LIT>" , collection = cls . collection_1 ) <EOL> cls . item_2 = Item . objects . create ( name = "<STR_LIT>" , collection = cls . collection_2 ) <EOL> cls . group_1 = Group . objects . create ( name = "<STR_LIT>" ) <EOL> cls . group_2 = Group . objects . create ( name = "<STR_LIT>" ) <EOL> </s>
<s> from typing import List , Optional <EOL> from uuid import UUID <EOL> from django . db . models import Q , QuerySet <EOL> from ninja import FilterSchema , Schema <EOL> class Identifiable ( Schema ) : <EOL> id : UUID <EOL> class Representable ( Schema ) : <EOL> name : str <EOL> description : Optional [ str ] = None <EOL> class OrderByFilterSchema ( FilterSchema ) : <EOL> order_by : Optional [ List [ str ] ] = None <EOL> def filter_order_by ( self , value ) -> Q : <EOL> return Q ( ) <EOL> def filter ( self , queryset : QuerySet ) -> QuerySet : <EOL> queryset = super ( ) . filter ( queryset ) <EOL> if self . order_by : <EOL> queryset = queryset . order_by ( * self . order_by ) <EOL> return queryset <EOL> class CollectionFilter ( OrderByFilterSchema ) : <EOL> name : Optional [ str ] = None <EOL> class CollectionIn ( Representable ) : <EOL> pass <EOL> class CollectionOut ( Identifiable , Representable ) : <EOL> pass <EOL> class ItemIn ( Representable ) : <EOL> pass <EOL> class ItemOut ( Identifiable , Representable ) : <EOL> collection_id : UUID <EOL> class TagOut ( Identifiable , Representable ) : <EOL> pass <EOL> class UserRequestBody ( Schema ) : <EOL> username : str <EOL> email : str <EOL> password : str <EOL> groups : Optional [ List [ int ] ] = None <EOL> class UserResponseBody ( Schema ) : <EOL> id : int <EOL> username : str <EOL> email : str <EOL> class UserQueryParameters ( Schema ) : <EOL> username__contains : Optional [ str ] = None <EOL> </s>
<s> from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class PathParameters : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> not_found : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . not_found : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( not_found ) if not_found is not None else None <EOL> ) <EOL> </s>
<s> from . headers import Headers <EOL> from . path_parameters import PathParameters <EOL> from . payloads import Payloads <EOL> from . query_parameters import QueryParameters <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters , Payloads <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import UpdateModelView <EOL> class UpdateModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : UpdateModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> payloads : ArgOrCallable [ Payloads , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = UpdateModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> payloads = payloads , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) -> None : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , path_parameters = path_parameters <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , response : django . http . HttpResponse , path_parameters : dict <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . get_model ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) -> None : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_payloads_bad_request ( self ) : <EOL> self . view_test_manager . test_view_payloads_bad_request ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_payloads_conflict ( self ) : <EOL> self . view_test_manager . test_view_payloads_conflict ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> from . model_viewset_test_case import ModelViewSetTestCase <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> import uuid <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> from ninja_crud . testing . views import ( <EOL> DeleteModelViewTest , <EOL> ListModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from tests . test_app . tests . base_test_case import BaseTestCase <EOL> from tests . test_app . views . item_views import ItemViewSet <EOL> class TestItemViewSet ( ModelViewSetTestCase , BaseTestCase ) : <EOL> model_viewset_class = ItemViewSet <EOL> base_path = "<STR_LIT>" <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( ok = { "<STR_LIT>" : self . item_1 . id } , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } ) <EOL> def get_headers_ok ( self ) : <EOL> return Headers ( <EOL> ok = { "<STR_LIT>" : f"<STR_LIT>" } , unauthorized = { } <EOL> ) <EOL> def get_headers_ok_forbidden ( self ) : <EOL> return Headers ( <EOL> ok = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> unauthorized = { } , <EOL> forbidden = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> ) <EOL> test_list_items = ListModelViewTest ( <EOL> headers = get_headers_ok , <EOL> query_parameters = lambda self : QueryParameters ( <EOL> ok = [ { } , { "<STR_LIT>" : [ "<STR_LIT>" ] , "<STR_LIT>" : <NUM_LIT> } ] <EOL> ) , <EOL> ) <EOL> test_read_item = ReadModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> ) <EOL> test_update_item = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> payloads = Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) , <EOL> ) <EOL> test_delete_item = DeleteModelViewTest ( <EOL> path_parameters = get_path_parameters , headers = get_headers_ok_forbidden <EOL> ) <EOL> test_list_tags = ListModelViewTest ( <EOL> path_parameters = lambda self : PathParameters ( ok = { "<STR_LIT>" : self . item_1 . id } ) , <EOL> headers = get_headers_ok , <EOL> ) <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> class TestDeleteModelView ( TestCase ) : <EOL> def test_register_route_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> delete_item = views . DeleteModelView ( router_kwargs = { "<STR_LIT>" : True } ) <EOL> ItemViewSet . delete_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> </s>
<s> from . model_viewset import ModelViewSet <EOL> __all__ = [ "<STR_LIT>" ] <EOL> </s>
<s> from . import views , viewsets <EOL> from . core import components <EOL> __all__ = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> </s>
<s> from http import HTTPStatus <EOL> from django . core . exceptions import ( <EOL> FieldError , <EOL> ObjectDoesNotExist , <EOL> PermissionDenied , <EOL> ValidationError , <EOL> ) <EOL> from ninja import NinjaAPI <EOL> from ninja . errors import ValidationError as NinjaValidationError <EOL> from examples . views . department_views import router as department_router <EOL> from examples . views . employee_views import router as employee_router <EOL> from tests . test_app . views . collection_views import router as collection_router <EOL> from tests . test_app . views . item_views import router as item_router <EOL> from tests . test_app . views . user_views import router as user_router <EOL> from tests . test_authentication import TokenBearer <EOL> api = NinjaAPI ( urls_namespace = "<STR_LIT>" ) <EOL> api . add_router ( <EOL> "<STR_LIT>" , collection_router , auth = TokenBearer ( ) , tags = [ "<STR_LIT>" ] <EOL> ) <EOL> api . add_router ( "<STR_LIT>" , item_router , auth = TokenBearer ( ) , tags = [ "<STR_LIT>" ] ) <EOL> api . add_router ( "<STR_LIT>" , user_router , tags = [ "<STR_LIT>" ] ) <EOL> api . add_router ( "<STR_LIT>" , department_router , auth = None , tags = [ "<STR_LIT>" ] ) <EOL> api . add_router ( "<STR_LIT>" , employee_router , auth = None , tags = [ "<STR_LIT>" ] ) <EOL> @ api . exception_handler ( ObjectDoesNotExist ) <EOL> def handle_object_does_not_exist ( request , exc ) : <EOL> return api . create_response ( <EOL> request , <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : str ( exc ) } , <EOL> status = HTTPStatus . NOT_FOUND , <EOL> ) <EOL> @ api . exception_handler ( PermissionDenied ) <EOL> def handle_permission_error ( request , exc : PermissionDenied ) : <EOL> return api . create_response ( <EOL> request , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> status = HTTPStatus . FORBIDDEN , <EOL> ) <EOL> @ api . exception_handler ( NinjaValidationError ) <EOL> def handle_ninja_validation_error ( request , exc : NinjaValidationError ) : <EOL> mapped_msg = { error [ "<STR_LIT>" ] [ - <NUM_LIT> ] : error [ "<STR_LIT>" ] for error in exc . errors } <EOL> return api . create_response ( <EOL> request , <EOL> data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : mapped_msg } , <EOL> status = HTTPStatus . BAD_REQUEST , <EOL> ) <EOL> @ api . exception_handler ( ValidationError ) <EOL> def handle_validation_error ( request , exc : ValidationError ) : <EOL> status = HTTPStatus . BAD_REQUEST <EOL> for _ , errors in exc . error_dict . items ( ) : <EOL> for error in errors : <EOL> if error . code in [ "<STR_LIT>" , "<STR_LIT>" ] : <EOL> status = HTTPStatus . CONFLICT <EOL> return api . create_response ( <EOL> request , <EOL> data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : exc . message_dict } , <EOL> status = status , <EOL> ) <EOL> @ api . exception_handler ( FieldError ) <EOL> def handle_field_error ( request , exc : FieldError ) : <EOL> return api . create_response ( <EOL> request , <EOL> data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : str ( exc ) } , <EOL> status = HTTPStatus . BAD_REQUEST , <EOL> ) <EOL> </s>
<s> import uuid <EOL> from django . conf import settings <EOL> from django . db import models <EOL> class Collection ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( null = True , blank = True ) <EOL> created_by = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> updated_at = models . DateTimeField ( auto_now = True ) <EOL> class Item ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( null = True , blank = True ) <EOL> collection = models . ForeignKey ( Collection , on_delete = models . CASCADE ) <EOL> class Meta : <EOL> constraints = [ <EOL> models . UniqueConstraint ( <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" ] , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> class Tag ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( null = True , blank = True ) <EOL> items = models . ManyToManyField ( Item , related_name = "<STR_LIT>" ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import QuerySet <EOL> from django . http import HttpRequest <EOL> from ninja import FilterSchema , Schema <EOL> from ninja . pagination import LimitOffsetPagination , PaginationBase , paginate <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class ListModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Type [ Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ List [ Schema ] ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> get_queryset : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] ] , QuerySet ] <EOL> ] = None , <EOL> filter_queryset : Optional [ <EOL> Callable [ [ QuerySet , Optional [ Schema ] ] , QuerySet ] <EOL> ] = None , <EOL> list_models : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , QuerySet ] <EOL> ] = None , <EOL> pagination_class : Optional [ Type [ PaginationBase ] ] = LimitOffsetPagination , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . GET , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = None , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . OK , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . get_queryset = get_queryset or self . _default_get_queryset <EOL> self . filter_queryset = filter_queryset or self . _default_filter_queryset <EOL> self . list_models = list_models or self . _default_list_models <EOL> self . pagination_class = pagination_class <EOL> if self . pagination_class : <EOL> self . decorators . append ( paginate ( self . pagination_class ) ) <EOL> def _default_get_queryset ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> QuerySet : <EOL> return self . model_viewset_class . model . objects . get_queryset ( ) <EOL> @ staticmethod <EOL> def _default_filter_queryset ( <EOL> queryset : QuerySet , <EOL> query_parameters : Optional [ Schema ] , <EOL> ) -> QuerySet : <EOL> if query_parameters : <EOL> if isinstance ( query_parameters , FilterSchema ) : <EOL> queryset = query_parameters . filter ( queryset ) <EOL> else : <EOL> queryset = queryset . filter ( ** query_parameters . dict ( exclude_unset = True ) ) <EOL> return queryset <EOL> def _default_list_models ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> ) -> QuerySet : <EOL> queryset = self . get_queryset ( request , path_parameters ) <EOL> return self . filter_queryset ( queryset , query_parameters ) <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> QuerySet : <EOL> return self . list_models ( request , path_parameters , query_parameters ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . response_body is None : <EOL> default_response_body = self . model_viewset_class . default_response_body <EOL> self . response_body = List [ default_response_body ] <EOL> </s>
<s> from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Payloads : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> bad_request : Union [ dict , List [ dict ] , None ] = None , <EOL> conflict : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . bad_request : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( bad_request ) if bad_request is not None else None <EOL> ) <EOL> self . conflict : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( conflict ) if conflict is not None else None <EOL> ) <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemIn , ItemOut <EOL> class TestUpdateModelView ( TestCase ) : <EOL> def test_register_route_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> update_item = views . UpdateModelView ( <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . update_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> </s>
<s> from . abstract_model_view_test import AbstractModelViewTest <EOL> from . create_model_view_test import CreateModelViewTest <EOL> from . delete_model_view_test import DeleteModelViewTest <EOL> from . list_model_view_test import ListModelViewTest <EOL> from . read_model_view_test import ReadModelViewTest <EOL> from . update_model_view_test import UpdateModelViewTest <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> from typing import List <EOL> from django . contrib . auth . models import User <EOL> from ninja import Router <EOL> from ninja_crud import views <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . schemas import ( <EOL> UserQueryParameters , <EOL> UserRequestBody , <EOL> UserResponseBody , <EOL> ) <EOL> router = Router ( ) <EOL> class UserViewSet ( ModelViewSet ) : <EOL> model = User <EOL> list_users = views . ListModelView ( <EOL> query_parameters = UserQueryParameters , <EOL> response_body = List [ UserResponseBody ] , <EOL> pagination_class = None , <EOL> ) <EOL> create_user = views . CreateModelView ( <EOL> request_body = UserRequestBody , response_body = UserResponseBody <EOL> ) <EOL> read_user = views . ReadModelView ( response_body = UserResponseBody ) <EOL> update_user = views . UpdateModelView ( <EOL> request_body = UserRequestBody , response_body = UserResponseBody <EOL> ) <EOL> delete_user = views . DeleteModelView ( ) <EOL> UserViewSet . register_routes ( router ) <EOL> </s>
<s> import abc <EOL> import functools <EOL> import http <EOL> import logging <EOL> from typing import Any , Callable , Dict , List , Optional , Tuple , Type , Union <EOL> import django . http <EOL> import ninja <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> logger = logging . getLogger ( __name__ ) <EOL> class AbstractView ( abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> self . method = method <EOL> self . path = path <EOL> self . path_parameters = path_parameters <EOL> self . query_parameters = query_parameters <EOL> self . request_body = request_body <EOL> self . response_body = response_body <EOL> self . response_status = response_status <EOL> self . decorators = decorators or [ ] <EOL> self . router_kwargs = router_kwargs or { } <EOL> @ abc . abstractmethod <EOL> def handle_request ( <EOL> self , <EOL> request : django . http . HttpRequest , <EOL> path_parameters : Optional [ ninja . Schema ] , <EOL> query_parameters : Optional [ ninja . Schema ] , <EOL> request_body : Optional [ ninja . Schema ] , <EOL> ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : <EOL> pass <EOL> def create_view_handler ( self ) -> Callable : <EOL> path_parameters_schema_class = self . path_parameters <EOL> query_parameters_schema_class = self . query_parameters <EOL> request_body_schema_class = self . request_body <EOL> def view_handler ( <EOL> request : django . http . HttpRequest , <EOL> path_parameters : path_parameters_schema_class = ninja . Path ( <EOL> default = None , include_in_schema = False <EOL> ) , <EOL> query_parameters : query_parameters_schema_class = ninja . Query ( <EOL> default = None , include_in_schema = False <EOL> ) , <EOL> request_body : request_body_schema_class = ninja . Body ( <EOL> default = None , include_in_schema = False <EOL> ) , <EOL> ) : <EOL> return self . handle_request ( <EOL> request = request , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> ) <EOL> return view_handler <EOL> def register_route ( self , router : ninja . Router , route_name : str ) -> None : <EOL> view = self . create_view_handler ( ) <EOL> view . __name__ = route_name <EOL> self . _configure_view_routing ( router = router ) ( view ) <EOL> def _configure_view_routing ( self , router : ninja . Router ) -> Callable : <EOL> def route_decorator ( view : Callable ) : <EOL> for decorator in reversed ( self . decorators ) : <EOL> view = decorator ( view ) <EOL> @ router . api_operation ( ** self . _get_router_kwargs ( view . __name__ ) ) <EOL> @ functools . wraps ( view ) <EOL> def wrapped_view ( request : django . http . HttpRequest , * args , ** kwargs ) : <EOL> return view ( request , * args , ** kwargs ) <EOL> return wrapped_view <EOL> return route_decorator <EOL> def _get_router_kwargs ( self , operation_id : str ) -> Dict [ str , Any ] : <EOL> return { <EOL> "<STR_LIT>" : [ self . method . value ] , <EOL> "<STR_LIT>" : self . path , <EOL> "<STR_LIT>" : { self . response_status . value : self . response_body } , <EOL> "<STR_LIT>" : operation_id , <EOL> ** self . _clean_router_kwargs ( self . router_kwargs ) , <EOL> } <EOL> @ staticmethod <EOL> def _clean_router_kwargs ( router_kwargs : dict ) -> dict : <EOL> locked_keys = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> cleaned_kwargs = router_kwargs . copy ( ) <EOL> for locked_key in locked_keys : <EOL> if locked_key in cleaned_kwargs : <EOL> logger . warning ( f"<STR_LIT>" ) <EOL> cleaned_kwargs . pop ( locked_key ) <EOL> return cleaned_kwargs <EOL> </s>
<s> import uuid <EOL> from examples . models import Department , Employee <EOL> from examples . views . employee_views import EmployeeViewSet <EOL> from ninja_crud . testing . core . components import PathParameters , Payloads <EOL> from ninja_crud . testing . views import ( <EOL> DeleteModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> class TestEmployeeViewSet ( ModelViewSetTestCase ) : <EOL> model_viewset_class = EmployeeViewSet <EOL> base_path = "<STR_LIT>" <EOL> department_1 : Department <EOL> department_2 : Department <EOL> employee : Employee <EOL> @ classmethod <EOL> def setUpTestData ( cls ) : <EOL> cls . department_1 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . department_2 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . employee = Employee . objects . create ( <EOL> first_name = "<STR_LIT>" , last_name = "<STR_LIT>" , department = cls . department_1 <EOL> ) <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( <EOL> ok = { "<STR_LIT>" : self . employee . id } , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } <EOL> ) <EOL> employee_payloads = Payloads ( <EOL> ok = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> bad_request = { "<STR_LIT>" : <NUM_LIT> } , <EOL> ) <EOL> test_read_employee = ReadModelViewTest ( path_parameters = get_path_parameters ) <EOL> test_update_employee = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , payloads = employee_payloads <EOL> ) <EOL> test_delete_employee = DeleteModelViewTest ( path_parameters = get_path_parameters ) <EOL> </s>
<s> import uuid <EOL> from examples . models import Department , Employee <EOL> from examples . views . department_views import DepartmentViewSet <EOL> from ninja_crud import testing <EOL> class TestDepartmentViewSet ( testing . viewsets . ModelViewSetTestCase ) : <EOL> model_viewset_class = DepartmentViewSet <EOL> base_path = "<STR_LIT>" <EOL> department_1 : Department <EOL> department_2 : Department <EOL> employee : Employee <EOL> @ classmethod <EOL> def setUpTestData ( cls ) : <EOL> cls . department_1 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . department_2 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . employee = Employee . objects . create ( <EOL> first_name = "<STR_LIT>" , last_name = "<STR_LIT>" , department = cls . department_1 <EOL> ) <EOL> @ property <EOL> def path_parameters ( self ) : <EOL> return testing . components . PathParameters ( <EOL> ok = { "<STR_LIT>" : self . department_1 . id } , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } <EOL> ) <EOL> department_payloads = testing . components . Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> bad_request = { "<STR_LIT>" : <NUM_LIT> } , <EOL> conflict = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) <EOL> test_list_departments = testing . views . ListModelViewTest ( ) <EOL> test_create_department = testing . views . CreateModelViewTest ( <EOL> payloads = department_payloads <EOL> ) <EOL> test_read_department = testing . views . ReadModelViewTest ( path_parameters ) <EOL> test_update_department = testing . views . UpdateModelViewTest ( <EOL> path_parameters , payloads = department_payloads <EOL> ) <EOL> test_delete_department = testing . views . DeleteModelViewTest ( path_parameters ) <EOL> @ property <EOL> def employees_path_parameters ( self ) : <EOL> return testing . components . PathParameters ( ok = { "<STR_LIT>" : self . department_1 . id } ) <EOL> employee_payloads = testing . components . Payloads ( <EOL> ok = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> bad_request = { "<STR_LIT>" : <NUM_LIT> } , <EOL> ) <EOL> test_list_employees = testing . views . ListModelViewTest ( <EOL> path_parameters = employees_path_parameters <EOL> ) <EOL> test_create_employee = testing . views . CreateModelViewTest ( <EOL> path_parameters = employees_path_parameters , payloads = employee_payloads <EOL> ) <EOL> </s>
<s> from ninja import Router <EOL> from examples . models import Employee <EOL> from examples . schemas import EmployeeIn , EmployeeOut <EOL> from ninja_crud import views , viewsets <EOL> router = Router ( ) <EOL> class EmployeeViewSet ( viewsets . ModelViewSet ) : <EOL> model = Employee <EOL> read_employee = views . ReadModelView ( response_body = EmployeeOut ) <EOL> update_employee = views . UpdateModelView ( <EOL> request_body = EmployeeIn , response_body = EmployeeOut <EOL> ) <EOL> delete_employee = views . DeleteModelView ( ) <EOL> EmployeeViewSet . register_routes ( router ) <EOL> </s>
<s> import http <EOL> import json <EOL> import logging <EOL> from typing import Optional , get_args <EOL> import django . db . models <EOL> import django . http <EOL> import django . test <EOL> import ninja . pagination <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters , QueryParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ListModelView <EOL> logger = logging . getLogger ( __name__ ) <EOL> class ListModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ListModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ListModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> content = json . loads ( response . content ) <EOL> queryset = self . _get_queryset ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> if self . model_view . pagination_class is None : <EOL> self . model_viewset_test_case . assertIsInstance ( content , list ) <EOL> self . model_viewset_test_case . assertEqual ( len ( content ) , queryset . count ( ) ) <EOL> self . _validate_response_items ( items = content , queryset = queryset ) <EOL> elif self . model_view . pagination_class == ninja . pagination . LimitOffsetPagination : <EOL> self . model_viewset_test_case . assertIsInstance ( content , dict ) <EOL> self . model_viewset_test_case . assertIn ( "<STR_LIT>" , content ) <EOL> self . model_viewset_test_case . assertIsInstance ( content [ "<STR_LIT>" ] , int ) <EOL> self . model_viewset_test_case . assertEqual ( <EOL> content [ "<STR_LIT>" ] , <EOL> queryset . count ( ) , <EOL> ) <EOL> limit = query_parameters . get ( "<STR_LIT>" , <NUM_LIT> ) <EOL> offset = query_parameters . get ( "<STR_LIT>" , <NUM_LIT> ) <EOL> self . model_viewset_test_case . assertIn ( "<STR_LIT>" , content ) <EOL> self . model_viewset_test_case . assertIsInstance ( content [ "<STR_LIT>" ] , list ) <EOL> self . model_viewset_test_case . assertEqual ( <EOL> len ( content [ "<STR_LIT>" ] ) , <EOL> queryset [ offset : offset + limit ] . count ( ) , <EOL> ) <EOL> self . _validate_response_items ( items = content [ "<STR_LIT>" ] , queryset = queryset ) <EOL> else : <EOL> logger . warning ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> def _get_queryset ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> django . db . models . QuerySet : <EOL> path_parameters_schema = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> return self . model_view . list_models ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> def _validate_response_items ( <EOL> self , items : list , queryset : django . db . models . QuerySet <EOL> ) : <EOL> for item in items : <EOL> self . model_viewset_test_case . assertIsInstance ( item , dict ) <EOL> model = queryset . get ( id = item [ "<STR_LIT>" ] ) <EOL> response_body_class = get_args ( self . model_view . response_body ) [ <NUM_LIT> ] <EOL> response_body = response_body_class . from_orm ( model ) <EOL> self . model_viewset_test_case . assertDictEqual ( <EOL> item , json . loads ( response_body . json ( ) ) <EOL> ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_query_parameters_bad_request ( self ) : <EOL> self . view_test_manager . test_view_query_parameters_bad_request ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters , Payloads <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import CreateModelView <EOL> class CreateModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : CreateModelView <EOL> def __init__ ( <EOL> self , <EOL> payloads : ArgOrCallable [ Payloads , TestCaseType ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = CreateModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> payloads = payloads , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , response : django . http . HttpResponse , path_parameters : dict <EOL> ) -> dict : <EOL> content = json . loads ( response . content ) <EOL> path_parameters_schema = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> model_class = self . model_view . init_model ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> ) . __class__ <EOL> model = model_class . objects . get ( id = content [ "<STR_LIT>" ] ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( model ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . CREATED , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_payloads_bad_request ( self ) : <EOL> self . view_test_manager . test_view_payloads_bad_request ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_payloads_conflict ( self ) : <EOL> self . view_test_manager . test_view_payloads_conflict ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> from typing import List <EOL> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemOut <EOL> class TestListModelView ( TestCase ) : <EOL> def test_register_route_with_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> list_items = views . ListModelView ( <EOL> response_body = List [ ItemOut ] , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . list_items . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> def test_bind_to_viewset_without_response_body_error ( self ) : <EOL> model_view = views . ListModelView ( ) <EOL> class ItemModelViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> with self . assertRaises ( AttributeError ) : <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> </s>
<s> import unittest <EOL> class TestModelViewSet ( unittest . TestCase ) : <EOL> pass <EOL> </s>
<s> from . http_method import HTTPMethod <EOL> __all__ = [ "<STR_LIT>" ] <EOL> </s>
<s> from typing import List <EOL> from ninja import Router <EOL> from examples . models import Department , Employee <EOL> from examples . schemas import DepartmentIn , DepartmentOut , EmployeeIn , EmployeeOut <EOL> from ninja_crud import views , viewsets <EOL> router = Router ( ) <EOL> class DepartmentViewSet ( viewsets . ModelViewSet ) : <EOL> model = Department <EOL> default_request_body = DepartmentIn <EOL> default_response_body = DepartmentOut <EOL> list_departments = views . ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> create_department = views . CreateModelView ( ) <EOL> read_department = views . ReadModelView ( ) <EOL> update_department = views . UpdateModelView ( ) <EOL> delete_department = views . DeleteModelView ( ) <EOL> list_employees = views . ListModelView ( <EOL> path = "<STR_LIT>" , <EOL> get_queryset = lambda request , path_parameters : Employee . objects . filter ( <EOL> department_id = getattr ( path_parameters , "<STR_LIT>" , None ) <EOL> ) , <EOL> response_body = List [ EmployeeOut ] , <EOL> ) <EOL> create_employee = views . CreateModelView ( <EOL> path = "<STR_LIT>" , <EOL> request_body = EmployeeIn , <EOL> response_body = EmployeeOut , <EOL> init_model = lambda request , path_parameters : Employee ( <EOL> department_id = getattr ( path_parameters , "<STR_LIT>" , None ) <EOL> ) , <EOL> ) <EOL> DepartmentViewSet . register_routes ( router ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional <EOL> from django . db . models import Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class DeleteModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Schema ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> get_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , <EOL> pre_delete : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> post_delete : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> delete_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , None ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . DELETE , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = None , <EOL> request_body = None , <EOL> response_body = None , <EOL> response_status = http . HTTPStatus . NO_CONTENT , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . get_model = get_model or self . _default_get_model <EOL> self . pre_delete = pre_delete or self . _default_pre_delete <EOL> self . post_delete = post_delete or self . _default_post_delete <EOL> self . delete_model = delete_model or self . _default_delete_model <EOL> def _default_get_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> Model : <EOL> return self . model_viewset_class . model . objects . get ( <EOL> ** ( path_parameters . dict ( ) if path_parameters else { } ) <EOL> ) <EOL> @ staticmethod <EOL> def _default_pre_delete ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> @ staticmethod <EOL> def _default_post_delete ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> def _default_delete_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> None : <EOL> instance = self . get_model ( request , path_parameters ) <EOL> self . pre_delete ( request , instance ) <EOL> instance . delete ( ) <EOL> self . post_delete ( request , instance ) <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> None : <EOL> self . delete_model ( request , path_parameters ) <EOL> </s>
<s> import random <EOL> import uuid <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> from ninja_crud . testing . views import ( <EOL> CreateModelViewTest , <EOL> DeleteModelViewTest , <EOL> ListModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from tests . test_app . tests . base_test_case import BaseTestCase <EOL> from tests . test_app . views . collection_views import CollectionViewSet <EOL> class TestCollectionViewSet ( ModelViewSetTestCase , BaseTestCase ) : <EOL> model_viewset_class = CollectionViewSet <EOL> base_path = "<STR_LIT>" <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( <EOL> ok = [ { "<STR_LIT>" : self . collection_1 . id } ] , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } <EOL> ) <EOL> def get_headers_ok ( self ) : <EOL> return Headers ( <EOL> ok = [ { "<STR_LIT>" : f"<STR_LIT>" } ] , unauthorized = { } <EOL> ) <EOL> def get_headers_ok_forbidden ( self ) : <EOL> return Headers ( <EOL> ok = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> unauthorized = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> forbidden = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> ) <EOL> collection_payloads = Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> bad_request = { "<STR_LIT>" : [ ] } , <EOL> conflict = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) <EOL> test_list_collections = ListModelViewTest ( <EOL> headers = get_headers_ok , <EOL> query_parameters = QueryParameters ( <EOL> ok = [ { } , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ "<STR_LIT>" ] , "<STR_LIT>" : <NUM_LIT> } ] , <EOL> bad_request = { "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> ) , <EOL> ) <EOL> test_create_collection = CreateModelViewTest ( <EOL> headers = get_headers_ok , <EOL> payloads = collection_payloads , <EOL> ) <EOL> test_read_collection = ReadModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok , <EOL> ) <EOL> test_update_collection = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> payloads = collection_payloads , <EOL> ) <EOL> test_delete_collection = DeleteModelViewTest ( <EOL> path_parameters = get_path_parameters , headers = get_headers_ok_forbidden <EOL> ) <EOL> test_list_collection_items = ListModelViewTest ( <EOL> path_parameters = get_path_parameters , headers = get_headers_ok_forbidden <EOL> ) <EOL> test_create_collection_item = CreateModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> payloads = Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) , <EOL> ) <EOL> </s>
<s> from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class QueryParameters : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> bad_request : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . bad_request : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( bad_request ) if bad_request is not None else None <EOL> ) <EOL> </s>
<s> import http <EOL> from typing import Optional <EOL> import django . http <EOL> import django . test <EOL> from django . core . exceptions import ObjectDoesNotExist <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import DeleteModelView <EOL> class DeleteModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : DeleteModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = DeleteModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> self . model_viewset_test_case . assertEqual ( response . content , b"<STR_LIT>" ) <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> with self . model_viewset_test_case . assertRaises ( ObjectDoesNotExist ) : <EOL> self . model_view . get_model ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . NO_CONTENT , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> import inspect <EOL> import logging <EOL> from typing import List , Type <EOL> import django . test <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import AbstractModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> logger = logging . getLogger ( __name__ ) <EOL> class ModelViewSetTestCase ( django . test . TestCase ) : <EOL> model_viewset_class : Type [ ModelViewSet ] <EOL> base_path : str <EOL> def __init_subclass__ ( cls , ** kwargs ) : <EOL> super ( ) . __init_subclass__ ( ** kwargs ) <EOL> if hasattr ( cls , "<STR_LIT>" ) : <EOL> cls . _bind_test_model_views ( ) <EOL> cls . _register_test_methods ( ) <EOL> @ classmethod <EOL> def _bind_test_model_views ( cls ) : <EOL> associated_model_views = [ ] <EOL> cls_instance = cls ( ) <EOL> for attr_name , attr_value in inspect . getmembers ( cls ) : <EOL> if attr_name . startswith ( "<STR_LIT>" ) and isinstance ( <EOL> attr_value , AbstractModelViewTest <EOL> ) : <EOL> test_model_view_name , test_model_view = attr_name , attr_value <EOL> test_model_view . bind_to_model_viewset_test_case ( <EOL> model_viewset_test_case = cls_instance <EOL> ) <EOL> associated_model_view = cls . _get_associated_model_view ( <EOL> test_attr_name = test_model_view_name , <EOL> model_view_class = test_model_view . model_view_class , <EOL> ) <EOL> test_model_view . bind_to_model_view ( model_view = associated_model_view ) <EOL> associated_model_views . append ( associated_model_view ) <EOL> cls . _check_all_model_views_associated ( <EOL> associated_model_views = associated_model_views <EOL> ) <EOL> @ classmethod <EOL> def _register_test_methods ( cls ) : <EOL> for attr_name , attr_value in inspect . getmembers ( cls ) : <EOL> if attr_name . startswith ( "<STR_LIT>" ) and isinstance ( <EOL> attr_value , AbstractModelViewTest <EOL> ) : <EOL> for method_name , method in inspect . getmembers ( <EOL> attr_value , predicate = inspect . ismethod <EOL> ) : <EOL> if method_name . startswith ( "<STR_LIT>" ) : <EOL> new_test_method_name = f"<STR_LIT>" <EOL> setattr ( cls , new_test_method_name , method ) <EOL> @ classmethod <EOL> def _get_associated_model_view ( <EOL> cls , test_attr_name : str , model_view_class : Type [ AbstractModelView ] <EOL> ) -> AbstractModelView : <EOL> for attr_name , attr_value in inspect . getmembers ( cls . model_viewset_class ) : <EOL> if ( <EOL> isinstance ( attr_value , model_view_class ) <EOL> and test_attr_name == f"<STR_LIT>" <EOL> ) : <EOL> return attr_value <EOL> raise ValueError ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> @ classmethod <EOL> def _check_all_model_views_associated ( <EOL> cls , associated_model_views : List [ AbstractModelView ] <EOL> ) -> None : <EOL> for attr_name , attr_value in inspect . getmembers ( cls . model_viewset_class ) : <EOL> if ( <EOL> isinstance ( attr_value , AbstractModelView ) <EOL> and attr_value not in associated_model_views <EOL> ) : <EOL> logger . warning ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> </s>
<s> from typing import Any , Optional <EOL> from django . contrib . auth . models import User <EOL> from django . http import HttpRequest <EOL> from ninja . security import HttpBearer <EOL> class TokenBearer ( HttpBearer ) : <EOL> def authenticate ( self , request : HttpRequest , token : str ) -> Optional [ Any ] : <EOL> user_queryset = User . objects . filter ( id = token ) <EOL> if user_queryset . exists ( ) : <EOL> return user_queryset . get ( ) <EOL> return None <EOL> </s>
<s> import logging <EOL> import frontmatter <EOL> import yaml <EOL> READMEIO_CONFIG_PATH = "<STR_LIT>" <EOL> def load_yaml_file ( file_path : str ) : <EOL> with open ( file_path ) as yaml_file : <EOL> return yaml . load ( yaml_file , Loader = yaml . FullLoader ) <EOL> def apply_metadata_to_markdown ( markdown_file_path : str , metadata : dict ) : <EOL> try : <EOL> post = frontmatter . load ( markdown_file_path ) <EOL> post . metadata = metadata <EOL> frontmatter . dump ( post , markdown_file_path ) <EOL> except FileNotFoundError : <EOL> logging . error ( f"<STR_LIT>" ) <EOL> except Exception as e : <EOL> logging . error ( f"<STR_LIT>" ) <EOL> raise e <EOL> def main ( ) : <EOL> readmeio_config = load_yaml_file ( READMEIO_CONFIG_PATH ) <EOL> for doc in readmeio_config [ "<STR_LIT>" ] : <EOL> markdown_file_path = doc . pop ( "<STR_LIT>" ) <EOL> apply_metadata_to_markdown ( markdown_file_path = markdown_file_path , metadata = doc ) <EOL> if __name__ == "<STR_LIT>" : <EOL> logging . basicConfig ( level = logging . INFO ) <EOL> main ( ) <EOL> </s>
<s> import json <EOL> from abc import ABC , abstractmethod <EOL> from typing import TYPE_CHECKING , Type <EOL> import django . http <EOL> import django . utils . http <EOL> from ninja_crud . views import AbstractModelView <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> class AbstractModelViewTest ( ABC ) : <EOL> model_view : AbstractModelView <EOL> model_viewset_test_case : "<STR_LIT>" <EOL> def __init__ ( self , model_view_class : Type [ AbstractModelView ] ) -> None : <EOL> self . model_view_class = model_view_class <EOL> def simulate_request ( <EOL> self , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) -> django . http . HttpResponse : <EOL> base_path = self . model_viewset_test_case . base_path . strip ( "<STR_LIT>" ) <EOL> endpoint_path = self . model_view . path . lstrip ( "<STR_LIT>" ) <EOL> path = f"<STR_LIT>" <EOL> return self . model_viewset_test_case . client_class ( ) . generic ( <EOL> method = self . model_view . method . value , <EOL> path = path . format ( ** path_parameters ) , <EOL> QUERY_STRING = django . utils . http . urlencode ( query_parameters , doseq = True ) , <EOL> data = json . dumps ( payload or None ) , <EOL> content_type = "<STR_LIT>" , <EOL> ** headers , <EOL> ) <EOL> @ abstractmethod <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ abstractmethod <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> def bind_to_model_viewset_test_case ( <EOL> self , model_viewset_test_case : "<STR_LIT>" <EOL> ) -> None : <EOL> self . model_viewset_test_case = model_viewset_test_case <EOL> def bind_to_model_view ( self , model_view : AbstractModelView ) -> None : <EOL> self . model_view = model_view <EOL> </s>
<s> import unittest . mock <EOL> import django . core . exceptions <EOL> import django . test <EOL> from ninja_crud import views <EOL> class TestAbstractView ( django . test . TestCase ) : <EOL> def test_docstrings ( self ) : <EOL> import http <EOL> from typing import Any , Optional , Tuple , Union <EOL> import django . http <EOL> import ninja <EOL> from ninja_crud import views <EOL> class HelloWorldSchema ( ninja . Schema ) : <EOL> message : str <EOL> class HelloWorldView ( views . AbstractView ) : <EOL> def __init__ ( self ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = views . enums . HTTPMethod . GET , <EOL> path = "<STR_LIT>" , <EOL> response_body = HelloWorldSchema , <EOL> ) <EOL> def handle_request ( <EOL> self , <EOL> request : django . http . HttpRequest , <EOL> path_parameters : Optional [ ninja . Schema ] , <EOL> query_parameters : Optional [ ninja . Schema ] , <EOL> request_body : Optional [ ninja . Schema ] , <EOL> ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : <EOL> return { "<STR_LIT>" : "<STR_LIT>" } <EOL> router = ninja . Router ( ) <EOL> view = HelloWorldView ( ) <EOL> view . register_route ( router , route_name = "<STR_LIT>" ) <EOL> self . assertEqual ( <EOL> view . handle_request ( <EOL> request = django . http . HttpRequest ( ) , <EOL> path_parameters = None , <EOL> query_parameters = None , <EOL> request_body = None , <EOL> ) , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) <EOL> def test_sanitize_and_merge_router_kwargs ( self ) : <EOL> router_kwargs = { "<STR_LIT>" : True , "<STR_LIT>" : "<STR_LIT>" } <EOL> sanitized_router_kwargs = views . AbstractView . _clean_router_kwargs ( router_kwargs ) <EOL> self . assertDictEqual ( sanitized_router_kwargs , router_kwargs ) <EOL> def test_sanitize_and_merge_router_kwargs_with_path ( self ) : <EOL> router_kwargs = { "<STR_LIT>" : "<STR_LIT>" } <EOL> with unittest . mock . patch ( <EOL> "<STR_LIT>" <EOL> ) as mock_logger : <EOL> sanitized_router_kwargs = views . AbstractView . _clean_router_kwargs ( <EOL> router_kwargs <EOL> ) <EOL> mock_logger . warning . assert_called_once ( ) <EOL> self . assertDictEqual ( sanitized_router_kwargs , { } ) <EOL> </s>
<s> from typing import Dict , List , Union <EOL> def ensure_list_of_dicts ( data : Union [ Dict , List [ Dict ] ] ) -> List [ Dict ] : <EOL> if isinstance ( data , dict ) : <EOL> return [ data ] <EOL> elif not isinstance ( data , list ) : <EOL> raise TypeError ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> elif len ( data ) == <NUM_LIT> : <EOL> raise ValueError ( <EOL> "<STR_LIT>" <EOL> ) <EOL> return data <EOL> </s>
<s> import logging <EOL> import os <EOL> import subprocess <EOL> import yaml <EOL> GLOBAL_CONFIG_PATH = "<STR_LIT>" <EOL> PYDOC_MARKDOWN_CONFIG_PATH = "<STR_LIT>" <EOL> def load_yaml_file ( file_path : str ) : <EOL> with open ( file_path ) as yaml_file : <EOL> return yaml . load ( yaml_file , Loader = yaml . FullLoader ) <EOL> def convert_docstrings_to_markdown ( <EOL> input_path : str , output_path : str , markdown_config : dict <EOL> ) : <EOL> try : <EOL> os . makedirs ( os . path . dirname ( output_path ) , exist_ok = True ) <EOL> markdown_config [ "<STR_LIT>" ] [ "<STR_LIT>" ] = output_path <EOL> absolute_input_path = os . path . join ( os . getcwd ( ) , input_path ) <EOL> subprocess . run ( <EOL> [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> absolute_input_path , <EOL> yaml . dump ( markdown_config ) , <EOL> ] <EOL> ) <EOL> except Exception as e : <EOL> logging . error ( f"<STR_LIT>" ) <EOL> def main ( ) : <EOL> global_config = load_yaml_file ( GLOBAL_CONFIG_PATH ) <EOL> pydoc_markdown_config = load_yaml_file ( PYDOC_MARKDOWN_CONFIG_PATH ) <EOL> settings = global_config [ "<STR_LIT>" ] <EOL> for module in global_config [ "<STR_LIT>" ] : <EOL> input_path = os . path . join ( settings [ "<STR_LIT>" ] , module [ "<STR_LIT>" ] ) <EOL> output_path = os . path . join ( settings [ "<STR_LIT>" ] , module [ "<STR_LIT>" ] ) <EOL> convert_docstrings_to_markdown ( <EOL> input_path = input_path , <EOL> output_path = output_path , <EOL> markdown_config = pydoc_markdown_config , <EOL> ) <EOL> if __name__ == "<STR_LIT>" : <EOL> logging . basicConfig ( level = logging . INFO ) <EOL> main ( ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import ManyToManyField , Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class CreateModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Schema ] = None , <EOL> request_body : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ Schema ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> init_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , <EOL> pre_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> post_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> create_model : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] <EOL> ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . POST , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = None , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . CREATED , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . init_model = init_model or self . _default_init_model <EOL> self . pre_save = pre_save or self . _default_pre_save <EOL> self . post_save = post_save or self . _default_post_save <EOL> self . create_model = create_model or self . _default_create_model <EOL> def _default_init_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> Model : <EOL> return self . model_viewset_class . model ( ) <EOL> @ staticmethod <EOL> def _default_pre_save ( request : HttpRequest , instance : Model ) -> None : <EOL> instance . full_clean ( ) <EOL> @ staticmethod <EOL> def _default_post_save ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> def _default_create_model ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> instance = self . init_model ( request , path_parameters ) <EOL> m2m_fields_to_set = [ ] <EOL> if request_body : <EOL> for field , value in request_body . dict ( ) . items ( ) : <EOL> if isinstance ( instance . _meta . get_field ( field ) , ManyToManyField ) : <EOL> m2m_fields_to_set . append ( ( field , value ) ) <EOL> else : <EOL> setattr ( instance , field , value ) <EOL> self . pre_save ( request , instance ) <EOL> instance . save ( ) <EOL> self . post_save ( request , instance ) <EOL> for field , value in m2m_fields_to_set : <EOL> getattr ( instance , field ) . set ( value ) <EOL> return instance <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . create_model ( request , path_parameters , request_body ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . request_body is None : <EOL> self . request_body = self . model_viewset_class . default_request_body <EOL> if self . response_body is None : <EOL> self . response_body = self . model_viewset_class . default_response_body <EOL> </s>
<s> from ninja_crud . testing . core . components import PathParameters , Payloads <EOL> from ninja_crud . testing . views import ( <EOL> CreateModelViewTest , <EOL> DeleteModelViewTest , <EOL> ListModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from tests . test_app . tests . base_test_case import BaseTestCase <EOL> from tests . test_app . views . user_views import UserViewSet <EOL> class TestUserViewSet ( ModelViewSetTestCase , BaseTestCase ) : <EOL> model_viewset_class = UserViewSet <EOL> base_path = "<STR_LIT>" <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( ok = { "<STR_LIT>" : self . user_1 . id } ) <EOL> def get_user_payloads ( self ) : <EOL> return Payloads ( <EOL> ok = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ self . group_1 . id , self . group_2 . id ] , <EOL> } , <EOL> bad_request = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> conflict = { <EOL> "<STR_LIT>" : self . user_2 . username , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) <EOL> test_list_users = ListModelViewTest ( ) <EOL> test_create_user = CreateModelViewTest ( payloads = get_user_payloads ) <EOL> test_read_user = ReadModelViewTest ( path_parameters = get_path_parameters ) <EOL> test_update_user = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , payloads = get_user_payloads <EOL> ) <EOL> test_delete_user = DeleteModelViewTest ( path_parameters = get_path_parameters ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class ReadModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Type [ Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ Schema ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> read_model : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] <EOL> ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . GET , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = None , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . OK , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . read_model = read_model or self . _default_read_model <EOL> def _default_read_model ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . model_viewset_class . model . objects . get ( <EOL> ** ( path_parameters . dict ( ) if path_parameters else { } ) <EOL> ) <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . read_model ( request , path_parameters , query_parameters ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . response_body is None : <EOL> self . response_body = self . model_viewset_class . default_response_body <EOL> </s>
<s> from enum import Enum <EOL> class HTTPMethod ( str , Enum ) : <EOL> def __init__ ( self , value , description ) : <EOL> self . _value_ = value <EOL> self . description = description <EOL> def __new__ ( cls , value , description ) : <EOL> obj = str . __new__ ( cls , value ) <EOL> obj . _value_ = value <EOL> obj . description = description <EOL> return obj <EOL> CONNECT = "<STR_LIT>" , "<STR_LIT>" <EOL> DELETE = "<STR_LIT>" , "<STR_LIT>" <EOL> GET = "<STR_LIT>" , "<STR_LIT>" <EOL> HEAD = "<STR_LIT>" , "<STR_LIT>" <EOL> OPTIONS = "<STR_LIT>" , "<STR_LIT>" <EOL> PATCH = "<STR_LIT>" , "<STR_LIT>" <EOL> POST = "<STR_LIT>" , "<STR_LIT>" <EOL> PUT = "<STR_LIT>" , "<STR_LIT>" <EOL> TRACE = "<STR_LIT>" , "<STR_LIT>" <EOL> </s>
<s> from . abstract_model_view import AbstractModelView <EOL> from . abstract_view import AbstractView <EOL> from . create_model_view import CreateModelView <EOL> from . delete_model_view import DeleteModelView <EOL> from . list_model_view import ListModelView <EOL> from . read_model_view import ReadModelView <EOL> from . update_model_view import UpdateModelView <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import ManyToManyField , Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class UpdateModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod = HTTPMethod . PUT , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Schema ] = None , <EOL> request_body : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ Schema ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> get_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , <EOL> pre_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> post_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> update_model : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] <EOL> ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = None , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . OK , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . get_model = get_model or self . _default_get_model <EOL> self . pre_save = pre_save or self . _default_pre_save <EOL> self . post_save = post_save or self . _default_post_save <EOL> self . update_model = update_model or self . _default_update_model <EOL> def _default_get_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> Model : <EOL> return self . model_viewset_class . model . objects . get ( <EOL> ** ( path_parameters . dict ( ) if path_parameters else { } ) <EOL> ) <EOL> @ staticmethod <EOL> def _default_pre_save ( request : HttpRequest , instance : Model ) -> None : <EOL> instance . full_clean ( ) <EOL> @ staticmethod <EOL> def _default_post_save ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> def _default_update_model ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> instance = self . get_model ( request , path_parameters ) <EOL> if request_body : <EOL> for field , value in request_body . dict ( exclude_unset = True ) . items ( ) : <EOL> if isinstance ( instance . _meta . get_field ( field ) , ManyToManyField ) : <EOL> getattr ( instance , field ) . set ( value ) <EOL> else : <EOL> setattr ( instance , field , value ) <EOL> self . pre_save ( request , instance ) <EOL> instance . save ( ) <EOL> self . post_save ( request , instance ) <EOL> return instance <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . update_model ( request , path_parameters , request_body ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . request_body is None : <EOL> self . request_body = self . model_viewset_class . default_request_body <EOL> if self . response_body is None : <EOL> self . response_body = self . model_viewset_class . default_response_body <EOL> </s>
<s> from datetime import date <EOL> from typing import Optional <EOL> from uuid import UUID <EOL> from ninja import Schema <EOL> class DepartmentIn ( Schema ) : <EOL> title : str <EOL> class DepartmentOut ( Schema ) : <EOL> id : UUID <EOL> title : str <EOL> class EmployeeIn ( Schema ) : <EOL> first_name : str <EOL> last_name : str <EOL> birthdate : Optional [ date ] = None <EOL> class EmployeeOut ( Schema ) : <EOL> id : UUID <EOL> first_name : str <EOL> last_name : str <EOL> birthdate : Optional [ date ] = None <EOL> department_id : UUID <EOL> </s>
