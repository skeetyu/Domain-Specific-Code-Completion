<s> from django . http import JsonResponse <EOL> from django . shortcuts import render <EOL> from django . http import HttpResponseRedirect , HttpResponse <EOL> from django . contrib . auth . decorators import login_required <EOL> from django . conf import settings as _settings <EOL> @ login_required ( login_url = '<STR_LIT>' ) <EOL> def index ( request ) : <EOL> if _settings . ID_SERVER == '<STR_LIT>' : <EOL> _settings . ID_SERVER = request . get_host ( ) . split ( "<STR_LIT>" ) [ <NUM_LIT> ] <EOL> return render ( request , '<STR_LIT>' ) <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . TextField ( blank = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , unique = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . shortcuts import render <EOL> from django . http import HttpResponseRedirect <EOL> from django . contrib . auth . hashers import make_password <EOL> from django . db . models import Q <EOL> from django . contrib . auth . decorators import login_required <EOL> from django . contrib import auth <EOL> from django . forms . models import model_to_dict <EOL> from itertools import chain <EOL> from django . db . models . fields import DateTimeField , DateField , CharField , TextField <EOL> from django . db . models import Model <EOL> from django . http import JsonResponse <EOL> import json <EOL> import time <EOL> import datetime <EOL> import hashlib <EOL> from api . models import RustDeskToken , UserProfile , RustDeskTag , RustDeskPeer , RustDesDevice <EOL> import copy <EOL> from . views_front import * <EOL> from . views_api import * <EOL> from . front_locale import * <EOL> </s>
<s> from . models_work import * <EOL> from . models_user import * <EOL> </s>
<s> from django . apps import AppConfig <EOL> class WebuiConfig ( AppConfig ) : <EOL> name = '<STR_LIT>' <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( auto_now = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( <EOL> blank = True , null = True , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = False , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( max_length = <NUM_LIT> , unique = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( default = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( blank = True , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = True , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ) , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class ApiConfig ( AppConfig ) : <EOL> name = '<STR_LIT>' <EOL> </s>
<s> import platform <EOL> import logging <EOL> from . models_user import UserProfile <EOL> logger = logging . getLogger ( __name__ ) <EOL> from django . conf import settings as _settings <EOL> def settings ( request ) : <EOL> context = { '<STR_LIT>' : _settings } <EOL> try : <EOL> username = request . user <EOL> u = UserProfile . objects . get ( username = username ) <EOL> context [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> context [ '<STR_LIT>' ] = u <EOL> context [ '<STR_LIT>' ] = username <EOL> context [ '<STR_LIT>' ] = u . is_admin <EOL> context [ '<STR_LIT>' ] = u . is_active <EOL> context [ '<STR_LIT>' ] = _settings . ID_SERVER <EOL> context [ '<STR_LIT>' ] = True if platform . system ( ) == '<STR_LIT>' else False <EOL> logger . info ( "<STR_LIT>" ) <EOL> except Exception as e : <EOL> logger . error ( "<STR_LIT>" . format ( e ) ) <EOL> return context <EOL> </s>
<s> from django . db import models <EOL> from django . contrib import admin <EOL> from django . utils . translation import gettext as _ <EOL> class RustDeskToken ( models . Model ) : <EOL> username = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> rid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> uid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> uuid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> access_token = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> , blank = True ) <EOL> create_time = models . DateTimeField ( verbose_name = _ ( '<STR_LIT>' ) , auto_now_add = True ) <EOL> class Meta : <EOL> ordering = ( '<STR_LIT>' , ) <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = _ ( "<STR_LIT>" ) <EOL> class RustDeskTokenAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> search_fields = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_filter = ( '<STR_LIT>' , ) <EOL> class RustDeskTag ( models . Model ) : <EOL> uid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> tag_name = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> tag_color = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> , blank = True ) <EOL> class Meta : <EOL> ordering = ( '<STR_LIT>' , ) <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = _ ( "<STR_LIT>" ) <EOL> class RustDeskTagAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> search_fields = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_filter = ( '<STR_LIT>' , ) <EOL> class RustDeskPeer ( models . Model ) : <EOL> uid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> rid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> username = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> hostname = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> alias = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> platform = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> tags = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> rhash = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> class Meta : <EOL> ordering = ( '<STR_LIT>' , ) <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = _ ( "<STR_LIT>" ) <EOL> class RustDeskPeerAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> search_fields = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_filter = ( '<STR_LIT>' , '<STR_LIT>' , ) <EOL> class RustDesDevice ( models . Model ) : <EOL> rid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> , blank = True ) <EOL> cpu = models . CharField ( verbose_name = '<STR_LIT>' , max_length = <NUM_LIT> ) <EOL> hostname = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> memory = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> os = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> uuid = models . CharField ( verbose_name = '<STR_LIT>' , max_length = <NUM_LIT> ) <EOL> username = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> , blank = True ) <EOL> version = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> create_time = models . DateTimeField ( verbose_name = _ ( '<STR_LIT>' ) , auto_now_add = True ) <EOL> update_time = models . DateTimeField ( verbose_name = ( '<STR_LIT>' ) , auto_now = True , blank = True ) <EOL> class Meta : <EOL> ordering = ( '<STR_LIT>' , ) <EOL> verbose_name = _ ( "<STR_LIT>" ) <EOL> verbose_name_plural = _ ( "<STR_LIT>" ) <EOL> class RustDesDeviceAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> search_fields = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_filter = ( '<STR_LIT>' , ) <EOL> class ShareLink ( models . Model ) : <EOL> uid = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> shash = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> peers = models . CharField ( verbose_name = _ ( '<STR_LIT>' ) , max_length = <NUM_LIT> ) <EOL> is_used = models . BooleanField ( verbose_name = _ ( '<STR_LIT>' ) , default = False ) <EOL> is_expired = models . BooleanField ( verbose_name = _ ( '<STR_LIT>' ) , default = False ) <EOL> create_time = models . DateTimeField ( verbose_name = _ ( '<STR_LIT>' ) , auto_now_add = True ) <EOL> class Meta : <EOL> ordering = ( '<STR_LIT>' , ) <EOL> verbose_name = _ ( "<STR_LIT>" ) <EOL> verbose_name_plural = _ ( "<STR_LIT>" ) <EOL> class ShareLinkAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> search_fields = ( '<STR_LIT>' , ) <EOL> list_filter = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> </s>
<s> APP_VERSION = '<STR_LIT>' <EOL> </s>
<s> from django . contrib import admin <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django import template <EOL> from django . utils . translation import gettext as _ <EOL> register = template . Library ( ) <EOL> @ register . filter <EOL> def translate ( text ) : <EOL> return _ ( text ) <EOL> </s>
<s> from django . shortcuts import render <EOL> from django . http import HttpResponseRedirect <EOL> from django . contrib . auth . hashers import make_password <EOL> from django . http import JsonResponse <EOL> from django . db . models import Q <EOL> from django . contrib . auth . decorators import login_required <EOL> from django . contrib import auth <EOL> from api . models import RustDeskPeer , RustDesDevice , UserProfile , ShareLink <EOL> from django . forms . models import model_to_dict <EOL> from django . core . paginator import Paginator <EOL> from django . http import HttpResponse <EOL> from django . conf import settings <EOL> from itertools import chain <EOL> from django . db . models . fields import DateTimeField , DateField , CharField , TextField <EOL> import datetime <EOL> from django . db . models import Model <EOL> import json <EOL> import time <EOL> import hashlib <EOL> import sys <EOL> from io import BytesIO <EOL> import xlwt <EOL> from django . utils . translation import gettext as _ <EOL> salt = '<STR_LIT>' <EOL> EFFECTIVE_SECONDS = <NUM_LIT> <EOL> def getStrMd5 ( s ) : <EOL> if not isinstance ( s , ( str , ) ) : <EOL> s = str ( s ) <EOL> myHash = hashlib . md5 ( ) <EOL> myHash . update ( s . encode ( ) ) <EOL> return myHash . hexdigest ( ) <EOL> def model_to_dict2 ( instance , fields = None , exclude = None , replace = None , default = None ) : <EOL> if not isinstance ( instance , Model ) : <EOL> raise Exception ( _ ( '<STR_LIT>' ) ) <EOL> if replace and type ( replace ) == dict : <EOL> for replace_field in replace . values ( ) : <EOL> if hasattr ( instance , replace_field ) : <EOL> raise Exception ( _ ( f'<STR_LIT>' ) ) <EOL> if default and type ( default ) == dict : <EOL> for default_key in default . keys ( ) : <EOL> if hasattr ( instance , default_key ) : <EOL> raise Exception ( _ ( f'<STR_LIT>' ) ) <EOL> opts = instance . _meta <EOL> data = { } <EOL> for f in chain ( opts . concrete_fields , opts . private_fields , opts . many_to_many ) : <EOL> if not getattr ( f , '<STR_LIT>' , False ) : <EOL> if type ( f ) == DateField or type ( f ) == DateTimeField : <EOL> pass <EOL> else : <EOL> continue <EOL> if fields is not None and f . name not in fields : <EOL> continue <EOL> if exclude and f . name in exclude : <EOL> continue <EOL> key = f . name <EOL> if type ( f ) == DateTimeField : <EOL> value = getattr ( instance , key ) <EOL> value = datetime . datetime . strftime ( value , '<STR_LIT>' ) <EOL> elif type ( f ) == DateField : <EOL> value = getattr ( instance , key ) <EOL> value = datetime . datetime . strftime ( value , '<STR_LIT>' ) <EOL> elif type ( f ) == CharField or type ( f ) == TextField : <EOL> value = getattr ( instance , key ) <EOL> try : <EOL> value = json . loads ( value ) <EOL> except Exception as _ : <EOL> value = value <EOL> else : <EOL> key = f . name <EOL> value = f . value_from_object ( instance ) <EOL> if replace and key in replace . keys ( ) : <EOL> key = replace . get ( key ) <EOL> data [ key ] = value <EOL> if default : <EOL> data . update ( default ) <EOL> return data <EOL> def index ( request ) : <EOL> print ( '<STR_LIT>' , sys . argv ) <EOL> if request . user and request . user . username != '<STR_LIT>' : <EOL> return HttpResponseRedirect ( '<STR_LIT>' ) <EOL> return HttpResponseRedirect ( '<STR_LIT>' ) <EOL> def user_action ( request ) : <EOL> action = request . GET . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if action == '<STR_LIT>' : <EOL> return user_login ( request ) <EOL> elif action == '<STR_LIT>' : <EOL> return user_register ( request ) <EOL> elif action == '<STR_LIT>' : <EOL> return user_logout ( request ) <EOL> else : <EOL> return <EOL> def user_login ( request ) : <EOL> if request . method == '<STR_LIT>' : <EOL> return render ( request , '<STR_LIT>' ) <EOL> username = request . POST . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> password = request . POST . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if not username or not password : <EOL> return JsonResponse ( { '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : _ ( '<STR_LIT>' ) } ) <EOL> user = auth . authenticate ( username = username , password = password ) <EOL> if user : <EOL> auth . login ( request , user ) <EOL> return JsonResponse ( { '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> else : <EOL> return JsonResponse ( { '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : _ ( '<STR_LIT>' ) } ) <EOL> def user_register ( request ) : <EOL> info = '<STR_LIT>' <EOL> if request . method == '<STR_LIT>' : <EOL> return render ( request , '<STR_LIT>' ) <EOL> ALLOW_REGISTRATION = settings . ALLOW_REGISTRATION <EOL> result = { <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> if not ALLOW_REGISTRATION : <EOL> result [ '<STR_LIT>' ] = _ ( '<STR_LIT>' ) <EOL> return JsonResponse ( result ) <EOL> username = request . POST . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> password1 = request . POST . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if len ( username ) <= <NUM_LIT> : <EOL> info = _ ( '<STR_LIT>' ) <EOL> result [ '<STR_LIT>' ] = info <EOL> return JsonResponse ( result ) <EOL> if len ( password1 ) < <NUM_LIT> or len ( password1 ) > <NUM_LIT> : <EOL> info = _ ( '<STR_LIT>' ) <EOL> result [ '<STR_LIT>' ] = info <EOL> return JsonResponse ( result ) <EOL> user = UserProfile . objects . filter ( Q ( username = username ) ) . first ( ) <EOL> if user : <EOL> info = _ ( '<STR_LIT>' ) <EOL> result [ '<STR_LIT>' ] = info <EOL> return JsonResponse ( result ) <EOL> user = UserProfile ( <EOL> username = username , <EOL> password = make_password ( password1 ) , <EOL> is_admin = True if UserProfile . objects . count ( ) == <NUM_LIT> else False , <EOL> is_superuser = True if UserProfile . objects . count ( ) == <NUM_LIT> else False , <EOL> is_active = True <EOL> ) <EOL> user . save ( ) <EOL> result [ '<STR_LIT>' ] = info <EOL> result [ '<STR_LIT>' ] = <NUM_LIT> <EOL> return JsonResponse ( result ) <EOL> @ login_required ( login_url = '<STR_LIT>' ) <EOL> def user_logout ( request ) : <EOL> info = '<STR_LIT>' <EOL> auth . logout ( request ) <EOL> return HttpResponseRedirect ( '<STR_LIT>' ) <EOL> def get_single_info ( uid ) : <EOL> peers = RustDeskPeer . objects . filter ( Q ( uid = uid ) ) <EOL> rids = [ x . rid for x in peers ] <EOL> peers = { x . rid : model_to_dict ( x ) for x in peers } <EOL> devices = RustDesDevice . objects . filter ( rid__in = rids ) <EOL> devices = { x . rid : x for x in devices } <EOL> now = datetime . datetime . now ( ) <EOL> for rid , device in devices . items ( ) : <EOL> peers [ rid ] [ '<STR_LIT>' ] = device . create_time . strftime ( '<STR_LIT>' ) <EOL> peers [ rid ] [ '<STR_LIT>' ] = device . update_time . strftime ( '<STR_LIT>' ) <EOL> peers [ rid ] [ '<STR_LIT>' ] = device . version <EOL> peers [ rid ] [ '<STR_LIT>' ] = device . memory <EOL> peers [ rid ] [ '<STR_LIT>' ] = device . cpu <EOL> peers [ rid ] [ '<STR_LIT>' ] = device . os <EOL> peers [ rid ] [ '<STR_LIT>' ] = _ ( '<STR_LIT>' ) if ( now - device . update_time ) . seconds <= <NUM_LIT> else _ ( '<STR_LIT>' ) <EOL> for rid in peers . keys ( ) : <EOL> peers [ rid ] [ '<STR_LIT>' ] = _ ( '<STR_LIT>' ) if len ( peers [ rid ] [ '<STR_LIT>' ] ) > <NUM_LIT> else _ ( '<STR_LIT>' ) <EOL> return [ v for k , v in peers . items ( ) ] <EOL> def get_all_info ( ) : <EOL> devices = RustDesDevice . objects . all ( ) <EOL> peers = RustDeskPeer . objects . all ( ) <EOL> devices = { x . rid : model_to_dict2 ( x ) for x in devices } <EOL> now = datetime . datetime . now ( ) <EOL> for peer in peers : <EOL> user = UserProfile . objects . filter ( Q ( id = peer . uid ) ) . first ( ) <EOL> device = devices . get ( peer . rid , None ) <EOL> if device : <EOL> devices [ peer . rid ] [ '<STR_LIT>' ] = user . username <EOL> for k , v in devices . items ( ) : <EOL> devices [ k ] [ '<STR_LIT>' ] = _ ( '<STR_LIT>' ) if ( now - datetime . datetime . strptime ( v [ '<STR_LIT>' ] , '<STR_LIT>' ) ) . seconds <= <NUM_LIT> else _ ( '<STR_LIT>' ) <EOL> return [ v for k , v in devices . items ( ) ] <EOL> @ login_required ( login_url = '<STR_LIT>' ) <EOL> def work ( request ) : <EOL> username = request . user <EOL> u = UserProfile . objects . get ( username = username ) <EOL> show_type = request . GET . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> show_all = True if show_type == '<STR_LIT>' and u . is_admin else False <EOL> paginator = Paginator ( get_all_info ( ) , <NUM_LIT> ) if show_type == '<STR_LIT>' and u . is_admin else Paginator ( get_single_info ( u . id ) , <NUM_LIT> ) <EOL> page_number = request . GET . get ( '<STR_LIT>' ) <EOL> page_obj = paginator . get_page ( page_number ) <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : u , '<STR_LIT>' : show_all , '<STR_LIT>' : page_obj } ) <EOL> @ login_required ( login_url = '<STR_LIT>' ) <EOL> def down_peers ( request ) : <EOL> username = request . user <EOL> u = UserProfile . objects . get ( username = username ) <EOL> if not u . is_admin : <EOL> print ( u . is_admin ) <EOL> return HttpResponseRedirect ( '<STR_LIT>' ) <EOL> all_info = get_all_info ( ) <EOL> f = xlwt . Workbook ( encoding = '<STR_LIT>' ) <EOL> sheet1 = f . add_sheet ( _ ( u'<STR_LIT>' ) , cell_overwrite_ok = True ) <EOL> all_fields = [ x . name for x in RustDesDevice . _meta . get_fields ( ) ] <EOL> all_fields . append ( '<STR_LIT>' ) <EOL> for i , one in enumerate ( all_info ) : <EOL> for j , name in enumerate ( all_fields ) : <EOL> if i == <NUM_LIT> : <EOL> sheet1 . write ( i , j , name ) <EOL> sheet1 . write ( i + <NUM_LIT> , j , one . get ( name , '<STR_LIT>' ) ) <EOL> sio = BytesIO ( ) <EOL> f . save ( sio ) <EOL> sio . seek ( <NUM_LIT> ) <EOL> response = HttpResponse ( sio . getvalue ( ) , content_type = '<STR_LIT>' ) <EOL> response [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> response . write ( sio . getvalue ( ) ) <EOL> return response <EOL> def check_sharelink_expired ( sharelink ) : <EOL> now = datetime . datetime . now ( ) <EOL> if sharelink . create_time > now : <EOL> return False <EOL> if ( now - sharelink . create_time ) . seconds < <NUM_LIT> * <NUM_LIT> : <EOL> return False <EOL> else : <EOL> sharelink . is_expired = True <EOL> sharelink . save ( ) <EOL> return True <EOL> @ login_required ( login_url = '<STR_LIT>' ) <EOL> def share ( request ) : <EOL> peers = RustDeskPeer . objects . filter ( Q ( uid = request . user . id ) ) <EOL> sharelinks = ShareLink . objects . filter ( Q ( uid = request . user . id ) & Q ( is_used = False ) & Q ( is_expired = False ) ) <EOL> now = datetime . datetime . now ( ) <EOL> for sl in sharelinks : <EOL> check_sharelink_expired ( sl ) <EOL> sharelinks = ShareLink . objects . filter ( Q ( uid = request . user . id ) & Q ( is_used = False ) & Q ( is_expired = False ) ) <EOL> peers = [ { '<STR_LIT>' : ix + <NUM_LIT> , '<STR_LIT>' : f'<STR_LIT>' } for ix , p in enumerate ( peers ) ] <EOL> sharelinks = [ { '<STR_LIT>' : s . shash , '<STR_LIT>' : s . is_used , '<STR_LIT>' : s . is_expired , '<STR_LIT>' : s . create_time , '<STR_LIT>' : s . peers } for ix , s in enumerate ( sharelinks ) ] <EOL> if request . method == '<STR_LIT>' : <EOL> url = request . build_absolute_uri ( ) <EOL> if url . endswith ( '<STR_LIT>' ) : <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : peers , '<STR_LIT>' : sharelinks } ) <EOL> else : <EOL> shash = url . split ( '<STR_LIT>' ) [ - <NUM_LIT> ] <EOL> sharelink = ShareLink . objects . filter ( Q ( shash = shash ) ) <EOL> msg = '<STR_LIT>' <EOL> title = '<STR_LIT>' <EOL> if not sharelink : <EOL> title = '<STR_LIT>' <EOL> msg = f'<STR_LIT>' <EOL> else : <EOL> sharelink = sharelink [ <NUM_LIT> ] <EOL> if str ( request . user . id ) == str ( sharelink . uid ) : <EOL> title = '<STR_LIT>' <EOL> msg = f'<STR_LIT>' <EOL> else : <EOL> sharelink . is_used = True <EOL> sharelink . save ( ) <EOL> peers = sharelink . peers <EOL> peers = peers . split ( '<STR_LIT>' ) <EOL> peers_self_ids = [ x . rid for x in RustDeskPeer . objects . filter ( Q ( uid = request . user . id ) ) ] <EOL> peers_share = RustDeskPeer . objects . filter ( Q ( rid__in = peers ) & Q ( uid = sharelink . uid ) ) <EOL> peers_share_ids = [ x . rid for x in peers_share ] <EOL> for peer in peers_share : <EOL> if peer . rid in peers_self_ids : <EOL> continue <EOL> peer_f = RustDeskPeer . objects . filter ( Q ( rid = peer . rid ) & Q ( uid = sharelink . uid ) ) <EOL> if not peer_f : <EOL> msg += f"<STR_LIT>" <EOL> continue <EOL> if len ( peer_f ) > <NUM_LIT> : <EOL> msg += f'<STR_LIT>' <EOL> continue <EOL> peer = peer_f [ <NUM_LIT> ] <EOL> peer . id = None <EOL> peer . uid = request . user . id <EOL> peer . save ( ) <EOL> msg += f"<STR_LIT>" <EOL> msg += '<STR_LIT>' <EOL> title = _ ( title ) <EOL> msg = _ ( msg ) <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : msg , '<STR_LIT>' : msg } ) <EOL> else : <EOL> data = request . POST . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> data = json . loads ( data ) <EOL> if not data : <EOL> return JsonResponse ( { '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : _ ( '<STR_LIT>' ) } ) <EOL> rustdesk_ids = [ x [ '<STR_LIT>' ] . split ( '<STR_LIT>' ) [ <NUM_LIT> ] for x in data ] <EOL> rustdesk_ids = '<STR_LIT>' . join ( rustdesk_ids ) <EOL> sharelink = ShareLink ( <EOL> uid = request . user . id , <EOL> shash = getStrMd5 ( str ( time . time ( ) ) + salt ) , <EOL> peers = rustdesk_ids , <EOL> ) <EOL> sharelink . save ( ) <EOL> return JsonResponse ( { '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : sharelink . shash } ) <EOL> </s>
<s> from . admin_user import * <EOL> </s>
<s> from django . utils . translation import gettext ass>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : ( <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( <EOL> auto_now_add = True , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . TextField ( blank = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( max_length = <NUM_LIT> , unique = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == '<STR_LIT>' : <EOL> main ( ) <EOL> </s>
<s> import os <EOL> from pathlib import Path <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent <EOL> if "<STR_LIT>" in os . environ : <EOL> CSRF_TRUSTED_ORIGINS = [ os . environ [ "<STR_LIT>" ] ] <EOL> else : <EOL> CSRF_TRUSTED_ORIGINS = [ "<STR_LIT>" ] <EOL> SECURE_CROSS_ORIGIN_OPENER_POLICY = '<STR_LIT>' <EOL> SECRET_KEY = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> ID_SERVER = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> DEBUG = os . environ . get ( "<STR_LIT>" , False ) <EOL> DEFAULT_AUTO_FIELD = '<STR_LIT>' <EOL> ALLOWED_HOSTS = [ "<STR_LIT>" ] <EOL> AUTH_USER_MODEL = '<STR_LIT>' <EOL> ALLOW_REGISTRATION = os . environ . get ( "<STR_LIT>" , "<STR_LIT>" ) or os . environ . get ( "<STR_LIT>" , "<STR_LIT>" ) == "<STR_LIT>" <EOL> DATABASE_TYPE = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> MYSQL_DBNAME = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> MYSQL_HOST = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> MYSQL_USER = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> MYSQL_PASSWORD = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> MYSQL_PORT = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> LANGUAGE_CODE = os . environ . get ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> INSTALLED_APPS = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> MIDDLEWARE = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> ROOT_URLCONF = '<STR_LIT>' <EOL> TEMPLATES = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ ] , <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = '<STR_LIT>' <EOL> DATABASES = { <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : BASE_DIR / '<STR_LIT>' , <EOL> } <EOL> } <EOL> if DATABASE_TYPE == '<STR_LIT>' and MYSQL_DBNAME != '<STR_LIT>' and MYSQL_USER != '<STR_LIT>' and MYSQL_PASSWORD != '<STR_LIT>' : <EOL> DATABASES = { <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : MYSQL_DBNAME , <EOL> '<STR_LIT>' : MYSQL_HOST , <EOL> '<STR_LIT>' : MYSQL_USER , <EOL> '<STR_LIT>' : MYSQL_PASSWORD , <EOL> '<STR_LIT>' : MYSQL_PORT , <EOL> '<STR_LIT>' : { '<STR_LIT>' : '<STR_LIT>' } , <EOL> } <EOL> } <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> ] <EOL> TIME_ZONE = '<STR_LIT>' <EOL> USE_I18N = True <EOL> USE_L10N = True <EOL> USE_TZ = False <EOL> STATIC_URL = '<STR_LIT>' <EOL> if DEBUG : <EOL> STATICFILES_DIRS = [ os . path . join ( BASE_DIR , '<STR_LIT>' ) ] <EOL> else : <EOL> STATIC_ROOT = os . path . join ( BASE_DIR , '<STR_LIT>' ) <EOL> LANGUAGES = ( <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ) <EOL> LOCALE_PATHS = ( <EOL> os . path . join ( BASE_DIR , '<STR_LIT>' ) , <EOL> ) <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> import django <EOL> from django . contrib import admin <EOL> from django . urls import path <EOL> from api . views import index <EOL> if django . __version__ . split ( '<STR_LIT>' ) [ <NUM_LIT> ] >= '<STR_LIT>' : <EOL> from django . urls import re_path as url <EOL> from django . conf . urls import include <EOL> else : <EOL> from django . conf . urls import url , include <EOL> from django . views import static <EOL> from django . conf import settings <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> path ( '<STR_LIT>' , admin . site . urls ) , <EOL> url ( r'<STR_LIT>' , index ) , <EOL> url ( r'<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> url ( r'<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> url ( r'<STR_LIT>' , static . serve , { '<STR_LIT>' : settings . STATIC_ROOT } , name = '<STR_LIT>' ) , <EOL> url ( r'<STR_LIT>' , static . serve , { '<STR_LIT>' : '<STR_LIT>' } , name = '<STR_LIT>' ) , <EOL> ] <EOL> from django . conf . urls import static as sc <EOL> if not settings . DEBUG : <EOL> urlpatterns += sc . static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) <EOL> </s>
<s> from django . test import TestCase <EOL> </s>
<s> from django . db import models <EOL> from django . contrib . auth . models import ( <EOL> BaseUserManager , AbstractBaseUser , PermissionsMixin <EOL> ) <EOL> from . models_work import * <EOL> from django . utils . translation import gettext as _ <EOL> class MyUserManager ( BaseUserManager ) : <EOL> def create_user ( self , username , password = None ) : <EOL> if not username : <EOL> raise ValueError ( '<STR_LIT>' ) <EOL> user = self . model ( username = username , <EOL> ) <EOL> user . set_password ( password ) <EOL> user . save ( using = self . _db ) <EOL> return user <EOL> def create_superuser ( self , username , password ) : <EOL> user = self . create_user ( username , <EOL> password = password , <EOL> ) <EOL> user . is_admin = True <EOL> user . save ( using = self . _db ) <EOL> return user <EOL> class UserProfile ( AbstractBaseUser , PermissionsMixin ) : <EOL> username = models . CharField ( _ ( '<STR_LIT>' ) , <EOL> unique = True , <EOL> max_length = <NUM_LIT> ) <EOL> rid = models . CharField ( verbose_name = '<STR_LIT>' , max_length = <NUM_LIT> ) <EOL> uuid = models . CharField ( verbose_name = '<STR_LIT>' , max_length = <NUM_LIT> ) <EOL> autoLogin = models . BooleanField ( verbose_name = '<STR_LIT>' , default = True ) <EOL> rtype = models . CharField ( verbose_name = '<STR_LIT>' , max_length = <NUM_LIT> ) <EOL> deviceInfo = models . TextField ( verbose_name = _ ( '<STR_LIT>' ) , blank = True ) <EOL> is_active = models . BooleanField ( verbose_name = _ ( '<STR_LIT>' ) , default = True ) <EOL> is_admin = models . BooleanField ( verbose_name = _ ( '<STR_LIT>' ) , default = False ) <EOL> objects = MyUserManager ( ) <EOL> USERNAME_FIELD = '<STR_LIT>' <EOL> REQUIRED_FIELDS = [ '<STR_LIT>' ] <EOL> def get_full_name ( self ) : <EOL> return self . username <EOL> def get_short_name ( self ) : <EOL> return self . username <EOL> def __str__ ( self ) : <EOL> return self . username <EOL> def has_perm ( self , perm , obj = None ) : <EOL> "<STR_LIT>" <EOL> return True <EOL> def has_module_perms ( self , app_label ) : <EOL> "<STR_LIT>" <EOL> return True <EOL> @ property <EOL> def is_staff ( self ) : <EOL> "<STR_LIT>" <EOL> return self . is_admin <EOL> class Meta : <EOL> verbose_name = _ ( "<STR_LIT>" ) <EOL> verbose_name_plural = _ ( "<STR_LIT>" ) <EOL> permissions = ( <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ) <EOL> </s>
<s> import django <EOL> if django . __version__ . split ( '<STR_LIT>' ) [ <NUM_LIT> ] >= '<STR_LIT>' : <EOL> from django . urls import re_path as url <EOL> else : <EOL> from django . conf . urls import url , include <EOL> from webui import views <EOL> urlpatterns = [ <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) , <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) , <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) , <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) , <EOL> url ( r'<STR_LIT>' , views . index ) , <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' } , name = '<STR_LIT>' ) , <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' } , name = '<STR_LIT>' ) , <EOL> url ( r'<STR_LIT>' , django . views . static . serve , { '<STR_LIT>' : '<STR_LIT>' } , name = '<STR_LIT>' ) , <EOL> ] <EOL> </s>
<s> from collections . abc import Sequence <EOL> from typing import NotRequired , Required , TypedDict <EOL> class PromptDict ( TypedDict ) : <EOL> default_prompt_id : Required [ int ] <EOL> label : Required [ str ] <EOL> description : NotRequired [ str ] <EOL> prompt : Required [ str ] <EOL> method : Required [ str ] <EOL> DEFAULT_PROMPTS : Sequence [ PromptDict ] = [ <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ] <EOL> </s>
<s> from http import HTTPStatus <EOL> from typing import cast <EOL> from unittest . mock import ANY , Mock , call <EOL> import pytest <EOL> from django . contrib . auth . models import Permission , User <EOL> from django . urls import reverse <EOL> from wagtail . images . models import Image <EOL> from wagtail_ai . ai import echo <EOL> from wagtail_factories import ImageFactory <EOL> pytestmark = pytest . mark . django_db <EOL> def test_get_request ( admin_client ) : <EOL> response = admin_client . get ( reverse ( "<STR_LIT>" ) ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { "<STR_LIT>" : "<STR_LIT>" } <EOL> def test_image_not_found ( admin_client ) : <EOL> response = admin_client . post ( <EOL> reverse ( "<STR_LIT>" ) , data = { "<STR_LIT>" : <NUM_LIT> } <EOL> ) <EOL> assert response . status_code == <NUM_LIT> <EOL> def test_access_denied ( client ) : <EOL> user = User . objects . create_user ( username = "<STR_LIT>" ) <EOL> user . user_permissions . add ( Permission . objects . get ( codename = "<STR_LIT>" ) ) <EOL> client . force_login ( user ) <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> response = client . post ( <EOL> reverse ( "<STR_LIT>" ) , data = { "<STR_LIT>" : image . pk } <EOL> ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { "<STR_LIT>" : "<STR_LIT>" } <EOL> def test_backend_not_configured ( settings , admin_client ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> response = admin_client . post ( <EOL> reverse ( "<STR_LIT>" ) , data = { "<STR_LIT>" : image . pk } <EOL> ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { <EOL> "<STR_LIT>" : ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) , <EOL> } <EOL> def test_success ( admin_client , settings ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> response = admin_client . post ( <EOL> reverse ( "<STR_LIT>" ) , data = { "<STR_LIT>" : image . pk } <EOL> ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } <EOL> def test_custom_prompt ( admin_client , settings , monkeypatch : pytest . MonkeyPatch ) : <EOL> describe_image = Mock ( return_value = echo . EchoResponse ( iter ( [ ] ) ) ) <EOL> monkeypatch . setattr ( echo . EchoBackend , "<STR_LIT>" , describe_image ) <EOL> CUSTOM_PROMPT = "<STR_LIT>" <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : CUSTOM_PROMPT , <EOL> } <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> admin_client . post ( reverse ( "<STR_LIT>" ) , data = { "<STR_LIT>" : image . pk } ) <EOL> assert describe_image . call_args == call ( image_file = ANY , prompt = CUSTOM_PROMPT ) <EOL> def test_custom_rendition_filter ( admin_client , settings ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> response = admin_client . post ( <EOL> reverse ( "<STR_LIT>" ) , data = { "<STR_LIT>" : image . pk } <EOL> ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , <EOL> [ <EOL> ( <NUM_LIT> , HTTPStatus . OK , None ) , <EOL> ( <EOL> - <NUM_LIT> , <EOL> HTTPStatus . BAD_REQUEST , <EOL> "<STR_LIT>" , <EOL> ) , <EOL> ( <EOL> <NUM_LIT> , <EOL> HTTPStatus . BAD_REQUEST , <EOL> "<STR_LIT>" , <EOL> ) , <EOL> ] , <EOL> ) <EOL> def test_maxlength_validation ( <EOL> admin_client , settings , maxlength , expected_status , error_message <EOL> ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> response = admin_client . post ( <EOL> reverse ( "<STR_LIT>" ) , <EOL> data = { "<STR_LIT>" : image . pk , "<STR_LIT>" : maxlength } , <EOL> ) <EOL> assert response . status_code == expected_status <EOL> if error_message is not None : <EOL> assert response . json ( ) == { "<STR_LIT>" : error_message } <EOL> </s>
<s> from typing import cast <EOL> from unittest . mock import ANY , Mock <EOL> import pytest <EOL> from wagtail . images . models import Image <EOL> from wagtail_ai . ai import get_ai_backend , get_backend <EOL> from wagtail_ai . ai . base import BackendFeature <EOL> from wagtail_ai . ai . openai import OpenAIBackend <EOL> from wagtail_factories import ImageFactory <EOL> pytestmark = pytest . mark . django_db <EOL> MOCK_API_KEY = "<STR_LIT>" <EOL> MOCK_OUTPUT = "<STR_LIT>" <EOL> @ pytest . fixture ( autouse = True ) <EOL> def stub_image_title_signal ( monkeypatch : pytest . MonkeyPatch ) : <EOL> monkeypatch . setenv ( "<STR_LIT>" , MOCK_API_KEY ) <EOL> @ pytest . fixture <EOL> def mock_post ( monkeypatch : pytest . MonkeyPatch ) : <EOL> mock = Mock ( ) <EOL> monkeypatch . setattr ( "<STR_LIT>" , mock ) <EOL> return mock <EOL> def test_get_as_image_backend ( settings ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> backend = get_backend ( BackendFeature . IMAGE_DESCRIPTION ) <EOL> assert isinstance ( backend , OpenAIBackend ) <EOL> assert backend . config . model_id == "<STR_LIT>" <EOL> assert backend . config . token_limit == <NUM_LIT> <EOL> assert backend . config . timeout_seconds == <NUM_LIT> <EOL> def test_describe_image ( settings , mock_post ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> mock_post . return_value . json . return_value = { <EOL> "<STR_LIT>" : [ { "<STR_LIT>" : { "<STR_LIT>" : MOCK_OUTPUT } } ] , <EOL> } <EOL> image = cast ( Image , ImageFactory ( ) ) <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> prompt = "<STR_LIT>" <EOL> response = backend . describe_image ( image_file = image . file , prompt = prompt ) <EOL> assert response . text ( ) == MOCK_OUTPUT <EOL> headers = mock_post . call_args . kwargs [ "<STR_LIT>" ] <EOL> assert headers [ "<STR_LIT>" ] == f"<STR_LIT>" <EOL> messages = mock_post . call_args . kwargs [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> assert messages == [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : prompt } , <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : { "<STR_LIT>" : ANY } } , <EOL> ] , <EOL> } <EOL> ] <EOL> url = messages [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> assert url . startswith ( "<STR_LIT>" ) <EOL> def test_text_completion ( settings , mock_post ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> mock_post . return_value . json . return_value = { <EOL> "<STR_LIT>" : [ { "<STR_LIT>" : { "<STR_LIT>" : MOCK_OUTPUT } } ] , <EOL> } <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> pre_prompt = "<STR_LIT>" <EOL> context = "<STR_LIT>" <EOL> post_prompt = "<STR_LIT>" <EOL> response = backend . prompt_with_context ( <EOL> pre_prompt = pre_prompt , context = context , post_prompt = post_prompt <EOL> ) <EOL> assert "<STR_LIT>" . join ( response ) == MOCK_OUTPUT <EOL> assert response . text ( ) == MOCK_OUTPUT <EOL> headers = mock_post . call_args . kwargs [ "<STR_LIT>" ] <EOL> assert headers [ "<STR_LIT>" ] == f"<STR_LIT>" <EOL> messages = mock_post . call_args . kwargs [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> assert messages == [ <EOL> { "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : pre_prompt } ] , "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : context } ] , "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : post_prompt } ] , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ] <EOL> def test_text_completion_without_post_prompt ( settings , mock_post ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> mock_post . return_value . json . return_value = { <EOL> "<STR_LIT>" : [ { "<STR_LIT>" : { "<STR_LIT>" : MOCK_OUTPUT } } ] , <EOL> } <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> pre_prompt = "<STR_LIT>" <EOL> context = "<STR_LIT>" <EOL> response = backend . prompt_with_context ( pre_prompt = pre_prompt , context = context ) <EOL> assert response . text ( ) == MOCK_OUTPUT <EOL> messages = mock_post . call_args . kwargs [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> assert messages == [ <EOL> { "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : pre_prompt } ] , "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : context } ] , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ] <EOL> def test_default_token_limit ( settings ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> assert backend . config . token_limit == <NUM_LIT> <EOL> def test_api_key_in_environ ( settings , monkeypatch : pytest . MonkeyPatch ) : <EOL> test_key = "<STR_LIT>" <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> monkeypatch . setenv ( "<STR_LIT>" , test_key ) <EOL> backend = cast ( OpenAIBackend , get_ai_backend ( "<STR_LIT>" ) ) <EOL> assert backend . get_openai_api_key ( ) == test_key <EOL> def test_api_key_in_settings ( settings ) : <EOL> test_key = "<STR_LIT>" <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : test_key , <EOL> } , <EOL> } , <EOL> } , <EOL> } <EOL> backend = cast ( OpenAIBackend , get_ai_backend ( "<STR_LIT>" ) ) <EOL> assert backend . get_openai_api_key ( ) == test_key <EOL> </s>
<s> import os <EOL> import requests <EOL> if "<STR_LIT>" in os . environ : <EOL> print ( "<STR_LIT>" ) <EOL> response = requests . post ( <EOL> os . environ [ "<STR_LIT>" ] , <EOL> json = { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> + os . environ [ "<STR_LIT>" ] , <EOL> } , <EOL> ) <EOL> print ( "<STR_LIT>" , response ) <EOL> else : <EOL> print ( <EOL> "<STR_LIT>" <EOL> ) <EOL> </s>
<s> from wagtail . admin . panels import FieldPanel <EOL> from wagtail . fields import RichTextField <EOL> from wagtail . models import Page <EOL> class ExamplePage ( Page ) : <EOL> body = RichTextField ( ) <EOL> content_panels = [ * Page . content_panels , FieldPanel ( "<STR_LIT>" ) ] <EOL> </s>
<s> from django . db import migrations <EOL> from wagtail_ai . prompts import DEFAULT_PROMPTS <EOL> def set_default_ai_prompts ( apps , schema_editor ) : <EOL> Prompt = apps . get_model ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> for default_prompt in DEFAULT_PROMPTS : <EOL> Prompt . objects . update_or_create ( <EOL> default_prompt_id = default_prompt [ "<STR_LIT>" ] , <EOL> prompt = None , <EOL> defaults = { <EOL> "<STR_LIT>" : default_prompt [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : default_prompt . get ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> "<STR_LIT>" : default_prompt . get ( "<STR_LIT>" , None ) , <EOL> } , <EOL> ) <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RunPython ( set_default_ai_prompts , migrations . RunPython . noop ) , <EOL> ] <EOL> </s>
<s> import logging <EOL> from collections . abc import Callable <EOL> from . . types import TextSplitterLengthCalculatorProtocol , TextSplitterProtocol <EOL> logger = logging . getLogger ( __name__ ) <EOL> class DummyTextSplitter ( TextSplitterProtocol ) : <EOL> def __init__ ( <EOL> self , * , chunk_size : int , length_function : Callable [ [ str ] , int ] <EOL> ) -> None : <EOL> pass <EOL> def split_text ( self , text : str ) -> list [ str ] : <EOL> return [ text ] <EOL> class DummyLengthCalculator ( TextSplitterLengthCalculatorProtocol ) : <EOL> def get_splitter_length ( self , text : str ) -> int : <EOL> return len ( text ) <EOL> </s>
<s> import logging <EOL> import os <EOL> from typing import Type , cast <EOL> from django import forms <EOL> from django . conf import settings <EOL> from django . http import JsonResponse <EOL> from django . shortcuts import get_object_or_404 <EOL> from django . utils . translation import gettext as _ <EOL> from django . views . decorators . csrf import csrf_exempt <EOL> from wagtail . admin . ui . tables import UpdatedAtColumn <EOL> from wagtail . admin . viewsets . model import ModelViewSet <EOL> from wagtail . images . models import AbstractImage <EOL> from wagtail . images . permissions import get_image_model <EOL> from . import ai , types <EOL> from . ai . base import BackendFeature <EOL> from . forms import DescribeImageApiForm , PromptForm <EOL> from . models import Prompt <EOL> logger = logging . getLogger ( __name__ ) <EOL> class AIHandlerException ( Exception ) : <EOL> pass <EOL> def _process_backend_request ( <EOL> ai_backend : ai . AIBackend , pre_prompt : str , context : str <EOL> ) -> types . AIResponse : <EOL> try : <EOL> response = ai_backend . prompt_with_context ( <EOL> pre_prompt = pre_prompt , context = context <EOL> ) <EOL> except Exception as e : <EOL> raise AIHandlerException ( <EOL> "<STR_LIT>" <EOL> ) from e <EOL> return response <EOL> def _replace_handler ( * , prompt : Prompt , text : str ) -> str : <EOL> ai_backend = ai . get_backend ( ) <EOL> splitter = ai_backend . get_text_splitter ( ) <EOL> texts = splitter . split_text ( text ) <EOL> for split in texts : <EOL> response = _process_backend_request ( <EOL> ai_backend , pre_prompt = prompt . prompt_value , context = split <EOL> ) <EOL> message = os . linesep . join ( [ s for s in response . text ( ) . splitlines ( ) if s ] ) <EOL> text = text . replace ( split , message ) <EOL> return text <EOL> def _append_handler ( * , prompt : Prompt , text : str ) -> str : <EOL> ai_backend = ai . get_backend ( ) <EOL> length_calculator = ai_backend . get_splitter_length_calculator ( ) <EOL> if length_calculator . get_splitter_length ( text ) > ai_backend . config . token_limit : <EOL> raise AIHandlerException ( "<STR_LIT>" ) <EOL> response = _process_backend_request ( <EOL> ai_backend , pre_prompt = prompt . prompt_value , context = text <EOL> ) <EOL> message = os . linesep . join ( [ s for s in response . text ( ) . splitlines ( ) if s ] ) <EOL> return message <EOL> def ErrorJsonResponse ( error_message , status = <NUM_LIT> ) : <EOL> return JsonResponse ( { "<STR_LIT>" : error_message } , status = status ) <EOL> @ csrf_exempt <EOL> def text_completion ( request ) -> JsonResponse : <EOL> prompt_form = PromptForm ( request . POST ) <EOL> if not prompt_form . is_valid ( ) : <EOL> return ErrorJsonResponse ( prompt_form . errors_for_json_response ( ) , status = <NUM_LIT> ) <EOL> try : <EOL> prompt = Prompt . objects . get ( uuid = prompt_form . cleaned_data [ "<STR_LIT>" ] ) <EOL> except Prompt . DoesNotExist : <EOL> return ErrorJsonResponse ( _ ( "<STR_LIT>" ) , status = <NUM_LIT> ) <EOL> handlers = { <EOL> Prompt . Method . REPLACE : _replace_handler , <EOL> Prompt . Method . APPEND : _append_handler , <EOL> } <EOL> handler = handlers [ Prompt . Method ( prompt . method ) ] <EOL> try : <EOL> response = handler ( prompt = prompt , text = prompt_form . cleaned_data [ "<STR_LIT>" ] ) <EOL> except AIHandlerException as e : <EOL> return ErrorJsonResponse ( str ( e ) , status = <NUM_LIT> ) <EOL> except Exception : <EOL> logger . exception ( "<STR_LIT>" ) <EOL> return ErrorJsonResponse ( _ ( "<STR_LIT>" ) ) <EOL> return JsonResponse ( { "<STR_LIT>" : response } ) <EOL> def user_has_permission_for_image ( user , image ) : <EOL> from wagtail . images . permissions import permission_policy <EOL> return permission_policy . user_has_permission_for_instance ( user , "<STR_LIT>" , image ) <EOL> def describe_image ( request ) -> JsonResponse : <EOL> form = DescribeImageApiForm ( request . POST ) <EOL> if not form . is_valid ( ) : <EOL> return ErrorJsonResponse ( form . errors_for_json_response ( ) , status = <NUM_LIT> ) <EOL> model = cast ( Type [ AbstractImage ] , get_image_model ( ) ) <EOL> image = get_object_or_404 ( model , pk = form . cleaned_data [ "<STR_LIT>" ] ) <EOL> if not user_has_permission_for_image ( request . user , image ) : <EOL> return ErrorJsonResponse ( "<STR_LIT>" , status = <NUM_LIT> ) <EOL> try : <EOL> backend = ai . get_backend ( BackendFeature . IMAGE_DESCRIPTION ) <EOL> except ai . BackendNotFound : <EOL> return ErrorJsonResponse ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" , <EOL> status = <NUM_LIT> , <EOL> ) <EOL> wagtail_ai_settings = getattr ( settings , "<STR_LIT>" , { } ) <EOL> rendition_filter = wagtail_ai_settings . get ( <EOL> "<STR_LIT>" , "<STR_LIT>" <EOL> ) <EOL> rendition = image . get_rendition ( rendition_filter ) <EOL> maxlength = form . cleaned_data [ "<STR_LIT>" ] <EOL> prompt = wagtail_ai_settings . get ( "<STR_LIT>" ) <EOL> if prompt is None : <EOL> prompt = ( <EOL> "<STR_LIT>" <EOL> ) <EOL> if maxlength is not None : <EOL> prompt += f"<STR_LIT>" <EOL> try : <EOL> ai_response = backend . describe_image ( image_file = rendition . file , prompt = prompt ) <EOL> description = ai_response . text ( ) <EOL> except Exception : <EOL> logger . exception ( "<STR_LIT>" ) <EOL> return ErrorJsonResponse ( "<STR_LIT>" ) <EOL> if not description : <EOL> return ErrorJsonResponse ( "<STR_LIT>" ) <EOL> if maxlength is not None : <EOL> description = description [ : maxlength ] <EOL> return JsonResponse ( { "<STR_LIT>" : description } ) <EOL> class PromptEditForm ( forms . ModelForm ) : <EOL> class Meta : <EOL> model = Prompt <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> def __init__ ( self , * args , ** kwargs ) : <EOL> super ( ) . __init__ ( * args , ** kwargs ) <EOL> if self . instance . is_default : <EOL> self . fields [ "<STR_LIT>" ] . required = False <EOL> self . fields [ "<STR_LIT>" ] . widget . attrs [ <EOL> "<STR_LIT>" <EOL> ] = self . instance . get_default_prompt_value ( ) <EOL> class PromptViewSet ( ModelViewSet ) : <EOL> model = Prompt <EOL> form_fields = PromptEditForm . Meta . fields <EOL> list_display = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , UpdatedAtColumn ( ) ] <EOL> icon = "<STR_LIT>" <EOL> add_to_settings_menu = True <EOL> menu_order = <NUM_LIT> <EOL> def get_form_class ( self , for_update = False ) : <EOL> if for_update : <EOL> return PromptEditForm <EOL> return super ( ) . get_form_class ( for_update ) <EOL> prompt_viewset = PromptViewSet ( "<STR_LIT>" ) <EOL> </s>
<s> default_app_config = "<STR_LIT>" <EOL> </s>
<s> import pytest <EOL> from test_utils . settings import custom_text_splitting <EOL> from wagtail_ai . ai import ( <EOL> get_ai_backend , <EOL> ) <EOL> from wagtail_ai . text_splitters . dummy import DummyLengthCalculator , DummyTextSplitter <EOL> from wagtail_ai . text_splitters . langchain import LangchainRecursiveCharacterTextSplitter <EOL> from wagtail_ai . text_splitters . length import NaiveTextSplitterCalculator <EOL> @ custom_text_splitting ( { } ) <EOL> def test_default_text_splitter ( ) : <EOL> ai_backend = get_ai_backend ( "<STR_LIT>" ) <EOL> text_splitter = ai_backend . get_text_splitter ( ) <EOL> assert isinstance ( text_splitter , LangchainRecursiveCharacterTextSplitter ) <EOL> @ custom_text_splitting ( { } ) <EOL> def test_default_length_calculator ( ) : <EOL> ai_backend = get_ai_backend ( "<STR_LIT>" ) <EOL> length_calculator = ai_backend . get_splitter_length_calculator ( ) <EOL> assert isinstance ( length_calculator , NaiveTextSplitterCalculator ) <EOL> @ custom_text_splitting ( <EOL> { "<STR_LIT>" : "<STR_LIT>" } <EOL> ) <EOL> def test_custom_text_splitter ( ) : <EOL> ai_backend = get_ai_backend ( "<STR_LIT>" ) <EOL> text_splitter = ai_backend . get_text_splitter ( ) <EOL> assert isinstance ( text_splitter , DummyTextSplitter ) <EOL> @ custom_text_splitting ( <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } <EOL> ) <EOL> def test_custom_length_calculator ( ) : <EOL> ai_backend = get_ai_backend ( "<STR_LIT>" ) <EOL> length_calculator = ai_backend . get_splitter_length_calculator ( ) <EOL> assert isinstance ( length_calculator , DummyLengthCalculator ) <EOL> LENGTH_CALCULATOR_SAMPLE_TEXTS = [ <EOL> , <EOL> , <EOL> ] <EOL> NAIVE_LENGTH_CALCULATOR_TESTS_TABLE = [ <EOL> ( LENGTH_CALCULATOR_SAMPLE_TEXTS [ <NUM_LIT> ] , <NUM_LIT> ) , <EOL> ( LENGTH_CALCULATOR_SAMPLE_TEXTS [ <NUM_LIT> ] , <NUM_LIT> ) , <EOL> ] <EOL> @ pytest . mark . parametrize ( "<STR_LIT>" , NAIVE_LENGTH_CALCULATOR_TESTS_TABLE ) <EOL> def test_naive_text_splitter_length_calculator ( test_input , expected ) : <EOL> length_calculator = NaiveTextSplitterCalculator ( ) <EOL> assert length_calculator . get_splitter_length ( test_input ) == expected <EOL> DUMMY_LENGTH_CALCULATOR_TESTS_TABLE = [ <EOL> ( val , len ( val ) ) for val in LENGTH_CALCULATOR_SAMPLE_TEXTS <EOL> ] <EOL> @ pytest . mark . parametrize ( "<STR_LIT>" , DUMMY_LENGTH_CALCULATOR_TESTS_TABLE ) <EOL> def test_dummy_text_splitter_length_calculator ( test_input , expected ) : <EOL> length_calculator = DummyLengthCalculator ( ) <EOL> assert length_calculator . get_splitter_length ( test_input ) == expected <EOL> </s>
<s> import base64 <EOL> import os <EOL> from collections . abc import Iterator <EOL> from dataclasses import dataclass <EOL> from typing import Any , NotRequired , Self <EOL> import requests <EOL> from django . core . files import File <EOL> from wagtail_ai . types import AIResponse <EOL> from . base import AIBackend , BaseAIBackendConfig , BaseAIBackendConfigSettings <EOL> class OpenAIBackendConfigSettingsDict ( BaseAIBackendConfigSettings ) : <EOL> TIMEOUT_SECONDS : NotRequired [ int | None ] <EOL> OPENAI_API_KEY : NotRequired [ str | None ] <EOL> @ dataclass ( kw_only = True ) <EOL> class OpenAIBackendConfig ( BaseAIBackendConfig [ OpenAIBackendConfigSettingsDict ] ) : <EOL> timeout_seconds : int <EOL> openai_api_key : str | None <EOL> @ classmethod <EOL> def from_settings ( <EOL> cls , config : OpenAIBackendConfigSettingsDict , ** kwargs : Any <EOL> ) -> Self : <EOL> timeout_seconds = config . get ( "<STR_LIT>" ) <EOL> if timeout_seconds is None : <EOL> timeout_seconds = <NUM_LIT> <EOL> kwargs . setdefault ( "<STR_LIT>" , timeout_seconds ) <EOL> kwargs . setdefault ( "<STR_LIT>" , config . get ( "<STR_LIT>" ) ) <EOL> return super ( ) . from_settings ( config , ** kwargs ) <EOL> class OpenAIResponse ( AIResponse ) : <EOL> def __init__ ( self , response : requests . Response ) : <EOL> self . response = response <EOL> self . _text = response . json ( ) [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> def __iter__ ( self ) -> Iterator [ str ] : <EOL> yield self . _text <EOL> def text ( self ) -> str : <EOL> return self . _text <EOL> def __str__ ( self ) : <EOL> return self . text ( ) <EOL> class OpenAIBackend ( AIBackend [ OpenAIBackendConfig ] ) : <EOL> config_cls = OpenAIBackendConfig <EOL> def prompt_with_context ( <EOL> self , * , pre_prompt : str , context : str , post_prompt : str | None = None <EOL> ) -> OpenAIResponse : <EOL> messages = [ <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : pre_prompt } ] } , <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : context } ] } , <EOL> ] <EOL> if post_prompt is not None : <EOL> messages . append ( <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : post_prompt } ] } <EOL> ) <EOL> return self . chat_completions ( messages ) <EOL> def describe_image ( self , * , image_file : File , prompt : str ) -> OpenAIResponse : <EOL> if not prompt : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> with image_file . open ( ) as f : <EOL> base64_image = base64 . b64encode ( f . read ( ) ) . decode ( "<STR_LIT>" ) <EOL> return self . chat_completions ( <EOL> messages = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : prompt , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : f"<STR_LIT>" <EOL> } , <EOL> } , <EOL> ] , <EOL> } , <EOL> ] , <EOL> ) <EOL> def chat_completions ( self , messages : list [ dict [ str , Any ] ] ) -> OpenAIResponse : <EOL> headers = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> payload = { <EOL> "<STR_LIT>" : self . config . model_id , <EOL> "<STR_LIT>" : messages , <EOL> "<STR_LIT>" : self . config . token_limit , <EOL> } <EOL> response = requests . post ( <EOL> "<STR_LIT>" , <EOL> headers = headers , <EOL> json = payload , <EOL> timeout = self . config . timeout_seconds , <EOL> ) <EOL> response . raise_for_status ( ) <EOL> return OpenAIResponse ( response ) <EOL> def get_openai_api_key ( self ) -> str : <EOL> if config_key := self . config . openai_api_key : <EOL> return config_key <EOL> if env_key := os . environ . get ( "<STR_LIT>" ) : <EOL> return env_key <EOL> raise RuntimeError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) <EOL> </s>
<s> import django . db . models . deletion <EOL> import wagtail . fields <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . OneToOneField ( <EOL> auto_created = True , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> parent_link = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , wagtail . fields . RichTextField ( ) ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> bases = ( "<STR_LIT>" , models . Model ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import pytest <EOL> from django . core . exceptions import ValidationError <EOL> from wagtail_ai . models import Prompt <EOL> from wagtail_ai . prompts import DEFAULT_PROMPTS <EOL> from wagtail_ai . wagtail_hooks import get_prompts <EOL> @ pytest . mark . django_db <EOL> def test_prompt_model ( setup_prompt_object , test_prompt_values ) : <EOL> assert setup_prompt_object . is_default is False <EOL> assert str ( setup_prompt_object ) == test_prompt_values [ "<STR_LIT>" ] <EOL> assert setup_prompt_object . label == test_prompt_values [ "<STR_LIT>" ] <EOL> assert setup_prompt_object . prompt_value == test_prompt_values [ "<STR_LIT>" ] <EOL> assert setup_prompt_object . description == test_prompt_values [ "<STR_LIT>" ] <EOL> assert setup_prompt_object . method == test_prompt_values [ "<STR_LIT>" ] <EOL> @ pytest . mark . django_db <EOL> def test_get_prompts_returns_default_prompts ( ) : <EOL> prompts = get_prompts ( ) <EOL> assert { ( p [ "<STR_LIT>" ] , p [ "<STR_LIT>" ] ) for p in prompts } == { <EOL> ( p [ "<STR_LIT>" ] , p [ "<STR_LIT>" ] ) for p in DEFAULT_PROMPTS <EOL> } <EOL> def find_prompt_by_label ( prompts , label ) : <EOL> return next ( ( prompt for prompt in prompts if prompt [ "<STR_LIT>" ] == label ) , None ) <EOL> @ pytest . mark . django_db <EOL> def test_editing_default_prompts ( ) : <EOL> prompts = get_prompts ( ) <EOL> default_prompt = Prompt . objects . get ( <EOL> default_prompt_id = DEFAULT_PROMPTS [ <NUM_LIT> ] [ "<STR_LIT>" ] <EOL> ) <EOL> prompt_from_get_prompts = find_prompt_by_label ( prompts , default_prompt . label ) <EOL> assert prompt_from_get_prompts is not None <EOL> assert default_prompt . prompt is None <EOL> assert prompt_from_get_prompts [ "<STR_LIT>" ] == default_prompt . prompt_value <EOL> default_prompt . prompt = "<STR_LIT>" <EOL> default_prompt . save ( ) <EOL> assert default_prompt . prompt_value == "<STR_LIT>" <EOL> prompts = get_prompts ( ) <EOL> prompt_from_get_prompts = find_prompt_by_label ( prompts , default_prompt . label ) <EOL> assert prompt_from_get_prompts is not None <EOL> assert prompt_from_get_prompts [ "<STR_LIT>" ] == default_prompt . prompt_value <EOL> assert prompt_from_get_prompts [ "<STR_LIT>" ] == default_prompt . prompt <EOL> @ pytest . mark . django_db <EOL> def test_get_prompts_returns_new_prompts_and_default_prompts ( setup_prompt_object ) : <EOL> prompt_object = setup_prompt_object <EOL> prompts = get_prompts ( ) <EOL> assert { p [ "<STR_LIT>" ] for p in prompts } == set ( <EOL> [ p [ "<STR_LIT>" ] for p in DEFAULT_PROMPTS ] + [ prompt_object . label ] <EOL> ) <EOL> assert setup_prompt_object . label in [ prompt [ "<STR_LIT>" ] for prompt in prompts ] <EOL> assert setup_prompt_object . prompt in [ prompt [ "<STR_LIT>" ] for prompt in prompts ] <EOL> for prompt in DEFAULT_PROMPTS : <EOL> assert prompt [ "<STR_LIT>" ] in [ prompt [ "<STR_LIT>" ] for prompt in prompts ] <EOL> assert prompt [ "<STR_LIT>" ] in [ prompt [ "<STR_LIT>" ] for prompt in prompts ] <EOL> @ pytest . mark . django_db <EOL> def test_prompts_return_uuids_and_not_ids ( ) : <EOL> prompts = get_prompts ( ) <EOL> assert prompts [ <NUM_LIT> ] [ "<STR_LIT>" ] is not None <EOL> assert "<STR_LIT>" not in prompts [ <NUM_LIT> ] <EOL> @ pytest . mark . django_db <EOL> def test_prompts_can_not_save_and_invalid_method ( test_prompt_values ) : <EOL> with pytest . raises ( ValidationError , match = "<STR_LIT>" ) : <EOL> prompt = Prompt ( <EOL> label = test_prompt_values [ "<STR_LIT>" ] , <EOL> description = test_prompt_values [ "<STR_LIT>" ] , <EOL> prompt = test_prompt_values [ "<STR_LIT>" ] , <EOL> method = "<STR_LIT>" , <EOL> ) <EOL> prompt . full_clean ( ) <EOL> </s>
<s> import pytest <EOL> from wagtail_ai . models import Prompt <EOL> TEST_PROMPT_LABEL = "<STR_LIT>" <EOL> TEST_PROMPT_VALUE = "<STR_LIT>" <EOL> TEST_PROMPT_DESCRIPTION = "<STR_LIT>" <EOL> @ pytest . fixture <EOL> def test_prompt_values ( ) : <EOL> return { <EOL> "<STR_LIT>" : TEST_PROMPT_LABEL , <EOL> "<STR_LIT>" : TEST_PROMPT_DESCRIPTION , <EOL> "<STR_LIT>" : TEST_PROMPT_VALUE , <EOL> "<STR_LIT>" : Prompt . Method . REPLACE . value , <EOL> } <EOL> @ pytest . fixture <EOL> def setup_prompt_object ( test_prompt_values ) : <EOL> prompt = Prompt . objects . create ( ** test_prompt_values ) <EOL> yield prompt <EOL> prompt . delete ( ) <EOL> @ pytest . fixture ( autouse = True ) <EOL> def temporary_media ( settings , tmp_path ) : <EOL> settings . MEDIA_ROOT = tmp_path / "<STR_LIT>" <EOL> </s>
<s> default_app_config = "<STR_LIT>" <EOL> VERSION = ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> __version__ = "<STR_LIT>" . join ( map ( str , VERSION ) ) <EOL> </s>
<s> import warnings <EOL> class WagtailAISettingsDeprecationWarning ( DeprecationWarning ) : <EOL> pass <EOL> warnings . filterwarnings ( "<STR_LIT>" , category = WagtailAISettingsDeprecationWarning ) <EOL> </s>
<s> from functools import wraps <EOL> from typing import Any , Literal , cast <EOL> from django . conf import settings <EOL> from django . test import override_settings <EOL> from wagtail_ai . ai import AIBackendSettingsDict , TextSplittingSettingsDict <EOL> DEFAULT_ALIAS = "<STR_LIT>" <EOL> def custom_ai_backend_settings ( <EOL> * , alias : str = DEFAULT_ALIAS , new_value : AIBackendSettingsDict <EOL> ) : <EOL> def decorator ( func ) : <EOL> @ wraps ( func ) <EOL> def inner ( * args , ** kwargs ) : <EOL> value = { ** settings . WAGTAIL_AI } <EOL> value [ "<STR_LIT>" ] [ alias ] = new_value <EOL> return override_settings ( WAGTAIL_AI = value ) ( func ) ( * args , ** kwargs ) <EOL> return inner <EOL> return decorator <EOL> def custom_ai_backend_specific_settings ( <EOL> * , <EOL> settings_key : Literal [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> new_value : Any , <EOL> alias : str = DEFAULT_ALIAS , <EOL> ) : <EOL> def decorator ( func ) : <EOL> @ wraps ( func ) <EOL> def inner ( * args , ** kwargs ) : <EOL> backend_settings = cast ( <EOL> AIBackendSettingsDict , <EOL> { <EOL> ** settings . WAGTAIL_AI [ "<STR_LIT>" ] [ alias ] , <EOL> } , <EOL> ) <EOL> backend_settings [ settings_key ] = new_value <EOL> return custom_ai_backend_settings ( new_value = backend_settings , alias = alias ) ( <EOL> func <EOL> ) ( * args , ** kwargs ) <EOL> return inner <EOL> return decorator <EOL> def custom_text_splitting ( new_settings : TextSplittingSettingsDict ) : <EOL> return custom_ai_backend_specific_settings ( <EOL> settings_key = "<STR_LIT>" , new_value = new_settings , alias = "<STR_LIT>" <EOL> ) <EOL> def custom_ai_backend_class ( new_path : str ) : <EOL> return custom_ai_backend_specific_settings ( settings_key = "<STR_LIT>" , new_value = new_path ) <EOL> </s>
<s> import logging <EOL> import re <EOL> from collections . abc import Callable , Iterable , MutableSequence , Sequence <EOL> from . . types import TextSplitterProtocol <EOL> logger = logging . getLogger ( __name__ ) <EOL> def _split_text_with_regex ( <EOL> text : str , separator : str , keep_separator : bool <EOL> ) -> list [ str ] : <EOL> if separator : <EOL> if keep_separator : <EOL> _splits = re . split ( f"<STR_LIT>" , text ) <EOL> splits = [ _splits [ i ] + _splits [ i + <NUM_LIT> ] for i in range ( <NUM_LIT> , len ( _splits ) , <NUM_LIT> ) ] <EOL> if len ( _splits ) % <NUM_LIT> == <NUM_LIT> : <EOL> splits += _splits [ - <NUM_LIT> : ] <EOL> splits = [ _splits [ <NUM_LIT> ] , * splits ] <EOL> else : <EOL> splits = re . split ( separator , text ) <EOL> else : <EOL> splits = list ( text ) <EOL> return [ s for s in splits if s != "<STR_LIT>" ] <EOL> class LangchainRecursiveCharacterTextSplitter ( TextSplitterProtocol ) : <EOL> separators : Sequence [ str ] <EOL> chunk_size : int <EOL> chunk_overlap : int = <NUM_LIT> <EOL> length_function : Callable [ [ str ] , int ] <EOL> keep_separator = False <EOL> strip_whitespace : bool = True <EOL> def __init__ ( <EOL> self , <EOL> * , <EOL> chunk_size : int , <EOL> length_function : Callable [ [ str ] , int ] , <EOL> ) -> None : <EOL> self . separators = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> self . length_function = length_function <EOL> self . chunk_size = chunk_size <EOL> def split_text ( self , text : str ) -> list [ str ] : <EOL> return self . _split_text ( text , self . separators ) <EOL> def _split_text ( self , text : str , separators : Sequence [ str ] ) -> list [ str ] : <EOL> final_chunks = [ ] <EOL> separator = separators [ - <NUM_LIT> ] <EOL> new_separators = [ ] <EOL> for i , _s in enumerate ( separators ) : <EOL> _separator = re . escape ( _s ) <EOL> if _s == "<STR_LIT>" : <EOL> separator = _s <EOL> break <EOL> if re . search ( _separator , text ) : <EOL> separator = _s <EOL> new_separators = separators [ i + <NUM_LIT> : ] <EOL> break <EOL> splits = _split_text_with_regex ( text , separator , self . keep_separator ) <EOL> _good_splits = [ ] <EOL> for s in splits : <EOL> if self . length_function ( s ) < self . chunk_size : <EOL> _good_splits . append ( s ) <EOL> else : <EOL> if _good_splits : <EOL> merged_text = self . _merge_splits ( _good_splits , separator ) <EOL> final_chunks . extend ( merged_text ) <EOL> _good_splits = [ ] <EOL> if not new_separators : <EOL> final_chunks . append ( s ) <EOL> else : <EOL> other_info = self . _split_text ( s , new_separators ) <EOL> final_chunks . extend ( other_info ) <EOL> if _good_splits : <EOL> merged_text = self . _merge_splits ( _good_splits , separator ) <EOL> final_chunks . extend ( merged_text ) <EOL> return final_chunks <EOL> def _merge_splits ( self , splits : Iterable [ str ] , separator : str ) -> list [ str ] : <EOL> separator_len = self . length_function ( separator ) <EOL> docs = [ ] <EOL> current_doc : MutableSequence [ str ] = [ ] <EOL> total = <NUM_LIT> <EOL> for d in splits : <EOL> _len = self . length_function ( d ) <EOL> if ( <EOL> total + _len + ( separator_len if len ( current_doc ) > <NUM_LIT> else <NUM_LIT> ) <EOL> > self . chunk_size <EOL> ) : <EOL> if total > self . chunk_size : <EOL> logger . warning ( <EOL> f"<STR_LIT>" <EOL> f"<STR_LIT>" <EOL> ) <EOL> if len ( current_doc ) > <NUM_LIT> : <EOL> doc = self . _join_docs ( current_doc , separator ) <EOL> if doc is not None : <EOL> docs . append ( doc ) <EOL> while total > self . chunk_overlap or ( <EOL> total + _len + ( separator_len if len ( current_doc ) > <NUM_LIT> else <NUM_LIT> ) <EOL> > self . chunk_size <EOL> and total > <NUM_LIT> <EOL> ) : <EOL> total -= self . length_function ( current_doc [ <NUM_LIT> ] ) + ( <EOL> separator_len if len ( current_doc ) > <NUM_LIT> else <NUM_LIT> <EOL> ) <EOL> current_doc = current_doc [ <NUM_LIT> : ] <EOL> current_doc . append ( d ) <EOL> total += _len + ( separator_len if len ( current_doc ) > <NUM_LIT> else <NUM_LIT> ) <EOL> doc = self . _join_docs ( current_doc , separator ) <EOL> if doc is not None : <EOL> docs . append ( doc ) <EOL> return docs <EOL> def _join_docs ( self , docs : Sequence [ str ] , separator : str ) -> str | None : <EOL> text = separator . join ( docs ) <EOL> if self . strip_whitespace : <EOL> text = text . strip ( ) <EOL> if text == "<STR_LIT>" : <EOL> return None <EOL> else : <EOL> return text <EOL> </s>
<s> class NoTokenLimitFound ( Exception ) : <EOL> pass <EOL> def get_default_token_limit ( model_id : str ) -> int : <EOL> match model_id : <EOL> case "<STR_LIT>" : <EOL> return <NUM_LIT> <EOL> case "<STR_LIT>" : <EOL> return <NUM_LIT> <EOL> case "<STR_LIT>" : <EOL> return <NUM_LIT> <EOL> case "<STR_LIT>" : <EOL> return <NUM_LIT> <EOL> case _ : <EOL> raise NoTokenLimitFound ( model_id ) <EOL> </s>
<s> import os <EOL> import dj_database_url <EOL> PROJECT_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) <EOL> BASE_DIR = os . path . dirname ( PROJECT_DIR ) <EOL> SECRET_KEY = "<STR_LIT>" <EOL> DEBUG = True <EOL> ALLOWED_HOSTS = [ "<STR_LIT>" ] <EOL> INSTALLED_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> MIDDLEWARE = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> ROOT_URLCONF = "<STR_LIT>" <EOL> TEMPLATES = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ ] , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> } , <EOL> } <EOL> ] <EOL> CACHES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> } <EOL> PASSWORD_HASHERS = ( "<STR_LIT>" , ) <EOL> DATABASES = { <EOL> "<STR_LIT>" : dj_database_url . config ( default = "<STR_LIT>" ) , <EOL> } <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ] <EOL> LANGUAGE_CODE = "<STR_LIT>" <EOL> TIME_ZONE = "<STR_LIT>" <EOL> USE_I18N = True <EOL> USE_TZ = True <EOL> STATICFILES_FINDERS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> STATICFILES_DIRS = [ ] <EOL> STATIC_ROOT = os . path . join ( BASE_DIR , "<STR_LIT>" ) <EOL> STATIC_URL = "<STR_LIT>" <EOL> MEDIA_ROOT = os . path . join ( BASE_DIR , "<STR_LIT>" ) <EOL> WAGTAIL_SITE_NAME = "<STR_LIT>" <EOL> if os . environ . get ( "<STR_LIT>" ) == "<STR_LIT>" : <EOL> WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> else : <EOL> WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> WAGTAILIMAGES_IMAGE_FORM_BASE = "<STR_LIT>" <EOL> LOGGING = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : False , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> } , <EOL> } <EOL> FORMS_URLFIELD_ASSUME_HTTPS = True <EOL> </s>
<s> import os <EOL> from collections . abc import Mapping <EOL> from typing import Any , NotRequired , Self <EOL> import llm <EOL> from llm . models import dataclass <EOL> from . . types import AIResponse <EOL> from . base import AIBackend , BaseAIBackendConfig , BaseAIBackendConfigSettings <EOL> class LLMBackendConfigSettingsDict ( BaseAIBackendConfigSettings ) : <EOL> PROMPT_KWARGS : NotRequired [ Mapping [ str , Any ] | None ] <EOL> INIT_KWARGS : NotRequired [ Mapping [ str , Any ] | None ] <EOL> @ dataclass ( kw_only = True ) <EOL> class LLMBackendConfig ( BaseAIBackendConfig [ LLMBackendConfigSettingsDict ] ) : <EOL> prompt_kwargs : Mapping [ str , Any ] <EOL> init_kwargs : Mapping [ str , Any ] <EOL> @ classmethod <EOL> def from_settings ( cls , config : LLMBackendConfigSettingsDict , ** kwargs : Any ) -> Self : <EOL> init_kwargs = config . get ( "<STR_LIT>" ) <EOL> if init_kwargs is None : <EOL> init_kwargs = { } <EOL> kwargs . setdefault ( "<STR_LIT>" , init_kwargs ) <EOL> prompt_kwargs = config . get ( "<STR_LIT>" ) <EOL> if prompt_kwargs is None : <EOL> prompt_kwargs = { } <EOL> kwargs . setdefault ( "<STR_LIT>" , prompt_kwargs ) <EOL> return super ( ) . from_settings ( config , ** kwargs ) <EOL> class LLMBackend ( AIBackend [ LLMBackendConfig ] ) : <EOL> config_cls = LLMBackendConfig <EOL> def prompt_with_context ( <EOL> self , * , pre_prompt : str , context : str , post_prompt : str | None = None <EOL> ) -> AIResponse : <EOL> model = self . get_llm_model ( ) <EOL> parts = [ pre_prompt , context ] <EOL> if post_prompt is not None : <EOL> parts . append ( post_prompt ) <EOL> full_prompt = os . linesep . join ( parts ) <EOL> prompt_kwargs = { } <EOL> if self . config . prompt_kwargs is not None : <EOL> prompt_kwargs . update ( self . config . prompt_kwargs ) <EOL> return model . prompt ( full_prompt , ** prompt_kwargs ) <EOL> def get_llm_model ( self ) -> llm . Model : <EOL> model = llm . get_model ( self . config . model_id ) <EOL> if self . config . init_kwargs is not None : <EOL> for config_key , config_val in self . config . init_kwargs . items ( ) : <EOL> setattr ( model , config_key , config_val ) <EOL> return model <EOL> </s>
<s> import argparse <EOL> import os <EOL> import shutil <EOL> import sys <EOL> import warnings <EOL> from django . core . management import execute_from_command_line <EOL> os . environ [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> sys . path . append ( "<STR_LIT>" ) <EOL> def make_parser ( ) : <EOL> parser = argparse . ArgumentParser ( ) <EOL> parser . add_argument ( <EOL> "<STR_LIT>" , <EOL> choices = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> default = "<STR_LIT>" , <EOL> ) <EOL> return parser <EOL> def parse_args ( args = None ) : <EOL> return make_parser ( ) . parse_known_args ( args ) <EOL> def runtests ( ) : <EOL> args , rest = parse_args ( ) <EOL> only_wagtail = r"<STR_LIT>" <EOL> if args . deprecation == "<STR_LIT>" : <EOL> warnings . simplefilter ( "<STR_LIT>" , DeprecationWarning ) <EOL> warnings . simplefilter ( "<STR_LIT>" , PendingDeprecationWarning ) <EOL> elif args . deprecation == "<STR_LIT>" : <EOL> warnings . filterwarnings ( <EOL> "<STR_LIT>" , category = DeprecationWarning , module = only_wagtail <EOL> ) <EOL> warnings . filterwarnings ( <EOL> "<STR_LIT>" , category = PendingDeprecationWarning , module = only_wagtail <EOL> ) <EOL> elif args . deprecation == "<STR_LIT>" : <EOL> warnings . filterwarnings ( <EOL> "<STR_LIT>" , category = DeprecationWarning , module = only_wagtail <EOL> ) <EOL> elif args . deprecation == "<STR_LIT>" : <EOL> pass <EOL> argv = [ sys . argv [ <NUM_LIT> ] , * rest ] <EOL> try : <EOL> execute_from_command_line ( argv ) <EOL> finally : <EOL> from wagtail . test . settings import MEDIA_ROOT , STATIC_ROOT <EOL> shutil . rmtree ( STATIC_ROOT , ignore_errors = True ) <EOL> shutil . rmtree ( MEDIA_ROOT , ignore_errors = True ) <EOL> if __name__ == "<STR_LIT>" : <EOL> runtests ( ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class WagtailAiAppConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> label = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> </s>
<s> import argparse <EOL> import json <EOL> from django . core . management . base import BaseCommand , CommandParser <EOL> from django . utils . module_loading import import_string <EOL> from wagtail . models import Page <EOL> class Command ( BaseCommand ) : <EOL> def add_arguments ( self , parser : CommandParser ) -> None : <EOL> parser . add_argument ( "<STR_LIT>" , nargs = <NUM_LIT> , type = argparse . FileType ( "<STR_LIT>" ) ) <EOL> parser . add_argument ( "<STR_LIT>" , nargs = <NUM_LIT> , type = str ) <EOL> parser . add_argument ( "<STR_LIT>" , nargs = <NUM_LIT> , type = int ) <EOL> def handle ( self , * args , ** options ) : <EOL> file = options [ "<STR_LIT>" ] [ <NUM_LIT> ] <EOL> model = import_string ( options [ "<STR_LIT>" ] [ <NUM_LIT> ] ) <EOL> parent_page = Page . objects . get ( pk = options [ "<STR_LIT>" ] [ <NUM_LIT> ] ) <EOL> sources = json . load ( file ) <EOL> for item in sources : <EOL> imported = model ( title = item [ "<STR_LIT>" ] , body = item [ "<STR_LIT>" ] ) <EOL> parent_page . add_child ( instance = imported ) <EOL> </s>
<s> from abc import ABCMeta <EOL> from dataclasses import dataclass <EOL> from enum import Enum <EOL> from typing import ( <EOL> Any , <EOL> ClassVar , <EOL> Generic , <EOL> NotRequired , <EOL> Protocol , <EOL> Required , <EOL> Self , <EOL> TypedDict , <EOL> TypeVar , <EOL> ) <EOL> from django . core . exceptions import ImproperlyConfigured <EOL> from django . core . files import File <EOL> from . . import tokens <EOL> from . . types import ( <EOL> AIResponse , <EOL> TextSplitterLengthCalculatorProtocol , <EOL> TextSplitterProtocol , <EOL> ) <EOL> class BackendFeature ( Enum ) : <EOL> TEXT_COMPLETION = "<STR_LIT>" <EOL> IMAGE_DESCRIPTION = "<STR_LIT>" <EOL> class BaseAIBackendConfigSettings ( TypedDict ) : <EOL> MODEL_ID : Required [ str ] <EOL> TOKEN_LIMIT : NotRequired [ int | None ] <EOL> AIBackendConfigSettings = TypeVar ( <EOL> "<STR_LIT>" , bound = BaseAIBackendConfigSettings , contravariant = True <EOL> ) <EOL> class ConfigClassProtocol ( Protocol [ AIBackendConfigSettings ] ) : <EOL> @ classmethod <EOL> def from_settings ( cls , config : AIBackendConfigSettings , ** kwargs : Any ) -> Self : <EOL> ... <EOL> @ dataclass ( kw_only = True ) <EOL> class BaseAIBackendConfig ( ConfigClassProtocol [ AIBackendConfigSettings ] ) : <EOL> model_id : str <EOL> token_limit : int <EOL> text_splitter_class : type [ TextSplitterProtocol ] <EOL> text_splitter_length_calculator_class : type [ TextSplitterLengthCalculatorProtocol ] <EOL> @ classmethod <EOL> def from_settings ( <EOL> cls , <EOL> config : AIBackendConfigSettings , <EOL> * , <EOL> text_splitter_class : type [ TextSplitterProtocol ] , <EOL> text_splitter_length_calculator_class : type [ <EOL> TextSplitterLengthCalculatorProtocol <EOL> ] , <EOL> ** kwargs : Any , <EOL> ) -> Self : <EOL> token_limit = cls . get_token_limit ( <EOL> model_id = config [ "<STR_LIT>" ] , custom_value = config . get ( "<STR_LIT>" ) <EOL> ) <EOL> return cls ( <EOL> model_id = config [ "<STR_LIT>" ] , <EOL> token_limit = token_limit , <EOL> text_splitter_class = text_splitter_class , <EOL> text_splitter_length_calculator_class = text_splitter_length_calculator_class , <EOL> ** kwargs , <EOL> ) <EOL> @ classmethod <EOL> def get_token_limit ( cls , * , model_id : str , custom_value : int | None ) -> int : <EOL> if custom_value is not None : <EOL> try : <EOL> return int ( custom_value ) <EOL> except ValueError as e : <EOL> raise ImproperlyConfigured ( <EOL> f'<STR_LIT>' <EOL> ) from e <EOL> try : <EOL> return tokens . get_default_token_limit ( model_id = model_id ) <EOL> except tokens . NoTokenLimitFound as e : <EOL> raise ImproperlyConfigured ( <EOL> f'<STR_LIT>' <EOL> ) from e <EOL> AIBackendConfig = TypeVar ( "<STR_LIT>" , bound = BaseAIBackendConfig ) <EOL> class AIBackend ( Generic [ AIBackendConfig ] , metaclass = ABCMeta ) : <EOL> config_cls : ClassVar [ type [ ConfigClassProtocol ] ] <EOL> config : AIBackendConfig <EOL> def __init__ ( <EOL> self , <EOL> * , <EOL> config : AIBackendConfig , <EOL> ) -> None : <EOL> self . config = config <EOL> def prompt_with_context ( <EOL> self , * , pre_prompt : str , context : str , post_prompt : str | None = None <EOL> ) -> AIResponse : <EOL> raise NotImplementedError ( "<STR_LIT>" ) <EOL> def get_text_splitter ( self ) -> TextSplitterProtocol : <EOL> return self . config . text_splitter_class ( <EOL> chunk_size = self . config . token_limit , <EOL> length_function = self . get_splitter_length_calculator ( ) . get_splitter_length , <EOL> ) <EOL> def get_splitter_length_calculator ( self ) -> TextSplitterLengthCalculatorProtocol : <EOL> return self . config . text_splitter_length_calculator_class ( ) <EOL> def describe_image ( self , * , image_file : File , prompt : str ) -> AIResponse : <EOL> raise NotImplementedError ( "<STR_LIT>" ) <EOL> </s>
<s> import decimal <EOL> import logging <EOL> import math <EOL> import re <EOL> from . . types import TextSplitterLengthCalculatorProtocol <EOL> logger = logging . getLogger ( __name__ ) <EOL> class NaiveTextSplitterCalculator ( TextSplitterLengthCalculatorProtocol ) : <EOL> characters_per_token : int | float | decimal . Decimal = <NUM_LIT> <EOL> words_per_token : int | float | decimal . Decimal = <NUM_LIT> <EOL> final_multiplier : int | float | decimal . Decimal = <NUM_LIT> <EOL> def get_splitter_length ( self , text : str ) -> int : <EOL> word_count = len ( re . findall ( r"<STR_LIT>" , text ) ) <EOL> char_count = len ( text ) <EOL> token_char_count = math . ceil ( char_count / self . characters_per_token ) <EOL> token_word_count = math . ceil ( word_count * self . words_per_token ) <EOL> logger . debug ( <EOL> "<STR_LIT>" , <EOL> token_char_count , <EOL> token_word_count , <EOL> char_count , <EOL> word_count , <EOL> ) <EOL> return math . ceil ( <EOL> max ( token_char_count , token_word_count ) * self . final_multiplier <EOL> ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . conf . urls . static import static <EOL> from django . contrib import admin <EOL> from django . contrib . staticfiles . urls import staticfiles_urlpatterns <EOL> from django . urls import include , path <EOL> from wagtail import urls as wagtail_urls <EOL> from wagtail . admin import urls as wagtailadmin_urls <EOL> from wagtail . documents import urls as wagtaildocs_urls <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , admin . site . urls ) , <EOL> path ( "<STR_LIT>" , include ( wagtailadmin_urls ) ) , <EOL> path ( "<STR_LIT>" , include ( wagtaildocs_urls ) ) , <EOL> * static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) , <EOL> * staticfiles_urlpatterns ( ) , <EOL> path ( "<STR_LIT>" , include ( wagtail_urls ) ) , <EOL> ] <EOL> </s>
<s> import random <EOL> import time <EOL> from collections . abc import Generator , Iterator <EOL> from dataclasses import dataclass <EOL> from typing import Any , NotRequired , Self <EOL> from django . core . exceptions import ImproperlyConfigured <EOL> from django . core . files import File <EOL> from . base import ( <EOL> AIBackend , <EOL> AIResponse , <EOL> BaseAIBackendConfig , <EOL> BaseAIBackendConfigSettings , <EOL> ) <EOL> class EchoResponse ( AIResponse ) : <EOL> _text : str | None = None <EOL> response_iterator : Iterator [ str ] <EOL> def __init__ ( self , response_iterator : Iterator [ str ] ) -> None : <EOL> self . response_iterator = response_iterator <EOL> def __iter__ ( self ) -> Iterator [ str ] : <EOL> return self . response_iterator <EOL> def text ( self ) -> str : <EOL> if self . _text is not None : <EOL> return self . _text <EOL> self . _text = "<STR_LIT>" . join ( self . response_iterator ) <EOL> return self . _text <EOL> @ dataclass ( kw_only = True ) <EOL> class EchoBackendSettingsDict ( BaseAIBackendConfigSettings ) : <EOL> MAX_WORD_SLEEP_SECONDS : NotRequired [ int ] <EOL> @ dataclass ( kw_only = True ) <EOL> class EchoBackendConfig ( BaseAIBackendConfig [ EchoBackendSettingsDict ] ) : <EOL> max_word_sleep_seconds : int <EOL> @ classmethod <EOL> def from_settings ( cls , config : EchoBackendSettingsDict , ** kwargs : Any ) -> Self : <EOL> max_word_sleep_seconds = config . get ( "<STR_LIT>" ) <EOL> if max_word_sleep_seconds is None : <EOL> max_word_sleep_seconds = <NUM_LIT> <EOL> try : <EOL> max_word_sleep_seconds = int ( max_word_sleep_seconds ) <EOL> except ValueError as e : <EOL> raise ImproperlyConfigured ( <EOL> f'<STR_LIT>' <EOL> ) from e <EOL> kwargs . setdefault ( "<STR_LIT>" , max_word_sleep_seconds ) <EOL> return super ( ) . from_settings ( config , ** kwargs ) <EOL> class EchoBackend ( AIBackend [ EchoBackendConfig ] ) : <EOL> config_cls = EchoBackendConfig <EOL> def prompt_with_context ( <EOL> self , * , pre_prompt : str , context : str , post_prompt : str | None = None <EOL> ) -> AIResponse : <EOL> return self . get_response ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , * context . split ( ) ] <EOL> ) <EOL> def describe_image ( self , * , image_file : File , prompt : str ) -> AIResponse : <EOL> return self . get_response ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , image_file . name ] <EOL> ) <EOL> def get_response ( self , words ) : <EOL> def response_iterator ( ) -> Generator [ str , None , None ] : <EOL> for word in words : <EOL> if ( <EOL> self . config . max_word_sleep_seconds is not None <EOL> and self . config . max_word_sleep_seconds > <NUM_LIT> <EOL> ) : <EOL> time . sleep ( <EOL> random . random ( ) <EOL> * random . randint ( <NUM_LIT> , self . config . max_word_sleep_seconds ) <EOL> ) <EOL> yield word <EOL> return EchoResponse ( response_iterator ( ) ) <EOL> </s>
<s> from collections . abc import Callable , Iterator <EOL> from typing import Any , Protocol <EOL> class AIResponse ( Protocol ) : <EOL> def __iter__ ( self ) -> Iterator [ str ] : <EOL> ... <EOL> def text ( self ) -> str : <EOL> ... <EOL> class TextSplitterProtocol ( Protocol ) : <EOL> def __init__ ( <EOL> self , * , chunk_size : int , length_function : Callable [ [ str ] , int ] , ** kwargs : Any <EOL> ) -> None : <EOL> ... <EOL> def split_text ( self , text : str ) -> list [ str ] : <EOL> ... <EOL> class TextSplitterLengthCalculatorProtocol ( Protocol ) : <EOL> def get_splitter_length ( self , text : str ) -> int : <EOL> ... <EOL> </s>
<s> import uuid <EOL> import pytest <EOL> from django . urls import reverse <EOL> from wagtail_ai . views import PromptEditForm , prompt_viewset <EOL> pytestmark = pytest . mark . django_db <EOL> def test_prompt_model_admin_form_validation ( test_prompt_values ) : <EOL> form_data = { <EOL> "<STR_LIT>" : test_prompt_values [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : test_prompt_values [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : test_prompt_values [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> form = PromptEditForm ( data = form_data ) <EOL> assert not form . is_valid ( ) <EOL> assert "<STR_LIT>" in form . errors <EOL> def test_prompt_model_admin_viewset_list_view ( admin_client , setup_prompt_object ) : <EOL> url = reverse ( f"<STR_LIT>" ) <EOL> response = admin_client . get ( url ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert setup_prompt_object . label in str ( response . content ) <EOL> def test_prompt_model_admin_viewset_edit_view ( admin_client , setup_prompt_object ) : <EOL> url = reverse ( f"<STR_LIT>" , args = [ setup_prompt_object . id ] ) <EOL> response = admin_client . get ( url ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert setup_prompt_object . label in str ( response . content ) <EOL> def test_process_view_get_request ( admin_client ) : <EOL> url = reverse ( "<STR_LIT>" ) <EOL> response = admin_client . get ( url ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> } <EOL> def test_process_view_post_without_text ( admin_client ) : <EOL> url = reverse ( "<STR_LIT>" ) <EOL> response = admin_client . post ( url , data = { } ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> } <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , [ None , "<STR_LIT>" , str ( uuid . uuid1 ( ) ) , str ( uuid . uuid4 ( ) ) ] <EOL> ) <EOL> def test_process_view_with_bad_prompt_id ( admin_client , prompt ) : <EOL> url = reverse ( "<STR_LIT>" ) <EOL> data = { "<STR_LIT>" : "<STR_LIT>" } <EOL> if prompt is not None : <EOL> data [ "<STR_LIT>" ] = prompt <EOL> response = admin_client . post ( url , data = data ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { "<STR_LIT>" : "<STR_LIT>" } <EOL> def test_process_view_with_correct_prompt ( admin_client , setup_prompt_object ) : <EOL> url = reverse ( "<STR_LIT>" ) <EOL> response = admin_client . post ( <EOL> url , data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : str ( setup_prompt_object . uuid ) } <EOL> ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert response . json ( ) == { "<STR_LIT>" : "<STR_LIT>" } <EOL> </s>
<s> import uuid <EOL> from django . db import models <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from wagtail . search import index <EOL> from wagtail_ai . prompts import DEFAULT_PROMPTS <EOL> class Prompt ( models . Model , index . Indexed ) : <EOL> class Method ( models . TextChoices ) : <EOL> REPLACE = "<STR_LIT>" , _ ( "<STR_LIT>" ) <EOL> APPEND = "<STR_LIT>" , _ ( "<STR_LIT>" ) <EOL> uuid = models . UUIDField ( default = uuid . uuid4 , unique = True , editable = False ) <EOL> default_prompt_id = models . SmallIntegerField ( unique = True , editable = False , null = True ) <EOL> label = models . CharField ( max_length = <NUM_LIT> ) <EOL> description = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> blank = True , <EOL> help_text = _ ( <EOL> "<STR_LIT>" <EOL> ) , <EOL> ) <EOL> prompt = models . TextField ( <EOL> null = True , <EOL> blank = False , <EOL> help_text = _ ( <EOL> "<STR_LIT>" <EOL> ) , <EOL> ) <EOL> method = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> choices = Method . choices , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> search_fields = [ <EOL> index . AutocompleteField ( "<STR_LIT>" ) , <EOL> index . SearchField ( "<STR_LIT>" ) , <EOL> index . SearchField ( "<STR_LIT>" ) , <EOL> ] <EOL> def __str__ ( self ) : <EOL> return self . label <EOL> def get_default_prompt_value ( self ) -> str : <EOL> return next ( <EOL> ( <EOL> prompt [ "<STR_LIT>" ] <EOL> for prompt in DEFAULT_PROMPTS <EOL> if prompt [ "<STR_LIT>" ] == self . default_prompt_id <EOL> ) , <EOL> "<STR_LIT>" , <EOL> ) <EOL> @ property <EOL> def is_default ( self ) -> bool : <EOL> return self . default_prompt_id is not None <EOL> @ property <EOL> def prompt_value ( self ) -> str : <EOL> if self . prompt is None : <EOL> if self . is_default : <EOL> return self . get_default_prompt_value ( ) <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> return self . prompt <EOL> </s>
<s> import uuid <EOL> from typing import NotRequired , Required , TypedDict <EOL> from django . urls import include , path , reverse <EOL> from django . utils . html import json_script <EOL> from django . utils . safestring import mark_safe <EOL> from django . views . i18n import JavaScriptCatalog <EOL> from wagtail import hooks <EOL> from wagtail . admin . rich_text . editors . draftail . features import ControlFeature <EOL> from . models import Prompt <EOL> from . views import describe_image , prompt_viewset , text_completion <EOL> @ hooks . register ( "<STR_LIT>" ) <EOL> def register_admin_urls ( ) : <EOL> urls = [ <EOL> path ( <EOL> "<STR_LIT>" , <EOL> JavaScriptCatalog . as_view ( packages = [ "<STR_LIT>" ] ) , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> path ( <EOL> "<STR_LIT>" , <EOL> text_completion , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> path ( <EOL> "<STR_LIT>" , <EOL> describe_image , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> return [ <EOL> path ( <EOL> "<STR_LIT>" , <EOL> include ( <EOL> ( urls , "<STR_LIT>" ) , <EOL> namespace = "<STR_LIT>" , <EOL> ) , <EOL> ) <EOL> ] <EOL> @ hooks . register ( "<STR_LIT>" ) <EOL> def register_ai_feature ( features ) : <EOL> feature_name = "<STR_LIT>" <EOL> features . default_features . append ( feature_name ) <EOL> features . register_editor_plugin ( <EOL> "<STR_LIT>" , <EOL> feature_name , <EOL> ControlFeature ( <EOL> { <EOL> "<STR_LIT>" : feature_name , <EOL> } , <EOL> js = [ "<STR_LIT>" ] , <EOL> css = { "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> ) , <EOL> ) <EOL> class PromptDict ( TypedDict ) : <EOL> uuid : Required [ uuid . UUID ] <EOL> label : Required [ str ] <EOL> description : NotRequired [ str ] <EOL> prompt : Required [ str ] <EOL> method : Required [ str ] <EOL> def _serialize_prompt ( prompt : Prompt ) -> PromptDict : <EOL> return { <EOL> "<STR_LIT>" : prompt . uuid , <EOL> "<STR_LIT>" : prompt . label , <EOL> "<STR_LIT>" : prompt . description , <EOL> "<STR_LIT>" : prompt . prompt_value , <EOL> "<STR_LIT>" : prompt . method , <EOL> } <EOL> def get_prompts ( ) : <EOL> return [ _serialize_prompt ( prompt ) for prompt in Prompt . objects . all ( ) ] <EOL> @ hooks . register ( "<STR_LIT>" ) <EOL> def ai_editor_js ( ) : <EOL> config = { <EOL> "<STR_LIT>" : get_prompts ( ) , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : reverse ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : reverse ( "<STR_LIT>" ) , <EOL> } , <EOL> } <EOL> return mark_safe ( json_script ( config , "<STR_LIT>" ) ) <EOL> @ hooks . register ( "<STR_LIT>" ) <EOL> def register_viewset ( ) : <EOL> return prompt_viewset <EOL> </s>
<s> import re <EOL> import pytest <EOL> from test_utils . settings import ( <EOL> custom_ai_backend_class , <EOL> custom_ai_backend_settings , <EOL> ) <EOL> from wagtail_ai . ai import ( <EOL> BackendNotFound , <EOL> InvalidAIBackendError , <EOL> get_ai_backend , <EOL> get_backend , <EOL> ) <EOL> from wagtail_ai . ai . base import BackendFeature <EOL> from wagtail_ai . ai . echo import EchoBackend <EOL> @ custom_ai_backend_class ( "<STR_LIT>" ) <EOL> def test_get_configured_backend_instance ( ) : <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> assert isinstance ( backend , EchoBackend ) <EOL> @ custom_ai_backend_class ( "<STR_LIT>" ) <EOL> def test_get_invalid_backend_class_instance ( ) : <EOL> with pytest . raises ( <EOL> InvalidAIBackendError , <EOL> match = re . escape ( <EOL> '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> ) , <EOL> ) : <EOL> get_ai_backend ( "<STR_LIT>" ) <EOL> @ custom_ai_backend_settings ( <EOL> new_value = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } <EOL> ) <EOL> def test_get_backend_instance_with_custom_setting ( ) : <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> assert isinstance ( backend , EchoBackend ) <EOL> assert backend . config . model_id == "<STR_LIT>" <EOL> assert backend . config . max_word_sleep_seconds == <NUM_LIT> <EOL> assert backend . config . token_limit == <NUM_LIT> <EOL> @ custom_ai_backend_settings ( <EOL> new_value = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } <EOL> ) <EOL> def test_prompt_with_context ( ) : <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> response = backend . prompt_with_context ( <EOL> pre_prompt = "<STR_LIT>" , <EOL> context = "<STR_LIT>" , <EOL> ) <EOL> assert response . text ( ) == "<STR_LIT>" <EOL> @ custom_ai_backend_settings ( <EOL> new_value = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } , <EOL> } <EOL> ) <EOL> def test_prompt_with_context_iterator ( ) : <EOL> backend = get_ai_backend ( "<STR_LIT>" ) <EOL> response = backend . prompt_with_context ( <EOL> pre_prompt = "<STR_LIT>" , <EOL> context = "<STR_LIT>" , <EOL> ) <EOL> assert list ( response ) == [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> def test_get_backend_with_feature ( settings ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : <NUM_LIT> } , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : <NUM_LIT> } , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> assert get_backend ( ) . config . model_id == "<STR_LIT>" <EOL> assert get_backend ( BackendFeature . TEXT_COMPLETION ) . config . model_id == "<STR_LIT>" <EOL> assert get_backend ( BackendFeature . IMAGE_DESCRIPTION ) . config . model_id == "<STR_LIT>" <EOL> def test_get_backend_not_found ( settings ) : <EOL> settings . WAGTAIL_AI = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : <NUM_LIT> } , <EOL> } , <EOL> } , <EOL> } <EOL> with pytest . raises ( BackendNotFound ) as exception : <EOL> get_backend ( BackendFeature . IMAGE_DESCRIPTION ) <EOL> assert exception . match ( r"<STR_LIT>" ) <EOL> </s>
<s> import os , django , sys , datetime , platform <EOL> from django . utils import timezone <EOL> from utils . general import argvs_get , channel_ids_to_dict , in_exclude_channel <EOL> from utils . aboutdb import log <EOL> from . spiders import epg_func <EOL> from dateutil import tz <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> from web . models import Channel , Epg <EOL> from utils . general import crawl_info , xmlinfo , dirs , add_info_title , add_info_desc , noepg <EOL> recrawl , cname , crawl_dt , save_to_db = argvs_get ( sys . argv ) <EOL> tz_sh = tz . gettz ( '<STR_LIT>' ) <EOL> def main ( ) : <EOL> log_start = '<STR_LIT>' <EOL> max_crawl_days = crawl_info [ '<STR_LIT>' ] <EOL> recrawl_days = crawl_info [ '<STR_LIT>' ] <EOL> epgs_no = <NUM_LIT> <EOL> for d in range ( max_crawl_days ) : <EOL> ban_channels = [ ] <EOL> dt = datetime . datetime . now ( ) . date ( ) + datetime . timedelta ( days = d ) if not cname else crawl_dt <EOL> if cname : <EOL> channels = Channel . get_spec_channel ( Channel , name = cname ) <EOL> max_crawl_days = <NUM_LIT> <EOL> else : <EOL> if recrawl and d < recrawl_days : <EOL> recrawl1 = <NUM_LIT> <EOL> else : <EOL> recrawl1 = <NUM_LIT> <EOL> channels = Channel . get_crawl_channels ( Channel , dt , recrawl = recrawl1 ) <EOL> channel_num = <NUM_LIT> <EOL> failed_channels = [ ] <EOL> success_num = <NUM_LIT> <EOL> channel_queryset_no = <NUM_LIT> <EOL> channel_no = channels . count ( ) <EOL> log ( '<STR_LIT>' % ( dt . strftime ( '<STR_LIT>' ) , d + <NUM_LIT> , channel_no ) ) <EOL> while True : <EOL> if channel_queryset_no >= channel_no : <EOL> if len ( ban_channels ) == <NUM_LIT> : <EOL> break <EOL> else : <EOL> channel = ban_channels [ <NUM_LIT> ] <EOL> else : <EOL> channel = channels [ <NUM_LIT> ] <EOL> channel_queryset_no += <NUM_LIT> <EOL> channel_num += <NUM_LIT> <EOL> msg1 = '<STR_LIT>' % ( <EOL> channel_num , channel_no , channel . id , channel . name ) <EOL> ret = get_epg ( channel , dt ) <EOL> if '<STR_LIT>' not in ret : <EOL> ret . update ( { '<STR_LIT>' : <NUM_LIT> } ) <EOL> if ret [ '<STR_LIT>' ] == <NUM_LIT> : <EOL> msg2 = '<STR_LIT>' % ret [ '<STR_LIT>' ] <EOL> msg5 = '<STR_LIT>' <EOL> if channel not in ban_channels : <EOL> ban_channels . append ( channel ) <EOL> msg5 = '<STR_LIT>' <EOL> log ( '<STR_LIT>' % ( log_start , msg1 , msg2 , msg5 ) ) <EOL> continue <EOL> elif ret [ '<STR_LIT>' ] == <NUM_LIT> and channel in ban_channels : <EOL> ban_channels . pop ( channel ) <EOL> msg2 = '<STR_LIT>' % ( len ( ret [ '<STR_LIT>' ] ) , ret [ '<STR_LIT>' ] ) <EOL> if cname : <EOL> msg1 = '<STR_LIT>' % ( msg1 , channel . source ) <EOL> for ep in ret [ '<STR_LIT>' ] : <EOL> print ( '<STR_LIT>' % ( ep [ '<STR_LIT>' ] , ep [ '<STR_LIT>' ] , ep [ '<STR_LIT>' ] ) ) <EOL> if len ( ret [ '<STR_LIT>' ] ) > <NUM_LIT> : <EOL> msg1 = '<STR_LIT>' % ( msg1 , ret [ '<STR_LIT>' ] ) <EOL> success_num += <NUM_LIT> <EOL> msgx = '<STR_LIT>' <EOL> if recrawl and channel . recrawl and d < recrawl_days : <EOL> del_ret = Epg . del_channel_epgs ( Epg , channel . id , dt , ret [ '<STR_LIT>' ] ) <EOL> msgx = '<STR_LIT>' % del_ret [ <NUM_LIT> ] <EOL> recrawl_today = <NUM_LIT> <EOL> else : <EOL> recrawl_today = <NUM_LIT> <EOL> if save_to_db : <EOL> save_ret = Epg . save_to_dbs ( Epg , ret ) <EOL> if save_ret [ '<STR_LIT>' ] : <EOL> msg3 = '<STR_LIT>' <EOL> else : <EOL> msg3 = '<STR_LIT>' % save_ret [ '<STR_LIT>' ] <EOL> else : <EOL> msg3 = '<STR_LIT>' <EOL> msgall = '<STR_LIT>' . join ( [ msg1 , msgx , msg2 , msg3 ] ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> log ( msgall ) <EOL> if not recrawl_today : <EOL> channel . last_program_date = ret [ '<STR_LIT>' ] <EOL> else : <EOL> channel . last_crawl_dt = timezone . now ( ) <EOL> channel . save ( ) <EOL> else : <EOL> failed_channels . append ( '<STR_LIT>' % ( channel . id , channel . name ) ) <EOL> if not cname : <EOL> channels = channels . exclude ( id = channel . id ) <EOL> if cname : <EOL> return <EOL> msgn1 = '<STR_LIT>' % ( '<STR_LIT>' . join ( failed_channels ) ) if len ( failed_channels ) > <NUM_LIT> else '<STR_LIT>' <EOL> msg_failed = '<STR_LIT>' % ( channel_no - success_num ) if channel_no - success_num > <NUM_LIT> else '<STR_LIT>' <EOL> msgn = '<STR_LIT>' % ( d + <NUM_LIT> , success_num , channel_no , msg_failed , msgn1 ) <EOL> log ( msgn ) <EOL> for s in xmlinfo : <EOL> xmlgen_ret = gen_xml ( s ) <EOL> epgs_no1 , epgsdir = xmlgen_ret [ <NUM_LIT> ] , xmlgen_ret [ <NUM_LIT> ] <EOL> epgs_no = epgs_no1 if epgs_no1 > epgs_no else epgs_no <EOL> if platform . system ( ) . lower ( ) == '<STR_LIT>' : <EOL> new_epgsdir = epgsdir + '<STR_LIT>' <EOL> cmd = '<STR_LIT>' % ( epgsdir , new_epgsdir ) <EOL> os . system ( cmd ) <EOL> log ( '<STR_LIT>' % new_epgsdir ) <EOL> channels = Channel . get_need_channels ( Channel , '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> gen_test_m3u_ret = gen_test_m3u ( channels , dirs [ '<STR_LIT>' ] ) <EOL> if gen_test_m3u_ret [ <NUM_LIT> ] : <EOL> log ( gen_test_m3u_ret [ <NUM_LIT> ] ) <EOL> def get_epg ( channel , dt , func_arg = <NUM_LIT> ) : <EOL> log_start = '<STR_LIT>' <EOL> n = <NUM_LIT> <EOL> msg = '<STR_LIT>' <EOL> channel_ids = channel_ids_to_dict ( channel . channel_id ) <EOL> channel_id = channel_ids [ channel . source ] <EOL> while n <= crawl_info [ '<STR_LIT>' ] : <EOL> ret = epg_func ( channel , channel_id , dt , func_arg = func_arg ) <EOL> if '<STR_LIT>' in ret and ret [ '<STR_LIT>' ] == <NUM_LIT> : <EOL> return ret <EOL> ret . update ( { '<STR_LIT>' : channel . source } ) <EOL> if len ( ret [ '<STR_LIT>' ] ) > <NUM_LIT> : <EOL> break <EOL> else : <EOL> log ( '<STR_LIT>' % ( channel . id , channel . name , channel . source , n , ret [ '<STR_LIT>' ] ) ) <EOL> n += <NUM_LIT> <EOL> if n > crawl_info [ '<STR_LIT>' ] : <EOL> msg = '<STR_LIT>' % ( n - <NUM_LIT> , channel . source , '<STR_LIT>' % ( channel . id , channel . name ) , '<STR_LIT>' if crawl_info [ '<STR_LIT>' ] else '<STR_LIT>' , ret [ '<STR_LIT>' ] ) <EOL> log ( msg ) <EOL> if crawl_info [ '<STR_LIT>' ] : <EOL> channel_ids . pop ( channel . source ) <EOL> sources = [ channel . source ] <EOL> for source in channel_ids : <EOL> channel_id = channel_ids [ source ] <EOL> ret = epg_func ( channel , channel_id , dt , func_arg = func_arg , source = source ) <EOL> ret . update ( { '<STR_LIT>' : source } ) <EOL> if ret [ '<STR_LIT>' ] == <NUM_LIT> : <EOL> break <EOL> else : <EOL> log ( '<STR_LIT>' % ( channel . id , channel . name , source , ret [ '<STR_LIT>' ] ) , <EOL> level = <NUM_LIT> ) <EOL> sources . append ( source ) <EOL> if not ret [ '<STR_LIT>' ] : <EOL> log ( '<STR_LIT>' % ( '<STR_LIT>' . join ( sources ) ) , level = <NUM_LIT> ) <EOL> else : <EOL> log ( '<STR_LIT>' % ( '<STR_LIT>' . join ( sources ) + '<STR_LIT>' , ret [ '<STR_LIT>' ] ) , level = <NUM_LIT> ) <EOL> return ret <EOL> def gen_xml ( sort ) : <EOL> if cname : <EOL> return <NUM_LIT> <EOL> xmlhead = '<STR_LIT>' <EOL> xmlbottom = '<STR_LIT>' <EOL> get_days = crawl_info [ '<STR_LIT>' ] <EOL> xmldir = '<STR_LIT>' % ( dirs [ '<STR_LIT>' ] , xmlinfo [ sort ] [ '<STR_LIT>' ] ) <EOL> tz = '<STR_LIT>' <EOL> need_date = datetime . datetime . now ( ) . date ( ) + datetime . timedelta ( days = get_days ) <EOL> channels = Channel . get_need_channels ( Channel , xmlinfo [ sort ] [ '<STR_LIT>' ] ) <EOL> epgs = Epg . get_epgs ( Epg , channels [ <NUM_LIT> ] , need_date ) <EOL> log ( '<STR_LIT>' % ( channels [ <NUM_LIT> ] . count ( ) , epgs . count ( ) ) ) <EOL> f = open ( xmldir , '<STR_LIT>' , encoding = '<STR_LIT>' ) <EOL> f . write ( xmlhead ) <EOL> for channel in channels [ <NUM_LIT> ] : <EOL> if channel . sort in in_exclude_channel [ '<STR_LIT>' ] and channel . name not in in_exclude_channel [ '<STR_LIT>' ] and channel . tvg_name not in in_exclude_channel [ '<STR_LIT>' ] : <EOL> continue <EOL> c = '<STR_LIT>' % ( channel . id , channel . tvg_name ) <EOL> f . write ( c ) <EOL> noepg_channel = '<STR_LIT>' <EOL> f . write ( noepg_channel ) <EOL> for epg in epgs : <EOL> start = epg . starttime . astimezone ( tz = tz_sh ) . strftime ( '<STR_LIT>' ) + tz <EOL> end = epg . endtime . astimezone ( tz = tz_sh ) . strftime ( '<STR_LIT>' ) + tz <EOL> id = epg . channel_id <EOL> title = epg . title + add_info_title <EOL> title = title . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( "<STR_LIT>" , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> desc = epg . descr + add_info_desc <EOL> desc = desc . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( "<STR_LIT>" , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> programinfo = % ( start , end , id , title , desc ) <EOL> f . write ( programinfo ) <EOL> for x in range ( <NUM_LIT> ) : <EOL> noepg_program_day = noepg ( '<STR_LIT>' , '<STR_LIT>' , ( datetime . datetime . now ( ) . date ( ) + datetime . timedelta ( days = x - <NUM_LIT> ) ) ) <EOL> f . write ( noepg_program_day ) <EOL> f . write ( xmlbottom ) <EOL> f . close ( ) <EOL> log ( '<STR_LIT>' % ( xmlinfo [ sort ] [ '<STR_LIT>' ] , xmldir ) ) <EOL> return [ epgs . count ( ) , xmldir ] <EOL> def gen_test_m3u ( channels , test_dir ) : <EOL> with open ( test_dir , '<STR_LIT>' , encoding = '<STR_LIT>' , errors = '<STR_LIT>' ) as f : <EOL> f . write ( '<STR_LIT>' ) <EOL> n = <NUM_LIT> <EOL> for channel in channels : <EOL> n += <NUM_LIT> <EOL> logo = channel . logo <EOL> tvgname = channel . tvg_name <EOL> name = channel . name <EOL> grouptitle = channel . sort <EOL> channel_id = channel . id <EOL> if grouptitle in [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] : <EOL> grouptitle = '<STR_LIT>' <EOL> if grouptitle not in [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] : <EOL> grouptitle = '<STR_LIT>' <EOL> line = '<STR_LIT>' % ( logo , channel_id , tvgname , grouptitle , name ) <EOL> line1 = '<STR_LIT>' % ( n ) <EOL> f . write ( line ) <EOL> f . write ( line1 ) <EOL> msg = '<STR_LIT>' % ( channels . count ( ) , dirs [ '<STR_LIT>' ] ) <EOL> return [ <NUM_LIT> , msg ] <EOL> </s>
<s> from unittest import TestCase <EOL> from langconv import * <EOL> class ConvertMapTest ( TestCase ) : <EOL> def test_map ( self ) : <EOL> mapping = { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } <EOL> cm = ConvertMap ( '<STR_LIT>' , mapping ) <EOL> self . assertEqual ( len ( cm ) , <NUM_LIT> ) <EOL> self . failUnless ( '<STR_LIT>' in cm ) <EOL> self . failUnless ( '<STR_LIT>' in cm ) <EOL> self . failIf ( '<STR_LIT>' in cm ) <EOL> self . assertEqual ( cm [ '<STR_LIT>' ] . data , ( True , True , '<STR_LIT>' ) ) <EOL> self . assertEqual ( cm [ '<STR_LIT>' ] . data , ( True , False , '<STR_LIT>' ) ) <EOL> self . assertEqual ( cm [ '<STR_LIT>' ] . data , ( False , True , '<STR_LIT>' ) ) <EOL> self . assertEqual ( cm [ '<STR_LIT>' ] . data , ( False , True , '<STR_LIT>' ) ) <EOL> self . assertEqual ( cm [ '<STR_LIT>' ] . data , ( True , False , '<STR_LIT>' ) ) <EOL> self . assertEqual ( cm [ '<STR_LIT>' ] . data , ( True , False , '<STR_LIT>' ) ) <EOL> class ConverterModelTest ( TestCase ) : <EOL> def test_1 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_2 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_3 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_4 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_5 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_6 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_7 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_8 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_9 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . end ( ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> def test_10 ( self ) : <EOL> registery ( '<STR_LIT>' , { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) <EOL> c = Converter ( '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> c . feed ( '<STR_LIT>' ) <EOL> c . end ( ) <EOL> self . assertEqual ( c . get_result ( ) , '<STR_LIT>' ) <EOL> class ConverterTest ( TestCase ) : <EOL> def assertConvert ( self , name , string , converted ) : <EOL> c = Converter ( name ) <EOL> new = c . convert ( string ) <EOL> assert new == converted , ( <EOL> "<STR_LIT>" % ( <EOL> repr ( name ) , string , converted , new ) ) . encode ( '<STR_LIT>' ) <EOL> def assertST ( self , trad , simp ) : <EOL> if not py3k : <EOL> trad = trad . decode ( '<STR_LIT>' ) <EOL> simp = simp . decode ( '<STR_LIT>' ) <EOL> self . assertConvert ( '<STR_LIT>' , trad , simp ) <EOL> self . assertConvert ( '<STR_LIT>' , simp , trad ) <EOL> def test_zh1 ( self ) : <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> def test_zh2 ( self ) : <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> def test_zh3 ( self ) : <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> def test_zh4 ( self ) : <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . assertST ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if '<STR_LIT>' == __name__ : <EOL> import unittest <EOL> unittest . main ( ) <EOL> </s>
<s> import sys <EOL> UEMPTY = '<STR_LIT>' <EOL> py2 = sys . version_info < ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> if py2 : <EOL> UEMPTY = UEMPTY . decode ( '<STR_LIT>' ) <EOL> chr = unichr <EOL> Simp2Trad_Table = {} <EOL> Trad2Simp_Table = { <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> } <EOL> Kanji2Trad_Table = {} <EOL> Kanji2Simp_Table = {} <EOL> Chinese2Kanji_Table = {} <EOL> def default_error_handler ( char , e ) : <EOL> return char <EOL> def empty_error_handler ( char , e ) : <EOL> return '<STR_LIT>' <EOL> def null_error_handler ( char , e ) : <EOL> return char <EOL> def raise_error_handler ( char , e ) : <EOL> raise e <EOL> def converter ( text , table , errors = None ) : <EOL> if errors is None : <EOL> errors = default_error_handler <EOL> assert errors is None or callable ( errors ) <EOL> ret = [ UEMPTY ] * len ( text ) <EOL> for i , char in enumerate ( text ) : <EOL> try : <EOL> ret [ i ] = chr ( table [ ord ( char ) ] ) <EOL> except KeyError as e : <EOL> ret [ i ] = errors ( char , e ) <EOL> return UEMPTY . join ( ret ) <EOL> for k indel Chinese2Kanji_Table [ k ] <EOL> if '<STR_LIT>' == __name__ : <EOL> import unittest <EOL> class ConverterTest ( unittest . TestCase ) : <EOL> def toU ( self , s ) : <EOL> return s . decode ( '<STR_LIT>' ) if py2 else s <EOL> def testSimpTrad ( self ) : <EOL> s1 = self . toU ( '<STR_LIT>' ) <EOL> s2 = self . toU ( '<STR_LIT>' ) <EOL> self . assertEqual ( <EOL> converter ( s1 , Simp2Trad_Table , null_error_handler ) , <EOL> s2 ) <EOL> self . assertEqual ( <EOL> converter ( s2 , Trad2Simp_Table , null_error_handler ) , <EOL> s1 ) <EOL> def testSimpKanji ( self ) : <EOL> s1 = self . toU ( '<STR_LIT>' ) <EOL> s2 = self . toU ( '<STR_LIT>' ) <EOL> self . assertEqual ( converter ( s1 , Chinese2Kanji_Table ) , s2 ) <EOL> self . assertEqual ( converter ( s2 , Kanji2Simp_Table ) , s1 ) <EOL> def testTradKanji ( self ) : <EOL> s1 = self . toU ( '<STR_LIT>' ) <EOL> self . assertEqual ( <EOL> converter ( s1 , Chinese2Kanji_Table , empty_error_handler ) , <EOL> self . toU ( '<STR_LIT>' ) ) <EOL> self . assertEqual ( converter ( s1 , Chinese2Kanji_Table ) , s1 ) <EOL> self . assertEqual ( converter ( s1 , Kanji2Trad_Table ) , s1 ) <EOL> unittest . main ( ) <EOL> </s>
<s> from django . contrib import admin <EOL> from django . urls import path <EOL> from django . urls import include <EOL> import web . views <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , web . views . index ) , <EOL> path ( '<STR_LIT>' , web . views . download ) , <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> path ( '<STR_LIT>' , admin . site . urls ) , <EOL> path ( '<STR_LIT>' , web . views . d ) , <EOL> ] <EOL> </s>
<s> from copy import deepcopy <EOL> import re <EOL> try : <EOL> import psyco <EOL> psyco . full ( ) <EOL> except : <EOL> pass <EOL> try : <EOL> from zh_wiki import zh2Hant , zh2Hans <EOL> except ImportError : <EOL> from utils . zhtools . zh_wiki import zh2Hant , zh2Hans <EOL> import sys <EOL> py3k = sys . version_info >= ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> if py3k : <EOL> UEMPTY = '<STR_LIT>' <EOL> else : <EOL> _zh2Hant , _zh2Hans = { } , { } <EOL> for old , new in ( ( zh2Hant , _zh2Hant ) , ( zh2Hans , _zh2Hans ) ) : <EOL> for k , v in old . items ( ) : <EOL> new [ k . decode ( '<STR_LIT>' ) ] = v . decode ( '<STR_LIT>' ) <EOL> zh2Hant = _zh2Hant <EOL> zh2Hans = _zh2Hans <EOL> UEMPTY = '<STR_LIT>' . decode ( '<STR_LIT>' ) <EOL> ( START , END , FAIL , WAIT_TAIL ) = list ( range ( <NUM_LIT> ) ) <EOL> ( TAIL , ERROR , MATCHED_SWITCH , UNMATCHED_SWITCH , CONNECTOR ) = list ( range ( <NUM_LIT> ) ) <EOL> MAPS = { } <EOL> class Node ( object ) : <EOL> def __init__ ( self , from_word , to_word = None , is_tail = True , <EOL> have_child = False ) : <EOL> self . from_word = from_word <EOL> if to_word is None : <EOL> self . to_word = from_word <EOL> self . data = ( is_tail , have_child , from_word ) <EOL> self . is_original = True <EOL> else : <EOL> self . to_word = to_word or from_word <EOL> self . data = ( is_tail , have_child , to_word ) <EOL> self . is_original = False <EOL> self . is_tail = is_tail <EOL> self . have_child = have_child <EOL> def is_original_long_word ( self ) : <EOL> return self . is_original and len ( self . from_word ) > <NUM_LIT> <EOL> def is_follow ( self , chars ) : <EOL> return chars != self . from_word [ : - <NUM_LIT> ] <EOL> def __str__ ( self ) : <EOL> return '<STR_LIT>' % ( repr ( self . from_word ) , <EOL> repr ( self . to_word ) , self . is_tail , self . have_child ) <EOL> __repr__ = __str__ <EOL> class ConvertMap ( object ) : <EOL> def __init__ ( self , name , mapping = None ) : <EOL> self . name = name <EOL> self . _map = { } <EOL> if mapping : <EOL> self . set_convert_map ( mapping ) <EOL> def set_convert_map ( self , mapping ) : <EOL> convert_map = { } <EOL> have_child = { } <EOL> max_key_length = <NUM_LIT> <EOL> for key in sorted ( mapping . keys ( ) ) : <EOL> if len ( key ) > <NUM_LIT> : <EOL> for i in range ( <NUM_LIT> , len ( key ) ) : <EOL> parent_key = key [ : i ] <EOL> have_child [ parent_key ] = True <EOL> have_child [ key ] = False <EOL> max_key_length = max ( max_key_length , len ( key ) ) <EOL> for key in sorted ( have_child . keys ( ) ) : <EOL> convert_map [ key ] = ( key in mapping , have_child [ key ] , <EOL> mapping . get ( key , UEMPTY ) ) <EOL> self . _map = convert_map <EOL> self . max_key_length = max_key_length <EOL> def __getitem__ ( self , k ) : <EOL> try : <EOL> is_tail , have_child , to_word = self . _map [ k ] <EOL> return Node ( k , to_word , is_tail , have_child ) <EOL> except : <EOL> return Node ( k ) <EOL> def __contains__ ( self , k ) : <EOL> return k in self . _map <EOL> def __len__ ( self ) : <EOL> return len ( self . _map ) <EOL> class StatesMachineException ( Exception ) : pass <EOL> class StatesMachine ( object ) : <EOL> def __init__ ( self ) : <EOL> self . state = START <EOL> self . final = UEMPTY <EOL> self . len = <NUM_LIT> <EOL> self . pool = UEMPTY <EOL> def clone ( self , pool ) : <EOL> new = deepcopy ( self ) <EOL> new . state = WAIT_TAIL <EOL> new . pool = pool <EOL> return new <EOL> def feed ( self , char , map ) : <EOL> node = map [ self . pool + char ] <EOL> if node . have_child : <EOL> if node . is_tail : <EOL> if node . is_original : <EOL> cond = UNMATCHED_SWITCH <EOL> else : <EOL> cond = MATCHED_SWITCH <EOL> else : <EOL> cond = CONNECTOR <EOL> else : <EOL> if node . is_tail : <EOL> cond = TAIL <EOL> else : <EOL> cond = ERROR <EOL> new = None <EOL> if cond == ERROR : <EOL> self . state = FAIL <EOL> elif cond == TAIL : <EOL> if self . state == WAIT_TAIL and node . is_original_long_word ( ) : <EOL> self . state = FAIL <EOL> else : <EOL> self . final += node . to_word <EOL> self . len += <NUM_LIT> <EOL> self . pool = UEMPTY <EOL> self . state = END <EOL> elif self . state == START or self . state == WAIT_TAIL : <EOL> if cond == MATCHED_SWITCH : <EOL> new = self . clone ( node . from_word ) <EOL> self . final += node . to_word <EOL> self . len += <NUM_LIT> <EOL> self . state = END <EOL> self . pool = UEMPTY <EOL> elif cond == UNMATCHED_SWITCH or cond == CONNECTOR : <EOL> if self . state == START : <EOL> new = self . clone ( node . from_word ) <EOL> self . final += node . to_word <EOL> self . len += <NUM_LIT> <EOL> self . state = END <EOL> else : <EOL> if node . is_follow ( self . pool ) : <EOL> self . state = FAIL <EOL> else : <EOL> self . pool = node . from_word <EOL> elif self . state == END : <EOL> self . state = START <EOL> new = self . feed ( char , map ) <EOL> elif self . state == FAIL : <EOL> raise StatesMachineException ( '<STR_LIT>' <EOL> '<STR_LIT>' % node ) <EOL> return new <EOL> def __len__ ( self ) : <EOL> return self . len + <NUM_LIT> <EOL> def __str__ ( self ) : <EOL> return '<STR_LIT>' % ( <EOL> id ( self ) , self . pool , self . state , self . final ) <EOL> __repr__ = __str__ <EOL> class Converter ( object ) : <EOL> def __init__ ( self , to_encoding ) : <EOL> self . to_encoding = to_encoding <EOL> self . map = MAPS [ to_encoding ] <EOL> self . start ( ) <EOL> def feed ( self , char ) : <EOL> branches = [ ] <EOL> for fsm in self . machines : <EOL> new = fsm . feed ( char , self . map ) <EOL> if new : <EOL> branches . append ( new ) <EOL> if branches : <EOL> self . machines . extend ( branches ) <EOL> self . machines = [ fsm for fsm in self . machines if fsm . state != FAIL ] <EOL> all_ok = True <EOL> for fsm in self . machines : <EOL> if fsm . state != END : <EOL> all_ok = False <EOL> if all_ok : <EOL> self . _clean ( ) <EOL> return self . get_result ( ) <EOL> def _clean ( self ) : <EOL> if len ( self . machines ) : <EOL> self . machines . sort ( key = lambda x : len ( x ) ) <EOL> self . final += self . machines [ <NUM_LIT> ] . final <EOL> self . machines = [ StatesMachine ( ) ] <EOL> def start ( self ) : <EOL> self . machines = [ StatesMachine ( ) ] <EOL> self . final = UEMPTY <EOL> def end ( self ) : <EOL> self . machines = [ fsm for fsm in self . machines <EOL> if fsm . state == FAIL or fsm . state == END ] <EOL> self . _clean ( ) <EOL> def convert ( self , string ) : <EOL> self . start ( ) <EOL> for char in string : <EOL> self . feed ( char ) <EOL> self . end ( ) <EOL> return self . get_result ( ) <EOL> def get_result ( self ) : <EOL> return self . final <EOL> def registery ( name , mapping ) : <EOL> global MAPS <EOL> MAPS [ name ] = ConvertMap ( name , mapping ) <EOL> registery ( '<STR_LIT>' , zh2Hant ) <EOL> registery ( '<STR_LIT>' , zh2Hans ) <EOL> del zh2Hant , zh2Hans <EOL> def run ( ) : <EOL> import sys <EOL> from optparse import OptionParser <EOL> parser = OptionParser ( ) <EOL> parser . add_option ( '<STR_LIT>' , type = '<STR_LIT>' , dest = '<STR_LIT>' , <EOL> help = '<STR_LIT>' ) <EOL> parser . add_option ( '<STR_LIT>' , type = '<STR_LIT>' , dest = '<STR_LIT>' , <EOL> help = '<STR_LIT>' ) <EOL> parser . add_option ( '<STR_LIT>' , type = '<STR_LIT>' , dest = '<STR_LIT>' , <EOL> help = '<STR_LIT>' ) <EOL> ( options , args ) = parser . parse_args ( ) <EOL> if not options . encoding : <EOL> parser . error ( '<STR_LIT>' ) <EOL> if options . file_in : <EOL> if options . file_in == '<STR_LIT>' : <EOL> file_in = sys . stdin <EOL> else : <EOL> file_in = open ( options . file_in ) <EOL> else : <EOL> file_in = sys . stdin <EOL> if options . file_out : <EOL> if options . file_out == '<STR_LIT>' : <EOL> file_out = sys . stdout <EOL> else : <EOL> file_out = open ( options . file_out , '<STR_LIT>' ) <EOL> else : <EOL> file_out = sys . stdout <EOL> c = Converter ( options . encoding ) <EOL> for line in file_in : <EOL> file_out . write ( c . convert ( line . rstrip ( '<STR_LIT>' ) . decode ( <EOL> '<STR_LIT>' ) ) . encode ( '<STR_LIT>' ) ) <EOL> if __name__ == '<STR_LIT>' : <EOL> run ( ) <EOL> </s>
<s> import requests , datetime , os <EOL> from utils . general import headers <EOL> def get_epgs_mytvsuper ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> start_date_str = dt . strftime ( '<STR_LIT>' ) <EOL> end_date = dt + datetime . timedelta ( days = <NUM_LIT> ) <EOL> end_date_str = end_date . strftime ( '<STR_LIT>' ) <EOL> url = '<STR_LIT>' % ( channel_id , start_date_str , end_date_str ) <EOL> try : <EOL> res = requests . get ( url , timeout = <NUM_LIT> , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> res_j = res . json ( ) <EOL> items = res_j [ <NUM_LIT> ] [ '<STR_LIT>' ] <EOL> for item in items : <EOL> epg_list = item [ '<STR_LIT>' ] <EOL> firtst_line_date = <NUM_LIT> <EOL> for li in epg_list : <EOL> starttime = datetime . datetime . strptime ( li [ '<STR_LIT>' ] , '<STR_LIT>' ) <EOL> title = li [ '<STR_LIT>' ] <EOL> title_en = li [ '<STR_LIT>' ] <EOL> desc = li [ '<STR_LIT>' ] <EOL> desc_en = li [ '<STR_LIT>' ] <EOL> url = '<STR_LIT>' % li [ '<STR_LIT>' ] <EOL> program_date = starttime . date ( ) if '<STR_LIT>' in locals ( ) else dt <EOL> if firtst_line_date : <EOL> last_program_date = starttime <EOL> first_line_date = <NUM_LIT> <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : '<STR_LIT>' % ( title , title_en ) , <EOL> '<STR_LIT>' : title_en , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : desc_en , <EOL> '<STR_LIT>' : program_date , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : last_program_date if '<STR_LIT>' in locals ( ) else dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_mytvsuper ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers ) <EOL> res_channels = res . json ( ) [ '<STR_LIT>' ] <EOL> channels = [ ] <EOL> for li in res_channels : <EOL> name = li [ '<STR_LIT>' ] <EOL> name_en = li [ '<STR_LIT>' ] <EOL> cn = li [ '<STR_LIT>' ] <EOL> href = '<STR_LIT>' % cn <EOL> logo = li [ '<STR_LIT>' ] if '<STR_LIT>' in li else '<STR_LIT>' <EOL> id = li [ '<STR_LIT>' ] <EOL> desc = '<STR_LIT>' <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : name_en , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : href , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : logo , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> import requests , datetime , os <EOL> from bs4 import BeautifulSoup as bs <EOL> from utils . general import headers <EOL> def get_epgs_gxntv ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> dt_str = dt . strftime ( '<STR_LIT>' ) <EOL> data = { <EOL> '<STR_LIT>' : channel_id , <EOL> '<STR_LIT>' : dt_str , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> try : <EOL> url = '<STR_LIT>' <EOL> res = requests . post ( url , headers = headers , timeout = <NUM_LIT> , data = data ) <EOL> res . encoding = '<STR_LIT>' <EOL> res_json = res . json ( ) <EOL> epgs_contents = res_json [ '<STR_LIT>' ] <EOL> epgs = [ ] <EOL> for epga in epgs_contents : <EOL> starttime_str = epga [ '<STR_LIT>' ] <EOL> time_delay = epga [ '<STR_LIT>' ] <EOL> starttime = datetime . datetime . strptime ( starttime_str , '<STR_LIT>' ) <EOL> endtime = starttime + datetime . timedelta ( seconds = time_delay ) <EOL> title = epga [ '<STR_LIT>' ] . strip ( ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : endtime , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_gxntv ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> contents = soup . select ( '<STR_LIT>' ) <EOL> channels = [ ] <EOL> for content in contents : <EOL> id = content . attrs [ '<STR_LIT>' ] <EOL> name = content . text <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> zh2Hant = {} <EOL> zh2Hans = {} <EOL> zh2TW = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> zh2HK = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> zh2CN = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> zh2SG = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> import django , os <EOL> from web . models import Channel_list <EOL> from crawl . spiders import epg_source <EOL> from utils . aboutdb import log <EOL> from utils . general import cht_to_chs <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> django . setup ( ) <EOL> def crawl ( ) : <EOL> for source in epg_source : <EOL> if True == True : <EOL> channels = [ ] <EOL> n = <NUM_LIT> <EOL> try : <EOL> channels = epg_source [ source ] ( ) <EOL> for channel in channels : <EOL> channel [ '<STR_LIT>' ] = cht_to_chs ( channel [ '<STR_LIT>' ] ) <EOL> save_ret = Channel_list . save_to_db ( Channel_list , channels ) <EOL> msg = '<STR_LIT>' % ( source , len ( channels ) , save_ret [ '<STR_LIT>' ] ) <EOL> except Exception as e : <EOL> msg = '<STR_LIT>' % ( source , e ) <EOL> log ( msg ) <EOL> for r in channels : <EOL> n += <NUM_LIT> <EOL> print ( n , r [ '<STR_LIT>' ] , '<STR_LIT>' . join ( r [ '<STR_LIT>' ] ) , r [ '<STR_LIT>' ] , r [ '<STR_LIT>' ] , r [ '<STR_LIT>' ] , r [ '<STR_LIT>' ] , r [ '<STR_LIT>' ] ) <EOL> </s>
<s> import requests , datetime , os <EOL> from utils . general import chuanliu_Authorization <EOL> headers = { <EOL> '<STR_LIT>' : chuanliu_Authorization , <EOL> } <EOL> def get_epgs_chuanliu ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> if len ( chuanliu_Authorization ) < <NUM_LIT> : <EOL> return { <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : [ ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> need_date = dt . strftime ( '<STR_LIT>' ) <EOL> url = '<STR_LIT>' % ( channel_id , need_date , need_date ) <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> ret_data = res . json ( ) [ '<STR_LIT>' ] <EOL> n = <NUM_LIT> <EOL> for j in ret_data : <EOL> n += <NUM_LIT> <EOL> title = j [ '<STR_LIT>' ] <EOL> channel_name = j [ '<STR_LIT>' ] <EOL> desc = j [ '<STR_LIT>' ] <EOL> starttime = j [ '<STR_LIT>' ] <EOL> endtime = j [ '<STR_LIT>' ] <EOL> starttime = datetime . datetime . strptime ( starttime , '<STR_LIT>' ) <EOL> endtime = datetime . datetime . strptime ( endtime , '<STR_LIT>' ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : endtime , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_chuanliu ( ) : <EOL> channels = [ ] <EOL> sorts = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> j = res . json ( ) <EOL> ret_data = j [ '<STR_LIT>' ] <EOL> for c in ret_data : <EOL> name = c [ '<STR_LIT>' ] <EOL> name2 = c [ '<STR_LIT>' ] <EOL> name = name if len ( name ) > <NUM_LIT> else name2 <EOL> id = c [ '<STR_LIT>' ] <EOL> sort_type = c [ '<STR_LIT>' ] <EOL> sort = sorts [ sort_type ] if sort_type in sorts else '<STR_LIT>' <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : sort , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> def get_sorts_type ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers ) <EOL> ret_data = res . json ( ) [ '<STR_LIT>' ] <EOL> n = <NUM_LIT> <EOL> for j in ret_data : <EOL> if n == <NUM_LIT> : <EOL> n += <NUM_LIT> <EOL> continue <EOL> key = j [ '<STR_LIT>' ] <EOL> sortname = j [ '<STR_LIT>' ] <EOL> print ( key , sortname ) <EOL> </s>
<s> from . zhtools . langconv import * <EOL> import datetime <EOL> from pathlib import Path <EOL> import re , os <EOL> add_info_desc = '<STR_LIT>' <EOL> add_info_title = '<STR_LIT>' <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent <EOL> root_dir = os . path . join ( BASE_DIR , '<STR_LIT>' ) <EOL> crawl_info = { <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> dirs = { <EOL> '<STR_LIT>' : "<STR_LIT>" % root_dir , <EOL> '<STR_LIT>' : '<STR_LIT>' % root_dir <EOL> } <EOL> chuanliu_Authorization = '<STR_LIT>' <EOL> headers = { <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> } <EOL> in_exclude_channel = { <EOL> '<STR_LIT>' : [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] , <EOL> '<STR_LIT>' : [ ] , <EOL> '<STR_LIT>' : [ ] , <EOL> '<STR_LIT>' : [ ] , <EOL> } <EOL> xmlinfo = { <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ '<STR_LIT>' , '<STR_LIT>' ] <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> } , <EOL> } <EOL> def cht_to_chs ( line ) : <EOL> line = Converter ( '<STR_LIT>' ) . convert ( line ) <EOL> line . encode ( '<STR_LIT>' ) <EOL> return line <EOL> def channel_ids_to_dict ( channel_id ) : <EOL> channel_list = { } <EOL> rs = re . findall ( '<STR_LIT>' , channel_id ) <EOL> for r in rs : <EOL> c = { r [ <NUM_LIT> ] : r [ <NUM_LIT> ] } <EOL> channel_list . update ( c ) <EOL> return channel_list <EOL> def argvs_get ( argv ) : <EOL> recrawl = <NUM_LIT> <EOL> cname = <NUM_LIT> <EOL> dt = <NUM_LIT> <EOL> save_to_db = <NUM_LIT> <EOL> if '<STR_LIT>' in argv : <EOL> recrawl = <NUM_LIT> <EOL> if '<STR_LIT>' in argv and len ( argv ) >= argv . index ( '<STR_LIT>' ) + <NUM_LIT> and '<STR_LIT>' not in argv [ argv . index ( '<STR_LIT>' ) + <NUM_LIT> ] : <EOL> cname = argv [ argv . index ( '<STR_LIT>' ) + <NUM_LIT> ] <EOL> if '<STR_LIT>' in argv and len ( argv ) >= argv . index ( '<STR_LIT>' ) + <NUM_LIT> and '<STR_LIT>' not in argv [ argv . index ( '<STR_LIT>' ) + <NUM_LIT> ] : <EOL> dt = argv [ argv . index ( '<STR_LIT>' ) + <NUM_LIT> ] <EOL> dt = datetime . datetime . strptime ( dt , '<STR_LIT>' ) . date ( ) <EOL> else : <EOL> dt = datetime . datetime . now ( ) . date ( ) <EOL> if '<STR_LIT>' in argv and len ( argv ) >= argv . index ( '<STR_LIT>' ) + <NUM_LIT> and '<STR_LIT>' not in argv [ argv . index ( '<STR_LIT>' ) + <NUM_LIT> ] : <EOL> save_to_db = int ( argv [ argv . index ( '<STR_LIT>' ) + <NUM_LIT> ] ) <EOL> if '<STR_LIT>' in argv and '<STR_LIT>' not in argv : <EOL> save_to_db = <NUM_LIT> <EOL> return [ recrawl , cname , dt , save_to_db ] <EOL> def noepgjson ( name , id , need_date ) : <EOL> title = '<STR_LIT>' <EOL> epgjsons = [ ] <EOL> for x in range ( <NUM_LIT> ) : <EOL> start = datetime . datetime . combine ( need_date , datetime . time ( x , <NUM_LIT> , <NUM_LIT> ) ) . strftime ( '<STR_LIT>' ) <EOL> end = datetime . datetime . combine ( need_date , datetime . time ( x , <NUM_LIT> , <NUM_LIT> ) ) . strftime ( '<STR_LIT>' ) <EOL> epgjsons . append ( { <EOL> '<STR_LIT>' : start , <EOL> '<STR_LIT>' : end , <EOL> '<STR_LIT>' : '<STR_LIT>' % ( title , add_info_title ) , <EOL> '<STR_LIT>' : add_info_desc , <EOL> } ) <EOL> return epgjsons <EOL> def noepg ( name , id , need_date ) : <EOL> hours_epg = [ ] <EOL> tz = '<STR_LIT>' <EOL> for x in range ( <NUM_LIT> ) : <EOL> start = datetime . datetime . combine ( need_date , datetime . time ( x , <NUM_LIT> , <NUM_LIT> ) ) <EOL> end = datetime . datetime . combine ( need_date , datetime . time ( x , <NUM_LIT> , <NUM_LIT> ) ) <EOL> starttime_str = start . strftime ( '<STR_LIT>' ) + tz <EOL> endtime_str = end . strftime ( '<STR_LIT>' ) + tz <EOL> hour_epg = % ( starttime_str , endtime_str ) <EOL> hours_epg . append ( hour_epg ) <EOL> xmlepg = '<STR_LIT>' . join ( hours_epg ) <EOL> return xmlepg <EOL> </s>
<s> import requests , re , datetime , os <EOL> from utils . general import headers <EOL> from bs4 import BeautifulSoup as bs <EOL> def get_epgs_cabletv ( channel , channel_id , dt , func_arg ) : <EOL> url = '<STR_LIT>' % ( channel_id , dt . strftime ( '<STR_LIT>' ) ) <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> epgs = [ ] <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> trs = soup . select ( '<STR_LIT>' ) <EOL> old_dt = datetime . datetime ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> for tr in trs : <EOL> divs = tr . select ( '<STR_LIT>' ) <EOL> starttime_str = divs [ <NUM_LIT> ] . text . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> title = divs [ <NUM_LIT> ] . text . replace ( '<STR_LIT>' , '<STR_LIT>' ) . strip ( ) <EOL> starttime = datetime . datetime ( year = dt . year , month = dt . month , day = dt . day , hour = int ( starttime_str [ : <NUM_LIT> ] ) , minute = int ( starttime_str [ - <NUM_LIT> : ] ) ) <EOL> if starttime < old_dt : <EOL> starttime = starttime + datetime . timedelta ( hours = <NUM_LIT> ) <EOL> if starttime < old_dt : <EOL> starttime = starttime + datetime . timedelta ( hours = <NUM_LIT> ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> old_dt = starttime <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_cabletv ( ) : <EOL> dds = [ ] <EOL> lis = [ ] <EOL> ds = [ ] <EOL> dsinfo = { } <EOL> ls = { } <EOL> nx = <NUM_LIT> <EOL> headers1 = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> for x in range ( <NUM_LIT> ) : <EOL> url = '<STR_LIT>' % ( x + <NUM_LIT> ) <EOL> res = requests . get ( url , headers = headers1 ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> dds1 = soup . select ( '<STR_LIT>' ) <EOL> dds += dds1 <EOL> us = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> for u in us : <EOL> url = '<STR_LIT>' % u <EOL> res = requests . get ( url , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> lis1 = soup . select ( '<STR_LIT>' ) <EOL> lis += lis1 <EOL> for li in lis : <EOL> try : <EOL> id1 = re . search ( '<STR_LIT>' , li [ '<STR_LIT>' ] ) <EOL> id = id1 . group ( <NUM_LIT> ) <EOL> except Exception as e : <EOL> print ( e ) <EOL> continue <EOL> name = li . text . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> ls . update ( { id : name } ) <EOL> for dd in dds : <EOL> title = re . sub ( '<STR_LIT>' , '<STR_LIT>' , dd . text . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) ) <EOL> id = dd . attrs [ '<STR_LIT>' ] . replace ( "<STR_LIT>" , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( "<STR_LIT>" , '<STR_LIT>' ) <EOL> img = '<STR_LIT>' + dd . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . attrs [ '<STR_LIT>' ] <EOL> if id in ls : <EOL> title = ls [ id ] <EOL> else : <EOL> print ( '<STR_LIT>' % dd ) <EOL> if title in ds : <EOL> idold = dsinfo [ title ] [ <NUM_LIT> ] <EOL> id = '<STR_LIT>' % ( idold , id ) <EOL> dsinfo . update ( { title : [ id , img ] } ) <EOL> else : <EOL> nx += <NUM_LIT> <EOL> dsinfo . update ( { title : [ id , img ] } ) <EOL> ds . append ( title ) <EOL> channels = [ ] <EOL> for x in dsinfo : <EOL> channel = { <EOL> '<STR_LIT>' : x , <EOL> '<STR_LIT>' : dsinfo [ x ] [ <NUM_LIT> ] . split ( '<STR_LIT>' ) , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dsinfo [ x ] [ <NUM_LIT> ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> channels . append ( channel ) <EOL> print ( '<STR_LIT>' % ( len ( dds ) , len ( lis ) , nx ) ) <EOL> return channels <EOL> </s>
<s> import requests , datetime <EOL> from utils . general import headers <EOL> from bs4 import BeautifulSoup as bs <EOL> def get_desc_tvsou ( url ) : <EOL> return '<STR_LIT>' <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> s = soup . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> desc = s . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> except Exception as e : <EOL> desc = '<STR_LIT>' <EOL> return desc <EOL> def get_epgs_tvsou ( channel , channel_id_ , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> desc = '<STR_LIT>' <EOL> need_weekday = dt . weekday ( ) + <NUM_LIT> <EOL> if "<STR_LIT>" in channel_id_ : <EOL> channel_id , sort_class = channel_id_ . split ( '<STR_LIT>' ) <EOL> url = '<STR_LIT>' % ( channel_id , need_weekday ) <EOL> else : <EOL> url = '<STR_LIT>' % ( channel_id_ , need_weekday ) <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> rows = soup . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . select ( '<STR_LIT>' ) <EOL> except Exception as e : <EOL> msg = '<STR_LIT>' % e <EOL> success = <NUM_LIT> <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> program_urls = { } <EOL> for row in rows : <EOL> try : <EOL> if row . select ( '<STR_LIT>' ) : <EOL> starttime_str = row . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> title = row . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> else : <EOL> starttime_str = row . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> title = row . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> starttime = datetime . datetime . combine ( dt , datetime . time ( int ( starttime_str [ : <NUM_LIT> ] ) , int ( starttime_str [ - <NUM_LIT> : ] ) ) ) <EOL> program_url = None <EOL> if row . select ( '<STR_LIT>' ) and '<STR_LIT>' in row . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . attrs : <EOL> program_url = '<STR_LIT>' + row . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . attrs [ '<STR_LIT>' ] <EOL> program_url = program_url . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if program_url in program_urls : <EOL> desc = program_urls [ program_url ] <EOL> else : <EOL> if len ( program_url ) > <NUM_LIT> : <EOL> desc = get_desc_tvsou ( program_url ) <EOL> program_urls . update ( { program_url : desc } ) <EOL> else : <EOL> program_url , desc = '<STR_LIT>' , '<STR_LIT>' <EOL> else : <EOL> program_url , desc = '<STR_LIT>' , '<STR_LIT>' <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> msg = '<STR_LIT>' % e <EOL> continue <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_tvsou ( ) : <EOL> channels = [ ] <EOL> sorts = [ ] <EOL> host = '<STR_LIT>' <EOL> url = '<STR_LIT>' % ( host , '<STR_LIT>' ) <EOL> res = requests . get ( url , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> div_sorts = soup . select ( '<STR_LIT>' ) <EOL> div_channels = soup . select ( '<STR_LIT>' ) <EOL> n = <NUM_LIT> <EOL> for div_channel in div_channels : <EOL> sort_name = div_sorts [ n ] . text . strip ( ) <EOL> lis = div_channel . select ( '<STR_LIT>' ) <EOL> n += <NUM_LIT> <EOL> for li in lis : <EOL> name = li . a . text . strip ( ) <EOL> url = host + li . a [ '<STR_LIT>' ] <EOL> id = li . a [ '<STR_LIT>' ] . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if len ( id ) < <NUM_LIT> : <EOL> continue <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : url , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : sort_name , <EOL> } <EOL> channels . append ( channel ) <EOL> print ( '<STR_LIT>' % ( n , len ( channels ) ) ) <EOL> return channels <EOL> </s>
<s> from bs4 import BeautifulSoup as bs <EOL> import requests , datetime , os <EOL> from utils . general import headers <EOL> def get_epgs_hks ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> url = '<STR_LIT>' <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> lis = soup . select ( '<STR_LIT>' ) <EOL> for li in lis : <EOL> title = [ text for text in li . a . stripped_strings ] [ <NUM_LIT> ] <EOL> starttime = datetime . datetime . fromtimestamp ( int ( li . a . attrs [ '<STR_LIT>' ] ) ) <EOL> if starttime . date ( ) < dt : <EOL> continue <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : starttime . date ( ) if starttime in locals ( ) else dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : starttime . date ( ) , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_hks ( ) : <EOL> channels = [ ] <EOL> channel = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> '<STR_LIT>' <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> import sys <EOL> from crawl . crawl import main as start_crawl <EOL> from utils . crawl_channel_lists import crawl <EOL> if '<STR_LIT>' in sys . argv : <EOL> pass <EOL> if '<STR_LIT>' in sys . argv : <EOL> crawl ( ) <EOL> else : <EOL> start_crawl ( ) <EOL> </s>
<s> import os . path <EOL> try : <EOL> chr = unichr <EOL> except NameError : <EOL> pass <EOL> VERSION = '<STR_LIT>' <EOL> class Pinyin ( object ) : <EOL> data_path = os . path . join ( os . path . dirname ( os . path . abspath ( __file__ ) ) , '<STR_LIT>' ) <EOL> def __init__ ( self ) : <EOL> self . dict = { } <EOL> self . revdict = { } <EOL> for line in open ( self . data_path ) : <EOL> k , v = line . strip ( ) . split ( '<STR_LIT>' ) <EOL> v = v . lower ( ) . split ( '<STR_LIT>' ) <EOL> hz = chr ( int ( '<STR_LIT>' % k , <NUM_LIT> ) ) <EOL> self . dict [ hz ] = v <EOL> for vkey in v : <EOL> self . revdict . setdefault ( vkey , [ ] ) <EOL> self . revdict [ vkey ] . append ( hz ) <EOL> def py2hz ( self , pinyin ) : <EOL> if pinyin == '<STR_LIT>' : <EOL> return [ ] <EOL> pinyin = pinyin . lower ( ) <EOL> if pinyin [ - <NUM_LIT> ] . isdigit ( ) : <EOL> return self . revdict . get ( pinyin , [ ] ) <EOL> ret = [ ] <EOL> for i in range ( <NUM_LIT> , <NUM_LIT> ) : <EOL> key = '<STR_LIT>' % ( pinyin , i ) <EOL> ret += self . revdict . get ( key , [ ] ) <EOL> return ret <EOL> def get_pinyin ( self , chars = '<STR_LIT>' , splitter = '<STR_LIT>' , tone = False ) : <EOL> result = [ ] <EOL> for char in chars : <EOL> v = self . dict . get ( char , None ) <EOL> if v : <EOL> v = v [ <NUM_LIT> ] <EOL> if not tone and v [ - <NUM_LIT> ] . isdigit ( ) : <EOL> v = v [ : - <NUM_LIT> ] <EOL> else : <EOL> v = char <EOL> result . append ( v ) <EOL> return splitter . join ( result ) <EOL> def get_initials ( self , char = '<STR_LIT>' ) : <EOL> if char == '<STR_LIT>' : <EOL> return '<STR_LIT>' <EOL> return self . dict . get ( char , [ char ] ) [ <NUM_LIT> ] [ <NUM_LIT> ] . upper ( ) <EOL> if __name__ == '<STR_LIT>' : <EOL> import unittest <EOL> class PinyinTestCase ( unittest . TestCase ) : <EOL> def setUp ( self ) : <EOL> import sys <EOL> py = sys . version_info <EOL> self . py3k = py >= ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . py = Pinyin ( ) <EOL> def to_unicode ( self , s ) : <EOL> if self . py3k : <EOL> return s <EOL> return s . decode ( '<STR_LIT>' ) <EOL> def test_get_pinyin ( self ) : <EOL> s = self . to_unicode ( '<STR_LIT>' ) <EOL> a = self . to_unicode ( '<STR_LIT>' ) <EOL> aa = self . to_unicode ( '<STR_LIT>' ) <EOL> aaa = self . to_unicode ( '<STR_LIT>' ) <EOL> self . assertEqual ( self . py . get_pinyin ( s ) , a ) <EOL> self . assertEqual ( self . py . get_pinyin ( s , tone = True ) , aa ) <EOL> self . assertEqual ( self . py . get_pinyin ( s , splitter = '<STR_LIT>' ) , aaa ) <EOL> def test_get_initials ( self ) : <EOL> s = self . to_unicode ( '<STR_LIT>' ) <EOL> a = self . to_unicode ( '<STR_LIT>' ) <EOL> self . assertEqual ( self . py . get_initials ( s ) , a ) <EOL> def test_py2hz ( self ) : <EOL> s1 = self . to_unicode ( '<STR_LIT>' ) <EOL> s2 = self . to_unicode ( '<STR_LIT>' ) <EOL> a1 = self . to_unicode ( '<STR_LIT>' ) <EOL> a2 = self . to_unicode ( '<STR_LIT>' ) <EOL> self . assertEqual ( '<STR_LIT>' . join ( self . py . py2hz ( s1 ) ) , a1 ) <EOL> self . assertEqual ( '<STR_LIT>' . join ( self . py . py2hz ( s2 ) ) , a2 ) <EOL> unittest . main ( ) <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> import requests , time , datetime , re <EOL> from utils . general import headers <EOL> from bs4 import BeautifulSoup as bs <EOL> headers = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> def get_desc ( url_part ) : <EOL> return '<STR_LIT>' <EOL> try : <EOL> url = '<STR_LIT>' + url_part <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> if soup . select ( '<STR_LIT>' ) : <EOL> desc = soup . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> else : <EOL> desc = soup . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text + soup . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> except Exception as e : <EOL> desc = '<STR_LIT>' <EOL> return desc . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> def get_morning_lis ( url , today ) : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> lis = soup . select ( '<STR_LIT>' ) <EOL> return lis <EOL> def get_token ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> res_json = res . json ( ) <EOL> if res_json [ <NUM_LIT> ] : <EOL> success = <NUM_LIT> <EOL> else : <EOL> success = <NUM_LIT> <EOL> token = res_json [ <NUM_LIT> ] <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : token , <EOL> } <EOL> return ret <EOL> def get_epgs_tvmao ( channel , channel_id , dt , func_arg ) : <EOL> afternoon_url = '<STR_LIT>' <EOL> time . sleep ( <NUM_LIT> ) <EOL> sleep_time = <NUM_LIT> <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> ban = <NUM_LIT> <EOL> today_dt = datetime . datetime . now ( ) <EOL> need_weekday = dt . weekday ( ) + <NUM_LIT> <EOL> epg_url_part = '<STR_LIT>' <EOL> url = '<STR_LIT>' % ( epg_url_part , channel_id , need_weekday ) <EOL> try : <EOL> nn , lis = <NUM_LIT> , [ ] <EOL> while len ( lis ) == <NUM_LIT> : <EOL> today = <NUM_LIT> if today_dt . date ( ) == dt else <NUM_LIT> <EOL> lis = get_morning_lis ( url , today ) <EOL> time . sleep ( <NUM_LIT> ) <EOL> nn += <NUM_LIT> <EOL> if nn > <NUM_LIT> : <EOL> break <EOL> time . sleep ( <NUM_LIT> ) <EOL> except Exception as e : <EOL> msg = '<STR_LIT>' % ( e ) <EOL> success = <NUM_LIT> <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> return ret <EOL> for li in lis : <EOL> if "<STR_LIT>" in li . attrs : <EOL> continue <EOL> title = li . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> starttime_str = li . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text . strip ( ) <EOL> if starttime_str == '<STR_LIT>' or '<STR_LIT>' in starttime_str . strip ( ) : <EOL> starttime = today_dt <EOL> else : <EOL> starttime = datetime . datetime . combine ( dt , datetime . time ( int ( starttime_str [ : <NUM_LIT> ] ) , int ( starttime_str [ - <NUM_LIT> : ] ) ) ) <EOL> href = li . a [ '<STR_LIT>' ] if '<STR_LIT>' in str ( li . a ) else '<STR_LIT>' <EOL> desc = get_desc ( href ) <EOL> url = '<STR_LIT>' + href . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> try : <EOL> tccc = channel_id . split ( '<STR_LIT>' ) <EOL> if len ( tccc ) == <NUM_LIT> : <EOL> tc , cc = tccc <EOL> else : <EOL> tc = '<STR_LIT>' <EOL> cc = '<STR_LIT>' . join ( tccc [ <NUM_LIT> : ] ) <EOL> data = { <EOL> '<STR_LIT>' : tc , <EOL> '<STR_LIT>' : cc , <EOL> '<STR_LIT>' : need_weekday , <EOL> '<STR_LIT>' : get_token ( ) [ '<STR_LIT>' ] , <EOL> } <EOL> res = requests . post ( afternoon_url , headers = headers , data = data , timeout = <NUM_LIT> ) <EOL> lss = res . json ( ) [ <NUM_LIT> ] <EOL> if res . json ( ) [ <NUM_LIT> ] == - <NUM_LIT> : <EOL> msg = '<STR_LIT>' % sleep_time <EOL> time . sleep ( sleep_time ) <EOL> success = <NUM_LIT> <EOL> ban = <NUM_LIT> <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : ban , <EOL> } <EOL> return ret <EOL> if isinstance ( lss , str ) : <EOL> soup = bs ( lss , '<STR_LIT>' ) <EOL> lis1 = soup . select ( '<STR_LIT>' ) <EOL> for tr in lis1 : <EOL> if not tr . find ( '<STR_LIT>' ) : <EOL> continue <EOL> spans = tr . select ( '<STR_LIT>' ) <EOL> if len ( spans ) > <NUM_LIT> : <EOL> if '<STR_LIT>' in spans [ <NUM_LIT> ] . text : <EOL> title = spans [ <NUM_LIT> ] . text <EOL> else : <EOL> title = spans [ <NUM_LIT> ] . text <EOL> starttime_str = spans [ <NUM_LIT> ] . text . replace ( '<STR_LIT>' , '<STR_LIT>' ) . strip ( ) <EOL> starttime = datetime . datetime . combine ( dt , <EOL> datetime . time ( int ( starttime_str [ : <NUM_LIT> ] ) , int ( starttime_str [ - <NUM_LIT> : ] ) ) ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : channel . super_id , <EOL> } <EOL> epgs . append ( epg ) <EOL> else : <EOL> for tr in lss : <EOL> tr1 = bs ( tr [ '<STR_LIT>' ] , '<STR_LIT>' ) <EOL> title = tr1 . text <EOL> starttime_str = tr [ '<STR_LIT>' ] <EOL> starttime = datetime . datetime . combine ( dt , <EOL> datetime . time ( int ( starttime_str [ : <NUM_LIT> ] ) , int ( starttime_str [ - <NUM_LIT> : ] ) ) ) <EOL> href = tr1 . a [ '<STR_LIT>' ] if '<STR_LIT>' in str ( tr1 . a ) else '<STR_LIT>' <EOL> program_url = '<STR_LIT>' + href . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> desc = get_desc ( href ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> msg = '<STR_LIT>' % e <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> return ret <EOL> def get_epgs_tvmao2 ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> desc = '<STR_LIT>' <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> ban = <NUM_LIT> <EOL> now_date = datetime . datetime . now ( ) . date ( ) <EOL> need_date = dt <EOL> delta = need_date - now_date <EOL> now_weekday = now_date . weekday ( ) <EOL> need_weekday = now_weekday + delta . days + <NUM_LIT> <EOL> id_split = channel_id . split ( '<STR_LIT>' ) <EOL> if len ( id_split ) == <NUM_LIT> : <EOL> id = id_split [ <NUM_LIT> ] <EOL> elif len ( id_split ) == <NUM_LIT> : <EOL> id = '<STR_LIT>' . join ( id_split [ <NUM_LIT> : <NUM_LIT> ] ) <EOL> else : <EOL> id = channel_id <EOL> url = "<STR_LIT>" % ( id , need_weekday ) <EOL> try : <EOL> res = requests . get ( url , headers = headers ) <EOL> res_j = res . json ( ) <EOL> datas = res_j [ <NUM_LIT> ] [ '<STR_LIT>' ] <EOL> for data in datas : <EOL> title = data [ '<STR_LIT>' ] <EOL> starttime_str = data [ '<STR_LIT>' ] <EOL> starttime = datetime . datetime . combine ( dt , <EOL> datetime . time ( int ( starttime_str [ : <NUM_LIT> ] ) , int ( starttime_str [ - <NUM_LIT> : ] ) ) ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> msg = '<STR_LIT>' % e <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> return ret <EOL> def get_channels_tvmao ( ) : <EOL> url_sort = '<STR_LIT>' <EOL> res = requests . get ( url_sort , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> provinces = { } <EOL> big_sorts = { } <EOL> channels = [ ] <EOL> provinces_more = soup . select ( '<STR_LIT>' ) <EOL> big_sorts_more = soup . select ( '<STR_LIT>' ) <EOL> for province_more in provinces_more : <EOL> province = province_more . text . strip ( ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> province_id = province_more . a [ '<STR_LIT>' ] . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> province = { <EOL> province : province_id , <EOL> } <EOL> provinces . update ( province ) <EOL> for big_sort_more in big_sorts_more : <EOL> sort_name = big_sort_more . text . strip ( ) <EOL> url = big_sort_more . a [ '<STR_LIT>' ] <EOL> sort_id = url . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if sort_name in provinces or sort_name == '<STR_LIT>' : <EOL> continue <EOL> big_sorts . update ( { sort_name : sort_id } ) <EOL> provinces . update ( big_sorts ) <EOL> sorts = provinces <EOL> n = <NUM_LIT> <EOL> for sort_name in sorts : <EOL> url = '<STR_LIT>' % sorts [ sort_name ] <EOL> time . sleep ( <NUM_LIT> ) <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> channel_trs = soup . select ( '<STR_LIT>' ) <EOL> n += <NUM_LIT> <EOL> for tr in channel_trs : <EOL> tr1 = tr . td . a <EOL> name = tr1 [ '<STR_LIT>' ] <EOL> href = tr1 [ '<STR_LIT>' ] <EOL> id = href . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> id = re . sub ( '<STR_LIT>' , '<STR_LIT>' , id ) <EOL> res1 = tr1 [ '<STR_LIT>' ] <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : '<STR_LIT>' % id , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : sort_name , <EOL> '<STR_LIT>' : res1 , <EOL> } <EOL> channels . append ( channel ) <EOL> print ( '<STR_LIT>' % ( n , sort_name , sorts [ sort_name ] , len ( channel_trs ) ) ) <EOL> return channels <EOL> </s>
<s> from django . shortcuts import render <EOL> from django . http import HttpResponse , FileResponse <EOL> from web . models import Channel , Epg <EOL> from utils . general import noepgjson , crawl_info , root_dir <EOL> from utils . aboutdb import get_html_info <EOL> import datetime , re , json , os <EOL> from dateutil import tz <EOL> tz_sh = tz . gettz ( '<STR_LIT>' ) <EOL> def d ( request ) : <EOL> return render ( request , '<STR_LIT>' ) <EOL> def index ( request ) : <EOL> crawl_days = crawl_info [ '<STR_LIT>' ] <EOL> start_date = datetime . datetime . now ( ) . strftime ( u'<STR_LIT>' ) . format ( y = '<STR_LIT>' , m = '<STR_LIT>' , d = '<STR_LIT>' ) <EOL> start_date_no = datetime . datetime . now ( ) . strftime ( u'<STR_LIT>' ) <EOL> end_date_date = datetime . datetime . now ( ) + datetime . timedelta ( days = crawl_days - <NUM_LIT> ) <EOL> end_date = ( end_date_date ) . strftime ( u'<STR_LIT>' ) . format ( y = '<STR_LIT>' , m = '<STR_LIT>' , d = '<STR_LIT>' ) <EOL> info = get_html_info ( end_date_date . date ( ) ) <EOL> channel_no = info [ '<STR_LIT>' ] . count ( ) <EOL> epg_no = info [ '<STR_LIT>' ] <EOL> ret = { '<STR_LIT>' : channel_no , <EOL> '<STR_LIT>' : crawl_days , <EOL> '<STR_LIT>' : epg_no , <EOL> '<STR_LIT>' : start_date , <EOL> '<STR_LIT>' : start_date_no , <EOL> '<STR_LIT>' : end_date , <EOL> '<STR_LIT>' : info [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : root_dir , <EOL> '<STR_LIT>' : <NUM_LIT> , } <EOL> return render ( request , "<STR_LIT>" , context = ret ) <EOL> def download ( requests , title ) : <EOL> file = open ( os . path . join ( root_dir , title ) , '<STR_LIT>' ) <EOL> response = FileResponse ( file ) <EOL> response [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> return response <EOL> def diyp ( request ) : <EOL> ret = single_channel_epg ( request ) <EOL> ret_epgs = ret [ '<STR_LIT>' ] <EOL> datas = [ ] <EOL> if len ( ret [ '<STR_LIT>' ] ) == <NUM_LIT> : <EOL> ret_epgs = noepgjson ( '<STR_LIT>' , '<STR_LIT>' , datetime . datetime . now ( ) . date ( ) ) <EOL> for epg in ret_epgs : <EOL> epg1 = { <EOL> '<STR_LIT>' : epg [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : epg [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : epg [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : epg [ '<STR_LIT>' ] , <EOL> } <EOL> datas . append ( epg1 ) <EOL> ret1 = { <EOL> "<STR_LIT>" : ret [ '<STR_LIT>' ] , <EOL> "<STR_LIT>" : ret [ '<STR_LIT>' ] . strftime ( '<STR_LIT>' ) , <EOL> "<STR_LIT>" : datas , <EOL> } <EOL> try : <EOL> j = json . dumps ( ret1 , ensure_ascii = False ) <EOL> except Exception as e : <EOL> print ( e , datas ) <EOL> j = '<STR_LIT>' <EOL> return HttpResponse ( j , content_type = '<STR_LIT>' ) <EOL> def web_single_channel_epg ( request ) : <EOL> ret = single_channel_epg ( request ) <EOL> ret_epgs = ret [ '<STR_LIT>' ] <EOL> if len ( ret_epgs ) == <NUM_LIT> : <EOL> epg = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' % ret [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> ret_epgs = [ epg ] <EOL> title = '<STR_LIT>' % ( ret [ '<STR_LIT>' ] , ret [ '<STR_LIT>' ] . strftime ( '<STR_LIT>' ) ) <EOL> tomorrow_date = ( ret [ '<STR_LIT>' ] + datetime . timedelta ( days = <NUM_LIT> ) ) . strftime ( '<STR_LIT>' ) <EOL> tomorrow_url = '<STR_LIT>' % ( ret [ '<STR_LIT>' ] , tomorrow_date ) <EOL> yesterday_date = ( ret [ '<STR_LIT>' ] - datetime . timedelta ( days = <NUM_LIT> ) ) . strftime ( '<STR_LIT>' ) <EOL> yesterday_url = '<STR_LIT>' % ( ret [ '<STR_LIT>' ] , yesterday_date ) <EOL> source = ret [ '<STR_LIT>' ] <EOL> ret = { <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : tomorrow_url , <EOL> '<STR_LIT>' : yesterday_url , <EOL> '<STR_LIT>' : ret_epgs , <EOL> '<STR_LIT>' : source , <EOL> } <EOL> return render ( request , '<STR_LIT>' , context = ret ) <EOL> def single_channel_epg ( request ) : <EOL> tvg_name = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> epgs = [ ] <EOL> need_date = datetime . datetime . now ( ) . date ( ) <EOL> msg = '<STR_LIT>' <EOL> if request . method == "<STR_LIT>" and '<STR_LIT>' in request . GET and '<STR_LIT>' in request . GET : <EOL> tvg_name = request . GET [ '<STR_LIT>' ] <EOL> if tvg_name in [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> tvg_name = tvg_name . strip ( ) + '<STR_LIT>' <EOL> date_re = re . search ( '<STR_LIT>' , request . GET [ '<STR_LIT>' ] ) <EOL> if date_re : <EOL> need_date = datetime . date ( int ( date_re . group ( <NUM_LIT> ) ) , int ( date_re . group ( <NUM_LIT> ) ) , int ( date_re . group ( <NUM_LIT> ) ) ) <EOL> channels = Channel . get_spec_channel_strict ( Channel , tvg_name ) <EOL> if channels . count ( ) == <NUM_LIT> : <EOL> msg = '<STR_LIT>' <EOL> channel_name = tvg_name <EOL> source = '<STR_LIT>' <EOL> else : <EOL> channel = channels . first ( ) <EOL> channel_name = channel . name <EOL> epgs = Epg . get_single_epg ( Epg , channel , need_date ) <EOL> source = channel . source <EOL> if len ( epgs ) > <NUM_LIT> : <EOL> success = <NUM_LIT> <EOL> else : <EOL> msg = '<STR_LIT>' <EOL> channel_name = '<STR_LIT>' <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : channel_name , <EOL> '<STR_LIT>' : tvg_name , <EOL> '<STR_LIT>' : need_date , <EOL> '<STR_LIT>' : source , <EOL> } <EOL> return ret <EOL> </s>
<s> from django . contrib import admin <EOL> from . models import Channel , Epg , Crawl_log , Channel_list <EOL> admin . site . site_header = '<STR_LIT>' <EOL> admin . site . site_title = "<STR_LIT>" <EOL> admin . site . index_title = "<STR_LIT>" <EOL> class ChannelAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_per_page = <NUM_LIT> <EOL> ordering = ( '<STR_LIT>' , ) <EOL> list_display_links = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_filter = ( '<STR_LIT>' , ) <EOL> search_fields = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> admin . site . register ( Channel , ChannelAdmin ) <EOL> class EpgAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> date_hierarchy = '<STR_LIT>' <EOL> search_fields = ( '<STR_LIT>' , ) <EOL> admin . site . register ( Epg , EpgAdmin ) <EOL> class Crawl_logAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> admin . site . register ( Crawl_log , Crawl_logAdmin ) <EOL> class Channel_listAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> list_filter = ( '<STR_LIT>' , ) <EOL> list_display_links = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> admin . site . register ( Channel_list , Channel_listAdmin ) <EOL> </s>
<s> import requests , datetime , os , re , time , json <EOL> from utils . general import headers <EOL> def get_epgs_sdtv ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> t = time . time ( ) <EOL> try : <EOL> url = '<STR_LIT>' % ( <EOL> t , channel_id , dt , t ) <EOL> res = requests . get ( url , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> re_j = re . search ( '<STR_LIT>' , res . text , re . DOTALL ) . group ( <NUM_LIT> ) <EOL> re_json = json . loads ( re_j ) <EOL> contents = re_json [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> time_delta_days = ( dt - datetime . datetime . now ( ) . date ( ) ) . days <EOL> for content in contents : <EOL> starttime = datetime . datetime . fromtimestamp ( int ( content [ '<STR_LIT>' ] ) ) + datetime . timedelta ( days = time_delta_days ) <EOL> endtime = datetime . datetime . fromtimestamp ( int ( content [ '<STR_LIT>' ] ) ) + datetime . timedelta ( days = time_delta_days ) <EOL> title = content [ '<STR_LIT>' ] <EOL> epg = { '<STR_LIT>' : channel_id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : endtime , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_sdtv ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url ) <EOL> res . encoding = '<STR_LIT>' <EOL> re_l = re . search ( '<STR_LIT>' , res . text , re . DOTALL ) . group ( <NUM_LIT> ) <EOL> contents = re . findall ( <EOL> '<STR_LIT>' , re_l , <EOL> re . DOTALL ) <EOL> channels = [ ] <EOL> for content in contents : <EOL> id = content [ <NUM_LIT> ] <EOL> name = content [ <NUM_LIT> ] <EOL> curl = '<STR_LIT>' % content [ <NUM_LIT> ] <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : curl , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' if name != '<STR_LIT>' else '<STR_LIT>' <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> import requests , re , datetime , json , os <EOL> from utils . general import headers <EOL> requests . packages . urllib3 . util . ssl_ . DEFAULT_CIPHERS += '<STR_LIT>' <EOL> headers = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> def get_epgs_nowtv ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> url = '<STR_LIT>' % ( dt . strftime ( "<STR_LIT>" ) , channel_id [ : <NUM_LIT> ] ) <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> j = res . json ( ) <EOL> chs = j [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> for ch in chs : <EOL> if "<STR_LIT>" == ch or ch != channel_id [ <NUM_LIT> : ] : <EOL> continue <EOL> nowtvid = '<STR_LIT>' % ( channel_id [ : <NUM_LIT> ] , ch . strip ( ) ) <EOL> for channelepg in chs [ ch ] : <EOL> starttime = datetime . datetime . fromtimestamp ( channelepg [ '<STR_LIT>' ] / <NUM_LIT> ) <EOL> endtime = datetime . datetime . fromtimestamp ( channelepg [ '<STR_LIT>' ] / <NUM_LIT> ) <EOL> title = channelepg [ '<STR_LIT>' ] <EOL> desc = channelepg [ '<STR_LIT>' ] <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : endtime , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : starttime . date ( ) , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_nowtv ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> reinfo = re . search ( '<STR_LIT>' , res . text , re . DOTALL ) <EOL> cs = reinfo . group ( <NUM_LIT> ) [ : - <NUM_LIT> ] <EOL> cs = json . loads ( cs ) <EOL> channels = [ ] <EOL> for c in cs : <EOL> if '<STR_LIT>' not in cs [ c ] : <EOL> continue <EOL> id1 = cs [ c ] [ '<STR_LIT>' ] [ <NUM_LIT> ] <EOL> id2 = c <EOL> channel_id = '<STR_LIT>' % ( id1 , id2 ) <EOL> print ( cs [ c ] ) <EOL> name = cs [ c ] [ '<STR_LIT>' ] <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ channel_id ] , <EOL> '<STR_LIT>' : url , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> import requests , datetime , time , re , os <EOL> from utils . general import headers <EOL> from bs4 import BeautifulSoup as bs <EOL> def get_epgs_tbc ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> channel_id = channel_id . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> url = '<STR_LIT>' % channel_id <EOL> try : <EOL> res = requests . get ( url , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> uls = soup . select ( '<STR_LIT>' ) <EOL> for ul in uls : <EOL> n1 = <NUM_LIT> <EOL> lis = ul . select ( '<STR_LIT>' ) <EOL> for li in lis : <EOL> title = li . p . text <EOL> desc = li . attrs [ '<STR_LIT>' ] <EOL> date_ = li . attrs [ '<STR_LIT>' ] <EOL> time_delay = li . attrs [ '<STR_LIT>' ] . strip ( ) <EOL> time_delay_re = re . search ( '<STR_LIT>' , time_delay ) <EOL> if time_delay_re : <EOL> start_str , end_str = time_delay_re . group ( <NUM_LIT> ) , time_delay_re . group ( <NUM_LIT> ) <EOL> starttime = datetime . datetime . strptime ( date_ + start_str , '<STR_LIT>' ) <EOL> endtime = datetime . datetime . strptime ( date_ + end_str , '<STR_LIT>' ) <EOL> if starttime > endtime : <EOL> endtime = endtime + datetime . timedelta ( days = <NUM_LIT> ) <EOL> if starttime . date ( ) < dt : <EOL> continue <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : endtime , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : desc , <EOL> '<STR_LIT>' : starttime . date ( ) , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : starttime . date ( ) if '<STR_LIT>' in dir ( ) else dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> today_int = int ( time . strftime ( '<STR_LIT>' , time . localtime ( ) ) ) <EOL> def get_channels_tbc ( ) : <EOL> channels = [ ] <EOL> cookies = { <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers , cookies = cookies , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> lis = soup . select ( '<STR_LIT>' ) <EOL> for li in lis : <EOL> name = li [ '<STR_LIT>' ] <EOL> id = li [ '<STR_LIT>' ] <EOL> img = li . select ( '<STR_LIT>' ) [ <NUM_LIT> ] [ '<STR_LIT>' ] <EOL> url = li . a [ '<STR_LIT>' ] <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : url , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : img , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> import requests , os , datetime <EOL> from utils . general import cht_to_chs , headers <EOL> def get_epgs_icable ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> url = '<STR_LIT>' % ( channel_id , dt . strftime ( '<STR_LIT>' ) ) <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> js = res . json ( ) <EOL> epg_list = js [ '<STR_LIT>' ] <EOL> for g in epg_list : <EOL> title = cht_to_chs ( g [ '<STR_LIT>' ] ) <EOL> ampm = g [ '<STR_LIT>' ] <EOL> t = g [ '<STR_LIT>' ] <EOL> starttime = datetime . datetime . strptime ( dt . strftime ( '<STR_LIT>' ) + t , '<STR_LIT>' ) <EOL> if ampm . upper ( ) == '<STR_LIT>' : <EOL> starttime = starttime + datetime . timedelta ( hours = <NUM_LIT> ) <EOL> elif ampm . upper ( ) == '<STR_LIT>' : <EOL> starttime = starttime + datetime . timedelta ( days = <NUM_LIT> ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : starttime . date ( ) , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_icable ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url ) <EOL> res_json = res . json ( ) <EOL> channels_json = res_json [ '<STR_LIT>' ] <EOL> channels = [ ] <EOL> for c in channels_json : <EOL> name = c [ '<STR_LIT>' ] <EOL> id = c [ '<STR_LIT>' ] <EOL> url = '<STR_LIT>' % c [ '<STR_LIT>' ] <EOL> logo = '<STR_LIT>' % c [ '<STR_LIT>' ] <EOL> name_eng = c [ '<STR_LIT>' ] <EOL> catelog = c [ '<STR_LIT>' ] <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : url , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : logo , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : name_eng , <EOL> '<STR_LIT>' : catelog , <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == '<STR_LIT>' : <EOL> main ( ) <EOL> </s>
<s> from pathlib import Path <EOL> import os <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent <EOL> SECRET_KEY = '<STR_LIT>' <EOL> DEBUG = True <EOL> ALLOWED_HOSTS = [ '<STR_LIT>' ] <EOL> INSTALLED_APPS = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> MIDDLEWARE = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> ROOT_URLCONF = '<STR_LIT>' <EOL> TEMPLATES = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ ] , <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = '<STR_LIT>' <EOL> DATABASES = { <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : BASE_DIR / '<STR_LIT>' , <EOL> } , <EOL> } <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> ] <EOL> LANGUAGE_CODE = '<STR_LIT>' <EOL> TIME_ZONE = '<STR_LIT>' <EOL> USE_I18N = True <EOL> USE_L10N = True <EOL> USE_TZ = True <EOL> STATIC_URL = '<STR_LIT>' <EOL> STATICFILES_DIRS = [ os . path . join ( BASE_DIR , '<STR_LIT>' ) ] <EOL> DEFAULT_AUTO_FIELD = '<STR_LIT>' <EOL> </s>
<s> import requests , datetime , os <EOL> from bs4 import BeautifulSoup as bs <EOL> from utils . general import headers <EOL> def get_epgs_gdtv ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> try : <EOL> url = '<STR_LIT>' % ( channel_id , dt . strftime ( '<STR_LIT>' ) ) <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> epgs_contents = soup . select ( '<STR_LIT>' ) <EOL> epgs = [ ] <EOL> for epga in epgs_contents : <EOL> starttime = datetime . datetime . fromtimestamp ( int ( epga . attrs [ '<STR_LIT>' ] ) ) <EOL> endtime = datetime . datetime . fromtimestamp ( int ( epga . attrs [ '<STR_LIT>' ] ) ) <EOL> title = epga . get_text ( ) . strip ( ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : endtime , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_gdtv ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> contents = soup . select ( '<STR_LIT>' ) <EOL> channels = [ ] <EOL> for content in contents : <EOL> id = content . attrs [ '<STR_LIT>' ] <EOL> name = content . ctitle . text <EOL> cdate = content . cdate . text <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : cdate <EOL> } <EOL> channels . append ( channel ) <EOL> return channels <EOL> </s>
<s> from django . urls import path <EOL> from . import views <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , views . diyp ) , <EOL> path ( '<STR_LIT>' , views . web_single_channel_epg ) , <EOL> path ( '<STR_LIT>' , views . d ) , <EOL> ] <EOL> </s>
<s> from crawl . spiders . cctv import get_epgs_cctv , get_channels_cctv <EOL> from crawl . spiders . tbc import get_epgs_tbc , get_channels_tbc <EOL> from crawl . spiders . tvmao import get_epgs_tvmao2 , get_channels_tvmao <EOL> from crawl . spiders . zhongshu import get_epgs_zhongshu , get_channels_zhongshu <EOL> from crawl . spiders . cabletv import get_epgs_cabletv , get_channels_cabletv <EOL> from crawl . spiders . g4tv import get_epgs_4gtv , get_channels_4gtv <EOL> from crawl . spiders . mod import get_epgs_mod , get_channels_mod <EOL> from crawl . spiders . tvb import get_epgs_tvb , get_channels_tvb <EOL> from crawl . spiders . nowtv import get_epgs_nowtv , get_channels_nowtv <EOL> from crawl . spiders . gdtv import get_epgs_gdtv , get_channels_gdtv <EOL> from crawl . spiders . icable import get_epgs_icable , get_channels_icable <EOL> from crawl . spiders . btv import get_epgs_btv , get_channels_btv <EOL> from crawl . spiders . tvsou import get_epgs_tvsou , get_channels_tvsou <EOL> from crawl . spiders . hks import get_epgs_hks , get_channels_hks <EOL> from crawl . spiders . viu import get_epgs_viu , get_channels_viu <EOL> from crawl . spiders . chuanliu import get_channels_chuanliu , get_epgs_chuanliu <EOL> from crawl . spiders . mytvsuper import get_epgs_mytvsuper , get_channels_mytvsuper <EOL> from crawl . spiders . gxntv import get_epgs_gxntv , get_channels_gxntv <EOL> from utils . general import chuanliu_Authorization <EOL> from crawl . spiders . sdtv import get_epgs_sdtv , get_channels_sdtv <EOL> epg_funcs = { <EOL> '<STR_LIT>' : get_epgs_tvmao2 , <EOL> '<STR_LIT>' : get_epgs_tbc , <EOL> '<STR_LIT>' : get_epgs_cctv , <EOL> '<STR_LIT>' : get_epgs_zhongshu , <EOL> '<STR_LIT>' : get_epgs_cabletv , <EOL> '<STR_LIT>' : get_epgs_tvsou , <EOL> '<STR_LIT>' : get_epgs_4gtv , <EOL> '<STR_LIT>' : get_epgs_mod , <EOL> '<STR_LIT>' : get_epgs_tvb , <EOL> '<STR_LIT>' : get_epgs_nowtv , <EOL> '<STR_LIT>' : get_epgs_icable , <EOL> '<STR_LIT>' : get_epgs_gdtv , <EOL> '<STR_LIT>' : get_epgs_btv , <EOL> '<STR_LIT>' : get_epgs_hks , <EOL> '<STR_LIT>' : get_epgs_viu , <EOL> '<STR_LIT>' : get_epgs_chuanliu , <EOL> '<STR_LIT>' : get_epgs_mytvsuper , <EOL> '<STR_LIT>' : get_epgs_gxntv , <EOL> '<STR_LIT>' : get_epgs_sdtv , <EOL> } <EOL> epg_source = { <EOL> '<STR_LIT>' : get_channels_tvmao , <EOL> '<STR_LIT>' : get_channels_tbc , <EOL> '<STR_LIT>' : get_channels_cctv , <EOL> '<STR_LIT>' : get_channels_zhongshu , <EOL> '<STR_LIT>' : get_channels_cabletv , <EOL> '<STR_LIT>' : get_channels_tvsou , <EOL> '<STR_LIT>' : get_channels_4gtv , <EOL> '<STR_LIT>' : get_channels_mod , <EOL> '<STR_LIT>' : get_channels_tvb , <EOL> '<STR_LIT>' : get_channels_nowtv , <EOL> '<STR_LIT>' : get_channels_icable , <EOL> '<STR_LIT>' : get_channels_gdtv , <EOL> '<STR_LIT>' : get_channels_btv , <EOL> '<STR_LIT>' : get_channels_hks , <EOL> '<STR_LIT>' : get_channels_viu , <EOL> '<STR_LIT>' : get_channels_chuanliu , <EOL> '<STR_LIT>' : get_channels_mytvsuper , <EOL> '<STR_LIT>' : get_channels_gxntv , <EOL> '<STR_LIT>' : get_channels_sdtv , <EOL> } <EOL> func_args = { <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : chuanliu_Authorization , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> def epg_func ( channel , id , dt , func_arg = <NUM_LIT> , source = <NUM_LIT> ) : <EOL> if source : <EOL> source1 = source <EOL> else : <EOL> source1 = channel . source <EOL> func_arg = func_args [ source1 ] <EOL> return epg_funcs [ source1 ] ( channel , id , dt , func_arg ) <EOL> __all__ = [ '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> </s>
<s> import requests , re , datetime <EOL> from utils . general import headers <EOL> from bs4 import BeautifulSoup as bs <EOL> def get_epgs_zhongshu ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> host = '<STR_LIT>' <EOL> w = <NUM_LIT> <EOL> if dt . weekday ( ) < datetime . datetime . now ( ) . weekday ( ) : <EOL> w = <NUM_LIT> <EOL> url = '<STR_LIT>' % ( host , channel_id , w ) <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> rs = re . findall ( '<STR_LIT>' , res . text ) <EOL> except Exception as e : <EOL> msg = '<STR_LIT>' % e <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> for r in rs : <EOL> try : <EOL> starttime = datetime . datetime . strptime ( '<STR_LIT>' % ( dt . year , int ( r [ <NUM_LIT> ] ) , int ( r [ <NUM_LIT> ] ) , r [ <NUM_LIT> ] ) , '<STR_LIT>' ) <EOL> title = r [ <NUM_LIT> ] <EOL> if starttime . date ( ) < dt : <EOL> continue <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : starttime . date ( ) , <EOL> } <EOL> except Exception as e : <EOL> msg = '<STR_LIT>' % e <EOL> starttime = datetime . datetime . combine ( dt , datetime . time ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) ) <EOL> continue <EOL> epgs . append ( epg ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : starttime . date ( ) , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_zhongshu ( ) : <EOL> channels = [ ] <EOL> host = '<STR_LIT>' <EOL> res = requests . get ( host , headers = headers ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> uls = soup . select ( '<STR_LIT>' ) <EOL> sorts = [ ] <EOL> spans = soup . select ( '<STR_LIT>' ) <EOL> sort_name_change = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> for span in spans : <EOL> sort = span . text . strip ( ) <EOL> sorts . append ( sort ) <EOL> uls = soup . select ( '<STR_LIT>' ) <EOL> x = <NUM_LIT> <EOL> for ul in uls : <EOL> lis = ul . select ( '<STR_LIT>' ) <EOL> for li in lis : <EOL> name = li . a . text . strip ( ) <EOL> id = li . a [ '<STR_LIT>' ] . strip ( ) <EOL> url = '<STR_LIT>' % ( host , id ) <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : url , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : sort_name_change [ sorts [ x ] ] , <EOL> } <EOL> channels . append ( channel ) <EOL> x += <NUM_LIT> <EOL> return channels <EOL> </s>
<s> import requests , re , datetime , os <EOL> from utils . general import headers <EOL> from bs4 import BeautifulSoup as bs <EOL> def get_epgs_mod ( channel , channel_id , dt , func_arg ) : <EOL> epgs = [ ] <EOL> msg = '<STR_LIT>' <EOL> success = <NUM_LIT> <EOL> days = ( dt - datetime . datetime . now ( ) . date ( ) ) . days <EOL> url = '<STR_LIT>' % ( <EOL> channel_id , days ) <EOL> try : <EOL> res = requests . get ( url , headers = headers , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> old_dt = datetime . datetime ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> lis = soup . select ( '<STR_LIT>' ) <EOL> for li in lis [ <NUM_LIT> : ] : <EOL> title = li . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) . strip ( ) <EOL> timestr = li . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text . strip ( ) <EOL> starttime = datetime . datetime ( dt . year , dt . month , dt . day , int ( timestr [ : <NUM_LIT> ] ) , int ( timestr [ - <NUM_LIT> : ] ) ) <EOL> if starttime < old_dt : <EOL> epgs . pop ( <NUM_LIT> ) <EOL> old_dt = datetime . datetime ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> epg = { '<STR_LIT>' : channel . id , <EOL> '<STR_LIT>' : starttime , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : title , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : dt , <EOL> } <EOL> epgs . append ( epg ) <EOL> except Exception as e : <EOL> success = <NUM_LIT> <EOL> spidername = os . path . basename ( __file__ ) . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> msg = '<STR_LIT>' % ( spidername , e ) <EOL> ret = { <EOL> '<STR_LIT>' : success , <EOL> '<STR_LIT>' : epgs , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : dt , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } <EOL> return ret <EOL> def get_channels_mod ( ) : <EOL> url = '<STR_LIT>' <EOL> res = requests . get ( url , timeout = <NUM_LIT> ) <EOL> res . encoding = '<STR_LIT>' <EOL> soup = bs ( res . text , '<STR_LIT>' ) <EOL> divs = soup . select ( '<STR_LIT>' ) <EOL> divs2 = soup . select ( '<STR_LIT>' ) <EOL> divs += divs2 <EOL> channels = [ ] <EOL> for div in divs : <EOL> try : <EOL> urlid = div . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . attrs [ '<STR_LIT>' ] <EOL> name = div . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . text <EOL> id = name [ : <NUM_LIT> ] . strip ( ) <EOL> img = '<STR_LIT>' + re . sub ( '<STR_LIT>' , '<STR_LIT>' , div . select ( '<STR_LIT>' ) [ <NUM_LIT> ] . attrs [ '<STR_LIT>' ] ) . strip ( ) <EOL> channel = { <EOL> '<STR_LIT>' : name , <EOL> '<STR_LIT>' : [ id ] , <EOL> '<STR_LIT>' : '<STR_LIT>' % ( '<STR_LIT>' , urlid ) , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : img , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } <EOL> channels . append ( channel ) <EOL> except Exception as e : <EOL> print ( div ) <EOL> return channels <EOL> </s>
<s> from . celery_app import app <EOL> </s>
<s> from datetime import timedelta <EOL> from django . apps import apps <EOL> from django . conf import settings <EOL> from django . db import models <EOL> from django . db . models . signals import ModelSignal , post_delete , post_save <EOL> from django . forms import model_to_dict <EOL> from django_webhook . models import Webhook <EOL> from . tasks import fire_webhook <EOL> from . util import cache <EOL> CREATE = "<STR_LIT>" <EOL> UPDATE = "<STR_LIT>" <EOL> DELETE = "<STR_LIT>" <EOL> class SignalListener : <EOL> def __init__ ( self , signal : ModelSignal , signal_name : str , model_cls : models . Model ) : <EOL> valid_signals = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> if signal_name not in valid_signals : <EOL> raise ValueError ( f"<STR_LIT>" ) <EOL> self . signal = signal <EOL> self . signal_name = signal_name <EOL> self . model_cls = model_cls <EOL> def run ( self , sender , created = False , instance = None , ** kwargs ) : <EOL> action_type = None <EOL> match self . signal_name : <EOL> case "<STR_LIT>" if created : <EOL> action_type = CREATE <EOL> case "<STR_LIT>" : <EOL> action_type = UPDATE <EOL> case "<STR_LIT>" : <EOL> action_type = DELETE <EOL> topic = f"<STR_LIT>" <EOL> webhook_ids = _find_webhooks ( topic ) <EOL> for id , uuid in webhook_ids : <EOL> payload = dict ( <EOL> topic = topic , <EOL> object = model_dict ( instance ) , <EOL> object_type = self . model_label , <EOL> webhook_uuid = str ( uuid ) , <EOL> ) <EOL> fire_webhook . delay ( id , payload ) <EOL> def connect ( self ) : <EOL> self . signal . connect ( <EOL> self . run , sender = self . model_cls , weak = False , dispatch_uid = self . uid <EOL> ) <EOL> @ property <EOL> def uid ( self ) : <EOL> return f"<STR_LIT>" <EOL> @ property <EOL> def model_label ( self ) : <EOL> return self . model_cls . _meta . label <EOL> def connect_signals ( ) : <EOL> for cls in _active_models ( ) : <EOL> post_save_listener = SignalListener ( <EOL> signal = post_save , signal_name = "<STR_LIT>" , model_cls = cls <EOL> ) <EOL> post_delete_listener = SignalListener ( <EOL> signal = post_delete , signal_name = "<STR_LIT>" , model_cls = cls <EOL> ) <EOL> post_save_listener . connect ( ) <EOL> post_delete_listener . connect ( ) <EOL> def model_dict ( model ) : <EOL> fields = { <EOL> field . name : field . value_from_object ( model ) for field in model . _meta . fields <EOL> } <EOL> return model_to_dict ( model , fields = fields ) <EOL> def _active_models ( ) : <EOL> model_names = settings . DJANGO_WEBHOOK . get ( "<STR_LIT>" , [ ] ) <EOL> model_classes = [ ] <EOL> for name in model_names : <EOL> parts = name . split ( "<STR_LIT>" ) <EOL> if len ( parts ) != <NUM_LIT> : <EOL> continue <EOL> app_label , model_label = parts <EOL> try : <EOL> model_class = apps . get_model ( app_label , model_label ) <EOL> except LookupError : <EOL> continue <EOL> model_classes . append ( model_class ) <EOL> return model_classes <EOL> def _find_webhooks ( topic : str ) : <EOL> if settings . DJANGO_WEBHOOK [ "<STR_LIT>" ] : <EOL> return _query_webhooks_cached ( topic ) <EOL> return _query_webhooks ( topic ) <EOL> @ cache ( ttl = timedelta ( minutes = <NUM_LIT> ) ) <EOL> def _query_webhooks_cached ( topic : str ) : <EOL> return _query_webhooks ( topic ) <EOL> def _query_webhooks ( topic : str ) : <EOL> return Webhook . objects . filter ( active = True , topics__name = topic ) . values_list ( <EOL> "<STR_LIT>" , "<STR_LIT>" <EOL> ) <EOL> </s>
<s> from . base import * <EOL> DATABASES = { "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } } <EOL> CELERY_TASK_ALWAYS_EAGER = True <EOL> CELERY_TASK_EAGER_PROPAGATES = True <EOL> CELERY_TASK_STORE_EAGER_RESULT = True <EOL> </s>
<s> from django . core . management . base import BaseCommand <EOL> from django_webhook . models import Webhook , WebhookSecret , WebhookTopic <EOL> class Command ( BaseCommand ) : <EOL> help = "<STR_LIT>" <EOL> def handle ( self , * args , ** options ) : <EOL> wh , _ = Webhook . objects . update_or_create ( <EOL> url = "<STR_LIT>" <EOL> ) <EOL> wh . topics . set ( <EOL> [ <EOL> WebhookTopic . objects . get ( name = "<STR_LIT>" ) , <EOL> WebhookTopic . objects . get ( name = "<STR_LIT>" ) , <EOL> ] <EOL> ) <EOL> WebhookSecret . objects . update_or_create ( webhook = wh , token = "<STR_LIT>" ) <EOL> wh , _ = Webhook . objects . update_or_create ( <EOL> url = "<STR_LIT>" <EOL> ) <EOL> wh . topics . set ( <EOL> [ <EOL> WebhookTopic . objects . get ( name = "<STR_LIT>" ) , <EOL> WebhookTopic . objects . get ( name = "<STR_LIT>" ) , <EOL> ] <EOL> ) <EOL> WebhookSecret . objects . update_or_create ( webhook = wh , token = "<STR_LIT>" ) <EOL> </s>
<s> from __future__ import absolute_import , unicode_literals <EOL> import os <EOL> import sys <EOL> if __name__ == "<STR_LIT>" : <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> from django . core . management import execute_from_command_line <EOL> execute_from_command_line ( sys . argv ) <EOL> </s>
<s> import logging <EOL> import uuid <EOL> from celery import states <EOL> from django . conf import settings <EOL> from django . core import validators <EOL> from django . core . serializers . json import DjangoJSONEncoder <EOL> from django . db import models <EOL> from django . db . models . fields import DateTimeField <EOL> from . validators import validate_topic_model <EOL> topic_regex = r"<STR_LIT>" <EOL> STATES = [ <EOL> ( states . PENDING , states . PENDING ) , <EOL> ( states . FAILURE , states . FAILURE ) , <EOL> ( states . SUCCESS , states . SUCCESS ) , <EOL> ] <EOL> class Webhook ( models . Model ) : <EOL> url = models . URLField ( ) <EOL> topics = models . ManyToManyField ( <EOL> "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> ) <EOL> active = models . BooleanField ( default = True ) <EOL> uuid = models . UUIDField ( default = uuid . uuid4 , editable = False ) <EOL> created = DateTimeField ( auto_now_add = True ) <EOL> modified = DateTimeField ( auto_now = True ) <EOL> def __str__ ( self ) : <EOL> return f"<STR_LIT>" <EOL> class WebhookTopic ( models . Model ) : <EOL> name = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> validators = [ <EOL> validators . RegexValidator ( <EOL> topic_regex , message = "<STR_LIT>" + topic_regex <EOL> ) , <EOL> validate_topic_model , <EOL> ] , <EOL> ) <EOL> def __str__ ( self ) : <EOL> return self . name <EOL> class WebhookSecret ( models . Model ) : <EOL> webhook = models . ForeignKey ( <EOL> Webhook , <EOL> on_delete = models . CASCADE , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> editable = False , <EOL> ) <EOL> token = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> validators = [ validators . MinLengthValidator ( <NUM_LIT> ) ] , <EOL> ) <EOL> created = DateTimeField ( auto_now_add = True ) <EOL> class WebhookEvent ( models . Model ) : <EOL> webhook = models . ForeignKey ( <EOL> Webhook , <EOL> on_delete = models . SET_NULL , <EOL> null = True , <EOL> editable = False , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> ) <EOL> object = models . JSONField ( <EOL> max_length = <NUM_LIT> , <EOL> encoder = DjangoJSONEncoder , <EOL> editable = False , <EOL> ) <EOL> object_type = models . CharField ( max_length = <NUM_LIT> , null = True , editable = False ) <EOL> status = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> default = states . PENDING , <EOL> choices = STATES , <EOL> editable = False , <EOL> ) <EOL> created = DateTimeField ( auto_now_add = True ) <EOL> url = models . URLField ( editable = False ) <EOL> topic = models . CharField ( max_length = <NUM_LIT> , null = True , editable = False ) <EOL> def populate_topics_from_settings ( ) : <EOL> from django . db . utils import OperationalError , ProgrammingError <EOL> from django_webhook . signals import CREATE , DELETE , UPDATE <EOL> try : <EOL> Webhook . objects . count ( ) <EOL> except ( OperationalError , ProgrammingError ) as ex : <EOL> if "<STR_LIT>" in ex . args [ <NUM_LIT> ] : <EOL> return <EOL> if "<STR_LIT>" in ex . args [ <NUM_LIT> ] : <EOL> return <EOL> if "<STR_LIT>" in ex . args [ <NUM_LIT> ] : <EOL> return <EOL> if "<STR_LIT>" in ex . args [ <NUM_LIT> ] and "<STR_LIT>" in ex . args [ <NUM_LIT> ] : <EOL> return <EOL> raise ex <EOL> webhook_settings = getattr ( settings , "<STR_LIT>" , { } ) <EOL> enabled_models = webhook_settings . get ( "<STR_LIT>" ) <EOL> if not enabled_models : <EOL> return <EOL> allowed_topics = set ( ) <EOL> for model in enabled_models : <EOL> model_allowed_topics = { <EOL> f"<STR_LIT>" , <EOL> f"<STR_LIT>" , <EOL> f"<STR_LIT>" , <EOL> } <EOL> allowed_topics . update ( model_allowed_topics ) <EOL> WebhookTopic . objects . exclude ( name__in = allowed_topics ) . delete ( ) <EOL> logging . info ( f"<STR_LIT>" ) <EOL> for topic in allowed_topics : <EOL> if not WebhookTopic . objects . filter ( name = topic ) . exists ( ) : <EOL> WebhookTopic . objects . create ( name = topic ) <EOL> logging . info ( f"<STR_LIT>" ) <EOL> </s>
<s> from django . core . serializers . json import DjangoJSONEncoder <EOL> defaults = dict ( <EOL> PAYLOAD_ENCODER_CLASS = DjangoJSONEncoder , <EOL> STORE_EVENTS = True , <EOL> EVENTS_RETENTION_DAYS = <NUM_LIT> , <EOL> USE_CACHE = True , <EOL> ) <EOL> </s>
<s> from pathlib import Path <EOL> DEBUG = True <EOL> USE_TZ = True <EOL> SECRET_KEY = "<STR_LIT>" <EOL> DATABASES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : True , <EOL> } <EOL> } <EOL> ROOT_URLCONF = "<STR_LIT>" <EOL> DJANGO_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> THIRD_PARTY_APPS = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> LOCAL_APPS = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS <EOL> MIDDLEWARE = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> TEMPLATES = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ ] , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> } , <EOL> } <EOL> ] <EOL> SITE_ID = <NUM_LIT> <EOL> STATIC_URL = "<STR_LIT>" <EOL> MEDIA_URL = "<STR_LIT>" <EOL> MEDIA_ROOT = Path ( __file__ ) . parent / "<STR_LIT>" <EOL> DEFAULT_AUTO_FIELD = "<STR_LIT>" <EOL> CELERY_BROKER_URL = "<STR_LIT>" <EOL> DJANGO_WEBHOOK = dict ( MODELS = [ "<STR_LIT>" , "<STR_LIT>" ] ) <EOL> </s>
<s> from datetime import date , datetime <EOL> TEST_JOIN_DATE = date ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> TEST_LAST_ACTIVE = datetime ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> TEST_USER = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> </s>
<s> from django . conf import settings <EOL> from django . core . exceptions import ValidationError <EOL> def validate_topic_model ( value ) : <EOL> webhook_settings = getattr ( settings , "<STR_LIT>" , { } ) <EOL> allowed_models = webhook_settings . get ( "<STR_LIT>" , [ ] ) <EOL> if not webhook_settings or not allowed_models : <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> parts = value . split ( "<STR_LIT>" ) <EOL> if len ( parts ) != <NUM_LIT> : <EOL> raise ValidationError ( f"<STR_LIT>" ) <EOL> [ model_name , _ ] = value . split ( "<STR_LIT>" ) <EOL> if model_name not in allowed_models : <EOL> raise ValidationError ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> </s>
<s> import uuid <EOL> import django . core . validators <EOL> import django . db . models . deletion <EOL> import django . utils . timezone <EOL> import model_utils . fields <EOL> from django . db import migrations , models <EOL> import django_webhook . validators <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> model_utils . fields . AutoCreatedField ( <EOL> default = django . utils . timezone . now , <EOL> editable = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> model_utils . fields . AutoLastModifiedField ( <EOL> default = django . utils . timezone . now , <EOL> editable = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . URLField ( ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = True ) ) , <EOL> ( "<STR_LIT>" , models . UUIDField ( default = uuid . uuid4 , editable = False ) ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> validators = [ <EOL> django . core . validators . RegexValidator ( <EOL> "<STR_LIT>" , <EOL> message = "<STR_LIT>" , <EOL> ) , <EOL> django_webhook . validators . validate_topic_model , <EOL> ] , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> validators = [ django . core . validators . MinLengthValidator ( <NUM_LIT> ) ] , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> model_utils . fields . AutoCreatedField ( <EOL> default = django . utils . timezone . now , editable = False <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> editable = False , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . ManyToManyField ( <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib import admin <EOL> from django . contrib . admin import TabularInline <EOL> from django_webhook . models import Webhook , WebhookEvent , WebhookSecret <EOL> from . forms import WebhookForm <EOL> class WebhookSecretInline ( TabularInline ) : <EOL> model = WebhookSecret <EOL> fields = ( "<STR_LIT>" , ) <EOL> extra = <NUM_LIT> <EOL> @ admin . register ( Webhook ) <EOL> class WebhookAdmin ( admin . ModelAdmin ) : <EOL> form = WebhookForm <EOL> list_display = ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) <EOL> list_filter = ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> search_fields = ( "<STR_LIT>" , ) <EOL> filter_horizontal = ( "<STR_LIT>" , ) <EOL> inlines = [ WebhookSecretInline ] <EOL> @ admin . register ( WebhookEvent ) <EOL> class WebhookEventAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> list_filter = ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> search_fields = ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> readonly_fields = ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) <EOL> def has_add_permission ( self , request ) : <EOL> return False <EOL> def has_change_permission ( self , request , obj = None ) : <EOL> return False <EOL> </s>
<s> from django . contrib import admin <EOL> from django . urls import path <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , admin . site . urls ) , <EOL> ] <EOL> </s>
<s> import hashlib <EOL> import hmac <EOL> import json <EOL> from datetime import datetime <EOL> from json import JSONEncoder <EOL> from typing import cast <EOL> from django . conf import settings <EOL> from django . utils import timezone <EOL> from requests import Request <EOL> from django_webhook . models import Webhook <EOL> def prepare_request ( webhook : Webhook , payload : dict ) : <EOL> now = timezone . now ( ) <EOL> timestamp = int ( datetime . timestamp ( now ) ) <EOL> encoder_cls = cast ( <EOL> type [ JSONEncoder ] , settings . DJANGO_WEBHOOK [ "<STR_LIT>" ] <EOL> ) <EOL> signatures = [ <EOL> sign_payload ( payload , secret , timestamp , encoder_cls ) <EOL> for secret in webhook . secrets . values_list ( "<STR_LIT>" , flat = True ) <EOL> ] <EOL> headers = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : str ( timestamp ) , <EOL> "<STR_LIT>" : "<STR_LIT>" . join ( signatures ) , <EOL> "<STR_LIT>" : str ( webhook . uuid ) , <EOL> } <EOL> r = Request ( <EOL> method = "<STR_LIT>" , <EOL> url = webhook . url , <EOL> headers = headers , <EOL> data = json . dumps ( payload , cls = encoder_cls ) . encode ( ) , <EOL> ) <EOL> return r . prepare ( ) <EOL> def sign_payload ( <EOL> payload : dict , secret : str , timestamp : int , encoder_cls : type [ JSONEncoder ] <EOL> ) : <EOL> combined_payload = f"<STR_LIT>" <EOL> return hmac . new ( <EOL> key = secret . encode ( ) , msg = combined_payload . encode ( ) , digestmod = hashlib . sha256 <EOL> ) . hexdigest ( ) <EOL> </s>
<s> from django import forms <EOL> from django_webhook . models import Webhook <EOL> class WebhookForm ( forms . ModelForm ) : <EOL> class Meta : <EOL> model = Webhook <EOL> fields = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> from django . db import models <EOL> class User ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> ) <EOL> email = models . EmailField ( ) <EOL> join_date = models . DateField ( ) <EOL> last_active = models . DateTimeField ( ) <EOL> class Country ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> ) <EOL> </s>
<s> project = "<STR_LIT>" <EOL> copyright = "<STR_LIT>" <EOL> author = "<STR_LIT>" <EOL> release = "<STR_LIT>" <EOL> version = "<STR_LIT>" <EOL> extensions = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> intersphinx_mapping = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , None ) , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , None ) , <EOL> } <EOL> intersphinx_disabled_domains = [ "<STR_LIT>" ] <EOL> templates_path = [ "<STR_LIT>" ] <EOL> html_theme = "<STR_LIT>" <EOL> epub_show_urls = "<STR_LIT>" <EOL> </s>
<s> import logging <EOL> from datetime import timedelta <EOL> from celery import current_app as app <EOL> from celery import states <EOL> from django . conf import settings <EOL> from django . utils import timezone <EOL> from requests import Session <EOL> from requests . exceptions import RequestException <EOL> from django_webhook . models import Webhook , WebhookEvent <EOL> from . http import prepare_request <EOL> @ app . task ( <EOL> bind = True , <EOL> max_retries = <NUM_LIT> , <EOL> default_retry_delay = <NUM_LIT> , <EOL> retry_backoff = True , <EOL> retry_backoff_max = <NUM_LIT> * <NUM_LIT> , <EOL> retry_jitter = False , <EOL> ) <EOL> def fire_webhook ( self , webhook_id , payload ) : <EOL> webhook = Webhook . objects . get ( id = webhook_id ) <EOL> if not webhook . active : <EOL> logging . warning ( f"<STR_LIT>" ) <EOL> return <EOL> req = prepare_request ( webhook , payload ) <EOL> store_events = settings . DJANGO_WEBHOOK [ "<STR_LIT>" ] <EOL> if store_events : <EOL> event = WebhookEvent . objects . create ( <EOL> webhook = webhook , <EOL> object = payload , <EOL> object_type = payload . get ( "<STR_LIT>" ) , <EOL> status = states . PENDING , <EOL> url = webhook . url , <EOL> topic = payload . get ( "<STR_LIT>" ) , <EOL> ) <EOL> try : <EOL> Session ( ) . send ( req ) . raise_for_status ( ) <EOL> if store_events : <EOL> WebhookEvent . objects . filter ( id = event . id ) . update ( status = states . SUCCESS ) <EOL> except RequestException as ex : <EOL> status_code = ex . response . status_code <EOL> logging . warning ( f"<STR_LIT>" ) <EOL> if store_events : <EOL> WebhookEvent . objects . filter ( id = event . id ) . update ( status = states . FAILURE ) <EOL> raise self . retry ( exc = ex ) <EOL> @ app . task ( <EOL> autoretry_for = ( Exception , ) , <EOL> max_retries = <NUM_LIT> , <EOL> default_retry_delay = <NUM_LIT> , <EOL> retry_backoff = True , <EOL> retry_backoff_max = <NUM_LIT> * <NUM_LIT> , <EOL> retry_jitter = False , <EOL> ) <EOL> def clear_webhook_events ( ) : <EOL> days_ago = settings . DJANGO_WEBHOOK [ "<STR_LIT>" ] <EOL> now = timezone . now ( ) <EOL> cutoff_date = now - timedelta ( days = days_ago ) <EOL> qs = WebhookEvent . objects . filter ( created__lt = cutoff_date ) <EOL> logging . info ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> qs . delete ( ) <EOL> </s>
<s> def test_hello ( ) : <EOL> assert True <EOL> </s>
<s> import pytest <EOL> import responses as responses_lib <EOL> @ pytest . fixture <EOL> def responses ( ) : <EOL> with responses_lib . RequestsMock ( assert_all_requests_are_fired = False ) as rsps : <EOL> yield rsps <EOL> </s>
<s> from django . contrib import admin <EOL> from . models import Country <EOL> @ admin . register ( Country ) <EOL> class CountryAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( "<STR_LIT>" , ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . core . checks import Error , register <EOL> @ register ( ) <EOL> def warn_about_webhooks_settings ( app_configs , ** kwargs ) : <EOL> webhook_settings = getattr ( settings , "<STR_LIT>" ) <EOL> errors = [ ] <EOL> if not webhook_settings : <EOL> errors . append ( <EOL> Error ( <EOL> "<STR_LIT>" , <EOL> id = "<STR_LIT>" , <EOL> ) <EOL> ) <EOL> if webhook_settings : <EOL> base_msg = "<STR_LIT>" <EOL> models = webhook_settings . get ( "<STR_LIT>" ) <EOL> if not isinstance ( models , list ) : <EOL> errors . append ( <EOL> Error ( <EOL> base_msg , <EOL> hint = "<STR_LIT>" , <EOL> id = "<STR_LIT>" , <EOL> ) <EOL> ) <EOL> else : <EOL> from django . apps import apps <EOL> for model_name in models : <EOL> app_label , model_label = model_name . split ( "<STR_LIT>" ) <EOL> try : <EOL> apps . get_model ( app_label , model_label ) <EOL> except LookupError : <EOL> errors . append ( <EOL> Error ( <EOL> base_msg , <EOL> hint = f"<STR_LIT>" , <EOL> id = "<STR_LIT>" , <EOL> ) <EOL> ) <EOL> return errors <EOL> </s>
<s> from . base import * <EOL> CELERY_BROKER_URL = "<STR_LIT>" <EOL> </s>
<s> import datetime <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateField ( default = datetime . date ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) ) , <EOL> preserve_default = False , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( default = datetime . datetime ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) ) , <EOL> preserve_default = False , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import factory <EOL> from django_webhook . models import ( <EOL> Webhook , <EOL> WebhookEvent , <EOL> WebhookSecret , <EOL> WebhookTopic , <EOL> states , <EOL> ) <EOL> class WebhookSecretFactory ( factory . django . DjangoModelFactory ) : <EOL> class Meta : <EOL> model = WebhookSecret <EOL> token = factory . Faker ( "<STR_LIT>" ) <EOL> class WebhookFactory ( factory . django . DjangoModelFactory ) : <EOL> class Meta : <EOL> model = Webhook <EOL> url = factory . Faker ( "<STR_LIT>" , schemes = [ "<STR_LIT>" ] ) <EOL> active = True <EOL> secrets = factory . RelatedFactory ( <EOL> WebhookSecretFactory , factory_related_name = "<STR_LIT>" <EOL> ) <EOL> @ factory . post_generation <EOL> def topics ( self , create , extracted , ** kwargs ) : <EOL> self . refresh_from_db ( ) <EOL> if not create : <EOL> return <EOL> if extracted : <EOL> for topic in extracted : <EOL> self . topics . add ( topic ) <EOL> class WebhookTopicFactory ( factory . django . DjangoModelFactory ) : <EOL> class Meta : <EOL> model = WebhookTopic <EOL> class WebhookEventFactory ( factory . django . DjangoModelFactory ) : <EOL> class Meta : <EOL> model = WebhookEvent <EOL> webhook = factory . SubFactory ( WebhookFactory ) <EOL> object = factory . Faker ( "<STR_LIT>" ) <EOL> object_type = factory . Faker ( "<STR_LIT>" ) <EOL> status = factory . Faker ( "<STR_LIT>" , elements = states . ALL_STATES ) <EOL> url = factory . Faker ( "<STR_LIT>" ) <EOL> topic = factory . Faker ( "<STR_LIT>" ) <EOL> </s>
<s> import hashlib <EOL> import hmac <EOL> import json <EOL> from datetime import datetime , timedelta <EOL> import pytest <EOL> from django . test import override_settings <EOL> from django . utils import timezone <EOL> from freezegun import freeze_time <EOL> from pytest_django . asserts import assertNumQueries <EOL> from django_webhook . test_factories import ( <EOL> WebhookFactory , <EOL> WebhookSecretFactory , <EOL> WebhookTopicFactory , <EOL> ) <EOL> from tests . model_data import TEST_JOIN_DATE , TEST_LAST_ACTIVE , TEST_USER <EOL> from tests . models import Country , User <EOL> pytestmark = pytest . mark . django_db <EOL> @ freeze_time ( "<STR_LIT>" ) <EOL> def test_create ( responses ) : <EOL> uuid = "<STR_LIT>" <EOL> webhook = WebhookFactory ( <EOL> topics = [ WebhookTopicFactory ( name = "<STR_LIT>" ) ] , secrets = [ ] , uuid = uuid <EOL> ) <EOL> secret = WebhookSecretFactory ( webhook = webhook , token = "<STR_LIT>" ) <EOL> responses . post ( webhook . url ) <EOL> User . objects . create ( <EOL> name = "<STR_LIT>" , <EOL> email = "<STR_LIT>" , <EOL> join_date = TEST_JOIN_DATE , <EOL> last_active = TEST_LAST_ACTIVE , <EOL> ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> req = responses . calls [ <NUM_LIT> ] . request <EOL> now = timezone . now ( ) <EOL> assert req . headers [ "<STR_LIT>" ] == "<STR_LIT>" <EOL> assert req . headers [ "<STR_LIT>" ] == str ( webhook . uuid ) <EOL> assert json . loads ( req . body ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : TEST_USER , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> hmac_msg = f"<STR_LIT>" . encode ( ) <EOL> assert ( <EOL> req . headers [ "<STR_LIT>" ] <EOL> == hmac . new ( <EOL> key = secret . token . encode ( ) , msg = hmac_msg , digestmod = hashlib . sha256 <EOL> ) . hexdigest ( ) <EOL> ) <EOL> def test_update ( responses ) : <EOL> user = User . objects . create ( <EOL> name = "<STR_LIT>" , <EOL> email = "<STR_LIT>" , <EOL> join_date = TEST_JOIN_DATE , <EOL> last_active = TEST_LAST_ACTIVE , <EOL> ) <EOL> webhook = WebhookFactory ( <EOL> topics = [ WebhookTopicFactory ( name = "<STR_LIT>" ) ] , <EOL> ) <EOL> responses . post ( webhook . url ) <EOL> user . name = "<STR_LIT>" <EOL> user . save ( ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> req = responses . calls [ <NUM_LIT> ] . request <EOL> expected_object = TEST_USER . copy ( ) <EOL> expected_object [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> assert json . loads ( req . body ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : expected_object , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : str ( webhook . uuid ) , <EOL> } <EOL> def test_delete ( responses ) : <EOL> user = User . objects . create ( <EOL> name = "<STR_LIT>" , <EOL> email = "<STR_LIT>" , <EOL> join_date = TEST_JOIN_DATE , <EOL> last_active = TEST_LAST_ACTIVE , <EOL> ) <EOL> webhook = WebhookFactory ( <EOL> topics = [ WebhookTopicFactory ( name = "<STR_LIT>" ) ] , <EOL> ) <EOL> responses . post ( webhook . url ) <EOL> user . delete ( ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> req = responses . calls [ <NUM_LIT> ] . request <EOL> assert json . loads ( req . body ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : TEST_USER , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : str ( webhook . uuid ) , <EOL> } <EOL> def test_filters_topic_by_type ( responses ) : <EOL> webhook = WebhookFactory ( <EOL> topics = [ WebhookTopicFactory ( name = "<STR_LIT>" ) ] , <EOL> ) <EOL> responses . post ( webhook . url ) <EOL> user = User . objects . create ( <EOL> name = "<STR_LIT>" , <EOL> email = "<STR_LIT>" , <EOL> join_date = TEST_JOIN_DATE , <EOL> last_active = TEST_LAST_ACTIVE , <EOL> ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> user . save ( ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> def test_multiple_topic_types ( responses ) : <EOL> user = User . objects . create ( <EOL> name = "<STR_LIT>" , <EOL> email = "<STR_LIT>" , <EOL> join_date = TEST_JOIN_DATE , <EOL> last_active = TEST_LAST_ACTIVE , <EOL> ) <EOL> webhook = WebhookFactory ( <EOL> topics = [ <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> ] , <EOL> ) <EOL> responses . post ( webhook . url ) <EOL> user . delete ( ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> assert json . loads ( responses . calls [ <NUM_LIT> ] . request . body ) [ "<STR_LIT>" ] == "<STR_LIT>" <EOL> def test_multiple_topic_models ( responses ) : <EOL> User . objects . create ( <EOL> name = "<STR_LIT>" , <EOL> email = "<STR_LIT>" , <EOL> join_date = TEST_JOIN_DATE , <EOL> last_active = TEST_LAST_ACTIVE , <EOL> ) <EOL> country = Country . objects . create ( name = "<STR_LIT>" ) <EOL> webhook = WebhookFactory ( <EOL> topics = [ <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> ] , <EOL> ) <EOL> responses . post ( webhook . url ) <EOL> country . save ( ) <EOL> assert json . loads ( responses . calls [ <NUM_LIT> ] . request . body ) == { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : "<STR_LIT>" } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : str ( webhook . uuid ) , <EOL> } <EOL> @ pytest . mark . skip ( reason = "<STR_LIT>" ) <EOL> def test_enriches_payload_with_api_url ( ) : <EOL> pass <EOL> @ pytest . mark . skip ( reason = "<STR_LIT>" ) <EOL> def test_enriches_payload_with_app_url ( ) : <EOL> pass <EOL> def test_does_not_fire_inactive_webhooks ( responses ) : <EOL> country = Country . objects . create ( name = "<STR_LIT>" ) <EOL> webhook = WebhookFactory ( <EOL> active = False , <EOL> topics = [ <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> ] , <EOL> ) <EOL> responses . post ( webhook . url ) <EOL> country . save ( ) <EOL> assert len ( responses . calls ) == <NUM_LIT> <EOL> @ override_settings ( <EOL> DJANGO_WEBHOOK = dict ( <EOL> MODELS = [ "<STR_LIT>" ] , <EOL> USE_CACHE = True , <EOL> ) <EOL> ) <EOL> def test_caches_webhook_query_calls ( mocker ) : <EOL> mocker . patch ( "<STR_LIT>" ) <EOL> country = Country . objects . create ( name = "<STR_LIT>" ) <EOL> WebhookFactory ( <EOL> topics = [ <EOL> WebhookTopicFactory ( name = "<STR_LIT>" ) , <EOL> ] , <EOL> ) <EOL> now = datetime . now ( ) <EOL> with freeze_time ( now ) : <EOL> country . save ( ) <EOL> with assertNumQueries ( <NUM_LIT> ) : <EOL> country . save ( ) <EOL> with freeze_time ( now + timedelta ( minutes = <NUM_LIT> , seconds = <NUM_LIT> ) ) : <EOL> with assertNumQueries ( <NUM_LIT> ) : <EOL> country . save ( ) <EOL> </s>
<s> import os <EOL> import re <EOL> from pathlib import Path <EOL> from setuptools import find_packages , setup <EOL> def get_version ( * file_paths ) : <EOL> filename = os . path . join ( os . path . dirname ( __file__ ) , * file_paths ) <EOL> version_file = Path ( filename ) . read_text ( "<STR_LIT>" ) <EOL> version_match = re . search ( r"<STR_LIT>" , version_file , re . M ) <EOL> if version_match : <EOL> return version_match . group ( <NUM_LIT> ) <EOL> raise RuntimeError ( "<STR_LIT>" ) <EOL> version = get_version ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> readme = Path ( "<STR_LIT>" ) . read_text ( "<STR_LIT>" ) <EOL> setup ( <EOL> name = "<STR_LIT>" , <EOL> version = version , <EOL> description = , <EOL> long_description = readme , <EOL> author = "<STR_LIT>" , <EOL> author_email = "<STR_LIT>" , <EOL> url = "<STR_LIT>" , <EOL> packages = find_packages ( ) , <EOL> include_package_data = True , <EOL> install_requires = [ ] , <EOL> license = "<STR_LIT>" , <EOL> keywords = "<STR_LIT>" , <EOL> classifiers = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] , <EOL> ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class WebhooksConfig ( AppConfig ) : <EOL> name = "<STR_LIT>" <EOL> def ready ( self ) : <EOL> from django . conf import settings <EOL> from . settings import defaults <EOL> d = getattr ( settings , "<STR_LIT>" , { } ) <EOL> for k , v in defaults . items ( ) : <EOL> if k not in d : <EOL> d [ k ] = v <EOL> settings . DJANGO_WEBHOOK = d <EOL> import django_webhook . checks <EOL> from django_webhook . models import populate_topics_from_settings <EOL> from django_webhook . signals import connect_signals <EOL> connect_signals ( ) <EOL> populate_topics_from_settings ( ) <EOL> </s>
<s> from celery import Celery <EOL> app = Celery ( "<STR_LIT>" ) <EOL> app . config_from_object ( "<STR_LIT>" , namespace = "<STR_LIT>" ) <EOL> app . autodiscover_tasks ( ) <EOL> </s>
<s> import django . core . serializers . json <EOL> import django . db . models . deletion <EOL> import django . utils . timezone <EOL> import model_utils . fields <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . AutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . JSONField ( <EOL> editable = False , <EOL> encoder = django . core . serializers . json . DjangoJSONEncoder , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( editable = False , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> default = "<STR_LIT>" , <EOL> editable = False , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> model_utils . fields . AutoCreatedField ( <EOL> default = django . utils . timezone . now , editable = False <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . URLField ( editable = False ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( editable = False , max_length = <NUM_LIT> , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> editable = False , <EOL> null = True , <EOL> on_delete = django . db . models . deletion . SET_NULL , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> import pytest <EOL> from django . core . validators import ValidationError <EOL> from django_webhook . models import WebhookTopic , populate_topics_from_settings <EOL> pytestmark = pytest . mark . django_db <EOL> def test_validates_topic_name_regex ( ) : <EOL> t = WebhookTopic ( name = "<STR_LIT>" ) <EOL> with pytest . raises ( ValidationError , match = r"<STR_LIT>" ) : <EOL> t . clean_fields ( ) <EOL> def test_validates_topic_name_in_models ( settings ) : <EOL> settings . DJANGO_WEBHOOK = dict ( MODELS = [ "<STR_LIT>" ] ) <EOL> t = WebhookTopic ( name = "<STR_LIT>" ) <EOL> with pytest . raises ( <EOL> ValidationError , <EOL> match = r"<STR_LIT>" , <EOL> ) : <EOL> t . clean_fields ( ) <EOL> def test_populate_topics_from_settings ( settings ) : <EOL> populate_topics_from_settings ( ) <EOL> assert list ( <EOL> WebhookTopic . objects . values_list ( "<STR_LIT>" , flat = True ) . order_by ( "<STR_LIT>" ) <EOL> ) == [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> settings . DJANGO_WEBHOOK [ "<STR_LIT>" ] = [ "<STR_LIT>" ] <EOL> populate_topics_from_settings ( ) <EOL> assert list ( <EOL> WebhookTopic . objects . values_list ( "<STR_LIT>" , flat = True ) . order_by ( "<STR_LIT>" ) <EOL> ) == [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> from django . conf import settings <EOL> import django . contrib . auth . models <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( primary_key = True , serialize = False ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> , unique = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . URLField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . URLField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . DateField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) ) , <EOL> ( '<STR_LIT>' , models . DateField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . IntegerField ( default = <NUM_LIT> ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . OneToOneField ( auto_created = True , on_delete = django . db . models . deletion . CASCADE , parent_link = True , primary_key = True , serialize = False , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> options = { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : False , <EOL> } , <EOL> bases = ( '<STR_LIT>' , ) , <EOL> managers = [ <EOL> ( '<STR_LIT>' , django . contrib . auth . models . UserManager ( ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . SmallIntegerField ( choices = [ ( <NUM_LIT> , '<STR_LIT>' ) , ( - <NUM_LIT> , '<STR_LIT>' ) ] ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . BooleanField ( default = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = '<STR_LIT>' ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . PositiveSmallIntegerField ( ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = '<STR_LIT>' ) ) , <EOL> ] , <EOL> options = { <EOL> '<STR_LIT>' : [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : { ( '<STR_LIT>' , '<STR_LIT>' ) } , <EOL> } , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . ManyToManyField ( blank = True , through = '<STR_LIT>' , to = '<STR_LIT>' ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . shortcuts import render , redirect , HttpResponseRedirect , get_object_or_404 <EOL> from django . urls import reverse <EOL> from django . http import HttpResponse <EOL> import requests <EOL> import time <EOL> import re <EOL> import hashlib <EOL> from . models import ArxivPaper , Vote , PaperHistory , PDFHistory , SummaryPaper , AIassistant , Search , PaperScore <EOL> from . forms import RegistrationForm <EOL> from django . conf import settings <EOL> from django . core . mail import send_mail , EmailMessage <EOL> import summarizer . utils as utils <EOL> from datetime import datetime , timedelta <EOL> import ast <EOL> from django . core . cache import cache <EOL> from django . utils import timezone <EOL> from django . contrib . auth . forms import UserCreationForm <EOL> from django . contrib . auth import login <EOL> from django . contrib . auth . forms import UserCreationForm <EOL> from django . contrib . auth . models import User <EOL> from django . contrib . sites . shortcuts import get_current_site <EOL> from django . template . loader import render_to_string <EOL> from django . utils . encoding import force_bytes <EOL> from django . utils . http import urlsafe_base64_encode , urlsafe_base64_decode <EOL> from django . views import View <EOL> import six <EOL> import json <EOL> from django . contrib . auth . tokens import PasswordResetTokenGenerator <EOL> from django . contrib . auth import authenticate <EOL> from django . core . exceptions import PermissionDenied <EOL> from django . contrib . auth import views as auth_views <EOL> from django . urls import reverse_lazy <EOL> from django . core . exceptions import ValidationError <EOL> from django . contrib . auth . forms import AuthenticationForm <EOL> from django . contrib . auth import logout <EOL> import os <EOL> from django . utils . translation import get_language , get_language_info <EOL> from django . db . models import Sum <EOL> from django . core . paginator import Paginator <EOL> from urllib . parse import urlencode <EOL> import urllib , urllib . request <EOL> from xml . etree import ElementTree <EOL> import asyncio <EOL> from django . views . decorators . http import require_GET <EOL> from django . http import JsonResponse <EOL> @ require_GET <EOL> def robots_txt ( request ) : <EOL> lines = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> return HttpResponse ( "<STR_LIT>" . join ( lines ) , content_type = "<STR_LIT>" ) <EOL> class CustomAuthenticationForm ( AuthenticationForm ) : <EOL> def clean_username ( self ) : <EOL> print ( '<STR_LIT>' ) <EOL> username = self . cleaned_data . get ( '<STR_LIT>' ) <EOL> password = self . cleaned_data . get ( '<STR_LIT>' ) <EOL> user = authenticate ( username = username , password = password ) <EOL> print ( '<STR_LIT>' , user ) <EOL> if user is not None and not user . is_active : <EOL> print ( '<STR_LIT>' ) <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> return username <EOL> class CustomLoginView ( auth_views . LoginView ) : <EOL> authentication_form = CustomAuthenticationForm <EOL> def dispatch ( self , request , * args , ** kwargs ) : <EOL> print ( '<STR_LIT>' ) <EOL> try : <EOL> print ( '<STR_LIT>' ) <EOL> return super ( ) . dispatch ( request , * args , ** kwargs ) <EOL> except PermissionDenied as e : <EOL> print ( '<STR_LIT>' ) <EOL> messages . error ( self . request , str ( e ) ) <EOL> return self . form_invalid ( self . get_form ( ) ) <EOL> def form_valid ( self , form ) : <EOL> print ( '<STR_LIT>' ) <EOL> username = form . cleaned_data [ '<STR_LIT>' ] <EOL> password = form . cleaned_data [ '<STR_LIT>' ] <EOL> try : <EOL> user = authenticate ( username = username , password = password ) <EOL> except Exception as e : <EOL> print ( e ) <EOL> return self . form_invalid ( form ) <EOL> print ( '<STR_LIT>' ) <EOL> if user is not None and not user . is_active : <EOL> print ( '<STR_LIT>' ) <EOL> raise PermissionDenied ( "<STR_LIT>" ) <EOL> try : <EOL> return super ( ) . form_valid ( form ) <EOL> except PermissionDenied as e : <EOL> print ( '<STR_LIT>' ) <EOL> return self . render_to_response ( <EOL> self . get_context_data ( form = form , permission_denied = str ( e ) ) <EOL> ) <EOL> def get_success_url ( self ) : <EOL> user = self . request . user <EOL> if user . is_staff : <EOL> return reverse_lazy ( '<STR_LIT>' ) <EOL> else : <EOL> return reverse_lazy ( '<STR_LIT>' ) <EOL> class TokenGenerator ( PasswordResetTokenGenerator ) : <EOL> def _make_hash_value ( self , user , timestamp ) : <EOL> toka = six . text_type ( user . pk ) <EOL> print ( '<STR_LIT>' , toka ) <EOL> tokb = six . text_type ( timestamp ) <EOL> print ( '<STR_LIT>' , tokb ) <EOL> tokc = six . text_type ( user . is_active ) <EOL> print ( '<STR_LIT>' , tokc ) <EOL> tok = toka + tokb + tokc <EOL> print ( '<STR_LIT>' , tok ) <EOL> return ( tok ) <EOL> generate_token = TokenGenerator ( ) <EOL> class ActivateView ( View ) : <EOL> def get ( self , request , uidb64 , token ) : <EOL> try : <EOL> uid = int ( urlsafe_base64_decode ( uidb64 ) ) <EOL> print ( '<STR_LIT>' , uid ) <EOL> user = User . objects . get ( pk = uid ) <EOL> print ( '<STR_LIT>' , user ) <EOL> except ( TypeError , ValueError , OverflowError , User . DoesNotExist ) : <EOL> user = None <EOL> print ( '<STR_LIT>' ) <EOL> if user is not None and generate_token . check_token ( user , token ) : <EOL> user . is_active = True <EOL> print ( '<STR_LIT>' ) <EOL> user . save ( ) <EOL> login ( request , user ) <EOL> return redirect ( '<STR_LIT>' ) <EOL> return render ( request , '<STR_LIT>' ) <EOL> class RegisterView ( View ) : <EOL> def get ( self , request ) : <EOL> form = RegistrationForm ( ) <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : form } ) <EOL> def post ( self , request ) : <EOL> form = RegistrationForm ( request . POST ) <EOL> if form . is_valid ( ) : <EOL> username = form . cleaned_data . get ( '<STR_LIT>' ) <EOL> if User . objects . filter ( username = username ) . exists ( ) : <EOL> form . add_error ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : form } ) <EOL> email = form . cleaned_data . get ( '<STR_LIT>' ) <EOL> password1 = form . cleaned_data . get ( '<STR_LIT>' ) <EOL> password2 = form . cleaned_data . get ( '<STR_LIT>' ) <EOL> if password1 and password2 and password1 != password2 : <EOL> form . add_error ( None , "<STR_LIT>" ) <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : form } ) <EOL> user = User . objects . create_user ( username = username , email = email , password = password1 ) <EOL> user . is_active = False <EOL> user . save ( ) <EOL> current_site = get_current_site ( request ) <EOL> mail_subject = '<STR_LIT>' <EOL> print ( '<STR_LIT>' , user . pk ) <EOL> uid = urlsafe_base64_encode ( force_bytes ( user . pk ) ) <EOL> token = generate_token . make_token ( user ) <EOL> print ( '<STR_LIT>' , uid ) <EOL> print ( '<STR_LIT>' , token ) <EOL> print ( '<STR_LIT>' , current_site . domain ) <EOL> message = render_to_string ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : user , <EOL> '<STR_LIT>' : current_site . domain , <EOL> '<STR_LIT>' : uid , <EOL> '<STR_LIT>' : token , <EOL> } ) <EOL> to_email = email <EOL> email = EmailMessage ( mail_subject , message , to = [ to_email ] ) <EOL> email . content_subtype = "<STR_LIT>" <EOL> email . send ( ) <EOL> return redirect ( '<STR_LIT>' ) <EOL> return render ( request , '<STR_LIT>' , { '<STR_LIT>' : form } ) <EOL> def logout_view ( request ) : <EOL> logout ( request ) <EOL> return redirect ( '<STR_LIT>' ) <EOL> def search_results ( request ) : <EOL> query = request . GET . get ( '<STR_LIT>' ) <EOL> page_num = request . GET . get ( '<STR_LIT>' , <NUM_LIT> ) <EOL> search_results = [ ] <EOL> items_per_page = <NUM_LIT> <EOL> max_results = <NUM_LIT> <EOL> print ( '<STR_LIT>' , query ) <EOL> url = f'<STR_LIT>' <EOL> ns = { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } <EOL> print ( '<STR_LIT>' , url ) <EOL> url = urllib . parse . quote ( url , safe = '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , url ) <EOL> data = urllib . request . urlopen ( url ) . read ( ) . decode ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , data ) <EOL> root = ElementTree . fromstring ( data ) <EOL> for entry in root . findall ( "<STR_LIT>" , ns ) : <EOL> if entry . find ( "<STR_LIT>" , ns ) is not None : <EOL> authors = [ ] <EOL> affiliation = [ ] <EOL> title = "<STR_LIT>" <EOL> link_hp = "<STR_LIT>" <EOL> cat = "<STR_LIT>" <EOL> published = "<STR_LIT>" <EOL> for author in entry . findall ( "<STR_LIT>" , ns ) : <EOL> authors . append ( author . find ( "<STR_LIT>" , ns ) . text ) <EOL> print ( '<STR_LIT>' , authors ) <EOL> if author . find ( "<STR_LIT>" , ns ) is not None : <EOL> print ( '<STR_LIT>' , author . find ( "<STR_LIT>" , ns ) . text ) <EOL> affiliation . append ( author . find ( "<STR_LIT>" , ns ) . text ) <EOL> else : <EOL> affiliation . append ( '<STR_LIT>' ) <EOL> link_hp = entry . find ( "<STR_LIT>" , ns ) . text <EOL> title = entry . find ( "<STR_LIT>" , ns ) . text <EOL> if entry . find ( "<STR_LIT>" , ns ) is not None : <EOL> cat = entry . find ( "<STR_LIT>" , ns ) . attrib [ '<STR_LIT>' ] <EOL> if entry . find ( "<STR_LIT>" , ns ) is not None : <EOL> published = entry . find ( "<STR_LIT>" , ns ) . text <EOL> published = datetime . strptime ( published , '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , link_hp ) <EOL> pattern1 = r'<STR_LIT>' <EOL> pattern2 = r'<STR_LIT>' <EOL> match1 = re . search ( pattern1 , link_hp ) <EOL> match2 = re . search ( pattern2 , link_hp ) <EOL> if match1 : <EOL> print ( '<STR_LIT>' , match1 . group ( <NUM_LIT> ) ) <EOL> arxiv_id = match1 . group ( <NUM_LIT> ) <EOL> elif match2 : <EOL> print ( '<STR_LIT>' , match2 . group ( <NUM_LIT> ) ) <EOL> arxiv_id = match2 . group ( <NUM_LIT> ) <EOL> else : <EOL> print ( '<STR_LIT>' ) <EOL> arxiv_id = '<STR_LIT>' <EOL> search_results . append ( { '<STR_LIT>' : arxiv_id , '<STR_LIT>' : title , '<STR_LIT>' : authors , '<STR_LIT>' : link_hp , '<STR_LIT>' : cat , '<STR_LIT>' : published } ) <EOL> paginator = Paginator ( search_results , items_per_page ) <EOL> page_obj = paginator . get_page ( page_num ) <EOL> context = { '<STR_LIT>' : query , '<STR_LIT>' : search_results , '<STR_LIT>' : page_obj } <EOL> print ( '<STR_LIT>' , page_num ) <EOL> if int ( page_num ) == <NUM_LIT> : <EOL> if request . user . is_authenticated : <EOL> userinst = request . user <EOL> else : <EOL> userinst = None <EOL> lang = get_language ( ) <EOL> Search . objects . create ( <EOL> query = query , <EOL> user = userinst , <EOL> lang = lang <EOL> ) <EOL> return render ( request , '<STR_LIT>' , context ) <EOL> def summarize ( request ) : <EOL> stuff_for_frontend = { } <EOL> lang = get_language ( ) <EOL> if request . method == '<STR_LIT>' : <EOL> print ( '<STR_LIT>' , request . POST ) <EOL> arxiv_id = request . POST [ '<STR_LIT>' ] <EOL> arxiv_id = arxiv_id . strip ( ) <EOL> regex_pattern1 = r'<STR_LIT>' <EOL> pattern1 = re . compile ( regex_pattern1 ) <EOL> regex_pattern2 = r'<STR_LIT>' <EOL> pattern2 = re . compile ( regex_pattern2 ) <EOL> if not pattern1 . match ( arxiv_id ) and not pattern2 . match ( arxiv_id ) : <EOL> print ( '<STR_LIT>' , search_results ) <EOL> query = arxiv_id <EOL> page = <NUM_LIT> <EOL> query_params = { '<STR_LIT>' : query , '<STR_LIT>' : page } <EOL> url = f'<STR_LIT>' <EOL> return redirect ( url ) <EOL> else : <EOL> if request . user . is_authenticated : <EOL> userinst = request . user <EOL> else : <EOL> userinst = None <EOL> print ( '<STR_LIT>' ) <EOL> Search . objects . create ( <EOL> query = arxiv_id , <EOL> user = userinst , <EOL> lang = lang <EOL> ) <EOL> if pattern1 . match ( arxiv_id ) : <EOL> print ( '<STR_LIT>' , arxiv_id ) <EOL> if re . search ( r'<STR_LIT>' , arxiv_id ) : <EOL> print ( "<STR_LIT>" ) <EOL> else : <EOL> arxiv_id += "<STR_LIT>" <EOL> print ( "<STR_LIT>" , arxiv_id ) <EOL> return HttpResponseRedirect ( reverse ( '<STR_LIT>' , args = ( arxiv_id , ) ) ) <EOL> if pattern2 . match ( arxiv_id ) : <EOL> print ( '<STR_LIT>' , arxiv_id ) <EOL> cat , arxiv_id_old = arxiv_id . split ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , cat , arxiv_id_old ) <EOL> return HttpResponseRedirect ( reverse ( '<STR_LIT>' , kwargs = { '<STR_LIT>' : cat , '<STR_LIT>' : arxiv_id_old } ) ) <EOL> activated = request . GET . get ( '<STR_LIT>' , False ) <EOL> latestpapers = SummaryPaper . objects . filter ( lang = lang ) . exclude ( summary__exact = '<STR_LIT>' , notes__exact = '<STR_LIT>' , lay_summary__exact = '<STR_LIT>' , blog__exact = '<STR_LIT>' , keywords__exact = '<STR_LIT>' , summary__isnull = False , notes__isnull = False , lay_summary__isnull = False , blog__isnull = False , keywords__isnull = False ) . order_by ( '<STR_LIT>' ) [ : <NUM_LIT> ] <EOL> print ( '<STR_LIT>' , latestpapers ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : activated , <EOL> '<STR_LIT>' : latestpapers <EOL> } ) <EOL> return render ( request , '<STR_LIT>' , stuff_for_frontend ) <EOL> def legal ( request ) : <EOL> stuff_for_frontend = { } <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def about ( request ) : <EOL> stuff_for_frontend = { } <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def faq ( request ) : <EOL> stuff_for_frontend = { } <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def contact ( request ) : <EOL> stuff_for_frontend = { } <EOL> if request . method == '<STR_LIT>' : <EOL> name = request . POST [ '<STR_LIT>' ] <EOL> email = request . POST [ '<STR_LIT>' ] <EOL> message = request . POST [ '<STR_LIT>' ] <EOL> subject = '<STR_LIT>' + name <EOL> emailto = [ '<STR_LIT>' ] <EOL> emailsend = EmailMessage ( <EOL> subject , <EOL> message + '<STR_LIT>' + name + '<STR_LIT>' + email + '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> emailto , <EOL> headers = { '<STR_LIT>' : '<STR_LIT>' } , <EOL> ) <EOL> sent = emailsend . send ( fail_silently = False ) <EOL> if sent == <NUM_LIT> : <EOL> stuff_for_frontend . update ( { '<STR_LIT>' : <NUM_LIT> } ) <EOL> else : <EOL> stuff_for_frontend . update ( { '<STR_LIT>' : <NUM_LIT> } ) <EOL> print ( '<STR_LIT>' ) <EOL> return render ( request , '<STR_LIT>' , stuff_for_frontend ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def privacy ( request ) : <EOL> stuff_for_frontend = { } <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def escape_latex ( abstract ) : <EOL> while "<STR_LIT>" in abstract : <EOL> start = abstract . index ( "<STR_LIT>" ) <EOL> end = abstract . index ( "<STR_LIT>" , start + <NUM_LIT> ) <EOL> abstract = abstract [ : start ] + "<STR_LIT>" + abstract [ start + <NUM_LIT> : end ] + "<STR_LIT>" + abstract [ end + <NUM_LIT> : ] <EOL> return abstract <EOL> def tree ( request , arxiv_id ) : <EOL> arxiv_id = arxiv_id . strip ( ) <EOL> lang = get_language ( ) <EOL> li = get_language_info ( lang ) <EOL> language = li [ '<STR_LIT>' ] <EOL> stuff_for_frontend = { "<STR_LIT>" : arxiv_id , "<STR_LIT>" : lang } <EOL> paper = '<STR_LIT>' <EOL> cc_format = '<STR_LIT>' <EOL> if ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) . exists ( ) : <EOL> print ( '<STR_LIT>' ) <EOL> paper = ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) [ <NUM_LIT> ] <EOL> url = paper . license <EOL> license = '<STR_LIT>' <EOL> if url != '<STR_LIT>' and url != None : <EOL> parts = url . split ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , parts ) <EOL> license = parts [ - <NUM_LIT> ] <EOL> version = parts [ - <NUM_LIT> ] <EOL> if license . upper ( ) != "<STR_LIT>" : <EOL> cc_format = '<STR_LIT>' + license . upper ( ) + '<STR_LIT>' + version <EOL> else : <EOL> cc_format = license . upper ( ) + '<STR_LIT>' + version <EOL> alpaper = True <EOL> relpapers = '<STR_LIT>' <EOL> scores = [ ] <EOL> max_score = <NUM_LIT> <EOL> if PaperScore . objects . filter ( from_paper = paper , active = True ) . exists ( ) : <EOL> relpapers = PaperScore . objects . filter ( from_paper = paper , active = True ) <EOL> relpapersData = [ ] <EOL> import numpy as np <EOL> import random <EOL> MAX_AUTHORS = <NUM_LIT> <EOL> first_author = paper . authors . first ( ) <EOL> author_name = first_author . name if first_author else '<STR_LIT>' <EOL> paper_authors = paper . authors . all ( ) <EOL> author_names = '<STR_LIT>' . join ( [ author . name for author in paper_authors [ : MAX_AUTHORS ] ] ) <EOL> if len ( paper_authors ) > MAX_AUTHORS : <EOL> author_names += '<STR_LIT>' <EOL> relpapersData . append ( { <EOL> '<STR_LIT>' : paper . arxiv_id , <EOL> '<STR_LIT>' : paper . title , <EOL> '<STR_LIT>' : <NUM_LIT> * <NUM_LIT> , <EOL> '<STR_LIT>' : lang , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : author_name , <EOL> '<STR_LIT>' : author_names , <EOL> '<STR_LIT>' : True <EOL> } ) <EOL> for relpaper in relpapers : <EOL> first_author = relpaper . to_paper . authors . first ( ) <EOL> author_name = first_author . name if first_author else '<STR_LIT>' <EOL> paper_authors = relpaper . to_paper . authors . all ( ) <EOL> author_names = '<STR_LIT>' . join ( [ author . name for author in paper_authors [ : MAX_AUTHORS ] ] ) <EOL> if len ( paper_authors ) > MAX_AUTHORS : <EOL> author_names += '<STR_LIT>' <EOL> print ( '<STR_LIT>' , author_names ) <EOL> distance = <NUM_LIT> * ( relpaper . score ) + <NUM_LIT> <EOL> i = <NUM_LIT> <EOL> while True : <EOL> i += <NUM_LIT> <EOL> x = distance * np . cos ( random . random ( ) * np . pi * <NUM_LIT> ) <EOL> y = distance * np . sin ( random . random ( ) * np . pi * <NUM_LIT> ) <EOL> if all ( np . linalg . norm ( [ d [ '<STR_LIT>' ] - x , d [ '<STR_LIT>' ] - y ] ) > <NUM_LIT> for d in relpapersData ) : <EOL> break <EOL> if i == <NUM_LIT> : <EOL> break <EOL> relpapersData . append ( { <EOL> '<STR_LIT>' : relpaper . to_paper . arxiv_id , <EOL> '<STR_LIT>' : relpaper . to_paper . title , <EOL> '<STR_LIT>' : ( <NUM_LIT> - relpaper . score ) * <NUM_LIT> , <EOL> '<STR_LIT>' : lang , <EOL> '<STR_LIT>' : x , <EOL> '<STR_LIT>' : y , <EOL> '<STR_LIT>' : author_name , <EOL> '<STR_LIT>' : author_names , <EOL> '<STR_LIT>' : False <EOL> } ) <EOL> relpapers_json = json . dumps ( relpapersData ) <EOL> max_score = min ( rel . score for rel in relpapers ) <EOL> for pap in relpapers : <EOL> newscore = ( <NUM_LIT> - pap . score ) * <NUM_LIT> <EOL> newscore = "<STR_LIT>" . format ( newscore ) <EOL> scores . append ( newscore ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : relpapers , <EOL> '<STR_LIT>' : str ( max_score * <NUM_LIT> ) , <EOL> '<STR_LIT>' : relpapers_json , <EOL> '<STR_LIT>' : scores , <EOL> } ) <EOL> else : <EOL> alpaper = False <EOL> arxiv_detailsf = asyncio . run ( utils . get_arxiv_metadata ( arxiv_id ) ) <EOL> exist = arxiv_detailsf [ <NUM_LIT> ] <EOL> if arxiv_detailsf [ <NUM_LIT> ] == <NUM_LIT> : <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : exist , <EOL> } ) <EOL> else : <EOL> arxiv_details = arxiv_detailsf [ <NUM_LIT> : ] <EOL> keys = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> arxiv_dict = dict ( zip ( keys , arxiv_details ) ) <EOL> print ( '<STR_LIT>' , arxiv_detailsf ) <EOL> published_datetime = datetime . strptime ( arxiv_dict [ '<STR_LIT>' ] , '<STR_LIT>' ) <EOL> arxiv_dict [ '<STR_LIT>' ] = published_datetime <EOL> url = arxiv_dict [ '<STR_LIT>' ] <EOL> cc_format = '<STR_LIT>' <EOL> license = '<STR_LIT>' <EOL> if url != '<STR_LIT>' : <EOL> parts = url . split ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , parts ) <EOL> license = parts [ - <NUM_LIT> ] <EOL> version = parts [ - <NUM_LIT> ] <EOL> if license . upper ( ) != "<STR_LIT>" : <EOL> cc_format = '<STR_LIT>' + license . upper ( ) + '<STR_LIT>' + version <EOL> else : <EOL> cc_format = license . upper ( ) + '<STR_LIT>' + version <EOL> public = False <EOL> if ( license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" ) : <EOL> public = True <EOL> print ( '<STR_LIT>' ) <EOL> print ( cc_format ) <EOL> paper = arxiv_dict <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : alpaper , <EOL> '<STR_LIT>' : cc_format , <EOL> '<STR_LIT>' : paper , <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def create_embed ( request ) : <EOL> stuff_for_frontend = { } <EOL> if request . method == '<STR_LIT>' : <EOL> paper_id = request . POST . get ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , paper_id ) <EOL> return JsonResponse ( { '<STR_LIT>' : paper_id } ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> } ) <EOL> return redirect ( reverse ( '<STR_LIT>' ) ) <EOL> def chat ( request ) : <EOL> stuff_for_frontend = { } <EOL> lang = get_language ( ) <EOL> li = get_language_info ( lang ) <EOL> language = li [ '<STR_LIT>' ] <EOL> if '<STR_LIT>' in os . environ : <EOL> onhero = True <EOL> else : <EOL> onhero = False <EOL> max_nb_paper = <NUM_LIT> <EOL> client_ip = utils . get_client_ip ( request ) <EOL> hashed_ip_address = hashlib . sha256 ( client_ip . encode ( '<STR_LIT>' ) ) . hexdigest ( ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : onhero , <EOL> '<STR_LIT>' : lang , <EOL> '<STR_LIT>' : hashed_ip_address , <EOL> '<STR_LIT>' : max_nb_paper , <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def arxividpage ( request , arxiv_id , error_message = None , cat = None ) : <EOL> arxiv_id = arxiv_id . strip ( ) <EOL> print ( '<STR_LIT>' , cat ) <EOL> print ( '<STR_LIT>' , arxiv_id ) <EOL> print ( '<STR_LIT>' , error_message ) <EOL> if cat is not None : <EOL> arxiv_id = cat + '<STR_LIT>' + arxiv_id <EOL> print ( '<STR_LIT>' , arxiv_id ) <EOL> if not re . search ( r'<STR_LIT>' , arxiv_id ) : <EOL> arxiv_id += "<STR_LIT>" <EOL> return redirect ( reverse ( '<STR_LIT>' , kwargs = { '<STR_LIT>' : arxiv_id } ) ) <EOL> if '<STR_LIT>' in os . environ : <EOL> onhero = True <EOL> else : <EOL> onhero = False <EOL> lang = get_language ( ) <EOL> li = get_language_info ( lang ) <EOL> language = li [ '<STR_LIT>' ] <EOL> client_ip = utils . get_client_ip ( request ) <EOL> print ( '<STR_LIT>' , client_ip ) <EOL> hashed_ip_address = hashlib . sha256 ( client_ip . encode ( '<STR_LIT>' ) ) . hexdigest ( ) <EOL> stuff_for_frontend = { "<STR_LIT>" : arxiv_id , "<STR_LIT>" : onhero , "<STR_LIT>" : lang , "<STR_LIT>" : hashed_ip_address } <EOL> print ( '<STR_LIT>' ) <EOL> regex_pattern1 = r'<STR_LIT>' <EOL> pattern1 = re . compile ( regex_pattern1 ) <EOL> regex_pattern2 = r'<STR_LIT>' <EOL> pattern2 = re . compile ( regex_pattern2 ) <EOL> if not pattern1 . match ( arxiv_id ) and not pattern2 . match ( arxiv_id ) : <EOL> print ( '<STR_LIT>' ) <EOL> errormess = '<STR_LIT>' + arxiv_id + '<STR_LIT>' <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : errormess , <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> page_running = cache . get ( "<STR_LIT>" + arxiv_id ) <EOL> print ( '<STR_LIT>' , page_running ) <EOL> if page_running : <EOL> print ( '<STR_LIT>' ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : True , <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> if error_message : <EOL> print ( '<STR_LIT>' , error_message ) <EOL> if error_message == "<STR_LIT>" : <EOL> if lang == '<STR_LIT>' : <EOL> error_message = "<STR_LIT>" <EOL> else : <EOL> error_message = "<STR_LIT>" <EOL> else : <EOL> error_message = "<STR_LIT>" <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : error_message , <EOL> } ) <EOL> if request . method == '<STR_LIT>' : <EOL> print ( '<STR_LIT>' , request . POST ) <EOL> if '<STR_LIT>' in request . POST : <EOL> print ( '<STR_LIT>' ) <EOL> tree = request . POST . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , tree ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : tree <EOL> } ) <EOL> if '<STR_LIT>' in request . POST : <EOL> print ( '<STR_LIT>' ) <EOL> local_date = request . POST . get ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , local_date ) <EOL> res = utils . generate_pdf ( request , arxiv_id , lang , local_date ) <EOL> client_ip = utils . get_client_ip ( request ) <EOL> print ( '<STR_LIT>' , client_ip ) <EOL> hashed_ip_address = hashlib . sha256 ( client_ip . encode ( '<STR_LIT>' ) ) . hexdigest ( ) <EOL> if request . user . is_authenticated : <EOL> userinst = request . user <EOL> else : <EOL> userinst = None <EOL> PDFHistory . objects . create ( <EOL> arxiv_id = arxiv_id , <EOL> user = userinst , <EOL> lang = lang , <EOL> ip_address = hashed_ip_address <EOL> ) <EOL> return res <EOL> if '<STR_LIT>' in request . POST : <EOL> print ( '<STR_LIT>' ) <EOL> client_ip = utils . get_client_ip ( request ) <EOL> print ( '<STR_LIT>' , client_ip ) <EOL> hashed_ip_address = hashlib . sha256 ( client_ip . encode ( '<STR_LIT>' ) ) . hexdigest ( ) <EOL> ten_seconds_ago = timezone . now ( ) - timezone . timedelta ( seconds = <NUM_LIT> ) <EOL> print ( '<STR_LIT>' , ten_seconds_ago ) <EOL> recent_record = PaperHistory . objects . filter ( ip_address = hashed_ip_address , created__gte = ten_seconds_ago ) . first ( ) <EOL> print ( '<STR_LIT>' , recent_record ) <EOL> one_day_ago = timezone . now ( ) - timezone . timedelta ( days = <NUM_LIT> ) <EOL> past_records = PaperHistory . objects . filter ( ip_address = hashed_ip_address , created__gte = one_day_ago ) <EOL> print ( '<STR_LIT>' , past_records , past_records . count ( ) ) <EOL> NUM_LIMIT_PER_DAY = <NUM_LIT> <EOL> if ( recent_record is None and past_records . count ( ) < NUM_LIMIT_PER_DAY ) or ( request . user . is_superuser ) : <EOL> if request . user . is_authenticated : <EOL> userinst = request . user <EOL> else : <EOL> userinst = None <EOL> PaperHistory . objects . create ( <EOL> arxiv_id = arxiv_id , <EOL> user = userinst , <EOL> lang = lang , <EOL> ip_address = hashed_ip_address <EOL> ) <EOL> if ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) . exists ( ) : <EOL> print ( '<STR_LIT>' ) <EOL> paper = ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) [ <NUM_LIT> ] <EOL> previous_votes = Vote . objects . filter ( paper = paper , lang = lang ) <EOL> if SummaryPaper . objects . filter ( paper = paper , lang = lang ) . exists ( ) and previous_votes . exists ( ) : <EOL> print ( '<STR_LIT>' ) <EOL> for pv in previous_votes : <EOL> pv . active = False <EOL> pv . save ( ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : True , <EOL> } ) <EOL> else : <EOL> if recent_record is not None : <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : True , <EOL> } ) <EOL> if past_records . count ( ) > NUM_LIMIT_PER_DAY : <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : True , <EOL> } ) <EOL> print ( '<STR_LIT>' ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> else : <EOL> print ( '<STR_LIT>' , arxiv_id ) <EOL> if ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) . exists ( ) : <EOL> print ( '<STR_LIT>' ) <EOL> paper = ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) [ <NUM_LIT> ] <EOL> sumpaper = '<STR_LIT>' <EOL> sumlang = '<STR_LIT>' <EOL> if SummaryPaper . objects . filter ( paper = paper , lang = lang ) . exists ( ) : <EOL> sumpaper = SummaryPaper . objects . filter ( paper = paper , lang = lang ) [ <NUM_LIT> ] <EOL> if SummaryPaper . objects . filter ( paper = paper ) . exclude ( lang = lang ) . exists ( ) : <EOL> sumlang = SummaryPaper . objects . filter ( paper = paper ) . exclude ( lang = lang ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> print ( '<STR_LIT>' , list ( sumlang ) ) <EOL> sumlang = list ( sumlang ) <EOL> chathistory = '<STR_LIT>' <EOL> if request . user . is_authenticated : <EOL> print ( '<STR_LIT>' ) <EOL> if AIassistant . objects . filter ( arxiv_id = arxiv_id , active = True , user = request . user ) . exists ( ) : <EOL> print ( '<STR_LIT>' ) <EOL> chathistory = AIassistant . objects . filter ( arxiv_id = arxiv_id , active = True , user = request . user ) . order_by ( '<STR_LIT>' ) <EOL> alpaper = True <EOL> print ( '<STR_LIT>' , paper . abstract ) <EOL> total_votes = <NUM_LIT> <EOL> if Vote . objects . filter ( paper = paper , lang = lang ) . exists ( ) : <EOL> nbvotes = Vote . objects . filter ( paper = paper , lang = lang , active = True ) . aggregate ( Sum ( '<STR_LIT>' ) ) <EOL> print ( '<STR_LIT>' , nbvotes ) <EOL> if nbvotes [ '<STR_LIT>' ] != None : <EOL> total_votes = nbvotes [ '<STR_LIT>' ] <EOL> print ( '<STR_LIT>' , total_votes ) <EOL> if paper . updated >= ( timezone . now ( ) - timezone . timedelta ( days = <NUM_LIT> ) ) : <EOL> toolong = False <EOL> print ( '<STR_LIT>' ) <EOL> else : <EOL> toolong = True <EOL> print ( '<STR_LIT>' ) <EOL> url = paper . license <EOL> cc_format = '<STR_LIT>' <EOL> license = '<STR_LIT>' <EOL> if url != '<STR_LIT>' and url != None : <EOL> parts = url . split ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , parts ) <EOL> license = parts [ - <NUM_LIT> ] <EOL> version = parts [ - <NUM_LIT> ] <EOL> if license . upper ( ) != "<STR_LIT>" : <EOL> cc_format = '<STR_LIT>' + license . upper ( ) + '<STR_LIT>' + version <EOL> else : <EOL> cc_format = license . upper ( ) + '<STR_LIT>' + version <EOL> public = False <EOL> if ( license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" ) : <EOL> public = True <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , cc_format ) <EOL> notes = '<STR_LIT>' <EOL> kw = '<STR_LIT>' <EOL> keywords = '<STR_LIT>' <EOL> notes2 = '<STR_LIT>' <EOL> if sumpaper : <EOL> if ( sumpaper . notes is not None ) and ( sumpaper . notes != "<STR_LIT>" ) and ( sumpaper . notes != "<STR_LIT>" ) and ( sumpaper . notes != '<STR_LIT>' ) : <EOL> print ( '<STR_LIT>' , sumpaper . notes ) <EOL> try : <EOL> notes = ast . literal_eval ( sumpaper . notes ) <EOL> notes2 = [ ] <EOL> for note in notes : <EOL> noteb = note . replace ( '<STR_LIT>' , '<STR_LIT>' ) . strip ( ) <EOL> if noteb . startswith ( "<STR_LIT>" ) : <EOL> noteb = noteb [ <NUM_LIT> : ] <EOL> notes2 . append ( noteb ) <EOL> except ValueError : <EOL> return HttpResponse ( "<STR_LIT>" ) <EOL> else : <EOL> notes = [ '<STR_LIT>' ] <EOL> notes2 = '<STR_LIT>' <EOL> if ( sumpaper . keywords is not None ) and ( sumpaper . keywords != "<STR_LIT>" ) and ( sumpaper . keywords != "<STR_LIT>" ) : <EOL> print ( '<STR_LIT>' , sumpaper . keywords ) <EOL> try : <EOL> keywords_str = sumpaper . keywords . strip ( ) <EOL> print ( '<STR_LIT>' , keywords_str ) <EOL> keywords_list = [ keyword . strip ( ) for keyword in keywords_str . split ( '<STR_LIT>' ) ] <EOL> print ( '<STR_LIT>' , keywords_list ) <EOL> keywords_repr = json . dumps ( keywords_list ) <EOL> keywords = json . loads ( keywords_repr ) <EOL> print ( '<STR_LIT>' , keywords_repr ) <EOL> print ( '<STR_LIT>' , keywords ) <EOL> except ValueError : <EOL> return HttpResponse ( "<STR_LIT>" ) <EOL> else : <EOL> keywords = '<STR_LIT>' <EOL> relpapers = '<STR_LIT>' <EOL> scores = [ ] <EOL> max_score = <NUM_LIT> <EOL> MAX_REL_PAPERS = <NUM_LIT> <EOL> if PaperScore . objects . filter ( from_paper = paper , active = True ) . exists ( ) : <EOL> relpapers = PaperScore . objects . filter ( from_paper = paper , active = True ) [ : MAX_REL_PAPERS ] <EOL> max_score = min ( rel . score for rel in relpapers ) <EOL> for pap in relpapers : <EOL> newscore = ( <NUM_LIT> - pap . score ) * <NUM_LIT> <EOL> newscore = "<STR_LIT>" . format ( newscore ) <EOL> scores . append ( newscore ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : paper , <EOL> '<STR_LIT>' : relpapers , <EOL> '<STR_LIT>' : max_score , <EOL> '<STR_LIT>' : scores , <EOL> '<STR_LIT>' : keywords , <EOL> '<STR_LIT>' : sumpaper , <EOL> '<STR_LIT>' : sumlang , <EOL> '<STR_LIT>' : notes , <EOL> '<STR_LIT>' : notes2 , <EOL> '<STR_LIT>' : cc_format , <EOL> '<STR_LIT>' : toolong , <EOL> '<STR_LIT>' : public , <EOL> '<STR_LIT>' : total_votes , <EOL> '<STR_LIT>' : chathistory <EOL> } ) <EOL> else : <EOL> print ( '<STR_LIT>' ) <EOL> alpaper = False <EOL> arxiv_detailsf = asyncio . run ( utils . get_arxiv_metadata ( arxiv_id ) ) <EOL> exist = arxiv_detailsf [ <NUM_LIT> ] <EOL> if arxiv_detailsf [ <NUM_LIT> ] == <NUM_LIT> : <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : exist , <EOL> } ) <EOL> else : <EOL> arxiv_details = arxiv_detailsf [ <NUM_LIT> : ] <EOL> keys = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> arxiv_dict = dict ( zip ( keys , arxiv_details ) ) <EOL> print ( '<STR_LIT>' , arxiv_detailsf ) <EOL> published_datetime = datetime . strptime ( arxiv_dict [ '<STR_LIT>' ] , '<STR_LIT>' ) <EOL> arxiv_dict [ '<STR_LIT>' ] = published_datetime <EOL> url = arxiv_dict [ '<STR_LIT>' ] <EOL> cc_format = '<STR_LIT>' <EOL> license = '<STR_LIT>' <EOL> if url != '<STR_LIT>' : <EOL> parts = url . split ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , parts ) <EOL> license = parts [ - <NUM_LIT> ] <EOL> version = parts [ - <NUM_LIT> ] <EOL> if license . upper ( ) != "<STR_LIT>" : <EOL> cc_format = '<STR_LIT>' + license . upper ( ) + '<STR_LIT>' + version <EOL> else : <EOL> cc_format = license . upper ( ) + '<STR_LIT>' + version <EOL> public = False <EOL> if ( license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" ) : <EOL> public = True <EOL> print ( '<STR_LIT>' ) <EOL> print ( cc_format ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : exist , <EOL> '<STR_LIT>' : public , <EOL> '<STR_LIT>' : arxiv_dict , <EOL> '<STR_LIT>' : cc_format <EOL> } ) <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : alpaper , <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def vote ( request , paper_id ) : <EOL> lang = get_language ( ) <EOL> if request . method == '<STR_LIT>' : <EOL> direction = request . POST . get ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , lang ) <EOL> paper = get_object_or_404 ( ArxivPaper , arxiv_id = paper_id ) <EOL> client_ip = utils . get_client_ip ( request ) <EOL> print ( '<STR_LIT>' , client_ip ) <EOL> print ( '<STR_LIT>' , client_ip . encode ( '<STR_LIT>' ) ) <EOL> hashed_ip_address = hashlib . sha256 ( client_ip . encode ( '<STR_LIT>' ) ) . hexdigest ( ) <EOL> print ( '<STR_LIT>' , hashed_ip_address ) <EOL> previous_votes = Vote . objects . filter ( paper = paper , lang = lang , ip_address = hashed_ip_address ) <EOL> if previous_votes . exists ( ) : <EOL> print ( '<STR_LIT>' ) <EOL> error_message = '<STR_LIT>' <EOL> url = '<STR_LIT>' + lang + '<STR_LIT>' + paper_id + '<STR_LIT>' + error_message <EOL> return redirect ( url ) <EOL> if direction == "<STR_LIT>" : <EOL> valuevote = <NUM_LIT> <EOL> elif direction == "<STR_LIT>" : <EOL> valuevote = - <NUM_LIT> <EOL> else : <EOL> valuevote = <NUM_LIT> <EOL> if valuevote != <NUM_LIT> : <EOL> if request . user . is_authenticated : <EOL> userinst = request . user <EOL> else : <EOL> userinst = None <EOL> vote = Vote ( paper = paper , lang = lang , ip_address = hashed_ip_address , vote = valuevote , user = userinst ) <EOL> vote . save ( ) <EOL> return redirect ( '<STR_LIT>' , arxiv_id = paper_id ) <EOL> def history ( request ) : <EOL> stuff_for_frontend = { } <EOL> paper_history = [ ] <EOL> if request . user . is_authenticated : <EOL> auth = True <EOL> history = PaperHistory . objects . filter ( user = request . user ) . order_by ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , history ) <EOL> for h in history : <EOL> arxiv_paper = ArxivPaper . objects . filter ( arxiv_id = h . arxiv_id ) . first ( ) <EOL> paperdate = h . created <EOL> if arxiv_paper : <EOL> paper_history . append ( { '<STR_LIT>' : h . arxiv_id , '<STR_LIT>' : arxiv_paper . title , '<STR_LIT>' : paperdate } ) <EOL> else : <EOL> paper_history . append ( { '<STR_LIT>' : h . arxiv_id , '<STR_LIT>' : paperdate } ) <EOL> else : <EOL> auth = False <EOL> stuff_for_frontend . update ( { <EOL> '<STR_LIT>' : auth , <EOL> '<STR_LIT>' : paper_history <EOL> } ) <EOL> return render ( request , "<STR_LIT>" , stuff_for_frontend ) <EOL> def update_cache ( request ) : <EOL> arxiv_id = request . GET . get ( '<STR_LIT>' ) <EOL> arxiv_group_name = "<STR_LIT>" % arxiv_id <EOL> cache . set ( arxiv_group_name , False ) <EOL> return HttpResponse ( "<STR_LIT>" ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . BinaryField ( editable = True ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . BinaryField ( editable = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . apps import AppConfig <EOL> class SummarizerConfig ( AppConfig ) : <EOL> name = '<STR_LIT>' <EOL> </s>
<s> from django import forms <EOL> from . models import Vote , User <EOL> from django . contrib . auth . forms import UserCreationForm <EOL> class RegistrationForm ( UserCreationForm ) : <EOL> username = forms . CharField ( max_length = <NUM_LIT> , required = True ) <EOL> email = forms . EmailField ( max_length = <NUM_LIT> , required = True ) <EOL> password1 = forms . CharField ( <EOL> widget = forms . PasswordInput , <EOL> label = "<STR_LIT>" , <EOL> strip = False , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> password2 = forms . CharField ( <EOL> widget = forms . PasswordInput , <EOL> label = "<STR_LIT>" , <EOL> strip = False , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> class Meta : <EOL> model = User <EOL> fields = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> def clean_password1 ( self ) : <EOL> password1 = self . cleaned_data . get ( "<STR_LIT>" ) <EOL> if len ( password1 ) < <NUM_LIT> : <EOL> raise forms . ValidationError ( "<STR_LIT>" ) <EOL> if password1 . isdigit ( ) : <EOL> raise forms . ValidationError ( "<STR_LIT>" ) <EOL> if not any ( char . isdigit ( ) for char in password1 ) : <EOL> raise forms . ValidationError ( "<STR_LIT>" ) <EOL> if not any ( char . isupper ( ) for char in password1 ) : <EOL> raise forms . ValidationError ( "<STR_LIT>" ) <EOL> if not any ( char . islower ( ) for char in password1 ) : <EOL> raise forms . ValidationError ( "<STR_LIT>" ) <EOL> if not any ( char in "<STR_LIT>" for char in password1 ) : <EOL> raise forms . ValidationError ( "<STR_LIT>" ) <EOL> return password1 <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . TextField ( blank = True , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( primary_key = True , serialize = False ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib import admin <EOL> from . models import ArxivPaper , Author , Vote , SummaryPaper , PaperHistory , PDFHistory , PaperScore , PaperAuthor , PickledData , AIassistant , Search <EOL> from django import forms <EOL> from django . db import models <EOL> admin . site . register ( ArxivPaper ) <EOL> admin . site . register ( Author ) <EOL> admin . site . register ( Vote ) <EOL> admin . site . register ( PaperAuthor ) <EOL> admin . site . register ( SummaryPaper ) <EOL> admin . site . register ( AIassistant ) <EOL> admin . site . register ( Search ) <EOL> admin . site . register ( PaperScore ) <EOL> class MyModelAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> admin . site . register ( PaperHistory , MyModelAdmin ) <EOL> admin . site . register ( PDFHistory , MyModelAdmin ) <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from django . forms . widgets import ClearableFileInput <EOL> class MyModelAdmin2 ( admin . ModelAdmin ) : <EOL> formfield_overrides = { <EOL> models . BinaryField : { '<STR_LIT>' : forms . Textarea ( attrs = dict ( readonly = True ) ) } , <EOL> } <EOL> admin . site . register ( PickledData , MyModelAdmin2 ) <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . BooleanField ( default = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RemoveField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> migrations . RemoveField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> migrations . RemoveField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> migrations . RemoveField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = '<STR_LIT>' ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib . sitemaps import Sitemap <EOL> from django . shortcuts import reverse <EOL> class StaticViewSitemap ( Sitemap ) : <EOL> changefreq = "<STR_LIT>" <EOL> priority = <NUM_LIT> <EOL> protocol = '<STR_LIT>' <EOL> def items ( self ) : <EOL> return [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> def location ( self , item ) : <EOL> return reverse ( item ) <EOL> </s>
<s> from django . db import models <EOL> from django . contrib . auth . models import User <EOL> from django . urls import reverse <EOL> class CustomUser ( User ) : <EOL> pass <EOL> class Author ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> name = models . CharField ( max_length = <NUM_LIT> ) <EOL> affiliation = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True ) <EOL> def __str__ ( self ) : <EOL> return self . name + '<STR_LIT>' + self . affiliation <EOL> class PaperHistory ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> arxiv_id = models . CharField ( max_length = <NUM_LIT> ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> user = models . ForeignKey ( User , blank = True , null = True , on_delete = models . CASCADE ) <EOL> ip_address = models . TextField ( blank = True , null = True ) <EOL> lang = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' ) <EOL> def __str__ ( self ) : <EOL> return self . arxiv_id <EOL> class PDFHistory ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> arxiv_id = models . CharField ( max_length = <NUM_LIT> ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> user = models . ForeignKey ( User , blank = True , null = True , on_delete = models . CASCADE ) <EOL> ip_address = models . TextField ( blank = True , null = True ) <EOL> lang = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' ) <EOL> def __str__ ( self ) : <EOL> return self . arxiv_id <EOL> class ArxivPaper ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> arxiv_id = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> updated = models . DateTimeField ( auto_now = True ) <EOL> title = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True ) <EOL> abstract = models . TextField ( blank = True , null = True ) <EOL> authors = models . ManyToManyField ( Author , blank = True , through = '<STR_LIT>' ) <EOL> link_doi = models . URLField ( blank = True , null = True ) <EOL> link_homepage = models . URLField ( blank = True , null = True ) <EOL> published_arxiv = models . DateField ( blank = True , null = True ) <EOL> journal_ref = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True ) <EOL> comments = models . TextField ( blank = True , null = True ) <EOL> license = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True ) <EOL> category = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True ) <EOL> updated_arxiv = models . DateField ( blank = True , null = True ) <EOL> closest_papers = models . ManyToManyField ( '<STR_LIT>' , through = '<STR_LIT>' , symmetrical = False , related_name = '<STR_LIT>' ) <EOL> def __str__ ( self ) : <EOL> return self . arxiv_id + '<STR_LIT>' + self . title <EOL> def get_absolute_url ( self ) : <EOL> return reverse ( '<STR_LIT>' , args = [ str ( self . arxiv_id ) ] ) <EOL> class PaperScore ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> from_paper = models . ForeignKey ( ArxivPaper , on_delete = models . CASCADE , related_name = '<STR_LIT>' ) <EOL> to_paper = models . ForeignKey ( ArxivPaper , on_delete = models . CASCADE , related_name = '<STR_LIT>' ) <EOL> score = models . FloatField ( ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> updated = models . DateTimeField ( auto_now = True ) <EOL> active = models . BooleanField ( default = True ) <EOL> def __str__ ( self ) : <EOL> return '<STR_LIT>' + self . from_paper . arxiv_id + '<STR_LIT>' + self . to_paper . arxiv_id + '<STR_LIT>' + str ( self . score ) <EOL> class Search ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> query = models . TextField ( blank = True , null = True ) <EOL> lang = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> user = models . ForeignKey ( User , blank = True , null = True , on_delete = models . CASCADE ) <EOL> def __str__ ( self ) : <EOL> return self . query <EOL> class SummaryPaper ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> paper = models . ForeignKey ( ArxivPaper , on_delete = models . CASCADE ) <EOL> summary = models . TextField ( blank = True , null = True ) <EOL> notes = models . TextField ( blank = True , null = True ) <EOL> lay_summary = models . TextField ( blank = True , null = True ) <EOL> blog = models . TextField ( blank = True , null = True ) <EOL> keywords = models . TextField ( blank = True , null = True ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> updated = models . DateTimeField ( auto_now = True ) <EOL> lang = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' ) <EOL> def __str__ ( self ) : <EOL> return self . paper . arxiv_id + '<STR_LIT>' + self . lang + '<STR_LIT>' + self . paper . title <EOL> class PaperAuthor ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> author = models . ForeignKey ( Author , on_delete = models . CASCADE ) <EOL> paper = models . ForeignKey ( ArxivPaper , on_delete = models . CASCADE ) <EOL> author_order = models . PositiveSmallIntegerField ( ) <EOL> class Meta : <EOL> unique_together = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> ordering = [ '<STR_LIT>' ] <EOL> def __str__ ( self ) : <EOL> return self . paper . arxiv_id + '<STR_LIT>' + self . author . name + '<STR_LIT>' + str ( self . author_order ) + '<STR_LIT>' <EOL> class Vote ( models . Model ) : <EOL> UP = <NUM_LIT> <EOL> DOWN = - <NUM_LIT> <EOL> VOTE_CHOICES = ( <EOL> ( UP , '<STR_LIT>' ) , <EOL> ( DOWN , '<STR_LIT>' ) , <EOL> ) <EOL> id = models . AutoField ( primary_key = True ) <EOL> vote = models . SmallIntegerField ( choices = VOTE_CHOICES ) <EOL> paper = models . ForeignKey ( ArxivPaper , on_delete = models . CASCADE ) <EOL> ip_address = models . TextField ( blank = True , null = True ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> active = models . BooleanField ( default = True ) <EOL> lang = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' ) <EOL> user = models . ForeignKey ( User , blank = True , null = True , on_delete = models . CASCADE ) <EOL> def __str__ ( self ) : <EOL> return self . paper . arxiv_id + '<STR_LIT>' + str ( self . vote ) + '<STR_LIT>' + str ( self . created_at ) + '<STR_LIT>' + str ( self . user ) <EOL> class PickledData ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> arxiv_id = models . CharField ( max_length = <NUM_LIT> ) <EOL> docstore_pickle = models . BinaryField ( editable = True ) <EOL> buffer = models . BinaryField ( editable = True ) <EOL> index_to_docstore_id_pickle = models . BinaryField ( editable = True ) <EOL> def __str__ ( self ) : <EOL> return self . arxiv_id <EOL> class AIassistant ( models . Model ) : <EOL> id = models . AutoField ( primary_key = True ) <EOL> arxiv_id = models . CharField ( max_length = <NUM_LIT> ) <EOL> query = models . TextField ( blank = True , null = True ) <EOL> response = models . TextField ( blank = True , null = True ) <EOL> user = models . ForeignKey ( User , blank = True , null = True , on_delete = models . CASCADE ) <EOL> ip_address = models . TextField ( blank = True , null = True ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> active = models . BooleanField ( default = True ) <EOL> lang = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' ) <EOL> def __str__ ( self ) : <EOL> return self . arxiv_id + '<STR_LIT>' + self . query <EOL> </s>
<s> from django . db import migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RenameField ( <EOL> model_name = '<STR_LIT>' , <EOL> old_name = '<STR_LIT>' , <EOL> new_name = '<STR_LIT>' , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . TextField ( blank = True , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( primary_key = True , serialize = False ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib . auth . backends import ModelBackend <EOL> from django . contrib . auth import get_user_model <EOL> from django . core . exceptions import PermissionDenied <EOL> User = get_user_model ( ) <EOL> class CustomModelBackend ( ModelBackend ) : <EOL> def authenticate ( self , request , username = None , password = None , ** kwargs ) : <EOL> print ( '<STR_LIT>' ) <EOL> try : <EOL> user = User . objects . get ( username = username ) <EOL> if user . check_password ( password ) : <EOL> return user <EOL> else : <EOL> return None <EOL> except User . DoesNotExist : <EOL> print ( '<STR_LIT>' ) <EOL> return None <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( primary_key = True , serialize = False ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( blank = True , null = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RemoveField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RemoveField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RenameModel ( <EOL> old_name = '<STR_LIT>' , <EOL> new_name = '<STR_LIT>' , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . BinaryField ( ) ) , <EOL> ( '<STR_LIT>' , models . BinaryField ( ) ) , <EOL> ( '<STR_LIT>' , models . BinaryField ( ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . test import TestCase <EOL> </s>
<s> from django . contrib import admin <EOL> from django . urls import include , path , re_path <EOL> from django . conf import settings <EOL> from django . conf . urls . i18n import i18n_patterns <EOL> from django . contrib . sitemaps . views import sitemap <EOL> from django . contrib . sitemaps import GenericSitemap <EOL> from summarizer . sitemaps import StaticViewSitemap <EOL> from summarizer . models import ArxivPaper <EOL> app_name = '<STR_LIT>' <EOL> sitemaps = { <EOL> '<STR_LIT>' : StaticViewSitemap <EOL> } <EOL> def get_absolute_url2 ( obj ) : <EOL> return f"<STR_LIT>" <EOL> sitemaps = { <EOL> '<STR_LIT>' : GenericSitemap ( { <EOL> '<STR_LIT>' : ArxivPaper . objects . filter ( arxiv_id__isnull = False ) , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , priority = <NUM_LIT> , protocol = '<STR_LIT>' ) , <EOL> '<STR_LIT>' : StaticViewSitemap , <EOL> } <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , admin . site . urls ) , <EOL> path ( '<STR_LIT>' , sitemap , { '<STR_LIT>' : sitemaps } ) , <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> ] <EOL> if '<STR_LIT>' in settings . INSTALLED_APPS : <EOL> urlpatterns += [ <EOL> re_path ( r'<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> ] <EOL> urlpatterns += i18n_patterns ( <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> ) <EOL> </s>
<s> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . AutoField ( primary_key = True , serialize = False ) ) , <EOL> ( '<STR_LIT>' , models . FloatField ( ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now = True ) ) , <EOL> ( '<STR_LIT>' , models . BooleanField ( default = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = '<STR_LIT>' , to = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , related_name = '<STR_LIT>' , to = '<STR_LIT>' ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . ManyToManyField ( related_name = '<STR_LIT>' , through = '<STR_LIT>' , to = '<STR_LIT>' ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . urls import path , re_path <EOL> from . import consumers <EOL> websocket_urlpatterns = [ <EOL> re_path ( r"<STR_LIT>" , consumers . LoadingConsumer . as_asgi ( ) ) , <EOL> re_path ( r'<STR_LIT>' , consumers . EmbeddingConsumer . as_asgi ( ) ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . AutoField ( primary_key = True , serialize = False ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . AutoField ( primary_key = True , serialize = False ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . AutoField ( primary_key = True , serialize = False ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . AutoField ( primary_key = True , serialize = False ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . AutoField ( primary_key = True , serialize = False ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . AutoField ( primary_key = True , serialize = False ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django import template <EOL> register = template . Library ( ) <EOL> @ register . filter <EOL> def index ( indexable , i ) : <EOL> return indexable [ i ] <EOL> </s>
<s> from django . urls import path , re_path <EOL> from . import views <EOL> from django . contrib . auth import views as auth_views <EOL> from . views import RegisterView , ActivateView , CustomLoginView , logout_view <EOL> from django . views . generic import TemplateView <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , views . summarize , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , views . robots_txt ) , <EOL> path ( "<STR_LIT>" , views . arxividpage , name = "<STR_LIT>" ) , <EOL> re_path ( r"<STR_LIT>" , views . arxividpage , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . arxividpage , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . tree , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . search_results , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . create_embed , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . about , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . chat , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . faq , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . contact , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . history , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . privacy , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . legal , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . update_cache , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . vote , name = "<STR_LIT>" ) , <EOL> path ( '<STR_LIT>' , CustomLoginView . as_view ( ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , logout_view , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , RegisterView . as_view ( ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , auth_views . PasswordResetView . as_view ( template_name = '<STR_LIT>' ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , auth_views . PasswordResetDoneView . as_view ( template_name = '<STR_LIT>' ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , auth_views . PasswordResetConfirmView . as_view ( template_name = '<STR_LIT>' ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , auth_views . PasswordResetCompleteView . as_view ( template_name = '<STR_LIT>' ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , ActivateView . as_view ( ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , TemplateView . as_view ( template_name = '<STR_LIT>' ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , TemplateView . as_view ( template_name = '<STR_LIT>' ) , name = '<STR_LIT>' ) , <EOL> ] <EOL> </s>
<s> from channels . generic . websocket import AsyncWebsocketConsumer , WebsocketConsumer <EOL> import json <EOL> import asyncio <EOL> from asgiref . sync import async_to_sync , sync_to_async <EOL> import summarizer . utils as utils <EOL> from channels . db import database_sync_to_async <EOL> from . models import ArxivPaper , Author , PaperAuthor , SummaryPaper <EOL> from datetime import datetime <EOL> import urllib . request <EOL> import requests <EOL> from django . conf import settings <EOL> import time <EOL> from django . core . cache import cache <EOL> import aiohttp <EOL> class EmbeddingConsumer ( AsyncWebsocketConsumer ) : <EOL> async def connect ( self ) : <EOL> await self . accept ( ) <EOL> async def disconnect ( self , close_code ) : <EOL> pass <EOL> async def receive ( self , text_data ) : <EOL> text_data_json = json . loads ( text_data ) <EOL> paper_id = text_data_json [ '<STR_LIT>' ] <EOL> c = self . create_embeddings ( paper_id ) <EOL> licenseurl = await c <EOL> url = licenseurl <EOL> print ( '<STR_LIT>' , url ) <EOL> cc_format = '<STR_LIT>' <EOL> license = '<STR_LIT>' <EOL> if url != '<STR_LIT>' and url != None : <EOL> parts = url . split ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , parts ) <EOL> license = parts [ - <NUM_LIT> ] <EOL> version = parts [ - <NUM_LIT> ] <EOL> if license . upper ( ) != "<STR_LIT>" : <EOL> cc_format = '<STR_LIT>' + license . upper ( ) + '<STR_LIT>' + version <EOL> else : <EOL> cc_format = license . upper ( ) + '<STR_LIT>' + version <EOL> public = False <EOL> if ( license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" or license . upper ( ) . strip ( ) == "<STR_LIT>" ) : <EOL> public = True <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , cc_format ) <EOL> else : <EOL> public = False <EOL> licenseurl = "<STR_LIT>" <EOL> cc_format = "<STR_LIT>" <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : paper_id , <EOL> '<STR_LIT>' : licenseurl , <EOL> '<STR_LIT>' : cc_format , <EOL> '<STR_LIT>' : public <EOL> } ) ) <EOL> async def create_embeddings ( self , paper_id ) : <EOL> c = asyncio . create_task ( sync_to_async ( utils . getstorepickle ) ( paper_id ) ) <EOL> pickledata = await c <EOL> if pickledata == '<STR_LIT>' : <EOL> print ( f"<STR_LIT>" ) <EOL> url = '<STR_LIT>' + paper_id + '<STR_LIT>' <EOL> book_path = "<STR_LIT>" <EOL> c = asyncio . create_task ( utils . get_arxiv_metadata ( paper_id ) ) <EOL> arxivarrayf = await c <EOL> if len ( arxivarrayf ) > <NUM_LIT> : <EOL> keys = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> arxiv_dict = dict ( zip ( keys , arxivarrayf [ <NUM_LIT> : - <NUM_LIT> ] ) ) <EOL> exist = arxivarrayf [ <NUM_LIT> ] <EOL> data = arxivarrayf [ - <NUM_LIT> ] <EOL> print ( '<STR_LIT>' , arxiv_dict ) <EOL> print ( "<STR_LIT>" , arxiv_dict [ '<STR_LIT>' ] ) <EOL> published_datetime = datetime . strptime ( str ( arxiv_dict [ '<STR_LIT>' ] ) , '<STR_LIT>' ) <EOL> arxiv_dict [ '<STR_LIT>' ] = published_datetime <EOL> if exist == <NUM_LIT> : <EOL> print ( '<STR_LIT>' , paper_id ) <EOL> paper_id = paper_id . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , paper_id ) <EOL> c = asyncio . create_task ( sync_to_async ( utils . updatearvixdatapaper ) ( paper_id , arxiv_dict ) ) <EOL> arvixupdate = await c <EOL> detpap = [ arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] ] <EOL> license , title , abstract , authors = detpap <EOL> print ( '<STR_LIT>' , license ) <EOL> if license == '<STR_LIT>' or license == '<STR_LIT>' or license == '<STR_LIT>' or license == '<STR_LIT>' : <EOL> public = <NUM_LIT> <EOL> else : <EOL> public = <NUM_LIT> <EOL> print ( '<STR_LIT>' , public ) <EOL> active = <NUM_LIT> <EOL> if active == <NUM_LIT> : <EOL> print ( '<STR_LIT>' ) <EOL> if public == <NUM_LIT> : <EOL> response = await asyncio . to_thread ( requests . get , url ) <EOL> my_raw_data = response . content <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as my_data : <EOL> my_data . write ( my_raw_data ) <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( utils . extract_text_from_pdf ( "<STR_LIT>" ) ) <EOL> book_text , full_text = await c <EOL> print ( '<STR_LIT>' , book_text ) <EOL> else : <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , authors ) <EOL> book_text = '<STR_LIT>' + str ( authors ) + '<STR_LIT>' + title + '<STR_LIT>' + abstract + '<STR_LIT>' <EOL> if <NUM_LIT> == <NUM_LIT> : <EOL> if public == <NUM_LIT> : <EOL> book_text2 = data + '<STR_LIT>' + full_text <EOL> else : <EOL> book_text2 = data + '<STR_LIT>' + book_text <EOL> c = asyncio . create_task ( utils . createindex ( paper_id , book_text2 , settings . OPENAI_KEY ) ) <EOL> created = await c <EOL> print ( '<STR_LIT>' , created ) <EOL> print ( f"<STR_LIT>" ) <EOL> else : <EOL> c = asyncio . create_task ( sync_to_async ( utils . getlicense ) ( paper_id ) ) <EOL> license = await c <EOL> print ( f"<STR_LIT>" ) <EOL> return license <EOL> class LoadingConsumer ( AsyncWebsocketConsumer ) : <EOL> sendmessages_running = { } <EOL> async def send_message_now ( self , message ) : <EOL> print ( '<STR_LIT>' , message ) <EOL> await self . channel_layer . group_send ( <EOL> self . arxiv_group_name , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : message } <EOL> ) <EOL> print ( '<STR_LIT>' , message ) <EOL> async def send_message_arxiv ( self , arxiv_dict ) : <EOL> print ( '<STR_LIT>' , arxiv_dict ) <EOL> await self . channel_layer . group_send ( <EOL> self . arxiv_group_name , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : arxiv_dict } <EOL> ) <EOL> print ( '<STR_LIT>' , arxiv_dict ) <EOL> async def send_message_sum ( self , sum ) : <EOL> await self . channel_layer . group_send ( <EOL> self . arxiv_group_name , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : sum } <EOL> ) <EOL> async def send_message_notes ( self , notes ) : <EOL> await self . channel_layer . group_send ( <EOL> self . arxiv_group_name , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : notes } <EOL> ) <EOL> async def send_message_laysum ( self , laysum ) : <EOL> await self . channel_layer . group_send ( <EOL> self . arxiv_group_name , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : laysum } <EOL> ) <EOL> async def send_message_blog ( self , blog ) : <EOL> await self . channel_layer . group_send ( <EOL> self . arxiv_group_name , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : blog } <EOL> ) <EOL> async def createindexwithsources ( self , arxiv_id , details_paper , data ) : <EOL> url = '<STR_LIT>' + arxiv_id + '<STR_LIT>' <EOL> book_path = "<STR_LIT>" <EOL> sum = "<STR_LIT>" <EOL> laysum = "<STR_LIT>" <EOL> notes = "<STR_LIT>" <EOL> license , title , abstract , authors = details_paper <EOL> print ( '<STR_LIT>' , license ) <EOL> if license == '<STR_LIT>' or license == '<STR_LIT>' or license == '<STR_LIT>' or license == '<STR_LIT>' : <EOL> public = <NUM_LIT> <EOL> else : <EOL> public = <NUM_LIT> <EOL> print ( '<STR_LIT>' , public ) <EOL> active = <NUM_LIT> <EOL> if active == <NUM_LIT> : <EOL> print ( '<STR_LIT>' ) <EOL> if public == <NUM_LIT> : <EOL> response = requests . get ( url ) <EOL> print ( '<STR_LIT>' ) <EOL> my_raw_data = response . content <EOL> print ( '<STR_LIT>' ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as my_data : <EOL> my_data . write ( my_raw_data ) <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( utils . extract_text_from_pdf ( "<STR_LIT>" ) ) <EOL> book_text , full_text = await c <EOL> print ( '<STR_LIT>' , book_text ) <EOL> else : <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , authors ) <EOL> book_text = '<STR_LIT>' + str ( authors ) + '<STR_LIT>' + title + '<STR_LIT>' + abstract + '<STR_LIT>' <EOL> pickledata = '<STR_LIT>' <EOL> if pickledata == '<STR_LIT>' : <EOL> if public == <NUM_LIT> : <EOL> book_text2 = data + '<STR_LIT>' + full_text <EOL> else : <EOL> book_text2 = data + '<STR_LIT>' + book_text <EOL> c = asyncio . create_task ( utils . createindex ( arxiv_id , book_text2 , settings . OPENAI_KEY ) ) <EOL> created = await c <EOL> print ( '<STR_LIT>' , created ) <EOL> print ( '<STR_LIT>' , arxiv_id ) <EOL> return <NUM_LIT> <EOL> async def computesummary ( self , arxiv_id , language , details_paper , message , data ) : <EOL> url = '<STR_LIT>' + arxiv_id + '<STR_LIT>' <EOL> book_path = "<STR_LIT>" <EOL> sum = "<STR_LIT>" <EOL> laysum = "<STR_LIT>" <EOL> notes = "<STR_LIT>" <EOL> license , title , abstract , authors = details_paper <EOL> print ( '<STR_LIT>' , license ) <EOL> if license == '<STR_LIT>' or license == '<STR_LIT>' or license == '<STR_LIT>' or license == '<STR_LIT>' : <EOL> public = <NUM_LIT> <EOL> else : <EOL> public = <NUM_LIT> <EOL> print ( '<STR_LIT>' , public ) <EOL> active = <NUM_LIT> <EOL> if active == <NUM_LIT> : <EOL> print ( '<STR_LIT>' ) <EOL> if public == <NUM_LIT> : <EOL> response = await asyncio . to_thread ( requests . get , url ) <EOL> my_raw_data = response . content <EOL> print ( '<STR_LIT>' ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as my_data : <EOL> my_data . write ( my_raw_data ) <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( utils . extract_text_from_pdf ( "<STR_LIT>" ) ) <EOL> book_text , full_text = await c <EOL> print ( '<STR_LIT>' , book_text ) <EOL> else : <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , authors ) <EOL> book_text = '<STR_LIT>' + str ( authors ) + '<STR_LIT>' + title + '<STR_LIT>' + abstract + '<STR_LIT>' <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> c = asyncio . create_task ( sync_to_async ( utils . getstorepickle ) ( arxiv_id ) ) <EOL> pickledata = await c <EOL> print ( '<STR_LIT>' , data ) <EOL> if pickledata == '<STR_LIT>' : <EOL> if public == <NUM_LIT> : <EOL> book_text2 = data + '<STR_LIT>' + full_text <EOL> else : <EOL> book_text2 = data + '<STR_LIT>' + book_text <EOL> c = asyncio . create_task ( utils . createindex ( arxiv_id , book_text2 , settings . OPENAI_KEY ) ) <EOL> created = await c <EOL> print ( '<STR_LIT>' , created ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> sum = '<STR_LIT>' <EOL> kw = '<STR_LIT>' <EOL> c = asyncio . create_task ( utils . summarize_book ( arxiv_id , language , book_text , settings . OPENAI_KEY ) ) <EOL> sum = await c <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> if sum != '<STR_LIT>' : <EOL> print ( '<STR_LIT>' , sum ) <EOL> if '<STR_LIT>' in sum : <EOL> print ( "<STR_LIT>" , sum ) <EOL> sum = '<STR_LIT>' <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( utils . finalise_and_keywords ( arxiv_id , language , sum , settings . OPENAI_KEY ) ) <EOL> sum , kw = await c <EOL> c = asyncio . create_task ( self . send_message_sum ( sum ) ) <EOL> await c <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> c = asyncio . create_task ( utils . extract_key_points ( arxiv_id , language , sum , settings . OPENAI_KEY ) ) <EOL> notes = await c <EOL> if '<STR_LIT>' in notes : <EOL> print ( "<STR_LIT>" , notes ) <EOL> notes = '<STR_LIT>' <EOL> print ( '<STR_LIT>' ) <EOL> for key_point in notes : <EOL> print ( '<STR_LIT>' , key_point ) <EOL> c = asyncio . create_task ( self . send_message_notes ( notes ) ) <EOL> await c <EOL> print ( '<STR_LIT>' ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> c = asyncio . create_task ( utils . extract_simple_summary ( arxiv_id , language , notes , settings . OPENAI_KEY ) ) <EOL> laysum = await c <EOL> print ( '<STR_LIT>' , laysum ) <EOL> if '<STR_LIT>' in laysum : <EOL> print ( "<STR_LIT>" , laysum ) <EOL> laysum = '<STR_LIT>' <EOL> c = asyncio . create_task ( self . send_message_laysum ( laysum ) ) <EOL> await c <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> c = asyncio . create_task ( utils . extract_blog_article ( arxiv_id , language , sum , settings . OPENAI_KEY ) ) <EOL> blog = await c <EOL> print ( '<STR_LIT>' , blog ) <EOL> if '<STR_LIT>' in blog : <EOL> print ( "<STR_LIT>" , blog ) <EOL> blog = '<STR_LIT>' <EOL> c = asyncio . create_task ( self . send_message_blog ( blog ) ) <EOL> await c <EOL> else : <EOL> sum = '<STR_LIT>' <EOL> laysum = sum <EOL> notes = sum <EOL> blog = sum <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if language == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> suma = [ sum . replace ( '<STR_LIT>' , '<STR_LIT>' ) , laysum . replace ( '<STR_LIT>' , '<STR_LIT>' ) , notes , blog , kw ] <EOL> return suma <EOL> def updatesumpaper ( self , arxiv_id , language , sumarray ) : <EOL> paper = ArxivPaper . objects . filter ( arxiv_id = arxiv_id ) [ <NUM_LIT> ] <EOL> sumpaper , created = SummaryPaper . objects . update_or_create ( <EOL> paper = paper , lang = language , <EOL> defaults = { '<STR_LIT>' : sumarray [ '<STR_LIT>' ] , '<STR_LIT>' : sumarray [ '<STR_LIT>' ] , '<STR_LIT>' : sumarray [ '<STR_LIT>' ] , '<STR_LIT>' : sumarray [ '<STR_LIT>' ] , '<STR_LIT>' : sumarray [ '<STR_LIT>' ] } <EOL> ) <EOL> return sumpaper , created <EOL> async def sendclose ( self , v , l , message ) : <EOL> print ( '<STR_LIT>' ) <EOL> page_running = cache . get ( self . arxiv_group_name + '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , page_running ) <EOL> if page_running : <EOL> return <EOL> else : <EOL> cache . set ( self . arxiv_group_name + '<STR_LIT>' , True ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( utils . findclosestpapers ( v , l , <NUM_LIT> , settings . OPENAI_KEY , but = True ) ) <EOL> closest_papers = await c <EOL> print ( '<STR_LIT>' , closest_papers ) <EOL> c = asyncio . create_task ( sync_to_async ( utils . storeclosest ) ( v , closest_papers ) ) <EOL> storeclosest = await c <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> cache . set ( self . arxiv_group_name + '<STR_LIT>' , False ) <EOL> async def sendmessages ( self , v , l , message ) : <EOL> print ( '<STR_LIT>' ) <EOL> page_running = cache . get ( self . arxiv_group_name ) <EOL> print ( '<STR_LIT>' , page_running ) <EOL> if page_running : <EOL> return <EOL> else : <EOL> cache . set ( self . arxiv_group_name , True ) <EOL> print ( '<STR_LIT>' , cache . get ( self . arxiv_group_name ) ) <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( utils . get_arxiv_metadata ( v ) ) <EOL> arxivarrayf = await c <EOL> if len ( arxivarrayf ) > <NUM_LIT> : <EOL> keys = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> arxiv_dict = dict ( zip ( keys , arxivarrayf [ <NUM_LIT> : - <NUM_LIT> ] ) ) <EOL> exist = arxivarrayf [ <NUM_LIT> ] <EOL> data = arxivarrayf [ - <NUM_LIT> ] <EOL> published_datetime = datetime . strptime ( str ( arxiv_dict [ '<STR_LIT>' ] ) , '<STR_LIT>' ) <EOL> arxiv_dict [ '<STR_LIT>' ] = published_datetime <EOL> if exist == <NUM_LIT> : <EOL> print ( '<STR_LIT>' ) <EOL> c = asyncio . create_task ( sync_to_async ( utils . updatearvixdatapaper ) ( v , arxiv_dict ) ) <EOL> arvixupdate = await c <EOL> print ( '<STR_LIT>' ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> print ( '<STR_LIT>' ) <EOL> published2 = published_datetime . strftime ( "<STR_LIT>" ) <EOL> print ( '<STR_LIT>' , published2 ) <EOL> arxiv_dict2 = arxiv_dict <EOL> arxiv_dict2 [ '<STR_LIT>' ] = published2 <EOL> c = asyncio . create_task ( self . send_message_arxiv ( arxiv_dict2 ) ) <EOL> await c <EOL> print ( '<STR_LIT>' , exist ) <EOL> print ( '<STR_LIT>' ) <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' ) <EOL> detpap = [ arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] ] <EOL> if <NUM_LIT> == <NUM_LIT> : <EOL> print ( '<STR_LIT>' ) <EOL> certain_date = datetime ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> print ( '<STR_LIT>' , certain_date ) <EOL> c = asyncio . create_task ( sync_to_async ( utils . getallpaperstoredo ) ( certain_date ) ) <EOL> allpaperstoredo = await c <EOL> avoidids = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' <EOL> ] <EOL> storeidsa = [ ] <EOL> async for all in allpaperstoredo : <EOL> print ( '<STR_LIT>' , all ) <EOL> if all . arxiv_id not in avoidids : <EOL> storeidsa . append ( all . arxiv_id ) <EOL> c = asyncio . create_task ( utils . get_arxiv_metadata ( all . arxiv_id ) ) <EOL> arxivarrayf = await c <EOL> if len ( arxivarrayf ) > <NUM_LIT> : <EOL> keys = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> arxiv_dict = dict ( zip ( keys , arxivarrayf [ <NUM_LIT> : - <NUM_LIT> ] ) ) <EOL> exist = arxivarrayf [ <NUM_LIT> ] <EOL> data = arxivarrayf [ - <NUM_LIT> ] <EOL> detpap = [ arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] , arxiv_dict [ '<STR_LIT>' ] ] <EOL> rewrite = asyncio . create_task ( self . createindexwithsources ( all . arxiv_id , detpap , data ) ) <EOL> rewritey = await rewrite <EOL> print ( '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' , storeidsa ) <EOL> sumarra = asyncio . create_task ( self . computesummary ( v , l , detpap , message , data ) ) <EOL> sumarray = await sumarra <EOL> print ( '<STR_LIT>' ) <EOL> keysum = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> sum_dict = dict ( zip ( keysum , sumarray ) ) <EOL> print ( '<STR_LIT>' , sum_dict ) <EOL> c = asyncio . create_task ( sync_to_async ( self . updatesumpaper ) ( v , l , sum_dict ) ) <EOL> updatethesum = await c <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> c = asyncio . create_task ( utils . findclosestpapers ( v , l , <NUM_LIT> , settings . OPENAI_KEY ) ) <EOL> closest_papers = await c <EOL> print ( '<STR_LIT>' , closest_papers ) <EOL> c = asyncio . create_task ( sync_to_async ( utils . storeclosest ) ( v , closest_papers ) ) <EOL> storeclosest = await c <EOL> message [ "<STR_LIT>" ] = <NUM_LIT> <EOL> if l == '<STR_LIT>' : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> else : <EOL> message [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> c = asyncio . create_task ( self . send_message_now ( message ) ) <EOL> await c <EOL> cache . set ( self . arxiv_group_name , False ) <EOL> async def connect ( self ) : <EOL> self . arxiv_id = self . scope [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> self . language = self . scope [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> print ( '<STR_LIT>' , self . arxiv_id ) <EOL> print ( '<STR_LIT>' , self . language ) <EOL> self . arxiv_group_name = "<STR_LIT>" % self . arxiv_id <EOL> print ( '<STR_LIT>' , self . arxiv_group_name ) <EOL> await self . channel_layer . group_add ( self . arxiv_group_name , self . channel_name ) <EOL> await self . accept ( ) <EOL> print ( '<STR_LIT>' ) <EOL> async def receive ( self , text_data ) : <EOL> print ( '<STR_LIT>' , text_data ) <EOL> data = json . loads ( text_data ) <EOL> if '<STR_LIT>' in data : <EOL> command = data [ '<STR_LIT>' ] <EOL> if command == '<STR_LIT>' : <EOL> message = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> <EOL> } <EOL> v = self . arxiv_id <EOL> l = self . language <EOL> asyncio . create_task ( self . sendmessages ( v , l , message ) ) <EOL> elif command == '<STR_LIT>' : <EOL> message = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> <EOL> } <EOL> v = self . arxiv_id <EOL> l = self . language <EOL> asyncio . create_task ( self . sendclose ( v , l , message ) ) <EOL> else : <EOL> message = data [ "<STR_LIT>" ] <EOL> print ( '<STR_LIT>' , message ) <EOL> user = data [ "<STR_LIT>" ] <EOL> ip = data [ "<STR_LIT>" ] <EOL> selectedpapers = '<STR_LIT>' <EOL> if "<STR_LIT>" in data : <EOL> selectedpapers = data [ "<STR_LIT>" ] <EOL> print ( '<STR_LIT>' , selectedpapers ) <EOL> if "<STR_LIT>" in data : <EOL> countpaperwithlicenses = data [ "<STR_LIT>" ] <EOL> print ( '<STR_LIT>' , user ) <EOL> print ( '<STR_LIT>' ) <EOL> from langchain . memory import ConversationBufferMemory <EOL> memory = ConversationBufferMemory ( memory_key = "<STR_LIT>" , return_messages = True ) <EOL> c = asyncio . create_task ( utils . chatbot ( self . arxiv_id , self . language , message , settings . OPENAI_KEY , user = user , memory = memory , ip = ip , selectedpapers = selectedpapers , countpaperwithlicenses = countpaperwithlicenses ) ) <EOL> chatbot_text = await c <EOL> print ( '<STR_LIT>' , chatbot_text ) <EOL> if chatbot_text == None : <EOL> chatbot_text = "<STR_LIT>" <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : chatbot_text . lstrip ( "<STR_LIT>" ) <EOL> } ) ) <EOL> print ( '<STR_LIT>' , chatbot_text ) <EOL> async def progress_text_update ( self , event ) : <EOL> print ( '<STR_LIT>' , event [ '<STR_LIT>' ] ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def progress_arxiv_update ( self , event ) : <EOL> print ( '<STR_LIT>' ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def progress_sum_update ( self , event ) : <EOL> print ( '<STR_LIT>' ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def progress_notes_update ( self , event ) : <EOL> print ( '<STR_LIT>' ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def progress_laysum_update ( self , event ) : <EOL> print ( '<STR_LIT>' ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def progress_blog_update ( self , event ) : <EOL> print ( '<STR_LIT>' ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def progress_update ( self , event ) : <EOL> print ( '<STR_LIT>' ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : event [ '<STR_LIT>' ] <EOL> } ) ) <EOL> async def disconnect ( self , close_code ) : <EOL> print ( '<STR_LIT>' ) <EOL> cache . set ( self . arxiv_group_name , False ) <EOL> await self . send ( text_data = json . dumps ( { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } ) ) <EOL> await self . channel_layer . group_discard ( self . arxiv_group_name , self . channel_name ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == '<STR_LIT>' : <EOL> main ( ) <EOL> </s>
<s> from allauth . account . adapter import DefaultAccountAdapter <EOL> from allauth . utils import build_absolute_uri <EOL> class AccountAdapter ( DefaultAccountAdapter ) : <EOL> def get_email_confirmation_url ( self , request , emailconfirmation ) : <EOL> location = '<STR_LIT>' . format ( emailconfirmation . key ) <EOL> return build_absolute_uri ( None , location ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . TextField ( ) ) , <EOL> ( '<STR_LIT>' , models . BooleanField ( default = False ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , related_name = '<STR_LIT>' , to = '<STR_LIT>' ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . IntegerField ( default = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . test import TestCase <EOL> </s>
<s> from django . contrib import admin <EOL> from . models import Conversation , Message , Setting <EOL> @ admin . register ( Conversation ) <EOL> class ConversationAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> @ admin . register ( Message ) <EOL> class MessageAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> def get_conversation_topic ( self , obj ) : <EOL> return obj . conversation . topic <EOL> get_conversation_topic . short_description = '<STR_LIT>' <EOL> @ admin . register ( Setting ) <EOL> class SettingAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> def update_message_user ( apps , schema_editor ) : <EOL> Message = apps . get_model ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> Conversation = apps . get_model ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> for message in Message . objects . all ( ) : <EOL> conversation_id = message . conversation_id <EOL> conversation_obj = Conversation . objects . get ( id = conversation_id ) <EOL> user_id = conversation_obj . user_id <EOL> if user_id : <EOL> message . user_id = user_id <EOL> message . save ( ) <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . IntegerField ( default = <NUM_LIT> ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . ForeignKey ( default = <NUM_LIT> , on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) , <EOL> preserve_default = False , <EOL> ) , <EOL> migrations . RunPython ( update_message_user ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . BooleanField ( default = False ) , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . BinaryField ( null = True ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( default = '<STR_LIT>' , max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . ForeignKey ( blank = True , null = True , on_delete = django . db . models . deletion . CASCADE , to = '<STR_LIT>' ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> class SearchRequest : <EOL> def __init__ ( self , query : str , timerange : str = None , region : str = None , ua : str = None ) : <EOL> self . query = query <EOL> self . timerange = timerange <EOL> self . region = region <EOL> self . ua = ua <EOL> class SearchResponse : <EOL> def __init__ ( self , status : int , html : str , url : str ) : <EOL> self . status = status <EOL> self . html = html <EOL> self . url = url <EOL> class SearchResult : <EOL> def __init__ ( self , title : str , body : str , url : str ) : <EOL> self . title = title <EOL> self . body = body <EOL> self . url = url <EOL> </s>
<s> import os <EOL> from django . db . models . signals import post_migrate <EOL> from django . dispatch import receiver <EOL> from django . db . utils import OperationalError <EOL> from . models import Setting <EOL> @ receiver ( post_migrate ) <EOL> def load_default_settings ( sender , ** kwargs ) : <EOL> if sender . name == '<STR_LIT>' : <EOL> print ( '<STR_LIT>' ) <EOL> if not Setting . objects . filter ( name = '<STR_LIT>' ) . exists ( ) : <EOL> Setting . objects . create ( name = '<STR_LIT>' , value = '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' ) <EOL> if not Setting . objects . filter ( name = '<STR_LIT>' ) . exists ( ) : <EOL> Setting . objects . create ( name = '<STR_LIT>' , value = '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' ) <EOL> if not Setting . objects . filter ( name = '<STR_LIT>' ) . exists ( ) : <EOL> Setting . objects . create ( name = '<STR_LIT>' , value = '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' ) <EOL> if not Setting . objects . filter ( name = '<STR_LIT>' ) . exists ( ) : <EOL> Setting . objects . create ( name = '<STR_LIT>' , value = '<STR_LIT>' ) <EOL> print ( '<STR_LIT>' ) <EOL> if not Setting . objects . filter ( name = '<STR_LIT>' ) . exists ( ) : <EOL> env_key_val = os . environ . get ( '<STR_LIT>' , None ) <EOL> if env_key_val : <EOL> Setting . objects . create ( name = '<STR_LIT>' , value = env_key_val ) <EOL> print ( '<STR_LIT>' ) <EOL> </s>
<s> import logging <EOL> from django . db import models <EOL> from django . contrib . auth . models import User <EOL> logger = logging . getLogger ( __name__ ) <EOL> class EmbeddingDocument ( models . Model ) : <EOL> user = models . ForeignKey ( User , on_delete = models . CASCADE ) <EOL> faiss_store = models . BinaryField ( null = True ) <EOL> title = models . CharField ( max_length = <NUM_LIT> , default = "<STR_LIT>" ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> class Conversation ( models . Model ) : <EOL> user = models . ForeignKey ( User , on_delete = models . CASCADE ) <EOL> topic = models . CharField ( max_length = <NUM_LIT> ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> class Message ( models . Model ) : <EOL> conversation = models . ForeignKey ( Conversation , on_delete = models . CASCADE ) <EOL> user = models . ForeignKey ( User , on_delete = models . CASCADE ) <EOL> message = models . TextField ( ) <EOL> messages = models . TextField ( default = '<STR_LIT>' ) <EOL> tokens = models . IntegerField ( default = <NUM_LIT> ) <EOL> is_bot = models . BooleanField ( default = False ) <EOL> is_disabled = models . BooleanField ( default = False ) <EOL> message_type = models . IntegerField ( default = <NUM_LIT> ) <EOL> embedding_message_doc = models . ForeignKey ( EmbeddingDocument , on_delete = models . CASCADE , null = True , blank = True ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> plain_message_type = <NUM_LIT> <EOL> hidden_message_type = <NUM_LIT> <EOL> temp_message_type = <NUM_LIT> <EOL> web_search_context_message_type = <NUM_LIT> <EOL> arxiv_context_message_type = <NUM_LIT> <EOL> doc_context_message_type = <NUM_LIT> <EOL> def save ( self , * args , ** kwargs ) : <EOL> super ( ) . save ( * args , ** kwargs ) <EOL> def delete ( self , * args , ** kwargs ) : <EOL> if self . message_type % <NUM_LIT> > <NUM_LIT> : <EOL> pass <EOL> super ( ) . delete ( * args , ** kwargs ) <EOL> class Prompt ( models . Model ) : <EOL> user = models . ForeignKey ( User , on_delete = models . CASCADE ) <EOL> title = models . TextField ( null = True , blank = True ) <EOL> prompt = models . TextField ( ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> updated_at = models . DateTimeField ( auto_now = True ) <EOL> class Setting ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> ) <EOL> value = models . CharField ( max_length = <NUM_LIT> ) <EOL> </s>
<s> from django . contrib import admin <EOL> from . models import TokenUsage <EOL> @ admin . register ( TokenUsage ) <EOL> class TokenUsageAdmin ( admin . ModelAdmin ) : <EOL> list_display = ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class ProviderConfig ( AppConfig ) : <EOL> default_auto_field = '<STR_LIT>' <EOL> name = '<STR_LIT>' <EOL> </s>
<s> import re <EOL> from typing import List <EOL> from datetime import datetime <EOL> from . search_abc import SearchResult <EOL> def remove_commands ( query : str ) -> str : <EOL> query = re . sub ( r'<STR_LIT>' , '<STR_LIT>' , query ) <EOL> query = re . sub ( r'<STR_LIT>' , '<STR_LIT>' , query ) <EOL> return query <EOL> def compile_prompt ( results : List [ SearchResult ] , query : str , default_prompt : str ) -> str : <EOL> formatted_results = format_web_results ( results ) <EOL> current_date = datetime . now ( ) . strftime ( "<STR_LIT>" ) <EOL> print ( default_prompt ) <EOL> prompt = replace_variables ( default_prompt , { <EOL> '<STR_LIT>' : formatted_results , <EOL> '<STR_LIT>' : remove_commands ( query ) , <EOL> '<STR_LIT>' : current_date <EOL> } ) <EOL> return prompt <EOL> def format_web_results ( results : List [ SearchResult ] ) -> str : <EOL> if len ( results ) == <NUM_LIT> : <EOL> return "<STR_LIT>" <EOL> formatted_results = "<STR_LIT>" <EOL> counter = <NUM_LIT> <EOL> for result in results : <EOL> formatted_results += f"<STR_LIT>" <EOL> counter += <NUM_LIT> <EOL> return formatted_results <EOL> def replace_variables ( prompt : str , variables : dict ) -> str : <EOL> new_prompt = prompt <EOL> for key , value in variables . items ( ) : <EOL> try : <EOL> new_prompt = new_prompt . replace ( key , value ) <EOL> except Exception as error : <EOL> print ( "<STR_LIT>" , error ) <EOL> return new_prompt <EOL> </s>
<s> from django . db import models <EOL> from django . contrib . auth . models import User <EOL> class TokenUsage ( models . Model ) : <EOL> user = models . ForeignKey ( User , on_delete = models . CASCADE ) <EOL> tokens = models . IntegerField ( default = <NUM_LIT> ) <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == '<STR_LIT>' : <EOL> main ( ) <EOL> </s>
<s> import os <EOL> import sys <EOL> import pickle <EOL> import json <EOL> import logging <EOL> import hashlib <EOL> from typing import Any , Dict , List , Optional <EOL> import arxiv <EOL> from langchain . schema import Document <EOL> from . models import Conversation , Message , Setting , Prompt , EmbeddingDocument <EOL> from . llm import text_splitter , embedding_model , pickle_faiss <EOL> logger = logging . getLogger ( __name__ ) <EOL> from utils . search_prompt import compile_prompt <EOL> from utils . duckduckgo_search import web_search , SearchRequest <EOL> def _web_search ( message , args ) : <EOL> search_results = web_search ( SearchRequest ( message , ua = args [ '<STR_LIT>' ] ) , num_results = <NUM_LIT> ) <EOL> message_content = compile_prompt ( search_results , message , default_prompt = args [ '<STR_LIT>' ] ) <EOL> return message_content <EOL> arxiv_client = arxiv . Client ( <EOL> page_size = <NUM_LIT> , <EOL> delay_seconds = <NUM_LIT> , <EOL> num_retries = <NUM_LIT> , <EOL> ) <EOL> def _hacky_hash ( some_string ) : <EOL> _hash = hashlib . md5 ( some_string . encode ( "<STR_LIT>" ) ) . hexdigest ( ) <EOL> return _hash <EOL> def _arxiv_load ( <EOL> query : Optional [ str ] = '<STR_LIT>' , <EOL> id_list : Optional [ str | List [ str ] ] = [ ] , <EOL> max_results : int = <NUM_LIT> , <EOL> sort_by : Optional [ Any ] = arxiv . SortCriterion . Relevance , <EOL> papers_dir : Optional [ str ] = "<STR_LIT>" , <EOL> load_all_available_meta : bool = False , <EOL> ) -> List [ Document ] : <EOL> if isinstance ( id_list , str ) : <EOL> id_list = id_list . split ( '<STR_LIT>' ) <EOL> if query : <EOL> query = query [ : <NUM_LIT> ] <EOL> try : <EOL> import fitz <EOL> except ImportError : <EOL> raise ValueError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) <EOL> try : <EOL> docs : List [ Document ] = [ ] <EOL> arxiv_search = arxiv . Search ( <EOL> query = query , <EOL> id_list = id_list , <EOL> max_results = max_results , <EOL> sort_by = sort_by <EOL> ) <EOL> search_results = list ( arxiv_client . results ( arxiv_search ) ) <EOL> if not os . path . exists ( papers_dir ) : <EOL> os . makedirs ( papers_dir ) <EOL> for result in search_results : <EOL> try : <EOL> paper = result <EOL> filename = f"<STR_LIT>" <EOL> doc_file_name : str = os . path . join ( papers_dir , filename ) <EOL> paper . download_pdf ( dirpath = papers_dir , filename = filename ) <EOL> logging . debug ( f"<STR_LIT>" ) <EOL> with fitz . open ( doc_file_name ) as doc_file : <EOL> text : str = "<STR_LIT>" . join ( page . get_text ( ) for page in doc_file ) <EOL> add_meta = ( <EOL> { <EOL> "<STR_LIT>" : result . entry_id , <EOL> "<STR_LIT>" : str ( result . published . date ( ) ) , <EOL> "<STR_LIT>" : result . comment , <EOL> "<STR_LIT>" : result . journal_ref , <EOL> "<STR_LIT>" : result . doi , <EOL> "<STR_LIT>" : result . primary_category , <EOL> "<STR_LIT>" : result . categories , <EOL> "<STR_LIT>" : [ link . href for link in result . links ] , <EOL> } <EOL> if load_all_available_meta <EOL> else { } <EOL> ) <EOL> doc = Document ( <EOL> page_content = text , <EOL> metadata = ( <EOL> { <EOL> "<STR_LIT>" : str ( result . updated . date ( ) ) , <EOL> "<STR_LIT>" : result . title , <EOL> "<STR_LIT>" : "<STR_LIT>" . join ( <EOL> a . name for a in result . authors <EOL> ) , <EOL> "<STR_LIT>" : result . summary , <EOL> ** add_meta , <EOL> } <EOL> ) , <EOL> ) <EOL> docs . append ( doc ) <EOL> except FileNotFoundError as f_ex : <EOL> logger . debug ( f_ex ) <EOL> try : <EOL> for f in os . listdir ( papers_dir ) : <EOL> os . remove ( os . path . join ( papers_dir , f ) ) <EOL> logging . debug ( f"<STR_LIT>" ) <EOL> logging . debug ( f"<STR_LIT>" ) <EOL> except OSError : <EOL> print ( "<STR_LIT>" ) <EOL> return docs <EOL> except Exception as ex : <EOL> logger . debug ( "<STR_LIT>" , ex ) <EOL> return [ ] <EOL> def _arxiv ( message , args ) : <EOL> from langchain . vectorstores import FAISS <EOL> ID = message . strip ( ) <EOL> message = '<STR_LIT>' + ID <EOL> logger . debug ( '<STR_LIT>' , message , args ) <EOL> try : <EOL> docs = _arxiv_load ( id_list = [ ID ] , max_results = <NUM_LIT> ) <EOL> if len ( docs ) == <NUM_LIT> : <EOL> raise RuntimeError ( ) <EOL> except Exception as e : <EOL> logger . error ( '<STR_LIT>' , ID ) <EOL> return f'<STR_LIT>' <EOL> logger . debug ( '<STR_LIT>' , len ( docs ) ) <EOL> documents = text_splitter . split_documents ( docs ) <EOL> db = FAISS . from_documents ( documents , embedding_model . function ) <EOL> faiss_store = pickle_faiss ( db ) <EOL> doc_obj = EmbeddingDocument ( <EOL> user = args [ '<STR_LIT>' ] , <EOL> faiss_store = faiss_store , <EOL> title = docs [ <NUM_LIT> ] . metadata [ '<STR_LIT>' ] , <EOL> ) <EOL> doc_obj . save ( ) <EOL> args [ '<STR_LIT>' ] = doc_obj . id <EOL> args [ '<STR_LIT>' ] = docs [ <NUM_LIT> ] . metadata [ '<STR_LIT>' ] <EOL> message += '<STR_LIT>' + docs [ <NUM_LIT> ] . metadata [ '<STR_LIT>' ] <EOL> return message <EOL> TOOL_LIST = { <EOL> '<STR_LIT>' : _web_search , <EOL> '<STR_LIT>' : _arxiv , <EOL> } <EOL> </s>
<s> from django . db import models <EOL> </s>
<s> import os <EOL> from datetime import timedelta <EOL> import dj_database_url <EOL> from pathlib import Path <EOL> from dotenv import load_dotenv <EOL> load_dotenv ( ) <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent <EOL> SECRET_KEY = '<STR_LIT>' <EOL> DEBUG = os . getenv ( '<STR_LIT>' , False ) == '<STR_LIT>' <EOL> ALLOWED_HOSTS = [ '<STR_LIT>' ] <EOL> app_domains = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) . split ( '<STR_LIT>' ) <EOL> CSRF_TRUSTED_ORIGINS = [ ] <EOL> for app_domain in app_domains : <EOL> CSRF_TRUSTED_ORIGINS . append ( '<STR_LIT>' + app_domain ) <EOL> CSRF_TRUSTED_ORIGINS . append ( '<STR_LIT>' + app_domain ) <EOL> INSTALLED_APPS = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' <EOL> ] <EOL> MIDDLEWARE = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> ROOT_URLCONF = '<STR_LIT>' <EOL> TEMPLATES = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ ] , <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = '<STR_LIT>' <EOL> db_config = dj_database_url . config ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if db_config . get ( '<STR_LIT>' ) == '<STR_LIT>' : <EOL> db_config [ '<STR_LIT>' ] = { '<STR_LIT>' : '<STR_LIT>' } <EOL> DATABASES = { <EOL> '<STR_LIT>' : db_config <EOL> } <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> ] <EOL> LANGUAGE_CODE = '<STR_LIT>' <EOL> TIME_ZONE = '<STR_LIT>' <EOL> USE_I18N = True <EOL> USE_TZ = True <EOL> STATIC_URL = '<STR_LIT>' <EOL> STATIC_ROOT = os . path . join ( BASE_DIR , STATIC_URL ) <EOL> DEFAULT_AUTO_FIELD = '<STR_LIT>' <EOL> REST_FRAMEWORK = { <EOL> '<STR_LIT>' : [ <EOL> '<STR_LIT>' <EOL> ] <EOL> } <EOL> SITE_ID = <NUM_LIT> <EOL> REST_AUTH = { <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : False , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } <EOL> SIMPLE_JWT = { <EOL> "<STR_LIT>" : timedelta ( days = <NUM_LIT> ) , <EOL> } <EOL> ACCOUNT_ADAPTER = '<STR_LIT>' <EOL> ACCOUNT_EMAIL_VERIFICATION = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> EMAIL_BACKEND = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> EMAIL_HOST = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> EMAIL_PORT = os . getenv ( '<STR_LIT>' , <NUM_LIT> ) <EOL> EMAIL_HOST_USER = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> EMAIL_HOST_PASSWORD = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> EMAIL_USE_TLS = os . getenv ( '<STR_LIT>' , True ) == '<STR_LIT>' <EOL> EMAIL_USE_SSL = os . getenv ( '<STR_LIT>' , False ) == '<STR_LIT>' <EOL> DEFAULT_FROM_EMAIL = os . getenv ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> </s>
<s> from django . urls import path , re_path , include <EOL> from django . views . generic import TemplateView <EOL> from dj_rest_auth . registration . views import VerifyEmailView , ResendEmailVerificationView <EOL> from . views import RegistrationView <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> path ( '<STR_LIT>' , RegistrationView . as_view ( ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , VerifyEmailView . as_view ( ) , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , ResendEmailVerificationView . as_view ( ) , name = "<STR_LIT>" ) , <EOL> re_path ( <EOL> r'<STR_LIT>' , TemplateView . as_view ( ) , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> path ( <EOL> '<STR_LIT>' , TemplateView . as_view ( ) , <EOL> name = '<STR_LIT>' , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> import sys <EOL> import asyncio <EOL> import json <EOL> from hashlib import sha256 <EOL> import tempfile <EOL> import base64 <EOL> import uuid <EOL> import openai <EOL> import time <EOL> import datetime <EOL> import tiktoken <EOL> import logging <EOL> from provider . models import ApiKey <EOL> from stats . models import TokenUsage <EOL> from . models import Conversation , Message , EmbeddingDocument , Setting , Prompt <EOL> from django . conf import settings <EOL> from django . http import StreamingHttpResponse <EOL> from django . forms . models import model_to_dict <EOL> from rest_framework import viewsets , status <EOL> from rest_framework . response import Response <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from rest_framework_simplejwt . authentication import JWTAuthentication <EOL> from rest_framework . decorators import api_view , authentication_classes , permission_classes , action <EOL> from . serializers import ConversationSerializer , MessageSerializer , PromptSerializer , EmbeddingDocumentSerializer , SettingSerializer <EOL> from utils . search_prompt import compile_prompt <EOL> from utils . duckduckgo_search import web_search , SearchRequest <EOL> from . tools import TOOL_LIST <EOL> from . llm import get_embedding_document , unpick_faiss , langchain_doc_chat <EOL> from . llm import setup_openai_env as llm_openai_env <EOL> from . llm import setup_openai_model as llm_openai_model <EOL> logger = logging . getLogger ( __name__ ) <EOL> class SettingViewSet ( viewsets . ModelViewSet ) : <EOL> serializer_class = SettingSerializer <EOL> def get_queryset ( self ) : <EOL> available_names = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> return Setting . objects . filter ( name__in = available_names ) <EOL> def http_method_not_allowed ( self , request , * args , ** kwargs ) : <EOL> if request . method != '<STR_LIT>' : <EOL> return Response ( status = status . HTTP_405_METHOD_NOT_ALLOWED ) <EOL> return super ( ) . http_method_not_allowed ( request , * args , ** kwargs ) <EOL> class ConversationViewSet ( viewsets . ModelViewSet ) : <EOL> serializer_class = ConversationSerializer <EOL> permission_classes = [ IsAuthenticated ] <EOL> def get_queryset ( self ) : <EOL> return Conversation . objects . filter ( user = self . request . user ) . order_by ( '<STR_LIT>' ) <EOL> @ action ( detail = False , methods = [ '<STR_LIT>' ] ) <EOL> def delete_all ( self , request ) : <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) ) <EOL> queryset . delete ( ) <EOL> return Response ( status = <NUM_LIT> ) <EOL> class MessageViewSet ( viewsets . ModelViewSet ) : <EOL> serializer_class = MessageSerializer <EOL> permission_classes = [ IsAuthenticated ] <EOL> def get_queryset ( self ) : <EOL> queryset = Message . objects . filter ( user = self . request . user ) . order_by ( '<STR_LIT>' ) <EOL> conversationId = self . request . query_params . get ( '<STR_LIT>' ) <EOL> if conversationId : <EOL> queryset = queryset . filter ( conversation_id = conversationId ) . order_by ( '<STR_LIT>' ) <EOL> return queryset <EOL> return queryset <EOL> class PromptViewSet ( viewsets . ModelViewSet ) : <EOL> serializer_class = PromptSerializer <EOL> permission_classes = [ IsAuthenticated ] <EOL> def get_queryset ( self ) : <EOL> return Prompt . objects . filter ( user = self . request . user ) . order_by ( '<STR_LIT>' ) <EOL> def create ( self , request , * args , ** kwargs ) : <EOL> serializer = self . get_serializer ( data = request . data ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> serializer . validated_data [ '<STR_LIT>' ] = request . user <EOL> self . perform_create ( serializer ) <EOL> headers = self . get_success_headers ( serializer . data ) <EOL> return Response ( serializer . data , status = status . HTTP_201_CREATED , headers = headers ) <EOL> @ action ( detail = False , methods = [ '<STR_LIT>' ] ) <EOL> def delete_all ( self , request ) : <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) ) <EOL> queryset . delete ( ) <EOL> return Response ( status = <NUM_LIT> ) <EOL> class EmbeddingDocumentViewSet ( viewsets . ModelViewSet ) : <EOL> serializer_class = EmbeddingDocumentSerializer <EOL> permission_classes = [ IsAuthenticated ] <EOL> def get_queryset ( self ) : <EOL> return EmbeddingDocument . objects . filter ( user = self . request . user ) . order_by ( '<STR_LIT>' ) <EOL> def create ( self , request , * args , ** kwargs ) : <EOL> serializer = self . get_serializer ( data = request . data ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> serializer . validated_data [ '<STR_LIT>' ] = request . user <EOL> self . perform_create ( serializer ) <EOL> headers = self . get_success_headers ( serializer . data ) <EOL> return Response ( serializer . data , status = status . HTTP_201_CREATED , headers = headers ) <EOL> def get_embedding ( self ) : <EOL> openai_api_key = self . request . data . get ( '<STR_LIT>' , None ) <EOL> api_key = None <EOL> if openai_api_key is None : <EOL> openai_api_key = get_api_key_from_setting ( ) <EOL> if openai_api_key is None : <EOL> api_key = get_api_key ( ) <EOL> if api_key : <EOL> openai_api_key = api_key . key <EOL> else : <EOL> return Response ( <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } , <EOL> status = status . HTTP_400_BAD_REQUEST <EOL> ) <EOL> my_openai = get_openai ( openai_api_key ) <EOL> llm_openai_env ( my_openai . api_base , my_openai . api_key ) <EOL> file_data = self . request . data . get ( '<STR_LIT>' ) <EOL> file_mime , file_url = file_data . split ( '<STR_LIT>' ) <EOL> file_mime = file_mime . split ( '<STR_LIT>' ) [ <NUM_LIT> ] . split ( '<STR_LIT>' ) [ <NUM_LIT> ] <EOL> file_bytes = base64 . b64decode ( file_url ) <EOL> logger . debug ( '<STR_LIT>' , self . request . user , file_mime , self . request . data [ '<STR_LIT>' ] ) <EOL> with tempfile . TemporaryDirectory ( ) as tmpdirname : <EOL> if '<STR_LIT>' in file_mime : <EOL> mode = '<STR_LIT>' <EOL> else : <EOL> mode = '<STR_LIT>' <EOL> dump_basename = '<STR_LIT>' + str ( uuid . uuid4 ( ) ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> dump_name = os . path . join ( tmpdirname , dump_basename ) <EOL> with open ( dump_name , mode ) as f : <EOL> f . write ( file_bytes ) <EOL> faiss_store = get_embedding_document ( dump_name , file_mime ) <EOL> return faiss_store <EOL> def perform_create ( self , serializer ) : <EOL> faiss_store = self . get_embedding ( ) <EOL> serializer . validated_data [ '<STR_LIT>' ] = faiss_store <EOL> serializer . save ( ) <EOL> def perform_update ( self , serializer ) : <EOL> faiss_store = self . get_embedding ( ) <EOL> serializer . validated_data [ '<STR_LIT>' ] = faiss_store <EOL> serializer . save ( ) <EOL> @ action ( detail = False , methods = [ '<STR_LIT>' ] ) <EOL> def delete_all ( self , request ) : <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) ) <EOL> queryset . delete ( ) <EOL> return Response ( status = <NUM_LIT> ) <EOL> MODELS = { <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : <NUM_LIT> <EOL> } <EOL> } <EOL> def sse_pack ( event , data ) : <EOL> packet = "<STR_LIT>" % event <EOL> packet += "<STR_LIT>" % json . dumps ( data ) <EOL> packet += "<STR_LIT>" <EOL> return packet <EOL> @ api_view ( [ '<STR_LIT>' ] ) <EOL> @ permission_classes ( [ IsAuthenticated ] ) <EOL> def gen_title ( request ) : <EOL> conversation_id = request . data . get ( '<STR_LIT>' ) <EOL> prompt = request . data . get ( '<STR_LIT>' ) <EOL> conversation_obj = Conversation . objects . get ( id = conversation_id ) <EOL> message = Message . objects . filter ( conversation_id = conversation_id ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> openai_api_key = request . data . get ( '<STR_LIT>' ) <EOL> api_key = None <EOL> if openai_api_key is None : <EOL> openai_api_key = get_api_key_from_setting ( ) <EOL> if openai_api_key is None : <EOL> api_key = get_api_key ( ) <EOL> if api_key : <EOL> openai_api_key = api_key . key <EOL> else : <EOL> return Response ( <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } , <EOL> status = status . HTTP_400_BAD_REQUEST <EOL> ) <EOL> if prompt is None : <EOL> prompt = '<STR_LIT>' <EOL> messages = [ <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : prompt + message . message } , <EOL> ] <EOL> my_openai = get_openai ( openai_api_key ) <EOL> try : <EOL> openai_response = my_openai . ChatCompletion . create ( <EOL> model = '<STR_LIT>' , <EOL> messages = messages , <EOL> max_tokens = <NUM_LIT> , <EOL> temperature = <NUM_LIT> , <EOL> top_p = <NUM_LIT> , <EOL> frequency_penalty = <NUM_LIT> , <EOL> presence_penalty = <NUM_LIT> , <EOL> ) <EOL> completion_text = openai_response [ '<STR_LIT>' ] [ <NUM_LIT> ] [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> title = completion_text . strip ( ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> increase_token_usage ( request . user , openai_response [ '<STR_LIT>' ] [ '<STR_LIT>' ] , api_key ) <EOL> except Exception as e : <EOL> print ( e ) <EOL> title = '<STR_LIT>' <EOL> conversation_obj . topic = title <EOL> conversation_obj . save ( ) <EOL> return Response ( { <EOL> '<STR_LIT>' : title <EOL> } ) <EOL> @ api_view ( [ '<STR_LIT>' ] ) <EOL> @ permission_classes ( [ IsAuthenticated ] ) <EOL> def upload_conversations ( request ) : <EOL> user = request . user <EOL> import_err_msg = '<STR_LIT>' <EOL> conversation_ids = [ ] <EOL> try : <EOL> imports = request . data . get ( '<STR_LIT>' ) <EOL> conversations = [ ] <EOL> for conversation in imports : <EOL> topic = conversation . get ( '<STR_LIT>' , None ) <EOL> messages = [ ] <EOL> for message in conversation . get ( '<STR_LIT>' ) : <EOL> msg = { } <EOL> msg [ '<STR_LIT>' ] = message [ '<STR_LIT>' ] <EOL> msg [ '<STR_LIT>' ] = message [ '<STR_LIT>' ] <EOL> messages . append ( msg ) <EOL> if len ( messages ) > <NUM_LIT> : <EOL> conversations . append ( { <EOL> '<STR_LIT>' : topic , <EOL> '<STR_LIT>' : messages , <EOL> } ) <EOL> for conversation in conversations : <EOL> topic = conversation [ '<STR_LIT>' ] <EOL> messages = conversation [ '<STR_LIT>' ] <EOL> cobj = Conversation ( <EOL> topic = topic if topic else '<STR_LIT>' , <EOL> user = user , <EOL> ) <EOL> cobj . save ( ) <EOL> conversation_ids . append ( cobj . id ) <EOL> for idx , msg in enumerate ( messages ) : <EOL> try : <EOL> Message . _meta . get_field ( '<STR_LIT>' ) <EOL> mobj = Message ( <EOL> user = user , <EOL> conversation = cobj , <EOL> message = msg [ '<STR_LIT>' ] , <EOL> is_bot = msg [ '<STR_LIT>' ] != '<STR_LIT>' , <EOL> messages = messages [ : idx + <NUM_LIT> ] , <EOL> ) <EOL> except : <EOL> mobj = Message ( <EOL> conversation = cobj , <EOL> message = msg [ '<STR_LIT>' ] , <EOL> is_bot = msg [ '<STR_LIT>' ] != '<STR_LIT>' , <EOL> messages = messages [ : idx + <NUM_LIT> ] , <EOL> ) <EOL> mobj . save ( ) <EOL> except Exception as e : <EOL> logger . debug ( e ) <EOL> return Response ( <EOL> { '<STR_LIT>' : import_err_msg } , <EOL> status = status . HTTP_400_BAD_REQUEST <EOL> ) <EOL> return Response ( conversation_ids ) <EOL> @ api_view ( [ '<STR_LIT>' ] ) <EOL> @ permission_classes ( [ IsAuthenticated ] ) <EOL> def conversation ( request ) : <EOL> model_name = request . data . get ( '<STR_LIT>' ) <EOL> message_object_list = request . data . get ( '<STR_LIT>' ) <EOL> conversation_id = request . data . get ( '<STR_LIT>' ) <EOL> request_max_response_tokens = request . data . get ( '<STR_LIT>' ) <EOL> system_content = request . data . get ( '<STR_LIT>' ) <EOL> if not system_content : <EOL> system_content = "<STR_LIT>" <EOL> temperature = request . data . get ( '<STR_LIT>' , <NUM_LIT> ) <EOL> top_p = request . data . get ( '<STR_LIT>' , <NUM_LIT> ) <EOL> frequency_penalty = request . data . get ( '<STR_LIT>' , <NUM_LIT> ) <EOL> presence_penalty = request . data . get ( '<STR_LIT>' , <NUM_LIT> ) <EOL> web_search_params = request . data . get ( '<STR_LIT>' ) <EOL> openai_api_key = request . data . get ( '<STR_LIT>' ) <EOL> frugal_mode = request . data . get ( '<STR_LIT>' , False ) <EOL> message_object = message_object_list [ - <NUM_LIT> ] <EOL> message_type = message_object . get ( '<STR_LIT>' , <NUM_LIT> ) <EOL> tool_name = message_object . get ( '<STR_LIT>' , None ) <EOL> tool_args = message_object . get ( '<STR_LIT>' , None ) <EOL> if tool_name : <EOL> tool = { '<STR_LIT>' : tool_name , '<STR_LIT>' : tool_args } <EOL> else : <EOL> tool = None <EOL> logger . debug ( '<STR_LIT>' , conversation_id , message_object_list ) <EOL> api_key = None <EOL> if openai_api_key is None : <EOL> openai_api_key = get_api_key_from_setting ( ) <EOL> if openai_api_key is None : <EOL> api_key = get_api_key ( ) <EOL> if api_key : <EOL> openai_api_key = api_key . key <EOL> else : <EOL> return Response ( <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' <EOL> } , <EOL> status = status . HTTP_400_BAD_REQUEST <EOL> ) <EOL> my_openai = get_openai ( openai_api_key ) <EOL> llm_openai_env ( my_openai . api_base , my_openai . api_key ) <EOL> model = get_current_model ( model_name , request_max_response_tokens ) <EOL> llm_openai_model ( model ) <EOL> try : <EOL> messages = build_messages ( model , request . user , conversation_id , message_object_list , web_search_params , system_content , frugal_mode , tool , message_type ) <EOL> new_doc_id = messages . get ( '<STR_LIT>' , None ) <EOL> new_doc_title = messages . get ( '<STR_LIT>' , None ) <EOL> logger . debug ( '<STR_LIT>' , messages , new_doc_id , new_doc_title ) <EOL> except Exception as e : <EOL> print ( e ) <EOL> return Response ( <EOL> { <EOL> '<STR_LIT>' : e <EOL> } , <EOL> status = status . HTTP_400_BAD_REQUEST <EOL> ) <EOL> def stream_content ( ) : <EOL> try : <EOL> if messages [ '<STR_LIT>' ] : <EOL> openai_response = my_openai . ChatCompletion . create ( <EOL> model = model [ '<STR_LIT>' ] , <EOL> messages = messages [ '<STR_LIT>' ] , <EOL> max_tokens = model [ '<STR_LIT>' ] , <EOL> temperature = temperature , <EOL> top_p = top_p , <EOL> frequency_penalty = frequency_penalty , <EOL> presence_penalty = presence_penalty , <EOL> stream = True , <EOL> ) <EOL> except Exception as e : <EOL> yield sse_pack ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : str ( e ) <EOL> } ) <EOL> print ( '<STR_LIT>' , e ) <EOL> return <EOL> if conversation_id : <EOL> conversation_obj = Conversation . objects . get ( id = conversation_id ) <EOL> else : <EOL> conversation_obj = Conversation ( user = request . user ) <EOL> conversation_obj . save ( ) <EOL> try : <EOL> for m in message_object_list : <EOL> message_obj = create_message ( <EOL> user = request . user , <EOL> conversation_id = conversation_obj . id , <EOL> message = m [ '<STR_LIT>' ] , <EOL> message_type = m . get ( '<STR_LIT>' , <NUM_LIT> ) , <EOL> embedding_doc_id = m . get ( '<STR_LIT>' , <NUM_LIT> ) , <EOL> messages = messages [ '<STR_LIT>' ] , <EOL> tokens = messages [ '<STR_LIT>' ] , <EOL> api_key = api_key <EOL> ) <EOL> yield sse_pack ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : message_obj . id , <EOL> } ) <EOL> except Exception as e : <EOL> return Response ( <EOL> { <EOL> '<STR_LIT>' : e <EOL> } , <EOL> status = status . HTTP_400_BAD_REQUEST <EOL> ) <EOL> collected_events = [ ] <EOL> completion_text = '<STR_LIT>' <EOL> if messages [ '<STR_LIT>' ] : <EOL> for event in openai_response : <EOL> collected_events . append ( event ) <EOL> if event [ '<STR_LIT>' ] [ <NUM_LIT> ] [ '<STR_LIT>' ] is not None : <EOL> break <EOL> if '<STR_LIT>' in event [ '<STR_LIT>' ] [ <NUM_LIT> ] [ '<STR_LIT>' ] : <EOL> event_text = event [ '<STR_LIT>' ] [ <NUM_LIT> ] [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> completion_text += event_text <EOL> yield sse_pack ( '<STR_LIT>' , { '<STR_LIT>' : event_text } ) <EOL> bot_message_type = Message . plain_message_type <EOL> ai_message_token = num_tokens_from_text ( completion_text , model [ '<STR_LIT>' ] ) <EOL> else : <EOL> if new_doc_title : <EOL> completion_text = f'<STR_LIT>' <EOL> else : <EOL> completion_text = '<STR_LIT>' <EOL> yield sse_pack ( '<STR_LIT>' , { '<STR_LIT>' : completion_text } ) <EOL> bot_message_type = Message . temp_message_type <EOL> ai_message_token = <NUM_LIT> <EOL> ai_message_obj = create_message ( <EOL> user = request . user , <EOL> conversation_id = conversation_obj . id , <EOL> message = completion_text , <EOL> message_type = bot_message_type , <EOL> is_bot = True , <EOL> tokens = ai_message_token , <EOL> api_key = api_key <EOL> ) <EOL> yield sse_pack ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : ai_message_obj . id , <EOL> '<STR_LIT>' : conversation_obj . id , <EOL> '<STR_LIT>' : new_doc_id , <EOL> } ) <EOL> def stream_langchain ( ) : <EOL> if messages [ '<STR_LIT>' ] : <EOL> try : <EOL> gen = langchain_doc_chat ( messages ) <EOL> except Exception as e : <EOL> yield sse_pack ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : str ( e ) <EOL> } ) <EOL> logger . debug ( '<STR_LIT>' , e ) <EOL> if conversation_id : <EOL> conversation_obj = Conversation . objects . get ( id = conversation_id ) <EOL> else : <EOL> conversation_obj = Conversation ( user = request . user ) <EOL> conversation_obj . save ( ) <EOL> try : <EOL> for m in message_object_list : <EOL> message_obj = create_message ( <EOL> user = request . user , <EOL> conversation_id = conversation_obj . id , <EOL> message = m [ '<STR_LIT>' ] , <EOL> message_type = m . get ( '<STR_LIT>' , <NUM_LIT> ) , <EOL> embedding_doc_id = m . get ( '<STR_LIT>' , <NUM_LIT> ) , <EOL> messages = messages [ '<STR_LIT>' ] , <EOL> tokens = messages [ '<STR_LIT>' ] , <EOL> api_key = api_key <EOL> ) <EOL> yield sse_pack ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : message_obj . id , <EOL> } ) <EOL> except Exception as e : <EOL> return Response ( { '<STR_LIT>' : e } , status = status . HTTP_400_BAD_REQUEST ) <EOL> completion_text = '<STR_LIT>' <EOL> if messages [ '<STR_LIT>' ] : <EOL> for event in gen : <EOL> if event [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> pass <EOL> else : <EOL> text = event [ '<STR_LIT>' ] <EOL> if text : <EOL> completion_text += str ( text ) <EOL> yield sse_pack ( '<STR_LIT>' , { '<STR_LIT>' : str ( text ) } ) <EOL> bot_message_type = Message . plain_message_type <EOL> else : <EOL> if new_doc_title : <EOL> completion_text = f'<STR_LIT>' <EOL> else : <EOL> completion_text = '<STR_LIT>' <EOL> yield sse_pack ( '<STR_LIT>' , { '<STR_LIT>' : completion_text } ) <EOL> bot_message_type = Message . temp_message_type <EOL> logger . debug ( '<STR_LIT>' , completion_text ) <EOL> ai_message_token = num_tokens_from_text ( completion_text , model [ '<STR_LIT>' ] ) <EOL> ai_message_obj = create_message ( <EOL> user = request . user , <EOL> conversation_id = conversation_obj . id , <EOL> message = completion_text , <EOL> message_type = bot_message_type , <EOL> is_bot = True , <EOL> tokens = ai_message_token , <EOL> api_key = api_key <EOL> ) <EOL> yield sse_pack ( '<STR_LIT>' , { <EOL> '<STR_LIT>' : ai_message_obj . id , <EOL> '<STR_LIT>' : conversation_obj . id , <EOL> '<STR_LIT>' : new_doc_id , <EOL> } ) <EOL> if messages . get ( '<STR_LIT>' , None ) and not web_search_params : <EOL> response = StreamingHttpResponse ( <EOL> stream_langchain ( ) , <EOL> content_type = '<STR_LIT>' <EOL> ) <EOL> else : <EOL> response = StreamingHttpResponse ( <EOL> stream_content ( ) , <EOL> content_type = '<STR_LIT>' <EOL> ) <EOL> response [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> response [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> return response <EOL> @ api_view ( [ '<STR_LIT>' ] ) <EOL> @ permission_classes ( [ IsAuthenticated ] ) <EOL> def documents ( request ) : <EOL> pass <EOL> def create_message ( user , conversation_id , message , is_bot = False , message_type = <NUM_LIT> , embedding_doc_id = None , messages = '<STR_LIT>' , tokens = <NUM_LIT> , api_key = None ) : <EOL> message_obj = Message ( <EOL> conversation_id = conversation_id , <EOL> user = user , <EOL> message = message , <EOL> is_bot = is_bot , <EOL> message_type = message_type , <EOL> embedding_message_doc = EmbeddingDocument . objects . get ( pk = embedding_doc_id ) if embedding_doc_id else None , <EOL> messages = messages , <EOL> tokens = tokens , <EOL> ) <EOL> if message_type != Message . temp_message_type : <EOL> message_obj . save ( ) <EOL> increase_token_usage ( user , tokens , api_key ) <EOL> return message_obj <EOL> def increase_token_usage ( user , tokens , api_key = None ) : <EOL> token_usage , created = TokenUsage . objects . get_or_create ( user = user ) <EOL> token_usage . tokens += tokens <EOL> token_usage . save ( ) <EOL> if api_key : <EOL> api_key . token_used += tokens <EOL> api_key . save ( ) <EOL> def build_messages ( model , user , conversation_id , new_messages , web_search_params , system_content , frugal_mode = False , tool = None , message_type = <NUM_LIT> ) : <EOL> if conversation_id : <EOL> ordered_messages = Message . objects . filter ( conversation_id = conversation_id ) . order_by ( '<STR_LIT>' ) <EOL> ordered_messages_list = list ( ordered_messages ) <EOL> else : <EOL> ordered_messages_list = [ ] <EOL> ordered_messages_list += [ { <EOL> '<STR_LIT>' : False , <EOL> '<STR_LIT>' : msg [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : message_type , <EOL> '<STR_LIT>' : msg . get ( '<STR_LIT>' , None ) , <EOL> } for msg in new_messages ] <EOL> if frugal_mode : <EOL> ordered_messages_list = ordered_messages_list [ - <NUM_LIT> : ] <EOL> system_messages = [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : system_content } ] <EOL> current_token_count = num_tokens_from_messages ( system_messages , model [ '<STR_LIT>' ] ) <EOL> max_token_count = model [ '<STR_LIT>' ] <EOL> messages = [ ] <EOL> result = { <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : messages , <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : None , <EOL> '<STR_LIT>' : None , <EOL> } <EOL> faiss_store = None <EOL> logger . debug ( '<STR_LIT>' , new_messages ) <EOL> logger . debug ( '<STR_LIT>' , ordered_messages_list ) <EOL> first_msg = True <EOL> while current_token_count < max_token_count and len ( ordered_messages_list ) > <NUM_LIT> : <EOL> message = ordered_messages_list . pop ( ) <EOL> if isinstance ( message , Message ) : <EOL> message = model_to_dict ( message ) <EOL> role = "<STR_LIT>" if message [ '<STR_LIT>' ] else "<STR_LIT>" <EOL> message_content = message [ '<STR_LIT>' ] <EOL> message_type = message [ '<STR_LIT>' ] <EOL> if web_search_params is not None and first_msg : <EOL> search_results = web_search ( SearchRequest ( message [ '<STR_LIT>' ] , ua = web_search_params [ '<STR_LIT>' ] ) , num_results = <NUM_LIT> ) <EOL> message_content = compile_prompt ( search_results , message [ '<STR_LIT>' ] , default_prompt = web_search_params [ '<STR_LIT>' ] ) <EOL> if tool and first_msg : <EOL> tool_name = tool [ '<STR_LIT>' ] <EOL> func = TOOL_LIST . get ( tool_name , None ) <EOL> if tool_name == '<STR_LIT>' : <EOL> if not tool . get ( '<STR_LIT>' , None ) : <EOL> tool [ '<STR_LIT>' ] = { } <EOL> args = tool [ '<STR_LIT>' ] <EOL> args [ '<STR_LIT>' ] = conversation_id <EOL> args [ '<STR_LIT>' ] = user <EOL> if func : <EOL> message_content = func ( message [ '<STR_LIT>' ] , tool [ '<STR_LIT>' ] ) <EOL> if message_type in [ <EOL> Message . hidden_message_type , <EOL> Message . arxiv_context_message_type , <EOL> Message . doc_context_message_type , <EOL> ] : <EOL> if first_msg : <EOL> result [ '<STR_LIT>' ] = False <EOL> if message_type == Message . doc_context_message_type : <EOL> doc_id = message [ "<STR_LIT>" ] <EOL> logger . debug ( '<STR_LIT>' , message_content ) <EOL> if doc_id : <EOL> logger . debug ( '<STR_LIT>' , doc_id ) <EOL> doc_obj = EmbeddingDocument . objects . get ( id = doc_id ) <EOL> if doc_obj : <EOL> logger . debug ( '<STR_LIT>' , doc_id , doc_obj . title ) <EOL> vector_store = unpick_faiss ( doc_obj . faiss_store ) <EOL> if faiss_store : <EOL> faiss_store . merge_from ( vector_store ) <EOL> else : <EOL> faiss_store = vector_store <EOL> logger . debug ( '<STR_LIT>' , doc_id , doc_obj . title ) <EOL> elif message_type == Message . arxiv_context_message_type : <EOL> if first_msg : <EOL> doc_id = tool [ '<STR_LIT>' ] . get ( '<STR_LIT>' , None ) <EOL> doc_title = tool [ '<STR_LIT>' ] . get ( '<STR_LIT>' , None ) <EOL> new_messages [ - <NUM_LIT> ] [ '<STR_LIT>' ] = message_content <EOL> new_messages [ - <NUM_LIT> ] [ '<STR_LIT>' ] = doc_id <EOL> result [ '<STR_LIT>' ] = doc_id <EOL> result [ '<STR_LIT>' ] = doc_title <EOL> else : <EOL> doc_id = message [ '<STR_LIT>' ] <EOL> if doc_id : <EOL> message [ '<STR_LIT>' ] = doc_id <EOL> logger . debug ( '<STR_LIT>' , doc_id ) <EOL> doc_obj = EmbeddingDocument . objects . get ( id = doc_id ) <EOL> if doc_obj : <EOL> logger . debug ( '<STR_LIT>' , doc_id , doc_obj . title ) <EOL> vector_store = unpick_faiss ( doc_obj . faiss_store ) <EOL> if faiss_store : <EOL> faiss_store . merge_from ( vector_store ) <EOL> else : <EOL> faiss_store = vector_store <EOL> logger . debug ( '<STR_LIT>' , doc_id , doc_obj . title ) <EOL> else : <EOL> raise RuntimeError ( '<STR_LIT>' ) <EOL> else : <EOL> new_message = { "<STR_LIT>" : role , "<STR_LIT>" : message_content } <EOL> new_token_count = num_tokens_from_messages ( system_messages + messages + [ new_message ] , model [ '<STR_LIT>' ] ) <EOL> if new_token_count > max_token_count : <EOL> if len ( messages ) > <NUM_LIT> : <EOL> break <EOL> raise ValueError ( <EOL> f"<STR_LIT>" ) <EOL> messages . insert ( <NUM_LIT> , new_message ) <EOL> current_token_count = new_token_count <EOL> first_msg = False <EOL> result [ '<STR_LIT>' ] = system_messages + messages <EOL> result [ '<STR_LIT>' ] = current_token_count <EOL> result [ '<STR_LIT>' ] = faiss_store <EOL> return result <EOL> def get_current_model ( model_name , request_max_response_tokens ) : <EOL> if model_name is None : <EOL> model_name = "<STR_LIT>" <EOL> model = MODELS [ model_name ] <EOL> if request_max_response_tokens is not None : <EOL> model [ '<STR_LIT>' ] = int ( request_max_response_tokens ) <EOL> model [ '<STR_LIT>' ] = model [ '<STR_LIT>' ] - model [ '<STR_LIT>' ] <EOL> return model <EOL> def get_api_key_from_setting ( ) : <EOL> row = Setting . objects . filter ( name = '<STR_LIT>' ) . first ( ) <EOL> if row and row . value != '<STR_LIT>' : <EOL> return row . value <EOL> return None <EOL> def get_api_key ( ) : <EOL> return ApiKey . objects . filter ( is_enabled = True ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> def num_tokens_from_text ( text , model = "<STR_LIT>" ) : <EOL> try : <EOL> encoding = tiktoken . encoding_for_model ( model ) <EOL> except KeyError : <EOL> print ( "<STR_LIT>" ) <EOL> encoding = tiktoken . get_encoding ( "<STR_LIT>" ) <EOL> if model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_text ( text , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_text ( text , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_text ( text , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_text ( text , model = "<STR_LIT>" ) <EOL> if model not in [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> raise NotImplementedError ( ) <EOL> return len ( encoding . encode ( text ) ) <EOL> def num_tokens_from_messages ( messages , model = "<STR_LIT>" ) : <EOL> try : <EOL> encoding = tiktoken . encoding_for_model ( model ) <EOL> except KeyError : <EOL> print ( "<STR_LIT>" ) <EOL> encoding = tiktoken . get_encoding ( "<STR_LIT>" ) <EOL> if model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_messages ( messages , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_messages ( messages , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_messages ( messages , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> print ( "<STR_LIT>" ) <EOL> return num_tokens_from_messages ( messages , model = "<STR_LIT>" ) <EOL> elif model == "<STR_LIT>" : <EOL> tokens_per_message = <NUM_LIT> <EOL> tokens_per_name = - <NUM_LIT> <EOL> elif model == "<STR_LIT>" : <EOL> tokens_per_message = <NUM_LIT> <EOL> tokens_per_name = - <NUM_LIT> <EOL> elif model == "<STR_LIT>" : <EOL> tokens_per_message = <NUM_LIT> <EOL> tokens_per_name = <NUM_LIT> <EOL> elif model == "<STR_LIT>" : <EOL> tokens_per_message = <NUM_LIT> <EOL> tokens_per_name = - <NUM_LIT> <EOL> else : <EOL> raise NotImplementedError ( ) <EOL> num_tokens = <NUM_LIT> <EOL> for message in messages : <EOL> num_tokens += tokens_per_message <EOL> for key , value in message . items ( ) : <EOL> num_tokens += len ( encoding . encode ( value ) ) <EOL> if key == "<STR_LIT>" : <EOL> num_tokens += tokens_per_name <EOL> num_tokens += <NUM_LIT> <EOL> return num_tokens <EOL> def get_openai ( openai_api_key ) : <EOL> openai . api_key = openai_api_key <EOL> proxy = os . getenv ( '<STR_LIT>' ) <EOL> if proxy : <EOL> openai . api_base = proxy <EOL> return openai <EOL> </s>
<s> from django . contrib import admin <EOL> from django . urls import path , include <EOL> from chat . views import conversation , gen_title , upload_conversations <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> path ( '<STR_LIT>' , conversation , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , upload_conversations , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , gen_title , name = '<STR_LIT>' ) , <EOL> path ( '<STR_LIT>' , include ( '<STR_LIT>' ) ) , <EOL> path ( '<STR_LIT>' , admin . site . urls ) , <EOL> ] <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> from django . urls import include , path <EOL> from rest_framework import routers <EOL> from . views import ConversationViewSet , MessageViewSet , PromptViewSet , EmbeddingDocumentViewSet , SettingViewSet <EOL> router = routers . SimpleRouter ( ) <EOL> router . register ( r'<STR_LIT>' , ConversationViewSet , basename = '<STR_LIT>' ) <EOL> router . register ( r'<STR_LIT>' , MessageViewSet , basename = '<STR_LIT>' ) <EOL> router . register ( r'<STR_LIT>' , PromptViewSet , basename = '<STR_LIT>' ) <EOL> router . register ( r'<STR_LIT>' , EmbeddingDocumentViewSet , basename = '<STR_LIT>' ) <EOL> router . register ( r'<STR_LIT>' , SettingViewSet , basename = '<STR_LIT>' ) <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , include ( router . urls ) ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . TextField ( blank = True , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from rest_framework . response import Response <EOL> from rest_framework import status <EOL> from dj_rest_auth . registration . views import RegisterView <EOL> from chat . models import Setting <EOL> from allauth . account import app_settings as allauth_account_settings <EOL> class RegistrationView ( RegisterView ) : <EOL> def create ( self , request , * args , ** kwargs ) : <EOL> try : <EOL> open_registration = Setting . objects . get ( name = '<STR_LIT>' ) . value == '<STR_LIT>' <EOL> except Setting . DoesNotExist : <EOL> open_registration = True <EOL> if open_registration is False : <EOL> return Response ( { '<STR_LIT>' : '<STR_LIT>' } , status = status . HTTP_403_FORBIDDEN ) <EOL> serializer = self . get_serializer ( data = request . data ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> user = self . perform_create ( serializer ) <EOL> headers = self . get_success_headers ( serializer . data ) <EOL> data = self . get_response_data ( user ) <EOL> data [ '<STR_LIT>' ] = allauth_account_settings . EMAIL_VERIFICATION <EOL> if data : <EOL> response = Response ( <EOL> data , <EOL> status = status . HTTP_201_CREATED , <EOL> headers = headers , <EOL> ) <EOL> else : <EOL> response = Response ( status = status . HTTP_204_NO_CONTENT , headers = headers ) <EOL> return response <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = '<STR_LIT>' , <EOL> fields = [ <EOL> ( '<STR_LIT>' , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = '<STR_LIT>' ) ) , <EOL> ( '<STR_LIT>' , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( '<STR_LIT>' , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( '<STR_LIT>' , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = settings . AUTH_USER_MODEL ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( '<STR_LIT>' , '<STR_LIT>' ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . TextField ( default = '<STR_LIT>' ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = '<STR_LIT>' , <EOL> name = '<STR_LIT>' , <EOL> field = models . IntegerField ( default = <NUM_LIT> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . apps import AppConfig <EOL> class StatsConfig ( AppConfig ) : <EOL> default_auto_field = '<STR_LIT>' <EOL> name = '<STR_LIT>' <EOL> </s>
<s> from django . shortcuts import render <EOL> </s>
<s> from django . apps import AppConfig <EOL> class ChatConfig ( AppConfig ) : <EOL> default_auto_field = '<STR_LIT>' <EOL> name = '<STR_LIT>' <EOL> def ready ( self ) : <EOL> import chat . signals <EOL> </s>
<s> import os <EOL> import django <EOL> from config . api . websockets . middleware import TokenAuthMiddleware <EOL> django . setup ( ) <EOL> import sys <EOL> from pathlib import Path <EOL> from channels . routing import ProtocolTypeRouter , URLRouter <EOL> from django . core . asgi import get_asgi_application <EOL> from django . urls import re_path <EOL> from config . api . websockets . queries import CollectionQueryConsumer <EOL> BASE_DIR = Path ( __file__ ) . resolve ( strict = True ) . parent . parent <EOL> sys . path . append ( str ( BASE_DIR / "<STR_LIT>" ) ) <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> django_application = get_asgi_application ( ) <EOL> application = ProtocolTypeRouter ( <EOL> { <EOL> "<STR_LIT>" : get_asgi_application ( ) , <EOL> "<STR_LIT>" : TokenAuthMiddleware ( <EOL> URLRouter ( <EOL> [ <EOL> re_path ( <EOL> r"<STR_LIT>" , <EOL> CollectionQueryConsumer . as_asgi ( ) , <EOL> ) , <EOL> ] <EOL> ) <EOL> ) , <EOL> } <EOL> ) <EOL> </s>
<s> from storages . backends . s3boto3 import S3Boto3Storage <EOL> class StaticRootS3Boto3Storage ( S3Boto3Storage ) : <EOL> location = "<STR_LIT>" <EOL> default_acl = "<STR_LIT>" <EOL> class MediaRootS3Boto3Storage ( S3Boto3Storage ) : <EOL> location = "<STR_LIT>" <EOL> file_overwrite = False <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> migrations . swappable_dependency ( settings . AUTH_USER_MODEL ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True ) ) , <EOL> ( "<STR_LIT>" , models . FileField ( upload_to = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = settings . AUTH_USER_MODEL , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . FileField ( upload_to = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> related_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = settings . AUTH_USER_MODEL , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> import logging <EOL> import httpx <EOL> from asgiref . sync import sync_to_async <EOL> from django . contrib . auth import get_user_model <EOL> from django . test import AsyncClient , TransactionTestCase <EOL> from rest_framework_api_key . models import APIKey <EOL> from config import asgi <EOL> from config . api . endpoints import collections_router <EOL> from delphic . indexes . models import Collection , Document <EOL> User = get_user_model ( ) <EOL> logging . basicConfig ( <EOL> format = "<STR_LIT>" , <EOL> datefmt = "<STR_LIT>" , <EOL> level = logging . DEBUG , <EOL> ) <EOL> class CollectionTestCase ( TransactionTestCase ) : <EOL> @ sync_to_async <EOL> def get_request_key ( self ) : <EOL> api_key , request_key = APIKey . objects . create_key ( name = "<STR_LIT>" ) <EOL> return request_key <EOL> def setUp ( self ) : <EOL> self . user = User . objects . create_user ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" <EOL> ) <EOL> self . client = AsyncClient ( collections_router ) <EOL> async def test_create_collection ( self ) : <EOL> request_key = await self . get_request_key ( ) <EOL> print ( f"<STR_LIT>" ) <EOL> file_content = b"<STR_LIT>" <EOL> collection_data = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> headers = { <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> files = [ <EOL> ( "<STR_LIT>" , ( "<STR_LIT>" , file_content , "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , ( "<STR_LIT>" , file_content , "<STR_LIT>" ) ) , <EOL> ] <EOL> async with httpx . AsyncClient ( <EOL> app = asgi . application , base_url = "<STR_LIT>" <EOL> ) as client : <EOL> response = await client . post ( <EOL> "<STR_LIT>" , <EOL> data = collection_data , <EOL> files = files , <EOL> headers = headers , <EOL> ) <EOL> print ( response . text ) <EOL> print ( f"<STR_LIT>" ) <EOL> self . assertEqual ( response . status_code , <NUM_LIT> ) <EOL> response_data = response . json ( ) <EOL> self . assertEqual ( response_data [ "<STR_LIT>" ] , collection_data [ "<STR_LIT>" ] ) <EOL> self . assertEqual ( response_data [ "<STR_LIT>" ] , collection_data [ "<STR_LIT>" ] ) <EOL> self . assertEqual ( response_data [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> collection_instance = await Collection . objects . aget ( id = response_data [ "<STR_LIT>" ] ) <EOL> collection_doc_count = await sync_to_async ( <EOL> collection_instance . documents . count <EOL> ) ( ) <EOL> self . assertEqual ( collection_doc_count , <NUM_LIT> ) <EOL> async for document in collection_instance . documents . all ( ) : <EOL> await sync_to_async ( document . file . delete ) ( ) <EOL> await sync_to_async ( collection_instance . delete ) ( ) <EOL> async def test_add_file_to_collection ( self ) : <EOL> key = await self . get_request_key ( ) <EOL> api_key = await sync_to_async ( APIKey . objects . get_from_key ) ( key ) <EOL> collection = await sync_to_async ( Collection . objects . create ) ( <EOL> api_key = api_key , <EOL> title = "<STR_LIT>" , <EOL> description = "<STR_LIT>" , <EOL> status = "<STR_LIT>" , <EOL> ) <EOL> file_content = b"<STR_LIT>" <EOL> file_name = "<STR_LIT>" <EOL> file_content_type = "<STR_LIT>" <EOL> file = ( file_name , file_content , file_content_type ) <EOL> headers = { <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> data = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> files = [ <EOL> ( "<STR_LIT>" , file ) , <EOL> ] <EOL> async with httpx . AsyncClient ( <EOL> app = asgi . application , base_url = "<STR_LIT>" <EOL> ) as client : <EOL> response = await client . post ( <EOL> f"<STR_LIT>" , <EOL> data = data , <EOL> files = files , <EOL> headers = headers , <EOL> ) <EOL> self . assertEqual ( response . status_code , <NUM_LIT> ) <EOL> response_data = response . json ( ) <EOL> self . assertEqual ( <EOL> response_data [ "<STR_LIT>" ] , <EOL> f"<STR_LIT>" , <EOL> ) <EOL> collection_instance = await Collection . objects . aget ( id = collection . id ) <EOL> collection_doc_count = await sync_to_async ( <EOL> collection_instance . documents . count <EOL> ) ( ) <EOL> self . assertEqual ( collection_doc_count , <NUM_LIT> ) <EOL> document = await sync_to_async ( Document . objects . get ) ( <EOL> collection = collection_instance <EOL> ) <EOL> self . assertEqual ( document . file . name , f"<STR_LIT>" ) <EOL> self . assertEqual ( document . description , data [ "<STR_LIT>" ] ) <EOL> await sync_to_async ( document . file . delete ) ( ) <EOL> await sync_to_async ( collection_instance . delete ) ( ) <EOL> </s>
<s> import uuid <EOL> from pathlib import Path <EOL> from unittest import mock <EOL> from channels . testing import WebsocketCommunicator <EOL> from django . contrib . auth import get_user_model <EOL> from django . core . files . base import ContentFile <EOL> from django . test import TransactionTestCase <EOL> from ninja_jwt . tokens import AccessToken <EOL> from config . api . websockets . queries import CollectionQueryConsumer <EOL> from config . asgi import application <EOL> from delphic . indexes . models import Collection , CollectionStatus <EOL> User = get_user_model ( ) <EOL> async def mocked_receive ( self , * args , ** kwargs ) : <EOL> await self . send ( text_data = '<STR_LIT>' ) <EOL> async def mocked_accept ( self , * args , ** kwargs ) : <EOL> await self . accept ( ) <EOL> class TokenAuthMiddlewareTestCase ( TransactionTestCase ) : <EOL> def setUp ( self ) : <EOL> self . user = User . objects . create_user ( <EOL> username = uuid . uuid4 ( ) . __str__ ( ) , password = "<STR_LIT>" <EOL> ) <EOL> current_dir = Path . cwd ( ) <EOL> index_file = current_dir / "<STR_LIT>" / "<STR_LIT>" / "<STR_LIT>" <EOL> with index_file . open ( "<STR_LIT>" ) as model_file : <EOL> self . collection = Collection . objects . create ( <EOL> title = "<STR_LIT>" , <EOL> description = "<STR_LIT>" , <EOL> model = ContentFile ( model_file . read ( ) , name = "<STR_LIT>" ) , <EOL> status = CollectionStatus . COMPLETE , <EOL> ) <EOL> async def test_middleware_with_valid_token ( self ) : <EOL> token = AccessToken . for_user ( self . user ) <EOL> print ( f"<STR_LIT>" ) <EOL> communicator = WebsocketCommunicator ( <EOL> CollectionQueryConsumer . as_asgi ( ) , <EOL> f"<STR_LIT>" , <EOL> ) <EOL> mock_index = mock . MagicMock ( ) <EOL> with mock . patch ( <EOL> "<STR_LIT>" , <EOL> return_value = mock_index , <EOL> ) : <EOL> connected , _ = await communicator . connect ( ) <EOL> self . assertTrue ( connected ) <EOL> await communicator . disconnect ( ) <EOL> async def test_middleware_with_invalid_token ( self ) : <EOL> communicator = WebsocketCommunicator ( <EOL> application , <EOL> f"<STR_LIT>" , <EOL> ) <EOL> connected , _ = await communicator . connect ( ) <EOL> self . assertFalse ( connected ) <EOL> self . assertEqual ( communicator . scope [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> await communicator . disconnect ( ) <EOL> async def test_middleware_without_token ( self ) : <EOL> communicator = WebsocketCommunicator ( <EOL> application , <EOL> f"<STR_LIT>" , <EOL> ) <EOL> connected , _ = await communicator . connect ( ) <EOL> self . assertFalse ( connected ) <EOL> self . assertEqual ( communicator . scope [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> await communicator . disconnect ( ) <EOL> </s>
<s> from django . db import migrations , models <EOL> import django . db . models . deletion <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RemoveField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . ForeignKey ( <EOL> blank = True , <EOL> null = True , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> from collections . abc import Sequence <EOL> from pathlib import Path <EOL> BASE_DIR = Path ( __file__ ) . parent . resolve ( ) <EOL> PRODUCTION_DOTENVS_DIR = BASE_DIR / "<STR_LIT>" / "<STR_LIT>" <EOL> PRODUCTION_DOTENV_FILES = [ <EOL> PRODUCTION_DOTENVS_DIR / "<STR_LIT>" , <EOL> PRODUCTION_DOTENVS_DIR / "<STR_LIT>" , <EOL> ] <EOL> DOTENV_FILE = BASE_DIR / "<STR_LIT>" <EOL> def merge ( <EOL> output_file : Path , <EOL> files_to_merge : Sequence [ Path ] , <EOL> ) -> None : <EOL> merged_content = "<STR_LIT>" <EOL> for merge_file in files_to_merge : <EOL> merged_content += merge_file . read_text ( ) <EOL> merged_content += os . linesep <EOL> output_file . write_text ( merged_content ) <EOL> if __name__ == "<STR_LIT>" : <EOL> merge ( DOTENV_FILE , PRODUCTION_DOTENV_FILES ) <EOL> </s>
<s> import os <EOL> import sys <EOL> from pathlib import Path <EOL> if __name__ == "<STR_LIT>" : <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError : <EOL> try : <EOL> import django <EOL> except ImportError : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) <EOL> raise <EOL> current_path = Path ( __file__ ) . parent . resolve ( ) <EOL> sys . path . append ( str ( current_path / "<STR_LIT>" ) ) <EOL> execute_from_command_line ( sys . argv ) <EOL> </s>
<s> import os <EOL> from celery import Celery <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> app = Celery ( "<STR_LIT>" ) <EOL> app . config_from_object ( "<STR_LIT>" , namespace = "<STR_LIT>" ) <EOL> app . autodiscover_tasks ( ) <EOL> </s>
<s> import logging <EOL> from urllib . parse import parse_qsl <EOL> import jwt <EOL> from channels . db import database_sync_to_async <EOL> from channels . middleware import BaseMiddleware <EOL> from django . conf import settings <EOL> from django . contrib . auth import get_user_model <EOL> logger = logging . getLogger ( __name__ ) <EOL> @ database_sync_to_async <EOL> def get_user_from_token ( token ) : <EOL> from ninja_jwt . tokens import UntypedToken <EOL> User = get_user_model ( ) <EOL> print ( f"<STR_LIT>" ) <EOL> try : <EOL> UntypedToken ( token ) <EOL> payload = jwt . decode ( token , settings . SECRET_KEY , algorithms = [ "<STR_LIT>" ] ) <EOL> user_id = payload . get ( "<STR_LIT>" ) <EOL> user = User . objects . get ( id = user_id ) <EOL> return user <EOL> except Exception as e : <EOL> logger . error ( f"<STR_LIT>" ) <EOL> raise ValueError ( "<STR_LIT>" ) from e <EOL> class TokenAuthMiddleware ( BaseMiddleware ) : <EOL> def __init__ ( self , app ) : <EOL> self . app = app <EOL> async def __call__ ( self , scope , receive , send ) : <EOL> try : <EOL> query_string = dict ( parse_qsl ( scope [ "<STR_LIT>" ] . decode ( "<STR_LIT>" ) ) ) <EOL> token = query_string [ "<STR_LIT>" ] <EOL> scope [ "<STR_LIT>" ] = await get_user_from_token ( token ) <EOL> return await self . app ( scope , receive , send ) <EOL> except ( KeyError , ValueError ) as e : <EOL> if isinstance ( e , KeyError ) : <EOL> error_msg = "<STR_LIT>" <EOL> else : <EOL> error_msg = "<STR_LIT>" <EOL> scope [ "<STR_LIT>" ] = error_msg <EOL> await send ( <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : "<STR_LIT>" } <EOL> ) <EOL> return await self . app ( scope , receive , send ) <EOL> </s>
<s> from pathlib import Path <EOL> import environ <EOL> BASE_DIR = Path ( __file__ ) . resolve ( strict = True ) . parent . parent . parent <EOL> APPS_DIR = BASE_DIR / "<STR_LIT>" <EOL> env = environ . Env ( ) <EOL> READ_DOT_ENV_FILE = env . bool ( "<STR_LIT>" , default = False ) <EOL> if READ_DOT_ENV_FILE : <EOL> env . read_env ( str ( BASE_DIR / "<STR_LIT>" ) ) <EOL> USE_AWS = env . bool ( "<STR_LIT>" , False ) <EOL> DEBUG = env . bool ( "<STR_LIT>" , False ) <EOL> TIME_ZONE = "<STR_LIT>" <EOL> LANGUAGE_CODE = "<STR_LIT>" <EOL> SITE_ID = <NUM_LIT> <EOL> USE_I18N = True <EOL> USE_TZ = True <EOL> LOCALE_PATHS = [ str ( BASE_DIR / "<STR_LIT>" ) ] <EOL> DATABASES = { "<STR_LIT>" : env . db ( "<STR_LIT>" ) } <EOL> DEFAULT_AUTO_FIELD = "<STR_LIT>" <EOL> ROOT_URLCONF = "<STR_LIT>" <EOL> WSGI_APPLICATION = "<STR_LIT>" <EOL> DJANGO_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> THIRD_PARTY_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> LOCAL_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> INSTALLED_APPS = DJANGO_APPS + THIRD_PARTY_APPS + LOCAL_APPS <EOL> MIGRATION_MODULES = { "<STR_LIT>" : "<STR_LIT>" } <EOL> AUTHENTICATION_BACKENDS = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> AUTH_USER_MODEL = "<STR_LIT>" <EOL> LOGIN_REDIRECT_URL = "<STR_LIT>" <EOL> LOGIN_URL = "<STR_LIT>" <EOL> PASSWORD_HASHERS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ] <EOL> MIDDLEWARE = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> STATIC_ROOT = str ( BASE_DIR / "<STR_LIT>" ) <EOL> STATICFILES_DIRS = [ str ( APPS_DIR / "<STR_LIT>" ) ] <EOL> STATICFILES_FINDERS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> if not USE_AWS : <EOL> STATIC_URL = "<STR_LIT>" <EOL> print ( f"<STR_LIT>" ) <EOL> MEDIA_ROOT = str ( APPS_DIR / "<STR_LIT>" ) <EOL> MEDIA_URL = "<STR_LIT>" <EOL> else : <EOL> INSTALLED_APPS += [ "<STR_LIT>" ] <EOL> AWS_ACCESS_KEY_ID = env ( "<STR_LIT>" ) <EOL> AWS_SECRET_ACCESS_KEY = env ( "<STR_LIT>" ) <EOL> AWS_STORAGE_BUCKET_NAME = env ( "<STR_LIT>" ) <EOL> AWS_QUERYSTRING_AUTH = True <EOL> _AWS_EXPIRY = <NUM_LIT> * <NUM_LIT> * <NUM_LIT> * <NUM_LIT> <EOL> AWS_S3_OBJECT_PARAMETERS = { <EOL> "<STR_LIT>" : f"<STR_LIT>" <EOL> } <EOL> AWS_S3_REGION_NAME = env ( "<STR_LIT>" , default = None ) <EOL> AWS_S3_CUSTOM_DOMAIN = env ( "<STR_LIT>" , default = None ) <EOL> aws_s3_domain = ( <EOL> AWS_S3_CUSTOM_DOMAIN or f"<STR_LIT>" <EOL> ) <EOL> S3_ACCESS_KEY = AWS_ACCESS_KEY_ID <EOL> S3_SECRET_KEY = AWS_SECRET_ACCESS_KEY <EOL> S3_BUCKET = AWS_STORAGE_BUCKET_NAME <EOL> S3_PREFIX = env ( "<STR_LIT>" , default = "<STR_LIT>" ) <EOL> S3_COMPRESSION_LEVEL = int ( env ( "<STR_LIT>" , default = <NUM_LIT> ) ) <EOL> STATICFILES_STORAGE = "<STR_LIT>" <EOL> STATIC_URL = f"<STR_LIT>" <EOL> DEFAULT_FILE_STORAGE = "<STR_LIT>" <EOL> MEDIA_URL = f"<STR_LIT>" <EOL> MEDIA_ROOT = str ( APPS_DIR / "<STR_LIT>" ) <EOL> INSTALLED_APPS += [ "<STR_LIT>" ] <EOL> COLLECTFAST_STRATEGY = "<STR_LIT>" <EOL> TEMPLATES = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ str ( APPS_DIR / "<STR_LIT>" ) ] , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] , <EOL> } , <EOL> } <EOL> ] <EOL> FORM_RENDERER = "<STR_LIT>" <EOL> CRISPY_TEMPLATE_PACK = "<STR_LIT>" <EOL> CRISPY_ALLOWED_TEMPLATE_PACKS = "<STR_LIT>" <EOL> FIXTURE_DIRS = ( str ( APPS_DIR / "<STR_LIT>" ) , ) <EOL> SESSION_COOKIE_HTTPONLY = True <EOL> CSRF_COOKIE_HTTPONLY = True <EOL> X_FRAME_OPTIONS = "<STR_LIT>" <EOL> EMAIL_BACKEND = env ( <EOL> "<STR_LIT>" , <EOL> default = "<STR_LIT>" , <EOL> ) <EOL> EMAIL_TIMEOUT = <NUM_LIT> <EOL> ADMIN_URL = "<STR_LIT>" <EOL> ADMINS = [ ( , "<STR_LIT>" ) ] <EOL> MANAGERS = ADMINS <EOL> LOGGING = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : False , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> } <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> } , <EOL> "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> } <EOL> if USE_TZ : <EOL> CELERY_TIMEZONE = TIME_ZONE <EOL> CELERY_BROKER_URL = env ( "<STR_LIT>" ) <EOL> CELERY_RESULT_BACKEND = CELERY_BROKER_URL <EOL> CELERY_RESULT_EXTENDED = True <EOL> CELERY_RESULT_BACKEND_ALWAYS_RETRY = True <EOL> CELERY_RESULT_BACKEND_MAX_RETRIES = <NUM_LIT> <EOL> CELERY_ACCEPT_CONTENT = [ "<STR_LIT>" ] <EOL> CELERY_TASK_SERIALIZER = "<STR_LIT>" <EOL> CELERY_RESULT_SERIALIZER = "<STR_LIT>" <EOL> CELERY_TASK_TIME_LIMIT = <NUM_LIT> * <NUM_LIT> <EOL> CELERY_TASK_SOFT_TIME_LIMIT = <NUM_LIT> <EOL> CELERY_BEAT_SCHEDULER = "<STR_LIT>" <EOL> CELERY_WORKER_SEND_TASK_EVENTS = True <EOL> CELERY_TASK_SEND_SENT_EVENT = True <EOL> ACCOUNT_ALLOW_REGISTRATION = env . bool ( "<STR_LIT>" , True ) <EOL> ACCOUNT_AUTHENTICATION_METHOD = "<STR_LIT>" <EOL> ACCOUNT_EMAIL_REQUIRED = True <EOL> ACCOUNT_EMAIL_VERIFICATION = "<STR_LIT>" <EOL> ACCOUNT_ADAPTER = "<STR_LIT>" <EOL> ACCOUNT_FORMS = { "<STR_LIT>" : "<STR_LIT>" } <EOL> SOCIALACCOUNT_ADAPTER = "<STR_LIT>" <EOL> SOCIALACCOUNT_FORMS = { "<STR_LIT>" : "<STR_LIT>" } <EOL> OPEN_ACCESS_MODE = env . bool ( "<STR_LIT>" , False ) <EOL> ASGI_APPLICATION = "<STR_LIT>" <EOL> CHANNEL_LAYERS = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ ( "<STR_LIT>" , <NUM_LIT> ) ] , <EOL> } , <EOL> } , <EOL> } <EOL> MODEL_NAME = env ( "<STR_LIT>" ) <EOL> MAX_TOKENS = env . int ( "<STR_LIT>" , <NUM_LIT> ) <EOL> </s>
<s> from django . contrib . auth . models import AbstractUser <EOL> from django . db . models import CharField <EOL> from django . urls import reverse <EOL> from django . utils . translation import gettext_lazy as _ <EOL> class User ( AbstractUser ) : <EOL> name = CharField ( _ ( "<STR_LIT>" ) , blank = True , max_length = <NUM_LIT> ) <EOL> first_name = None <EOL> last_name = None <EOL> def get_absolute_url ( self ) : <EOL> return reverse ( "<STR_LIT>" , kwargs = { "<STR_LIT>" : self . username } ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . db import migrations <EOL> def _update_or_create_site_with_sequence ( site_model , connection , domain , name ) : <EOL> site , created = site_model . objects . update_or_create ( <EOL> id = settings . SITE_ID , <EOL> defaults = { <EOL> "<STR_LIT>" : domain , <EOL> "<STR_LIT>" : name , <EOL> } , <EOL> ) <EOL> if created : <EOL> max_id = site_model . objects . order_by ( '<STR_LIT>' ) . first ( ) . id <EOL> with connection . cursor ( ) as cursor : <EOL> cursor . execute ( "<STR_LIT>" ) <EOL> ( current_id , ) = cursor . fetchone ( ) <EOL> if current_id <= max_id : <EOL> cursor . execute ( <EOL> "<STR_LIT>" , <EOL> [ max_id + <NUM_LIT> ] , <EOL> ) <EOL> def update_site_forward ( apps , schema_editor ) : <EOL> Site = apps . get_model ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> _update_or_create_site_with_sequence ( <EOL> Site , <EOL> schema_editor . connection , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) <EOL> def update_site_backward ( apps , schema_editor ) : <EOL> Site = apps . get_model ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> _update_or_create_site_with_sequence ( <EOL> Site , <EOL> schema_editor . connection , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ ( "<STR_LIT>" , "<STR_LIT>" ) ] <EOL> operations = [ migrations . RunPython ( update_site_forward , update_site_backward ) ] <EOL> </s>
<s> from pathlib import Path <EOL> import pytest <EOL> from merge_production_dotenvs_in_dotenv import merge <EOL> @ pytest . mark . parametrize ( <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> [ <EOL> ( [ ] , "<STR_LIT>" ) , <EOL> ( [ "<STR_LIT>" ] , "<STR_LIT>" ) , <EOL> ( [ "<STR_LIT>" ] , "<STR_LIT>" ) , <EOL> ( [ "<STR_LIT>" , "<STR_LIT>" ] , "<STR_LIT>" ) , <EOL> ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , "<STR_LIT>" ) , <EOL> ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , "<STR_LIT>" ) , <EOL> ] , <EOL> ) <EOL> def test_merge ( <EOL> tmp_path : Path , <EOL> input_contents : list [ str ] , <EOL> expected_output : str , <EOL> ) : <EOL> output_file = tmp_path / "<STR_LIT>" <EOL> files_to_merge = [ ] <EOL> for num , input_content in enumerate ( input_contents , start = <NUM_LIT> ) : <EOL> merge_file = tmp_path / f"<STR_LIT>" <EOL> merge_file . write_text ( input_content ) <EOL> files_to_merge . append ( merge_file ) <EOL> merge ( output_file , files_to_merge ) <EOL> assert output_file . read_text ( ) == expected_output <EOL> </s>
<s> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( blank = True , default = False , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import logging <EOL> import os <EOL> import tempfile <EOL> import uuid <EOL> from pathlib import Path <EOL> from django . conf import settings <EOL> from django . core . files import File <EOL> from langchain import OpenAI <EOL> from llama_index import ( <EOL> GPTSimpleVectorIndex , <EOL> LLMPredictor , <EOL> ServiceContext , <EOL> download_loader , <EOL> ) <EOL> from config import celery_app <EOL> from delphic . indexes . models import Collection , CollectionStatus <EOL> logger = logging . getLogger ( __name__ ) <EOL> @ celery_app . task <EOL> def create_index ( collection_id ) : <EOL> try : <EOL> collection = Collection . objects . prefetch_related ( "<STR_LIT>" ) . get ( <EOL> id = collection_id <EOL> ) <EOL> collection . status = CollectionStatus . RUNNING <EOL> collection . save ( ) <EOL> try : <EOL> with tempfile . TemporaryDirectory ( ) as tempdir : <EOL> tempdir_path = Path ( tempdir ) <EOL> for document in collection . documents . all ( ) : <EOL> with document . file . open ( "<STR_LIT>" ) as f : <EOL> file_data = f . read ( ) <EOL> temp_file_path = tempdir_path / document . file . name <EOL> temp_file_path . parent . mkdir ( parents = True , exist_ok = True ) <EOL> with temp_file_path . open ( "<STR_LIT>" ) as f : <EOL> f . write ( file_data ) <EOL> SimpleDirectoryReader = download_loader ( "<STR_LIT>" ) <EOL> loader = SimpleDirectoryReader ( <EOL> tempdir_path , recursive = True , exclude_hidden = False <EOL> ) <EOL> documents = loader . load_data ( ) <EOL> llm_predictor = LLMPredictor ( <EOL> llm = OpenAI ( <EOL> temperature = <NUM_LIT> , <EOL> model_name = settings . MODEL_NAME , <EOL> max_tokens = settings . MAX_TOKENS , <EOL> ) <EOL> ) <EOL> service_context = ServiceContext . from_defaults ( <EOL> llm_predictor = llm_predictor <EOL> ) <EOL> index = GPTSimpleVectorIndex . from_documents ( <EOL> documents , service_context = service_context <EOL> ) <EOL> index_str = index . save_to_string ( ) <EOL> with tempfile . NamedTemporaryFile ( delete = False ) as f : <EOL> f . write ( index_str . encode ( ) ) <EOL> f . flush ( ) <EOL> f . seek ( <NUM_LIT> ) <EOL> collection . model . save ( f"<STR_LIT>" , File ( f ) ) <EOL> collection . status = CollectionStatus . COMPLETE <EOL> collection . save ( ) <EOL> os . unlink ( f . name ) <EOL> collection . processing = False <EOL> collection . save ( ) <EOL> return True <EOL> except Exception as e : <EOL> logger . error ( f"<STR_LIT>" ) <EOL> collection . status = CollectionStatus . ERROR <EOL> collection . save ( ) <EOL> return False <EOL> except Exception as e : <EOL> logger . error ( f"<STR_LIT>" ) <EOL> return False <EOL> </s>
<s> import django . contrib . sites . models <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ ( "<STR_LIT>" , "<STR_LIT>" ) ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> validators = [ django . contrib . sites . models . _simple_domain_name_validator ] , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) <EOL> ] <EOL> </s>
<s> import logging <EOL> import textwrap <EOL> from pathlib import Path <EOL> from django . conf import settings <EOL> from langchain import OpenAI <EOL> from llama_index import GPTSimpleVectorIndex , LLMPredictor , ServiceContext <EOL> from delphic . indexes . models import Collection <EOL> logger = logging . getLogger ( __name__ ) <EOL> def format_source ( source ) : <EOL> formatted_source = ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> return formatted_source <EOL> async def load_collection_model ( collection_id : str | int ) -> GPTSimpleVectorIndex : <EOL> collection = await Collection . objects . aget ( id = collection_id ) <EOL> logger . info ( f"<STR_LIT>" ) <EOL> if collection . model . name : <EOL> logger . info ( "<STR_LIT>" ) <EOL> cache_dir = Path ( settings . BASE_DIR ) / "<STR_LIT>" <EOL> cache_file_path = cache_dir / f"<STR_LIT>" <EOL> if not cache_file_path . exists ( ) : <EOL> cache_dir . mkdir ( parents = True , exist_ok = True ) <EOL> with collection . model . open ( "<STR_LIT>" ) as model_file : <EOL> with cache_file_path . open ( "<STR_LIT>" , encoding = "<STR_LIT>" ) as cache_file : <EOL> cache_file . write ( model_file . read ( ) . decode ( "<STR_LIT>" ) ) <EOL> logger . info ( <EOL> f"<STR_LIT>" <EOL> f"<STR_LIT>" <EOL> ) <EOL> llm_predictor = LLMPredictor ( <EOL> llm = OpenAI ( temperature = <NUM_LIT> , model_name = "<STR_LIT>" , max_tokens = <NUM_LIT> ) <EOL> ) <EOL> service_context = ServiceContext . from_defaults ( llm_predictor = llm_predictor ) <EOL> logger . info ( "<STR_LIT>" ) <EOL> index = GPTSimpleVectorIndex . load_from_disk ( <EOL> cache_file_path , service_context = service_context <EOL> ) <EOL> logger . info ( <EOL> "<STR_LIT>" <EOL> ) <EOL> else : <EOL> logger . error ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> return index <EOL> async def query_collection ( collection_id : str | int , query_str : str ) -> str : <EOL> try : <EOL> index = await load_collection_model ( collection_id ) <EOL> response = index . query ( query_str ) <EOL> markdown_response = f"<STR_LIT>" <EOL> if response . source_nodes : <EOL> markdown_sources = f"<STR_LIT>" <EOL> else : <EOL> markdown_sources = "<STR_LIT>" <EOL> formatted_response = f"<STR_LIT>" <EOL> except ValueError : <EOL> formatted_response = "<STR_LIT>" <EOL> return formatted_response <EOL> </s>
<s> from . index_tasks import create_index <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> pass <EOL> </s>
<s> from django . conf import settings <EOL> from django . conf . urls . static import static <EOL> from django . contrib import admin <EOL> from django . contrib . staticfiles . urls import staticfiles_urlpatterns <EOL> from django . urls import include , path <EOL> from django . views import defaults as default_views <EOL> from django . views . generic import TemplateView <EOL> from config . api . endpoints import api <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , api . urls ) , <EOL> path ( "<STR_LIT>" , TemplateView . as_view ( template_name = "<STR_LIT>" ) , name = "<STR_LIT>" ) , <EOL> path ( settings . ADMIN_URL , admin . site . urls ) , <EOL> ] + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) <EOL> if settings . DEBUG : <EOL> urlpatterns += staticfiles_urlpatterns ( ) <EOL> if settings . DEBUG : <EOL> urlpatterns += [ <EOL> path ( <EOL> "<STR_LIT>" , <EOL> default_views . bad_request , <EOL> kwargs = { "<STR_LIT>" : Exception ( "<STR_LIT>" ) } , <EOL> ) , <EOL> path ( <EOL> "<STR_LIT>" , <EOL> default_views . permission_denied , <EOL> kwargs = { "<STR_LIT>" : Exception ( "<STR_LIT>" ) } , <EOL> ) , <EOL> path ( <EOL> "<STR_LIT>" , <EOL> default_views . page_not_found , <EOL> kwargs = { "<STR_LIT>" : Exception ( "<STR_LIT>" ) } , <EOL> ) , <EOL> path ( "<STR_LIT>" , default_views . server_error ) , <EOL> ] <EOL> if "<STR_LIT>" in settings . INSTALLED_APPS : <EOL> import debug_toolbar <EOL> urlpatterns = [ path ( "<STR_LIT>" , include ( debug_toolbar . urls ) ) ] + urlpatterns <EOL> </s>
<s> from . base import * <EOL> from . base import env <EOL> SECRET_KEY = env ( "<STR_LIT>" ) <EOL> ALLOWED_HOSTS = env . list ( "<STR_LIT>" , default = [ "<STR_LIT>" ] ) <EOL> DATABASES [ "<STR_LIT>" ] [ "<STR_LIT>" ] = env . int ( "<STR_LIT>" , default = <NUM_LIT> ) <EOL> CACHES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : True , <EOL> } , <EOL> } <EOL> } <EOL> SECURE_PROXY_SSL_HEADER = ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> SECURE_SSL_REDIRECT = env . bool ( "<STR_LIT>" , default = True ) <EOL> SESSION_COOKIE_SECURE = True <EOL> CSRF_COOKIE_SECURE = True <EOL> SECURE_HSTS_SECONDS = <NUM_LIT> <EOL> SECURE_HSTS_INCLUDE_SUBDOMAINS = env . bool ( <EOL> "<STR_LIT>" , default = True <EOL> ) <EOL> SECURE_HSTS_PRELOAD = env . bool ( "<STR_LIT>" , default = True ) <EOL> SECURE_CONTENT_TYPE_NOSNIFF = env . bool ( <EOL> "<STR_LIT>" , default = True <EOL> ) <EOL> CORS_ALLOWED_ORIGINS = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> CORS_ORIGIN_ALLOW_ALL = False <EOL> DEFAULT_FROM_EMAIL = env ( <EOL> "<STR_LIT>" , <EOL> default = "<STR_LIT>" , <EOL> ) <EOL> SERVER_EMAIL = env ( "<STR_LIT>" , default = DEFAULT_FROM_EMAIL ) <EOL> EMAIL_SUBJECT_PREFIX = env ( <EOL> "<STR_LIT>" , <EOL> default = "<STR_LIT>" , <EOL> ) <EOL> ADMIN_URL = env ( "<STR_LIT>" ) <EOL> INSTALLED_APPS += [ "<STR_LIT>" ] <EOL> EMAIL_BACKEND = "<STR_LIT>" <EOL> ANYMAIL = { <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" , default = "<STR_LIT>" ) , <EOL> } <EOL> LOGGING = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : False , <EOL> "<STR_LIT>" : { "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" } } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> } <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : True , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ "<STR_LIT>" , "<STR_LIT>" ] , <EOL> "<STR_LIT>" : True , <EOL> } , <EOL> } , <EOL> } <EOL> </s>
<s> from django . apps import AppConfig <EOL> from django . utils . translation import gettext_lazy as _ <EOL> class IndexesConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> verbose_name = _ ( "<STR_LIT>" ) <EOL> def ready ( self ) : <EOL> try : <EOL> import delphic . indexes . signals <EOL> except ImportError : <EOL> pass <EOL> </s>
<s> import logging <EOL> from asgiref . sync import sync_to_async <EOL> from ninja . security import APIKeyHeader <EOL> from rest_framework_api_key . models import APIKey <EOL> logger = logging . getLogger ( __name__ ) <EOL> class NinjaApiKeyAuth ( APIKeyHeader ) : <EOL> param_name = "<STR_LIT>" <EOL> async def authenticate ( self , request , key ) : <EOL> print ( f"<STR_LIT>" ) <EOL> try : <EOL> api_key = await sync_to_async ( APIKey . objects . get_from_key ) ( key ) <EOL> print ( f"<STR_LIT>" ) <EOL> return api_key <EOL> except Exception as e : <EOL> logger . warning ( f"<STR_LIT>" ) <EOL> </s>
<s> from django . contrib . auth import forms as admin_forms <EOL> from django . contrib . auth import get_user_model <EOL> from django . utils . translation import gettext_lazy as _ <EOL> User = get_user_model ( ) <EOL> class UserAdminChangeForm ( admin_forms . UserChangeForm ) : <EOL> class Meta ( admin_forms . UserChangeForm . Meta ) : <EOL> model = User <EOL> class UserAdminCreationForm ( admin_forms . UserCreationForm ) : <EOL> class Meta ( admin_forms . UserCreationForm . Meta ) : <EOL> model = User <EOL> error_messages = { <EOL> "<STR_LIT>" : { "<STR_LIT>" : _ ( "<STR_LIT>" ) } <EOL> } <EOL> </s>
<s> from asgiref . sync import sync_to_async <EOL> from django . conf import settings <EOL> from django . core . files . base import ContentFile <EOL> from django . http import HttpRequest <EOL> from ninja import File , Form , Router <EOL> from ninja . files import UploadedFile <EOL> from ninja_extra import NinjaExtraAPI <EOL> from ninja_jwt . controller import NinjaJWTDefaultController <EOL> from delphic . indexes . models import Collection , Document <EOL> from delphic . tasks import create_index <EOL> from delphic . utils . collections import query_collection <EOL> from . auth . api_key import NinjaApiKeyAuth <EOL> from . ninja_types import ( <EOL> CollectionModelSchema , <EOL> CollectionQueryInput , <EOL> CollectionQueryOutput , <EOL> CollectionStatusEnum , <EOL> ) <EOL> collections_router = Router ( ) <EOL> api = NinjaExtraAPI ( <EOL> title = "<STR_LIT>" , <EOL> description = "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" , <EOL> version = "<STR_LIT>" , <EOL> auth = None if settings . OPEN_ACCESS_MODE else NinjaApiKeyAuth ( ) , <EOL> ) <EOL> api . add_router ( "<STR_LIT>" , collections_router ) <EOL> api . register_controllers ( NinjaJWTDefaultController ) <EOL> @ api . get ( <EOL> "<STR_LIT>" , <EOL> auth = None , <EOL> response = bool , <EOL> tags = [ "<STR_LIT>" ] , <EOL> summary = "<STR_LIT>" , <EOL> ) <EOL> def check_heartbeat ( request ) : <EOL> return True <EOL> @ collections_router . post ( "<STR_LIT>" ) <EOL> async def create_collection ( <EOL> request , <EOL> title : str = Form ( ... ) , <EOL> description : str = Form ( ... ) , <EOL> files : list [ UploadedFile ] = File ( ... ) , <EOL> ) : <EOL> key = None if getattr ( request , "<STR_LIT>" , None ) is None else request . auth <EOL> if key is not None : <EOL> key = await key <EOL> collection_instance = Collection ( <EOL> api_key = key , <EOL> title = title , <EOL> description = description , <EOL> status = CollectionStatusEnum . QUEUED , <EOL> ) <EOL> await sync_to_async ( collection_instance . save ) ( ) <EOL> for uploaded_file in files : <EOL> doc_data = uploaded_file . file . read ( ) <EOL> doc_file = ContentFile ( doc_data , uploaded_file . name ) <EOL> document = Document ( collection = collection_instance , file = doc_file ) <EOL> await sync_to_async ( document . save ) ( ) <EOL> create_index . si ( collection_instance . id ) . apply_async ( ) <EOL> return await sync_to_async ( CollectionModelSchema ) ( <EOL> id = collection_instance . id , <EOL> title = collection_instance . title , <EOL> description = collection_instance . description , <EOL> status = collection_instance . status , <EOL> created = collection_instance . created . isoformat ( ) , <EOL> modified = collection_instance . modified . isoformat ( ) , <EOL> processing = collection_instance . processing , <EOL> has_model = bool ( collection_instance . model . name ) , <EOL> document_names = await sync_to_async ( list ) ( <EOL> await sync_to_async ( collection_instance . documents . values_list ) ( <EOL> "<STR_LIT>" , flat = True <EOL> ) <EOL> ) <EOL> ) <EOL> @ collections_router . post ( <EOL> "<STR_LIT>" , <EOL> response = CollectionQueryOutput , <EOL> summary = "<STR_LIT>" , <EOL> ) <EOL> def query_collection_view ( request : HttpRequest , query_input : CollectionQueryInput ) : <EOL> collection_id = query_input . collection_id <EOL> query_str = query_input . query_str <EOL> response = query_collection ( collection_id , query_str ) <EOL> return { "<STR_LIT>" : response } <EOL> @ collections_router . get ( <EOL> "<STR_LIT>" , <EOL> response = list [ CollectionModelSchema ] , <EOL> summary = "<STR_LIT>" "<STR_LIT>" , <EOL> ) <EOL> async def get_my_collections_view ( request : HttpRequest ) : <EOL> key = None if getattr ( request , "<STR_LIT>" , None ) is None else request . auth <EOL> if key is not None : <EOL> key = await key <EOL> print ( f"<STR_LIT>" ) <EOL> collections = Collection . objects . filter ( api_key = key ) <EOL> return [ <EOL> { <EOL> "<STR_LIT>" : collection . id , <EOL> "<STR_LIT>" : collection . title , <EOL> "<STR_LIT>" : collection . description , <EOL> "<STR_LIT>" : collection . status , <EOL> "<STR_LIT>" : collection . created . isoformat ( ) , <EOL> "<STR_LIT>" : collection . modified . isoformat ( ) , <EOL> "<STR_LIT>" : collection . processing , <EOL> "<STR_LIT>" : bool ( collection . model . name ) , <EOL> "<STR_LIT>" : await sync_to_async ( list ) ( <EOL> await sync_to_async ( collection . documents . values_list ) ( "<STR_LIT>" , flat = True ) <EOL> ) , <EOL> } <EOL> async for collection in collections <EOL> ] <EOL> @ collections_router . post ( <EOL> "<STR_LIT>" , summary = "<STR_LIT>" <EOL> ) <EOL> async def add_file_to_collection ( <EOL> request , <EOL> collection_id : int , <EOL> file : UploadedFile = File ( ... ) , <EOL> description : str = Form ( ... ) , <EOL> ) : <EOL> collection = await sync_to_async ( Collection . objects . get ) ( id = collection_id ) <EOL> doc_data = file . read ( ) <EOL> doc_file = ContentFile ( doc_data , file . name ) <EOL> document = Document ( collection = collection , file = doc_file , description = description ) <EOL> await sync_to_async ( document . save ) ( ) <EOL> return { "<STR_LIT>" : f"<STR_LIT>" } <EOL> </s>
<s> from django . db import migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . RemoveField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> </s>
<s> from . base import * <EOL> from . base import env <EOL> DEBUG = True <EOL> SECRET_KEY = env ( <EOL> "<STR_LIT>" , <EOL> default = "<STR_LIT>" , <EOL> ) <EOL> ALLOWED_HOSTS = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> CACHES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> } <EOL> EMAIL_BACKEND = env ( <EOL> "<STR_LIT>" , default = "<STR_LIT>" <EOL> ) <EOL> INSTALLED_APPS += [ "<STR_LIT>" ] <EOL> MIDDLEWARE += [ "<STR_LIT>" ] <EOL> DEBUG_TOOLBAR_CONFIG = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : True , <EOL> } <EOL> INTERNAL_IPS = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> if env ( "<STR_LIT>" ) == "<STR_LIT>" : <EOL> import socket <EOL> hostname , _ , ips = socket . gethostbyname_ex ( socket . gethostname ( ) ) <EOL> INTERNAL_IPS += [ "<STR_LIT>" . join ( ip . split ( "<STR_LIT>" ) [ : - <NUM_LIT> ] + [ "<STR_LIT>" ] ) for ip in ips ] <EOL> INSTALLED_APPS += [ "<STR_LIT>" ] <EOL> CELERY_TASK_EAGER_PROPAGATES = True <EOL> CORS_ALLOW_ALL_ORIGINS = True <EOL> </s>
<s> from django . apps import AppConfig <EOL> from django . utils . translation import gettext_lazy as _ <EOL> class UsersConfig ( AppConfig ) : <EOL> name = "<STR_LIT>" <EOL> verbose_name = _ ( "<STR_LIT>" ) <EOL> def ready ( self ) : <EOL> try : <EOL> import delphic . users . signals <EOL> except ImportError : <EOL> pass <EOL> </s>
<s> from . celery_app import app as celery_app <EOL> __all__ = ( "<STR_LIT>" , ) <EOL> </s>
<s> from django . contrib . auth import get_user_model <EOL> from django . db import models <EOL> from rest_framework_api_key . models import APIKey <EOL> User = get_user_model ( ) <EOL> class CollectionStatus ( models . TextChoices ) : <EOL> COMPLETE = "<STR_LIT>" <EOL> RUNNING = "<STR_LIT>" <EOL> QUEUED = "<STR_LIT>" <EOL> ERROR = "<STR_LIT>" <EOL> class Document ( models . Model ) : <EOL> collection = models . ForeignKey ( <EOL> "<STR_LIT>" , related_name = "<STR_LIT>" , on_delete = models . CASCADE <EOL> ) <EOL> file = models . FileField ( upload_to = "<STR_LIT>" ) <EOL> description = models . TextField ( ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> modified = models . DateTimeField ( auto_now = True ) <EOL> class Collection ( models . Model ) : <EOL> api_key = models . ForeignKey ( APIKey , blank = True , null = True , on_delete = models . CASCADE ) <EOL> title = models . CharField ( max_length = <NUM_LIT> ) <EOL> description = models . TextField ( ) <EOL> status = models . CharField ( max_length = <NUM_LIT> , choices = CollectionStatus . choices ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> modified = models . DateTimeField ( auto_now = True ) <EOL> model = models . FileField ( upload_to = "<STR_LIT>" ) <EOL> processing = models . BooleanField ( blank = True , null = True , default = False ) <EOL> def __str__ ( self ) : <EOL> return self . title <EOL> </s>
<s> from ninja import Schema <EOL> class CollectionStatusEnum ( str ) : <EOL> COMPLETE = "<STR_LIT>" <EOL> RUNNING = "<STR_LIT>" <EOL> QUEUED = "<STR_LIT>" <EOL> ERROR = "<STR_LIT>" <EOL> class CollectionIn ( Schema ) : <EOL> title : str <EOL> description : str | None <EOL> class CollectionModelSchema ( Schema ) : <EOL> id : int <EOL> title : str <EOL> description : str <EOL> status : CollectionStatusEnum <EOL> created : str <EOL> modified : str <EOL> processing : bool <EOL> has_model : bool <EOL> document_names : list [ str ] <EOL> class CollectionQueryInput ( Schema ) : <EOL> collection_id : int <EOL> query_str : str <EOL> class CollectionQueryOutput ( Schema ) : <EOL> response : str <EOL> </s>
<s> from django . db import migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> import django . contrib . auth . models <EOL> import django . contrib . auth . validators <EOL> from django . db import migrations , models <EOL> import django . utils . timezone <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( <EOL> blank = True , null = True , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = False , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> error_messages = { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } , <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> validators = [ <EOL> django . contrib . auth . validators . UnicodeUsernameValidator ( ) <EOL> ] , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . EmailField ( <EOL> blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = False , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = True , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( <EOL> default = django . utils . timezone . now , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> managers = [ <EOL> ( "<STR_LIT>" , django . contrib . auth . models . UserManager ( ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib import admin <EOL> from dev . football . core . admin import BaseAdmin <EOL> from dev . football . stadiums . models import Pitch , Stadium <EOL> @ admin . register ( Stadium ) <EOL> class StadiumAdmin ( BaseAdmin ) : <EOL> pass <EOL> @ admin . register ( Pitch ) <EOL> class PitchAdmin ( BaseAdmin ) : <EOL> pass <EOL> </s>
<s> from django . contrib import admin <EOL> from dev . football . core . admin import BaseAdmin <EOL> from dev . football . players . models import Player , PlayerAttributes , PlayerContract <EOL> @ admin . register ( Player ) <EOL> class PlayerAdmin ( BaseAdmin ) : <EOL> pass <EOL> @ admin . register ( PlayerAttributes ) <EOL> class PlayerAttributes ( BaseAdmin ) : <EOL> pass <EOL> @ admin . register ( PlayerContract ) <EOL> class PlayerContractAdmin ( BaseAdmin ) : <EOL> pass <EOL> </s>
<s> import django . db . models . deletion <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . SlugField ( <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> choices = [ ( "<STR_LIT>" , "<STR_LIT>" ) , ( "<STR_LIT>" , "<STR_LIT>" ) ] , <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . URLField ( help_text = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . TextField ( <EOL> help_text = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> null = True , <EOL> on_delete = django . db . models . deletion . SET_NULL , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> help_text = "<STR_LIT>" , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> from enum import Enum <EOL> from django . utils . translation import gettext_lazy as _ <EOL> class PitchSurfaceType ( Enum ) : <EOL> GRASS = _ ( "<STR_LIT>" ) <EOL> HYBRID = _ ( "<STR_LIT>" ) <EOL> ARTIFICIAL = _ ( "<STR_LIT>" ) <EOL> </s>
<s> from django . core . validators import MaxValueValidator , MinValueValidator <EOL> from django . db import models <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from dev . football . core . models import BaseModel <EOL> from dev . football . players . enums import PlayerPosition <EOL> class Player ( BaseModel ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , help_text = _ ( "<STR_LIT>" ) ) <EOL> key = models . SlugField ( <EOL> max_length = <NUM_LIT> , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> unique = True , <EOL> ) <EOL> def __str__ ( self ) : <EOL> return self . name <EOL> class PlayerAttributes ( BaseModel ) : <EOL> player = models . OneToOneField ( <EOL> Player , <EOL> primary_key = True , <EOL> on_delete = models . CASCADE , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> position = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> choices = [ ( p . name , p . value ) for p in PlayerPosition ] , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> nationality = models . CharField ( <EOL> max_length = <NUM_LIT> , help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> age = models . PositiveSmallIntegerField ( help_text = _ ( "<STR_LIT>" ) ) <EOL> score_defence = models . PositiveSmallIntegerField ( <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> default = <NUM_LIT> , <EOL> validators = [ MaxValueValidator ( <NUM_LIT> ) , MinValueValidator ( <NUM_LIT> ) ] , <EOL> ) <EOL> score_midfield = models . PositiveSmallIntegerField ( <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> default = <NUM_LIT> , <EOL> validators = [ MaxValueValidator ( <NUM_LIT> ) , MinValueValidator ( <NUM_LIT> ) ] , <EOL> ) <EOL> score_offence = models . PositiveSmallIntegerField ( <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> default = <NUM_LIT> , <EOL> validators = [ MaxValueValidator ( <NUM_LIT> ) , MinValueValidator ( <NUM_LIT> ) ] , <EOL> ) <EOL> class PlayerContract ( BaseModel ) : <EOL> player = models . ForeignKey ( <EOL> Player , on_delete = models . CASCADE , help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> team = models . ForeignKey ( <EOL> "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> valid_from = models . DateField ( <EOL> help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> duration = models . PositiveSmallIntegerField ( <EOL> help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> terms = models . TextField ( help_text = _ ( "<STR_LIT>" ) ) <EOL> </s>
<s> from enum import Enum <EOL> from django . utils . translation import gettext_lazy as _ <EOL> class PlayerPosition ( Enum ) : <EOL> GK = _ ( "<STR_LIT>" ) <EOL> LB = _ ( "<STR_LIT>" ) <EOL> CB = _ ( "<STR_LIT>" ) <EOL> RB = _ ( "<STR_LIT>" ) <EOL> DM = _ ( "<STR_LIT>" ) <EOL> CM = _ ( "<STR_LIT>" ) <EOL> AM = _ ( "<STR_LIT>" ) <EOL> LW = _ ( "<STR_LIT>" ) <EOL> RW = _ ( "<STR_LIT>" ) <EOL> ST = _ ( "<STR_LIT>" ) <EOL> </s>
<s> import pytest <EOL> from django . test import Client <EOL> from django . urls import reverse <EOL> ELEMENTS_CUSTOM = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> "<STR_LIT>" , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> ELEMENT_HEADER = '<STR_LIT>' <EOL> ELEMENT_FOOTER = '<STR_LIT>' <EOL> ELEMENT_USER_TOOL = '<STR_LIT>' <EOL> def request_admin_content ( <EOL> client : Client , <EOL> view_name : str = "<STR_LIT>" , <EOL> query_str : str = "<STR_LIT>" , <EOL> method : str = "<STR_LIT>" , <EOL> follow : bool = True , <EOL> ) -> str : <EOL> path = reverse ( f"<STR_LIT>" ) <EOL> response = getattr ( client , method ) ( f"<STR_LIT>" , follow = follow ) <EOL> return str ( response . content ) <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> ) <EOL> def test_authenticated ( client_super_admin , view_name ) : <EOL> content = request_admin_content ( client_super_admin , view_name ) <EOL> for element in ELEMENTS_CUSTOM : <EOL> assert element in content <EOL> assert ELEMENT_HEADER in content <EOL> assert ELEMENT_FOOTER in content <EOL> assert ELEMENT_USER_TOOL in content <EOL> def test_popup ( client_super_admin ) : <EOL> content = request_admin_content ( client_super_admin , "<STR_LIT>" , "<STR_LIT>" ) <EOL> for element in ELEMENTS_CUSTOM : <EOL> assert element not in content <EOL> assert ELEMENT_HEADER not in content <EOL> assert ELEMENT_FOOTER in content <EOL> assert ELEMENT_USER_TOOL not in content <EOL> def test_login ( client_super_admin ) : <EOL> client_super_admin . logout ( ) <EOL> content = request_admin_content ( client_super_admin ) <EOL> for element in ELEMENTS_CUSTOM : <EOL> assert element not in content <EOL> assert ELEMENT_HEADER in content <EOL> assert ELEMENT_FOOTER in content <EOL> assert ELEMENT_USER_TOOL not in content <EOL> def test_logout ( client_super_admin ) : <EOL> content = request_admin_content ( <EOL> client_super_admin , "<STR_LIT>" , method = "<STR_LIT>" , follow = False <EOL> ) <EOL> for element in ELEMENTS_CUSTOM : <EOL> assert element not in content <EOL> assert ELEMENT_HEADER in content <EOL> assert ELEMENT_FOOTER in content <EOL> assert ELEMENT_USER_TOOL not in content <EOL> </s>
<s> from django . contrib import admin <EOL> class BaseAdmin ( admin . ModelAdmin ) : <EOL> readonly_fields = ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> list_filter = ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> ordering = ( "<STR_LIT>" , ) <EOL> </s>
<s> import pytest <EOL> from dev . football . teams . factories import TeamFactory <EOL> from tests import request_search <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , <EOL> [ <EOL> ( "<STR_LIT>" , [ "<STR_LIT>" ] ) , <EOL> ( "<STR_LIT>" , [ "<STR_LIT>" ] ) , <EOL> ( "<STR_LIT>" , [ ] ) , <EOL> ] , <EOL> ) <EOL> def test_apps ( client_super_admin , query , results_expected ) : <EOL> response = request_search ( client_super_admin , query = query ) <EOL> data = response . json ( ) <EOL> results_actual = [ r [ "<STR_LIT>" ] for r in data [ "<STR_LIT>" ] [ "<STR_LIT>" ] ] <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( results_actual ) == len ( results_expected ) <EOL> assert not set ( results_actual ) . difference ( set ( results_expected ) ) <EOL> @ pytest . mark . parametrizedef test_models ( client_super_admin , query , results_expected ) : <EOL> response = request_search ( client_super_admin , query = query ) <EOL> data = response . json ( ) <EOL> results_actual = [ ] <EOL> for app in data [ "<STR_LIT>" ] [ "<STR_LIT>" ] : <EOL> for model in app [ "<STR_LIT>" ] : <EOL> results_actual . append ( model [ "<STR_LIT>" ] ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( results_actual ) == len ( results_expected ) <EOL> assert not set ( results_actual ) . difference ( set ( results_expected ) ) <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , <EOL> [ <EOL> ( "<STR_LIT>" , [ "<STR_LIT>" ] ) , <EOL> ( "<STR_LIT>" , [ "<STR_LIT>" ] ) , <EOL> ( "<STR_LIT>" , [ ] ) , <EOL> ( "<STR_LIT>" , [ "<STR_LIT>" , "<STR_LIT>" ] ) , <EOL> ( "<STR_LIT>" , [ "<STR_LIT>" ] ) , <EOL> ( "<STR_LIT>" , [ ] ) , <EOL> ] , <EOL> ) <EOL> def test_objects ( client_super_admin , query , results_expected ) : <EOL> for i , n in enumerate ( [ "<STR_LIT>" , "<STR_LIT>" ] , start = <NUM_LIT> ) : <EOL> TeamFactory ( <EOL> id = i , <EOL> name = f"<STR_LIT>" , <EOL> key = f"<STR_LIT>" , <EOL> website = f"<STR_LIT>" , <EOL> description = f"<STR_LIT>" , <EOL> ) <EOL> response = request_search ( client_super_admin , query = query ) <EOL> data = response . json ( ) <EOL> results_actual = [ ] <EOL> for app in data [ "<STR_LIT>" ] [ "<STR_LIT>" ] : <EOL> for model in app [ "<STR_LIT>" ] : <EOL> for obj in model [ "<STR_LIT>" ] : <EOL> results_actual . append ( obj [ "<STR_LIT>" ] ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( results_actual ) == len ( results_expected ) <EOL> assert not set ( results_actual ) . difference ( set ( results_expected ) ) <EOL> </s>
<s> from django . contrib import admin <EOL> from django . contrib . admin . apps import AdminConfig <EOL> from admin_site_search . views import AdminSiteSearchView <EOL> class CustomAdminSite ( AdminSiteSearchView , admin . AdminSite ) : <EOL> pass <EOL> class CustomAdminConfig ( AdminConfig ) : <EOL> default_site = "<STR_LIT>" <EOL> </s>
<s> from django . db import models <EOL> class BaseModel ( models . Model ) : <EOL> created_at = models . DateTimeField ( auto_now_add = True , null = True ) <EOL> updated_at = models . DateTimeField ( auto_now = True , null = True ) <EOL> class Meta : <EOL> ordering = [ "<STR_LIT>" ] <EOL> abstract = True <EOL> </s>
<s> from factory import SubFactory , django , fuzzy <EOL> from dev . football . stadiums . models import Pitch , Stadium <EOL> class StadiumFactory ( django . DjangoModelFactory ) : <EOL> name = fuzzy . FuzzyText ( ) <EOL> key = fuzzy . FuzzyText ( ) <EOL> capacity = fuzzy . FuzzyInteger ( low = <NUM_LIT> , high = <NUM_LIT> ) <EOL> class Meta : <EOL> model = Stadium <EOL> class PitchFactory ( django . DjangoModelFactory ) : <EOL> stadium = SubFactory ( StadiumFactory ) <EOL> surface_type = "<STR_LIT>" <EOL> width = fuzzy . FuzzyInteger ( low = <NUM_LIT> , high = <NUM_LIT> ) <EOL> length = fuzzy . FuzzyInteger ( low = <NUM_LIT> , high = <NUM_LIT> ) <EOL> class Meta : <EOL> model = Pitch <EOL> </s>
<s> import django . db . models . deletion <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> help_text = "<STR_LIT>" , max_length = <NUM_LIT> <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . SlugField ( <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . IntegerField ( help_text = "<STR_LIT>" ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> help_text = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> help_text = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . OneToOneField ( <EOL> help_text = "<STR_LIT>" , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> import django . core . validators <EOL> import django . db . models . deletion <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> help_text = "<STR_LIT>" , max_length = <NUM_LIT> <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . SlugField ( <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . OneToOneField ( <EOL> help_text = "<STR_LIT>" , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> primary_key = True , <EOL> serialize = False , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> help_text = "<STR_LIT>" , max_length = <NUM_LIT> <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> help_text = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> default = <NUM_LIT> , <EOL> help_text = "<STR_LIT>" , <EOL> validators = [ <EOL> django . core . validators . MaxValueValidator ( <NUM_LIT> ) , <EOL> django . core . validators . MinValueValidator ( <NUM_LIT> ) , <EOL> ] , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> default = <NUM_LIT> , <EOL> help_text = "<STR_LIT>" , <EOL> validators = [ <EOL> django . core . validators . MaxValueValidator ( <NUM_LIT> ) , <EOL> django . core . validators . MinValueValidator ( <NUM_LIT> ) , <EOL> ] , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> default = <NUM_LIT> , <EOL> help_text = "<STR_LIT>" , <EOL> validators = [ <EOL> django . core . validators . MaxValueValidator ( <NUM_LIT> ) , <EOL> django . core . validators . MinValueValidator ( <NUM_LIT> ) , <EOL> ] , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now_add = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( auto_now = True , null = True ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateField ( <EOL> help_text = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . PositiveSmallIntegerField ( <EOL> help_text = "<STR_LIT>" <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . TextField ( help_text = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ForeignKey ( <EOL> help_text = "<STR_LIT>" , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> import re <EOL> from django . test import Client , override_settings <EOL> from django . urls import reverse <EOL> from admin_site_search . views import AdminSiteSearchView <EOL> def request_script_element ( client : Client ) : <EOL> response = client . get ( reverse ( "<STR_LIT>" ) , follow = True ) <EOL> content = str ( response . content ) <EOL> script_element = re . search ( <EOL> r'<STR_LIT>' , content <EOL> ) . group ( <NUM_LIT> ) <EOL> return script_element <EOL> @ override_settings ( ROOT_URLCONF = "<STR_LIT>" ) <EOL> def test_default ( client_super_admin ) : <EOL> element = request_script_element ( client_super_admin ) <EOL> assert '<STR_LIT>' in element <EOL> assert '<STR_LIT>' in element <EOL> @ override_settings ( ROOT_URLCONF = "<STR_LIT>" ) <EOL> def test_custom ( client_super_admin ) : <EOL> element = request_script_element ( client_super_admin ) <EOL> assert '<STR_LIT>' in element <EOL> assert '<STR_LIT>' in element <EOL> @ override_settings ( ROOT_URLCONF = "<STR_LIT>" ) <EOL> def test_index ( client_super_admin ) : <EOL> element = request_script_element ( client_super_admin ) <EOL> assert '<STR_LIT>' in element <EOL> assert '<STR_LIT>' in element <EOL> def test_path_attr ( ) : <EOL> assert hasattr ( AdminSiteSearchView , "<STR_LIT>" ) <EOL> assert reverse ( "<STR_LIT>" ) . endswith ( AdminSiteSearchView . site_search_path ) <EOL> </s>
<s> from django . contrib import admin <EOL> from django . urls import path <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , admin . site . urls ) , <EOL> ] <EOL> </s>
<s> from factory import SubFactory , django , fuzzy <EOL> from dev . football . stadiums . factories import StadiumFactory <EOL> from dev . football . teams . models import Squad , Team <EOL> class FuzzyURL ( fuzzy . BaseFuzzyAttribute ) : <EOL> def fuzz ( self ) : <EOL> return f"<STR_LIT>" . lower ( ) <EOL> class TeamFactory ( django . DjangoModelFactory ) : <EOL> name = fuzzy . FuzzyText ( ) <EOL> key = fuzzy . FuzzyText ( ) <EOL> type = "<STR_LIT>" <EOL> website = FuzzyURL ( ) <EOL> motto = fuzzy . FuzzyText ( ) <EOL> stadium = SubFactory ( StadiumFactory ) <EOL> class Meta : <EOL> model = Team <EOL> class SquadFactory ( django . DjangoModelFactory ) : <EOL> team = SubFactory ( TeamFactory ) <EOL> type = "<STR_LIT>" <EOL> class Meta : <EOL> model = Squad <EOL> </s>
<s> from django . db import models <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from dev . football . core . models import BaseModel <EOL> from dev . football . teams . enums import SquadType , TeamType <EOL> class Team ( BaseModel ) : <EOL> name = models . CharField ( <EOL> max_length = <NUM_LIT> , help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> key = models . SlugField ( <EOL> max_length = <NUM_LIT> , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> unique = True , <EOL> ) <EOL> type = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> choices = [ ( t . name , t . value ) for t in TeamType ] , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> website = models . URLField ( help_text = _ ( "<STR_LIT>" ) ) <EOL> motto = models . CharField ( <EOL> max_length = <NUM_LIT> , help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> description = models . TextField ( <EOL> help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> stadium = models . ForeignKey ( <EOL> "<STR_LIT>" , <EOL> on_delete = models . SET_NULL , <EOL> blank = True , <EOL> null = True , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> def __str__ ( self ) : <EOL> return self . name <EOL> class Squad ( BaseModel ) : <EOL> team = models . ForeignKey ( <EOL> Team , <EOL> on_delete = models . CASCADE , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> type = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> choices = [ ( t . name , t . value ) for t in SquadType ] , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> players = models . ManyToManyField ( <EOL> "<STR_LIT>" , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> blank = True , <EOL> ) <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> import django . db . models . deletion <EOL> from django . db import migrations , models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . ForeignKey ( <EOL> help_text = "<STR_LIT>" , <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . test import Client <EOL> from django . urls import reverse <EOL> def request_search ( client : Client , query : str = "<STR_LIT>" ) : <EOL> url = f'<STR_LIT>' <EOL> return client . get ( url ) <EOL> </s>
<s> from enum import Enum <EOL> from django . utils . translation import gettext_lazy as _ <EOL> class TeamType ( Enum ) : <EOL> CLUB = _ ( "<STR_LIT>" ) <EOL> NATIONAL = _ ( "<STR_LIT>" ) <EOL> class SquadType ( Enum ) : <EOL> SENIOR_MEN = _ ( "<STR_LIT>" ) <EOL> SENIOR_WOMEN = _ ( "<STR_LIT>" ) <EOL> ACADEMY = _ ( "<STR_LIT>" ) <EOL> CHARITY = _ ( "<STR_LIT>" ) <EOL> </s>
<s> from unittest . mock import patch <EOL> from django . apps import apps <EOL> from django . test import override_settings <EOL> from admin_site_search . views import AdminSiteSearchView <EOL> from dev . football . core . factories import GroupFactory <EOL> from dev . football . players . factories import PlayerAttributesFactory , PlayerFactory <EOL> from dev . football . stadiums . factories import StadiumFactory <EOL> from dev . football . teams . factories import TeamFactory <EOL> from tests import request_search <EOL> def test_empty ( client_admin ) : <EOL> response = request_search ( client_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data . keys ( ) ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : [ ] } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_apps ( client_super_admin ) : <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data . keys ( ) ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ ] , <EOL> } <EOL> ] <EOL> } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_models ( client_super_admin ) : <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ ] , <EOL> } <EOL> ] , <EOL> } <EOL> ] <EOL> } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_model_class_none ( client_super_admin ) : <EOL> with patch . object ( AdminSiteSearchView , "<STR_LIT>" ) as get_model_class : <EOL> get_model_class . return_value = None <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ ] , <EOL> } <EOL> ] <EOL> } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_objects ( client_super_admin ) : <EOL> match = GroupFactory ( name = "<STR_LIT>" ) <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : str ( match . id ) , <EOL> "<STR_LIT>" : str ( match ) , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> ] , <EOL> } <EOL> ] , <EOL> } <EOL> ] <EOL> } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_objects_one_to_one_pk ( client_super_admin ) : <EOL> match = PlayerAttributesFactory ( nationality = "<STR_LIT>" ) <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : str ( match . pk ) , <EOL> "<STR_LIT>" : str ( match ) , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> ] , <EOL> } <EOL> ] , <EOL> } <EOL> ] <EOL> } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_counts ( client_super_admin ) : <EOL> TeamFactory ( name = "<STR_LIT>" ) <EOL> TeamFactory ( name = "<STR_LIT>" ) <EOL> PlayerFactory ( name = "<STR_LIT>" ) <EOL> StadiumFactory ( name = "<STR_LIT>" ) <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> def test_limit ( client_super_admin ) : <EOL> for i in range ( <NUM_LIT> ) : <EOL> GroupFactory ( name = f"<STR_LIT>" ) <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> @ override_settings ( DEBUG = True ) <EOL> def test_errors_on ( client_super_admin ) : <EOL> team = TeamFactory ( name = "<STR_LIT>" ) <EOL> StadiumFactory ( name = "<STR_LIT>" ) <EOL> def error_if_stadium ( app_label , model_dict ) : <EOL> if model_dict [ "<STR_LIT>" ] == "<STR_LIT>" : <EOL> raise Exception ( "<STR_LIT>" ) <EOL> else : <EOL> return apps . get_model ( app_label , model_dict [ "<STR_LIT>" ] ) <EOL> with patch . object ( AdminSiteSearchView , "<STR_LIT>" ) as get_model_class : <EOL> get_model_class . side_effect = error_if_stadium <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data . keys ( ) ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> { <EOL> "<STR_LIT>" : str ( team . pk ) , <EOL> "<STR_LIT>" : str ( team ) , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> ] , <EOL> } <EOL> ] , <EOL> } <EOL> ] <EOL> } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert len ( data [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] [ <NUM_LIT> ] == { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> @ override_settings ( DEBUG = False ) <EOL> def test_errors_off ( client_super_admin ) : <EOL> with patch . object ( AdminSiteSearchView , "<STR_LIT>" ) as get_model_class : <EOL> get_model_class . side_effect = Exception <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : [ ] } <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> assert not data [ "<STR_LIT>" ] <EOL> </s>
<s> from django . contrib . auth . models import Group <EOL> from factory import django , fuzzy <EOL> class GroupFactory ( django . DjangoModelFactory ) : <EOL> name = fuzzy . FuzzyText ( ) <EOL> class Meta : <EOL> model = Group <EOL> </s>
<s> from django . apps import AppConfig <EOL> class CoreConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == "<STR_LIT>" : <EOL> main ( ) <EOL> </s>
<s> from playwright . sync_api import expect <EOL> from tests . browser . conftest import ( <EOL> expect_modal_closed , <EOL> expect_modal_open , <EOL> open_modal , <EOL> search_box , <EOL> search_button , <EOL> ) <EOL> def test_modal_admin_pages ( page_admin ) : <EOL> for path in [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> page_admin . goto ( f"<STR_LIT>" ) <EOL> expect ( search_button ( page_admin ) ) . to_be_visible ( ) <EOL> expect_modal_closed ( page_admin ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> expect_modal_open ( page_admin ) <EOL> def test_modal_other_pages ( page_admin ) : <EOL> for path in [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> page_admin . goto ( f"<STR_LIT>" ) <EOL> expect ( search_button ( page_admin ) ) . not_to_be_visible ( ) <EOL> expect_modal_closed ( page_admin ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> expect_modal_closed ( page_admin ) <EOL> def test_modal_click ( page_admin ) : <EOL> expect_modal_closed ( page_admin ) <EOL> button = search_button ( page_admin ) <EOL> expect ( search_button ( page_admin ) ) . to_be_visible ( ) <EOL> button . click ( ) <EOL> expect_modal_open ( page_admin ) <EOL> def test_modal_keyboard ( page_admin ) : <EOL> expect_modal_closed ( page_admin ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> expect_modal_open ( page_admin ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> expect_modal_closed ( page_admin ) <EOL> def test_results_display ( page_admin ) : <EOL> open_modal ( page_admin ) <EOL> expect ( page_admin . get_by_text ( "<STR_LIT>" ) ) . to_be_visible ( ) <EOL> search_box ( page_admin ) . type ( "<STR_LIT>" ) <EOL> expect ( <EOL> page_admin . get_by_text ( "<STR_LIT>" ) <EOL> ) . to_be_visible ( ) <EOL> expect ( page_admin . get_by_text ( "<STR_LIT>" ) ) . not_to_be_visible ( ) <EOL> for result in [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] : <EOL> expect ( page_admin . get_by_role ( "<STR_LIT>" , name = result , exact = True ) ) . to_be_visible ( ) <EOL> def test_results_none ( page_admin ) : <EOL> open_modal ( page_admin ) <EOL> expect ( page_admin . get_by_text ( "<STR_LIT>" ) ) . to_be_visible ( ) <EOL> search_box ( page_admin ) . type ( "<STR_LIT>" ) <EOL> expect ( page_admin . get_by_text ( '<STR_LIT>' ) ) . to_be_visible ( ) <EOL> expect ( page_admin . get_by_text ( "<STR_LIT>" ) ) . not_to_be_visible ( ) <EOL> def test_results_keyboard ( page_admin ) : <EOL> open_modal ( page_admin , with_keyboard = True ) <EOL> search_box ( page_admin ) . type ( "<STR_LIT>" ) <EOL> expect ( <EOL> page_admin . get_by_text ( "<STR_LIT>" ) <EOL> ) . to_be_visible ( ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> search_box ( page_admin ) . type ( "<STR_LIT>" ) <EOL> expect ( <EOL> page_admin . get_by_text ( "<STR_LIT>" ) <EOL> ) . to_be_visible ( ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> page_admin . keyboard . press ( "<STR_LIT>" ) <EOL> expect ( page_admin . get_by_text ( "<STR_LIT>" , exact = True ) ) . to_be_visible ( ) <EOL> expect ( page_admin . get_by_label ( "<STR_LIT>" ) ) . to_have_value ( "<STR_LIT>" ) <EOL> </s>
<s> from django . db import models <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from dev . football . core . models import BaseModel <EOL> from dev . football . stadiums . enums import PitchSurfaceType <EOL> class Stadium ( BaseModel ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , help_text = _ ( "<STR_LIT>" ) ) <EOL> key = models . SlugField ( <EOL> max_length = <NUM_LIT> , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> unique = True , <EOL> ) <EOL> capacity = models . IntegerField ( help_text = _ ( "<STR_LIT>" ) ) <EOL> def __str__ ( self ) : <EOL> return self . name <EOL> class Pitch ( BaseModel ) : <EOL> stadium = models . OneToOneField ( <EOL> Stadium , <EOL> on_delete = models . CASCADE , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> surface_type = models . CharField ( <EOL> max_length = <NUM_LIT> , <EOL> choices = [ ( t . name , t . value ) for t in PitchSurfaceType ] , <EOL> help_text = _ ( "<STR_LIT>" ) , <EOL> ) <EOL> width = models . PositiveSmallIntegerField ( <EOL> help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> length = models . PositiveSmallIntegerField ( <EOL> help_text = _ ( "<STR_LIT>" ) <EOL> ) <EOL> </s>
<s> import pytest <EOL> from django . contrib . auth . models import User <EOL> from django . test . client import Client <EOL> @ pytest . fixture ( autouse = True ) <EOL> def enable_db_access_for_all_tests ( db ) : <EOL> pass <EOL> @ pytest . fixture ( ) <EOL> def user_standard ( client ) : <EOL> user = User . objects . create_user ( username = "<STR_LIT>" , password = "<STR_LIT>" ) <EOL> client . force_login ( user ) <EOL> return user <EOL> @ pytest . fixture ( ) <EOL> def user_admin ( client , admin_user ) : <EOL> user = User . objects . create_user ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" , is_staff = True <EOL> ) <EOL> client . force_login ( user ) <EOL> return user <EOL> @ pytest . fixture ( ) <EOL> def user_super ( client ) : <EOL> user = User . objects . create_user ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" , is_superuser = True <EOL> ) <EOL> client . force_login ( user ) <EOL> return user <EOL> @ pytest . fixture ( ) <EOL> def client_standard ( user_standard ) : <EOL> client = Client ( ) <EOL> client . force_login ( user_standard ) <EOL> return client <EOL> @ pytest . fixture ( ) <EOL> def client_admin ( user_admin ) : <EOL> client = Client ( ) <EOL> client . force_login ( user_admin ) <EOL> return client <EOL> @ pytest . fixture ( ) <EOL> def client_super ( user_super ) : <EOL> client = Client ( ) <EOL> client . force_login ( user_super ) <EOL> return client <EOL> @ pytest . fixture ( ) <EOL> def client_unauthenticated ( ) : <EOL> client = Client ( ) <EOL> client . logout ( ) <EOL> return client <EOL> @ pytest . fixture ( ) <EOL> def client_super_admin ( client_admin , user_admin ) : <EOL> user_admin . is_superuser = True <EOL> user_admin . save ( ) <EOL> return client_admin <EOL> </s>
<s> from django . apps import AppConfig <EOL> class TeamConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> from django . contrib import admin <EOL> from dev . football . core . admin import BaseAdmin <EOL> from dev . football . teams . models import Squad , Team <EOL> @ admin . register ( Team ) <EOL> class TeamAdmin ( BaseAdmin ) : <EOL> pass <EOL> @ admin . register ( Squad ) <EOL> class SquadAdmin ( BaseAdmin ) : <EOL> pass <EOL> </s>
<s> from django . apps import AppConfig <EOL> class StadiumConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> from django . apps import AppConfig <EOL> class PlayerConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> import pytest <EOL> from django . contrib . auth . models import Permission <EOL> from dev . football . players . factories import PlayerFactory <EOL> from dev . football . stadiums . factories import StadiumFactory <EOL> from dev . football . teams . factories import TeamFactory <EOL> from tests import request_search <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , <EOL> [ ( False , False , <NUM_LIT> ) , ( False , True , <NUM_LIT> ) , ( True , False , <NUM_LIT> ) , ( True , True , <NUM_LIT> ) ] , <EOL> ) <EOL> def test_authenticated ( <EOL> client_standard , user_standard , is_staff , is_superuser , status_code <EOL> ) : <EOL> user_standard . is_staff = is_staff <EOL> user_standard . is_superuser = is_superuser <EOL> user_standard . save ( ) <EOL> response = request_search ( client_standard ) <EOL> assert response . status_code == status_code <EOL> def test_unauthenticated ( client_admin ) : <EOL> client_admin . logout ( ) <EOL> response = request_search ( client_admin ) <EOL> assert response . status_code == <NUM_LIT> <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , <EOL> [ <EOL> ( [ "<STR_LIT>" ] , False ) , <EOL> ( [ "<STR_LIT>" ] , False ) , <EOL> ( [ "<STR_LIT>" , "<STR_LIT>" ] , False ) , <EOL> ( [ "<STR_LIT>" , "<STR_LIT>" ] , True ) , <EOL> ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , True ) , <EOL> ] , <EOL> ) <EOL> def test_permission_can_view ( client_admin , user_admin , permissions , can_add ) : <EOL> obj = TeamFactory ( name = "<STR_LIT>" ) <EOL> permission_ids = Permission . objects . filter ( codename__in = permissions ) . values_list ( <EOL> "<STR_LIT>" , flat = True <EOL> ) <EOL> user_admin . user_permissions . add ( * permission_ids ) <EOL> response = request_search ( client_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] == "<STR_LIT>" <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] == "<STR_LIT>" <EOL> assert ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] is not None ) is can_add <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] [ <NUM_LIT> ] [ "<STR_LIT>" ] == str ( obj . id ) <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> @ pytest . mark . parametrize ( <EOL> "<STR_LIT>" , [ [ ] , [ "<STR_LIT>" ] , [ "<STR_LIT>" ] , [ "<STR_LIT>" , "<STR_LIT>" ] ] <EOL> ) <EOL> def test_permission_cannot_view ( client_admin , user_admin , permissions ) : <EOL> TeamFactory ( name = "<STR_LIT>" ) <EOL> permission_ids = Permission . objects . filter ( codename__in = permissions ) . values_list ( <EOL> "<STR_LIT>" , flat = True <EOL> ) <EOL> user_admin . user_permissions . add ( * permission_ids ) <EOL> response = request_search ( client_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> @ pytest . mark . parametrize ( "<STR_LIT>" , [ PlayerFactory , StadiumFactory ] ) <EOL> def test_permission_can_view_other ( client_admin , user_admin , factory ) : <EOL> factory ( name = "<STR_LIT>" ) <EOL> permissions = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> permission_ids = Permission . objects . filter ( codename__in = permissions ) . values_list ( <EOL> "<STR_LIT>" , flat = True <EOL> ) <EOL> user_admin . user_permissions . add ( * permission_ids ) <EOL> response = request_search ( client_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> def test_admin_not_registered ( client_super_admin ) : <EOL> objects = Permission . objects . filter ( codename__startswith = "<STR_LIT>" ) <EOL> response = request_search ( client_super_admin , query = "<STR_LIT>" ) <EOL> data = response . json ( ) <EOL> assert len ( objects ) > <NUM_LIT> <EOL> assert response . status_code == <NUM_LIT> <EOL> assert len ( data [ "<STR_LIT>" ] [ "<STR_LIT>" ] ) == <NUM_LIT> <EOL> assert data [ "<STR_LIT>" ] == { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : <NUM_LIT> } <EOL> </s>
<s> import os <EOL> BASE_DIR = os . path . dirname ( os . path . dirname ( os . path . abspath ( __file__ ) ) ) <EOL> SECRET_KEY = '<STR_LIT>' <EOL> DEBUG = True <EOL> ALLOWED_HOSTS = [ ] <EOL> INSTALLED_APPS = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' <EOL> ] <EOL> MIDDLEWARE = [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] <EOL> ROOT_URLCONF = '<STR_LIT>' <EOL> TEMPLATES = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : [ "<STR_LIT>" ] , <EOL> '<STR_LIT>' : True , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : [ <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = '<STR_LIT>' <EOL> DATABASES = { <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> "<STR_LIT>" : str ( BASE_DIR ) + "<STR_LIT>" <EOL> } <EOL> } <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> { <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> } , <EOL> ] <EOL> LANGUAGE_CODE = '<STR_LIT>' <EOL> TIME_ZONE = '<STR_LIT>' <EOL> USE_I18N = True <EOL> USE_L10N = True <EOL> USE_TZ = False <EOL> MEDIA_URL = '<STR_LIT>' <EOL> MEDIA_ROOT = os . path . join ( BASE_DIR , '<STR_LIT>' ) <EOL> STATIC_URL = '<STR_LIT>' <EOL> STATICFILES_DIRS = [ <EOL> os . path . join ( BASE_DIR , '<STR_LIT>' ) <EOL> ] <EOL> </s>
<s> import torch <EOL> import torch . nn as nn <EOL> import torch . nn . functional as F <EOL> class ChannelAtt ( nn . Module ) : <EOL> def __init__ ( self , channel , reduction ) : <EOL> super ( ChannelAtt , self ) . __init__ ( ) <EOL> self . avg_pool = nn . AdaptiveAvgPool2d ( <NUM_LIT> ) <EOL> self . fc = nn . Sequential ( <EOL> nn . Linear ( channel , channel // reduction ) , <EOL> nn . ReLU ( ) , <EOL> nn . Linear ( channel // reduction , channel ) , <EOL> nn . Sigmoid ( ) ) <EOL> def forward ( self , x ) : <EOL> b , c , _ , _ = x . size ( ) <EOL> y = self . avg_pool ( x ) . view ( b , c ) <EOL> y = self . fc ( y ) . view ( b , c , <NUM_LIT> , <NUM_LIT> ) <EOL> return x * y <EOL> class CountingDecoder ( nn . Module ) : <EOL> def __init__ ( self , in_channel , out_channel , kernel_size ) : <EOL> super ( CountingDecoder , self ) . __init__ ( ) <EOL> self . in_channel = in_channel <EOL> self . out_channel = out_channel <EOL> self . trans_layer = nn . Sequential ( <EOL> nn . Conv2d ( self . in_channel , <NUM_LIT> , kernel_size = kernel_size , padding = kernel_size // <NUM_LIT> , bias = False ) , <EOL> nn . BatchNorm2d ( <NUM_LIT> ) ) <EOL> self . channel_att = ChannelAtt ( <NUM_LIT> , <NUM_LIT> ) <EOL> self . pred_layer = nn . Sequential ( <EOL> nn . Conv2d ( <NUM_LIT> , self . out_channel , kernel_size = <NUM_LIT> , bias = False ) , <EOL> nn . Sigmoid ( ) ) <EOL> def forward ( self , x , mask ) : <EOL> b , c , h , w = x . size ( ) <EOL> x = self . trans_layer ( x ) <EOL> x = self . channel_att ( x ) <EOL> x = self . pred_layer ( x ) <EOL> if mask is not None : <EOL> x = x * mask <EOL> x = x . view ( b , self . out_channel , - <NUM_LIT> ) <EOL> x1 = torch . sum ( x , dim = - <NUM_LIT> ) <EOL> return x1 , x . view ( b , self . out_channel , h , w ) <EOL> </s>
<s> import pickle <EOL> from asap . makedataset import Dataset <EOL> import torch <EOL> import configargparse <EOL> from model import AESmodel <EOL> from fivefold import fivefold <EOL> import os <EOL> def _initialize_arguments ( p : configargparse . ArgParser ) : <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' ) <EOL> p . add ( '<STR_LIT>' , action = '<STR_LIT>' , help = '<STR_LIT>' ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = int ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = int ) <EOL> p . add ( '<STR_LIT>' , action = '<STR_LIT>' , help = '<STR_LIT>' ) <EOL> p . add ( '<STR_LIT>' ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = str ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = int ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = float ) <EOL> p . add ( '<STR_LIT>' , help = '<STR_LIT>' , type = str ) <EOL> args = p . parse_args ( ) <EOL> if torch . cuda . is_available ( ) and args . cuda : <EOL> args . device = '<STR_LIT>' <EOL> else : <EOL> args . device = '<STR_LIT>' <EOL> return args <EOL> if __name__ == "<STR_LIT>" : <EOL> p = configargparse . ArgParser ( default_config_files = [ "<STR_LIT>" ] ) <EOL> args = _initialize_arguments ( p ) <EOL> print ( f'<STR_LIT>' ) <EOL> with open ( f'<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> dataset = pickle . load ( f ) <EOL> folds = fivefold ( dataset ) <EOL> for val_index in range ( len ( folds . essay_folds ) ) : <EOL> for test_index in range ( len ( folds . essay_folds ) ) : <EOL> valessays = [ ] <EOL> valscores = [ ] <EOL> testessays = [ ] <EOL> testscores = [ ] <EOL> trainessays = [ ] <EOL> trainscores = [ ] <EOL> if val_index == test_index : <EOL> continue <EOL> foldname = f'<STR_LIT>' <EOL> for i , ( essays , scores ) in enumerate ( zip ( folds . essay_folds , folds . score_folds ) ) : <EOL> if i == val_index : <EOL> valessays = folds . essay_folds [ i ] <EOL> valscores = folds . score_folds [ i ] <EOL> elif i == test_index : <EOL> testessays = folds . essay_folds [ i ] <EOL> testscores = folds . score_folds [ i ] <EOL> else : <EOL> trainessays = trainessays + folds . essay_folds [ i ] <EOL> trainscores = trainscores + folds . score_folds [ i ] <EOL> model = AESmodel ( traindata = ( trainessays , trainscores ) , valdata = ( valessays , valscores ) , <EOL> testdata = ( testessays , testscores ) , foldname = foldname , args = args ) <EOL> filepath = f'<STR_LIT>' <EOL> if not os . path . isdir ( filepath ) : <EOL> os . mkdir ( filepath ) <EOL> if not os . path . isdir ( filepath + f'<STR_LIT>' ) : <EOL> os . mkdir ( filepath + f'<STR_LIT>' ) <EOL> os . mkdir ( filepath + f'<STR_LIT>' ) <EOL> os . mkdir ( filepath + f'<STR_LIT>' ) <EOL> os . mkdir ( filepath + f'<STR_LIT>' ) <EOL> model . train ( ) <EOL> pass <EOL> </s>
<s> import os <EOL> import pickle <EOL> from PIL import Image <EOL> imgs = [ ] <EOL> for i in os . listdir ( '<STR_LIT>' ) : <EOL> if i . endswith ( '<STR_LIT>' ) : <EOL> imgs . append ( Image . open ( i ) ) <EOL> with open ( '<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> pickle . dump ( imgs , f ) <EOL> </s>
<s> from ultralytics import YOLO <EOL> import yaml <EOL> config_file = open ( '<STR_LIT>' ) <EOL> config = yaml . load ( config_file , yaml . loader . SafeLoader ) <EOL> config_file . close ( ) <EOL> model_name = config [ '<STR_LIT>' ] <EOL> weights = config [ '<STR_LIT>' ] <EOL> dataset = config [ '<STR_LIT>' ] <EOL> model = YOLO ( model = model_name ) . load ( weights = weights ) <EOL> model . train ( data = dataset , epochs = <NUM_LIT> , imgsz = <NUM_LIT> ) <EOL> </s>
<s> import torch <EOL> import torch . nn as nn <EOL> from CAN . models . attention import Attention <EOL> import math <EOL> class PositionEmbeddingSine ( nn . Module ) : <EOL> def __init__ ( self , num_pos_feats = <NUM_LIT> , temperature = <NUM_LIT> , normalize = False , scale = None ) : <EOL> super ( ) . __init__ ( ) <EOL> self . num_pos_feats = num_pos_feats <EOL> self . temperature = temperature <EOL> self . normalize = normalize <EOL> if scale is not None and normalize is False : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> if scale is None : <EOL> scale = <NUM_LIT> * math . pi <EOL> self . scale = scale <EOL> def forward ( self , x , mask ) : <EOL> y_embed = mask . cumsum ( <NUM_LIT> , dtype = torch . float32 ) <EOL> x_embed = mask . cumsum ( <NUM_LIT> , dtype = torch . float32 ) <EOL> if self . normalize : <EOL> eps = <NUM_LIT> <EOL> y_embed = y_embed / ( y_embed [ : , - <NUM_LIT> : , : ] + eps ) * self . scale <EOL> x_embed = x_embed / ( x_embed [ : , : , - <NUM_LIT> : ] + eps ) * self . scale <EOL> dim_t = torch . arange ( self . num_pos_feats , dtype = torch . float32 , device = x . device ) <EOL> dim_t = self . temperature ** ( <NUM_LIT> * ( dim_t // <NUM_LIT> ) / self . num_pos_feats ) <EOL> pos_x = x_embed [ : , : , : , None ] / dim_t <EOL> pos_y = y_embed [ : , : , : , None ] / dim_t <EOL> pos_x = torch . stack ( ( pos_x [ : , : , : , <NUM_LIT> : : <NUM_LIT> ] . sin ( ) , pos_x [ : , : , : , <NUM_LIT> : : <NUM_LIT> ] . cos ( ) ) , dim = <NUM_LIT> ) . flatten ( <NUM_LIT> ) <EOL> pos_y = torch . stack ( ( pos_y [ : , : , : , <NUM_LIT> : : <NUM_LIT> ] . sin ( ) , pos_y [ : , : , : , <NUM_LIT> : : <NUM_LIT> ] . cos ( ) ) , dim = <NUM_LIT> ) . flatten ( <NUM_LIT> ) <EOL> pos = torch . cat ( ( pos_y , pos_x ) , dim = <NUM_LIT> ) . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> return pos <EOL> class AttDecoder ( nn . Module ) : <EOL> def __init__ ( self , params ) : <EOL> super ( AttDecoder , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . input_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . hidden_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . out_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . attention_dim = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . dropout_prob = params [ '<STR_LIT>' ] <EOL> self . device = params [ '<STR_LIT>' ] <EOL> self . word_num = params [ '<STR_LIT>' ] <EOL> self . counting_num = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . ratio = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . init_weight = nn . Linear ( self . out_channel , self . hidden_size ) <EOL> self . embedding = nn . Embedding ( self . word_num , self . input_size ) <EOL> self . word_input_gru = nn . GRUCell ( self . input_size , self . hidden_size ) <EOL> self . word_attention = Attention ( params ) <EOL> self . encoder_feature_conv = nn . Conv2d ( self . out_channel , self . attention_dim , <EOL> kernel_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] , <EOL> padding = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] // <NUM_LIT> ) <EOL> self . word_state_weight = nn . Linear ( self . hidden_size , self . hidden_size ) <EOL> self . word_embedding_weight = nn . Linear ( self . input_size , self . hidden_size ) <EOL> self . word_context_weight = nn . Linear ( self . out_channel , self . hidden_size ) <EOL> self . counting_context_weight = nn . Linear ( self . counting_num , self . hidden_size ) <EOL> self . word_convert = nn . Linear ( self . hidden_size , self . word_num ) <EOL> if params [ '<STR_LIT>' ] : <EOL> self . dropout = nn . Dropout ( params [ '<STR_LIT>' ] ) <EOL> def forward ( self , cnn_features , labels , counting_preds , images_mask , labels_mask , is_train = True ) : <EOL> batch_size , num_steps = labels . shape <EOL> height , width = cnn_features . shape [ <NUM_LIT> : ] <EOL> word_probs = torch . zeros ( ( batch_size , num_steps , self . word_num ) ) . to ( device = self . device ) <EOL> images_mask = images_mask [ : , : , : : self . ratio , : : self . ratio ] <EOL> word_alpha_sum = torch . zeros ( ( batch_size , <NUM_LIT> , height , width ) ) . to ( device = self . device ) <EOL> word_alphas = torch . zeros ( ( batch_size , num_steps , height , width ) ) . to ( device = self . device ) <EOL> hidden = self . init_hidden ( cnn_features , images_mask ) <EOL> counting_context_weighted = self . counting_context_weight ( counting_preds ) <EOL> cnn_features_trans = self . encoder_feature_conv ( cnn_features ) <EOL> position_embedding = PositionEmbeddingSine ( <NUM_LIT> , normalize = True ) <EOL> pos = position_embedding ( cnn_features_trans , images_mask [ : , <NUM_LIT> , : , : ] ) <EOL> cnn_features_trans = cnn_features_trans + pos <EOL> if is_train : <EOL> for i in range ( num_steps ) : <EOL> word_embedding = self . embedding ( labels [ : , i - <NUM_LIT> ] ) if i else self . embedding ( torch . ones ( [ batch_size ] ) . long ( ) . to ( self . device ) ) <EOL> hidden = self . word_input_gru ( word_embedding , hidden ) <EOL> word_context_vec , word_alpha , word_alpha_sum = self . word_attention ( cnn_features , cnn_features_trans , hidden , <EOL> word_alpha_sum , images_mask ) <EOL> current_state = self . word_state_weight ( hidden ) <EOL> word_weighted_embedding = self . word_embedding_weight ( word_embedding ) <EOL> word_context_weighted = self . word_context_weight ( word_context_vec ) <EOL> if self . params [ '<STR_LIT>' ] : <EOL> word_out_state = self . dropout ( current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted ) <EOL> else : <EOL> word_out_state = current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted <EOL> word_prob = self . word_convert ( word_out_state ) <EOL> word_probs [ : , i ] = word_prob <EOL> word_alphas [ : , i ] = word_alpha <EOL> else : <EOL> word_embedding = self . embedding ( torch . ones ( [ batch_size ] ) . long ( ) . to ( device = self . device ) ) <EOL> for i in range ( num_steps ) : <EOL> hidden = self . word_input_gru ( word_embedding , hidden ) <EOL> word_context_vec , word_alpha , word_alpha_sum = self . word_attention ( cnn_features , cnn_features_trans , hidden , <EOL> word_alpha_sum , images_mask ) <EOL> current_state = self . word_state_weight ( hidden ) <EOL> word_weighted_embedding = self . word_embedding_weight ( word_embedding ) <EOL> word_context_weighted = self . word_context_weight ( word_context_vec ) <EOL> if self . params [ '<STR_LIT>' ] : <EOL> word_out_state = self . dropout ( current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted ) <EOL> else : <EOL> word_out_state = current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted <EOL> word_prob = self . word_convert ( word_out_state ) <EOL> _ , word = word_prob . max ( <NUM_LIT> ) <EOL> word_embedding = self . embedding ( word ) <EOL> word_probs [ : , i ] = word_prob <EOL> word_alphas [ : , i ] = word_alpha <EOL> return word_probs , word_alphas <EOL> def init_hidden ( self , features , feature_mask ) : <EOL> average = ( features * feature_mask ) . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) / feature_mask . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) <EOL> average = self . init_weight ( average ) <EOL> return torch . tanh ( average ) <EOL> </s>
<s> import os <EOL> import sys <EOL> if __name__ == '<STR_LIT>' : <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> </s>
<s> import os <EOL> import cv2 <EOL> import torch <EOL> import torch . nn as nn <EOL> import math <EOL> from CAN . models . densenet import DenseNet <EOL> from CAN . models . attention import Attention <EOL> from CAN . models . decoder import PositionEmbeddingSine <EOL> from CAN . models . counting import CountingDecoder as counting_decoder <EOL> from CAN . counting_utils import gen_counting_label <EOL> from CAN . utils import draw_attention_map , draw_counting_map <EOL> class Inference ( nn . Module ) : <EOL> def __init__ ( self , params = None , draw_map = False ) : <EOL> super ( Inference , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . draw_map = draw_map <EOL> self . use_label_mask = params [ '<STR_LIT>' ] <EOL> self . encoder = DenseNet ( params = self . params ) <EOL> self . in_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . out_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . counting_decoder1 = counting_decoder ( self . in_channel , self . out_channel , <NUM_LIT> ) <EOL> self . counting_decoder2 = counting_decoder ( self . in_channel , self . out_channel , <NUM_LIT> ) <EOL> self . device = params [ '<STR_LIT>' ] <EOL> self . decoder = decoder_dict [ params [ '<STR_LIT>' ] [ '<STR_LIT>' ] ] ( params = self . params ) <EOL> self . ratio = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> with open ( params [ '<STR_LIT>' ] ) as f : <EOL> words = f . readlines ( ) <EOL> print ( f'<STR_LIT>' ) <EOL> self . words_index_dict = { i : words [ i ] . strip ( ) for i in range ( len ( words ) ) } <EOL> self . cal_mae = nn . L1Loss ( reduction = '<STR_LIT>' ) <EOL> self . cal_mse = nn . MSELoss ( reduction = '<STR_LIT>' ) <EOL> def forward ( self , images , labels , name , is_train = False ) : <EOL> cnn_features = self . encoder ( images ) <EOL> batch_size , _ , height , width = cnn_features . shape <EOL> counting_preds1 , counting_maps1 = self . counting_decoder1 ( cnn_features , None ) <EOL> counting_preds2 , counting_maps2 = self . counting_decoder2 ( cnn_features , None ) <EOL> counting_preds = ( counting_preds1 + counting_preds2 ) / <NUM_LIT> <EOL> counting_maps = ( counting_maps1 + counting_maps2 ) / <NUM_LIT> <EOL> if labels != None : <EOL> mae = self . cal_mae ( counting_preds , gen_counting_label ( labels , self . out_channel , True ) ) . item ( ) <EOL> mse = math . sqrt ( self . cal_mse ( counting_preds , gen_counting_label ( labels , self . out_channel , True ) ) . item ( ) ) <EOL> else : <EOL> mae = <NUM_LIT> <EOL> mse = <NUM_LIT> <EOL> word_probs , word_alphas = self . decoder ( cnn_features , counting_preds , is_train = is_train ) <EOL> if self . draw_map : <EOL> if not os . path . exists ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) ) : <EOL> os . makedirs ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) , exist_ok = True ) <EOL> if not os . path . exists ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) ) : <EOL> os . makedirs ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) , exist_ok = True ) <EOL> for i in range ( images . shape [ <NUM_LIT> ] ) : <EOL> img = images [ i ] [ <NUM_LIT> ] . detach ( ) . cpu ( ) . numpy ( ) * <NUM_LIT> <EOL> for step in range ( len ( word_probs ) ) : <EOL> word_atten = word_alphas [ step ] [ <NUM_LIT> ] . detach ( ) . cpu ( ) . numpy ( ) <EOL> word_heatmap = draw_attention_map ( img , word_atten ) <EOL> cv2 . imwrite ( os . path . join ( self . params [ '<STR_LIT>' ] , name , f'<STR_LIT>' ) , word_heatmap ) <EOL> for idx in range ( self . out_channel ) : <EOL> counting_map = counting_maps [ <NUM_LIT> ] . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) [ : , : , idx ] . detach ( ) . cpu ( ) <EOL> counting_heatmap = draw_counting_map ( img , counting_map ) <EOL> img_name = '<STR_LIT>' + self . words_index_dict [ idx ] + '<STR_LIT>' <EOL> cv2 . imwrite ( os . path . join ( self . params [ '<STR_LIT>' ] , name , img_name ) , counting_heatmap ) <EOL> return word_probs , word_alphas , mae , mse <EOL> class AttDecoder ( nn . Module ) : <EOL> def __init__ ( self , params ) : <EOL> super ( AttDecoder , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . input_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . hidden_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . out_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . attention_dim = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . dropout_prob = params [ '<STR_LIT>' ] <EOL> self . device = params [ '<STR_LIT>' ] <EOL> self . word_num = params [ '<STR_LIT>' ] <EOL> self . ratio = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . init_weight = nn . Linear ( self . out_channel , self . hidden_size ) <EOL> self . embedding = nn . Embedding ( self . word_num , self . input_size ) <EOL> self . word_input_gru = nn . GRUCell ( self . input_size , self . hidden_size ) <EOL> self . encoder_feature_conv = nn . Conv2d ( self . out_channel , self . attention_dim , kernel_size = <NUM_LIT> ) <EOL> self . word_attention = Attention ( params ) <EOL> self . word_state_weight = nn . Linear ( self . hidden_size , self . hidden_size ) <EOL> self . word_embedding_weight = nn . Linear ( self . input_size , self . hidden_size ) <EOL> self . word_context_weight = nn . Linear ( self . out_channel , self . hidden_size ) <EOL> self . counting_context_weight = nn . Linear ( self . word_num , self . hidden_size ) <EOL> self . word_convert = nn . Linear ( self . hidden_size , self . word_num ) <EOL> if params [ '<STR_LIT>' ] : <EOL> self . dropout = nn . Dropout ( params [ '<STR_LIT>' ] ) <EOL> def forward ( self , cnn_features , counting_preds , is_train = False ) : <EOL> batch_size , _ , height , width = cnn_features . shape <EOL> image_mask = torch . ones ( ( batch_size , <NUM_LIT> , height , width ) ) . to ( self . device ) <EOL> cnn_features_trans = self . encoder_feature_conv ( cnn_features ) <EOL> position_embedding = PositionEmbeddingSine ( <NUM_LIT> , normalize = True ) <EOL> pos = position_embedding ( cnn_features_trans , image_mask [ : , <NUM_LIT> , : , : ] ) <EOL> cnn_features_trans = cnn_features_trans + pos <EOL> word_alpha_sum = torch . zeros ( ( batch_size , <NUM_LIT> , height , width ) ) . to ( device = self . device ) <EOL> hidden = self . init_hidden ( cnn_features , image_mask ) <EOL> word_embedding = self . embedding ( torch . ones ( [ batch_size ] ) . long ( ) . to ( device = self . device ) ) <EOL> counting_context_weighted = self . counting_context_weight ( counting_preds ) <EOL> word_probs = [ ] <EOL> word_alphas = [ ] <EOL> i = <NUM_LIT> <EOL> while i < <NUM_LIT> : <EOL> hidden = self . word_input_gru ( word_embedding , hidden ) <EOL> word_context_vec , word_alpha , word_alpha_sum = self . word_attention ( cnn_features , cnn_features_trans , hidden , <EOL> word_alpha_sum , image_mask ) <EOL> current_state = self . word_state_weight ( hidden ) <EOL> word_weighted_embedding = self . word_embedding_weight ( word_embedding ) <EOL> word_context_weighted = self . word_context_weight ( word_context_vec ) <EOL> if self . params [ '<STR_LIT>' ] : <EOL> word_out_state = self . dropout ( current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted ) <EOL> else : <EOL> word_out_state = current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted <EOL> word_prob = self . word_convert ( word_out_state ) <EOL> _ , word = word_prob . max ( <NUM_LIT> ) <EOL> word_embedding = self . embedding ( word ) <EOL> if word . item ( ) == <NUM_LIT> : <EOL> return word_probs , word_alphas <EOL> word_alphas . append ( word_alpha ) <EOL> word_probs . append ( word ) <EOL> i += <NUM_LIT> <EOL> return word_probs , word_alphas <EOL> def init_hidden ( self , features , feature_mask ) : <EOL> average = ( features * feature_mask ) . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) / feature_mask . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) <EOL> average = self . init_weight ( average ) <EOL> return torch . tanh ( average ) <EOL> decoder_dict = { <EOL> '<STR_LIT>' : AttDecoder <EOL> } <EOL> </s>
<s> import os <EOL> import cv2 <EOL> import argparse <EOL> import numpy as np <EOL> import torch <EOL> import json <EOL> import pickle as pkl <EOL> from tqdm import tqdm <EOL> import time <EOL> from utils import load_config , load_checkpoint , compute_edit_distance <EOL> from models . infer_model import Inference <EOL> from dataset import Words <EOL> from counting_utils import gen_counting_label <EOL> parser = argparse . ArgumentParser ( description = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = False ) <EOL> args = parser . parse_args ( ) <EOL> if not args . dataset : <EOL> print ( '<STR_LIT>' ) <EOL> exit ( - <NUM_LIT> ) <EOL> if args . dataset == '<STR_LIT>' : <EOL> config_file = '<STR_LIT>' <EOL> params = load_config ( config_file ) <EOL> os . environ [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> device = torch . device ( '<STR_LIT>' if torch . cuda . is_available ( ) else '<STR_LIT>' ) <EOL> params [ '<STR_LIT>' ] = device <EOL> words = Words ( args . word_path ) <EOL> params [ '<STR_LIT>' ] = len ( words ) <EOL> if '<STR_LIT>' not in params : <EOL> params [ '<STR_LIT>' ] = False <EOL> print ( params [ '<STR_LIT>' ] [ '<STR_LIT>' ] ) <EOL> model = Inference ( params , draw_map = args . draw_map ) <EOL> model = model . to ( device ) <EOL> load_checkpoint ( model , None , params [ '<STR_LIT>' ] ) <EOL> model . eval ( ) <EOL> with open ( args . image_path , '<STR_LIT>' ) as f : <EOL> images = pkl . load ( f ) <EOL> with open ( args . label_path ) as f : <EOL> lines = f . readlines ( ) <EOL> line_right = <NUM_LIT> <EOL> e1 , e2 , e3 = <NUM_LIT> , <NUM_LIT> , <NUM_LIT> <EOL> bad_case = { } <EOL> model_time = <NUM_LIT> <EOL> mae_sum , mse_sum = <NUM_LIT> , <NUM_LIT> <EOL> with torch . no_grad ( ) : <EOL> for line in tqdm ( lines ) : <EOL> name , * labels = line . split ( ) <EOL> name = name . split ( '<STR_LIT>' ) [ <NUM_LIT> ] if name . endswith ( '<STR_LIT>' ) else name <EOL> input_labels = labels <EOL> labels = '<STR_LIT>' . join ( labels ) <EOL> img = images [ name ] <EOL> print ( np . shape ( img ) ) <EOL> img = torch . Tensor ( <NUM_LIT> - img ) / <NUM_LIT> <EOL> img = img . unsqueeze ( <NUM_LIT> ) . unsqueeze ( <NUM_LIT> ) <EOL> img = img . to ( device ) <EOL> a = time . time ( ) <EOL> input_labels = words . encode ( input_labels ) <EOL> input_labels = torch . LongTensor ( input_labels ) <EOL> input_labels = input_labels . unsqueeze ( <NUM_LIT> ) . to ( device ) <EOL> probs , _ , mae , mse = model ( img , input_labels , os . path . join ( params [ '<STR_LIT>' ] [ '<STR_LIT>' ] , name ) ) <EOL> mae_sum += mae <EOL> mse_sum += mse <EOL> model_time += ( time . time ( ) - a ) <EOL> prediction = words . decode ( probs ) <EOL> if prediction == labels : <EOL> line_right += <NUM_LIT> <EOL> else : <EOL> bad_case [ name ] = { <EOL> '<STR_LIT>' : labels , <EOL> '<STR_LIT>' : prediction <EOL> } <EOL> print ( name , prediction , labels ) <EOL> distance = compute_edit_distance ( prediction , labels ) <EOL> if distance <= <NUM_LIT> : <EOL> e1 += <NUM_LIT> <EOL> if distance <= <NUM_LIT> : <EOL> e2 += <NUM_LIT> <EOL> if distance <= <NUM_LIT> : <EOL> e3 += <NUM_LIT> <EOL> print ( f'<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> with open ( f'<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> json . dump ( bad_case , f , ensure_ascii = False ) <EOL> </s>
<s> import math <EOL> import torch <EOL> import torch . nn as nn <EOL> import torch . nn . functional as F <EOL> from thop import profile <EOL> class Bottleneck ( nn . Module ) : <EOL> def __init__ ( self , nChannels , growthRate , use_dropout ) : <EOL> super ( Bottleneck , self ) . __init__ ( ) <EOL> interChannels = <NUM_LIT> * growthRate <EOL> self . bn1 = nn . BatchNorm2d ( interChannels ) <EOL> self . conv1 = nn . Conv2d ( nChannels , interChannels , kernel_size = <NUM_LIT> , bias = False ) <EOL> self . bn2 = nn . BatchNorm2d ( growthRate ) <EOL> self . conv2 = nn . Conv2d ( interChannels , growthRate , kernel_size = <NUM_LIT> , padding = <NUM_LIT> , bias = False ) <EOL> self . use_dropout = use_dropout <EOL> self . dropout = nn . Dropout ( p = <NUM_LIT> ) <EOL> def forward ( self , x ) : <EOL> out = F . relu ( self . bn1 ( self . conv1 ( x ) ) , inplace = True ) <EOL> if self . use_dropout : <EOL> out = self . dropout ( out ) <EOL> out = F . relu ( self . bn2 ( self . conv2 ( out ) ) , inplace = True ) <EOL> if self . use_dropout : <EOL> out = self . dropout ( out ) <EOL> out = torch . cat ( ( x , out ) , <NUM_LIT> ) <EOL> return out <EOL> class SingleLayer ( nn . Module ) : <EOL> def __init__ ( self , nChannels , growthRate , use_dropout ) : <EOL> super ( SingleLayer , self ) . __init__ ( ) <EOL> self . bn1 = nn . BatchNorm2d ( nChannels ) <EOL> self . conv1 = nn . Conv2d ( nChannels , growthRate , kernel_size = <NUM_LIT> , padding = <NUM_LIT> , bias = False ) <EOL> self . use_dropout = use_dropout <EOL> self . dropout = nn . Dropout ( p = <NUM_LIT> ) <EOL> def forward ( self , x ) : <EOL> out = self . conv1 ( F . relu ( x , inplace = True ) ) <EOL> if self . use_dropout : <EOL> out = self . dropout ( out ) <EOL> out = torch . cat ( ( x , out ) , <NUM_LIT> ) <EOL> return out <EOL> class Transition ( nn . Module ) : <EOL> def __init__ ( self , nChannels , nOutChannels , use_dropout ) : <EOL> super ( Transition , self ) . __init__ ( ) <EOL> self . bn1 = nn . BatchNorm2d ( nOutChannels ) <EOL> self . conv1 = nn . Conv2d ( nChannels , nOutChannels , kernel_size = <NUM_LIT> , bias = False ) <EOL> self . use_dropout = use_dropout <EOL> self . dropout = nn . Dropout ( p = <NUM_LIT> ) <EOL> def forward ( self , x ) : <EOL> out = F . relu ( self . bn1 ( self . conv1 ( x ) ) , inplace = True ) <EOL> if self . use_dropout : <EOL> out = self . dropout ( out ) <EOL> out = F . avg_pool2d ( out , <NUM_LIT> , ceil_mode = True ) <EOL> return out <EOL> class DenseNet ( nn . Module ) : <EOL> def __init__ ( self , params ) : <EOL> super ( DenseNet , self ) . __init__ ( ) <EOL> growthRate = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> reduction = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> bottleneck = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> use_dropout = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> nDenseBlocks = <NUM_LIT> <EOL> nChannels = <NUM_LIT> * growthRate <EOL> self . conv1 = nn . Conv2d ( params [ '<STR_LIT>' ] [ '<STR_LIT>' ] , nChannels , kernel_size = <NUM_LIT> , padding = <NUM_LIT> , stride = <NUM_LIT> , bias = False ) <EOL> self . dense1 = self . _make_dense ( nChannels , growthRate , nDenseBlocks , bottleneck , use_dropout ) <EOL> nChannels += nDenseBlocks * growthRate <EOL> nOutChannels = int ( math . floor ( nChannels * reduction ) ) <EOL> self . trans1 = Transition ( nChannels , nOutChannels , use_dropout ) <EOL> nChannels = nOutChannels <EOL> self . dense2 = self . _make_dense ( nChannels , growthRate , nDenseBlocks , bottleneck , use_dropout ) <EOL> nChannels += nDenseBlocks * growthRate <EOL> nOutChannels = int ( math . floor ( nChannels * reduction ) ) <EOL> self . trans2 = Transition ( nChannels , nOutChannels , use_dropout ) <EOL> nChannels = nOutChannels <EOL> self . dense3 = self . _make_dense ( nChannels , growthRate , nDenseBlocks , bottleneck , use_dropout ) <EOL> def _make_dense ( self , nChannels , growthRate , nDenseBlocks , bottleneck , use_dropout ) : <EOL> layers = [ ] <EOL> for i in range ( int ( nDenseBlocks ) ) : <EOL> if bottleneck : <EOL> layers . append ( Bottleneck ( nChannels , growthRate , use_dropout ) ) <EOL> else : <EOL> layers . append ( SingleLayer ( nChannels , growthRate , use_dropout ) ) <EOL> nChannels += growthRate <EOL> return nn . Sequential ( * layers ) <EOL> def forward ( self , x ) : <EOL> out = self . conv1 ( x ) <EOL> out = F . relu ( out , inplace = True ) <EOL> out = F . max_pool2d ( out , <NUM_LIT> , ceil_mode = True ) <EOL> out = self . dense1 ( out ) <EOL> out = self . trans1 ( out ) <EOL> out = self . dense2 ( out ) <EOL> out = self . trans2 ( out ) <EOL> out = self . dense3 ( out ) <EOL> return out <EOL> </s>
<s> import torch <EOL> from torch import nn <EOL> from torch . nn import Conv2d , MaxPool2d , AvgPool2d , Flatten , Linear , Sequential , Dropout , PReLU , Softmax , BatchNorm2d , ReLU , ZeroPad2d , AdaptiveAvgPool2d <EOL> import math <EOL> import torch . nn . functional as F <EOL> class VGG ( nn . Module ) : <EOL> def two_conv_pool ( self , in_channels , f1 , f2 ) : <EOL> s = nn . Sequential ( <EOL> nn . Conv2d ( in_channels , f1 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f1 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Conv2d ( f1 , f2 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f2 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . MaxPool2d ( kernel_size = <NUM_LIT> , stride = <NUM_LIT> ) , <EOL> ) <EOL> for m in s . children ( ) : <EOL> if isinstance ( m , nn . Conv2d ) : <EOL> n = m . kernel_size [ <NUM_LIT> ] * m . kernel_size [ <NUM_LIT> ] * m . out_channels <EOL> m . weight . data . normal_ ( <NUM_LIT> , math . sqrt ( <NUM_LIT> / n ) ) <EOL> elif isinstance ( m , nn . BatchNorm2d ) : <EOL> m . weight . data . fill_ ( <NUM_LIT> ) <EOL> m . bias . data . zero_ ( ) <EOL> return s <EOL> def three_conv_pool ( self , in_channels , f1 , f2 , f3 ) : <EOL> s = nn . Sequential ( <EOL> nn . Conv2d ( in_channels , f1 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f1 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Conv2d ( f1 , f2 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f2 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Conv2d ( f2 , f3 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f3 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . MaxPool2d ( kernel_size = <NUM_LIT> , stride = <NUM_LIT> ) , <EOL> ) <EOL> for m in s . children ( ) : <EOL> if isinstance ( m , nn . Conv2d ) : <EOL> n = m . kernel_size [ <NUM_LIT> ] * m . kernel_size [ <NUM_LIT> ] * m . out_channels <EOL> m . weight . data . normal_ ( <NUM_LIT> , math . sqrt ( <NUM_LIT> / n ) ) <EOL> elif isinstance ( m , nn . BatchNorm2d ) : <EOL> m . weight . data . fill_ ( <NUM_LIT> ) <EOL> m . bias . data . zero_ ( ) <EOL> return s <EOL> def __init__ ( self , num_classes = <NUM_LIT> ) : <EOL> super ( VGG , self ) . __init__ ( ) <EOL> self . l1 = self . two_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . l2 = self . two_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . l3 = self . three_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . l4 = self . three_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . classifier = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , <EOL> nn . Linear ( <NUM_LIT> , <NUM_LIT> ) , <EOL> nn . BatchNorm1d ( <NUM_LIT> ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Dropout ( p = <NUM_LIT> ) , <EOL> nn . Linear ( <NUM_LIT> , num_classes ) , <EOL> ) <EOL> def forward ( self , x ) : <EOL> x = self . l1 ( x ) <EOL> x = self . l2 ( x ) <EOL> x = self . l3 ( x ) <EOL> x = self . l4 ( x ) <EOL> x = x . view ( x . size ( <NUM_LIT> ) , - <NUM_LIT> ) <EOL> x = self . classifier ( x ) <EOL> return F . log_softmax ( x , dim = <NUM_LIT> ) <EOL> Half_width = <NUM_LIT> <EOL> layer_width = <NUM_LIT> <EOL> class SpinalVGG ( nn . Module ) : <EOL> def two_conv_pool ( self , in_channels , f1 , f2 ) : <EOL> s = nn . Sequential ( <EOL> nn . Conv2d ( in_channels , f1 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f1 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Conv2d ( f1 , f2 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f2 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . MaxPool2d ( kernel_size = <NUM_LIT> , stride = <NUM_LIT> ) , <EOL> ) <EOL> for m in s . children ( ) : <EOL> if isinstance ( m , nn . Conv2d ) : <EOL> n = m . kernel_size [ <NUM_LIT> ] * m . kernel_size [ <NUM_LIT> ] * m . out_channels <EOL> m . weight . data . normal_ ( <NUM_LIT> , math . sqrt ( <NUM_LIT> / n ) ) <EOL> elif isinstance ( m , nn . BatchNorm2d ) : <EOL> m . weight . data . fill_ ( <NUM_LIT> ) <EOL> m . bias . data . zero_ ( ) <EOL> return s <EOL> def three_conv_pool ( self , in_channels , f1 , f2 , f3 ) : <EOL> s = nn . Sequential ( <EOL> nn . Conv2d ( in_channels , f1 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f1 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Conv2d ( f1 , f2 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f2 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . Conv2d ( f2 , f3 , kernel_size = <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( f3 ) , <EOL> nn . ReLU ( inplace = True ) , <EOL> nn . MaxPool2d ( kernel_size = <NUM_LIT> , stride = <NUM_LIT> ) , <EOL> ) <EOL> for m in s . children ( ) : <EOL> if isinstance ( m , nn . Conv2d ) : <EOL> n = m . kernel_size [ <NUM_LIT> ] * m . kernel_size [ <NUM_LIT> ] * m . out_channels <EOL> m . weight . data . normal_ ( <NUM_LIT> , math . sqrt ( <NUM_LIT> / n ) ) <EOL> elif isinstance ( m , nn . BatchNorm2d ) : <EOL> m . weight . data . fill_ ( <NUM_LIT> ) <EOL> m . bias . data . zero_ ( ) <EOL> return s <EOL> def __init__ ( self , num_classes = <NUM_LIT> ) : <EOL> super ( SpinalVGG , self ) . __init__ ( ) <EOL> self . l1 = self . two_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . l2 = self . two_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . l3 = self . three_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . l4 = self . three_conv_pool ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> self . fc_spinal_layer1 = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , nn . Linear ( Half_width , layer_width ) , <EOL> nn . BatchNorm1d ( layer_width ) , nn . ReLU ( inplace = True ) , ) <EOL> self . fc_spinal_layer2 = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , nn . Linear ( Half_width + layer_width , layer_width ) , <EOL> nn . BatchNorm1d ( layer_width ) , nn . ReLU ( inplace = True ) , ) <EOL> self . fc_spinal_layer3 = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , nn . Linear ( Half_width + layer_width , layer_width ) , <EOL> nn . BatchNorm1d ( layer_width ) , nn . ReLU ( inplace = True ) , ) <EOL> self . fc_spinal_layer4 = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , nn . Linear ( Half_width + layer_width , layer_width ) , <EOL> nn . BatchNorm1d ( layer_width ) , nn . ReLU ( inplace = True ) , ) <EOL> self . fc_out = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , nn . Linear ( layer_width * <NUM_LIT> , num_classes ) , ) <EOL> def forward ( self , x ) : <EOL> x = self . l1 ( x ) <EOL> x = self . l2 ( x ) <EOL> x = self . l3 ( x ) <EOL> x = self . l4 ( x ) <EOL> x = x . view ( x . size ( <NUM_LIT> ) , - <NUM_LIT> ) <EOL> x1 = self . fc_spinal_layer1 ( x [ : , <NUM_LIT> : Half_width ] ) <EOL> x2 = self . fc_spinal_layer2 ( torch . cat ( [ x [ : , Half_width : <NUM_LIT> * Half_width ] , x1 ] , dim = <NUM_LIT> ) ) <EOL> x3 = self . fc_spinal_layer3 ( torch . cat ( [ x [ : , <NUM_LIT> : Half_width ] , x2 ] , dim = <NUM_LIT> ) ) <EOL> x4 = self . fc_spinal_layer4 ( torch . cat ( [ x [ : , Half_width : <NUM_LIT> * Half_width ] , x3 ] , dim = <NUM_LIT> ) ) <EOL> x = torch . cat ( [ x1 , x2 ] , dim = <NUM_LIT> ) <EOL> x = torch . cat ( [ x , x3 ] , dim = <NUM_LIT> ) <EOL> x = torch . cat ( [ x , x4 ] , dim = <NUM_LIT> ) <EOL> x = self . fc_out ( x ) <EOL> return F . log_softmax ( x , dim = <NUM_LIT> ) <EOL> </s>
<s> from django . urls import path <EOL> from index import views <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , views . login ) , <EOL> path ( '<STR_LIT>' , views . register ) , <EOL> path ( '<STR_LIT>' , views . paper_image_upload ) , <EOL> path ( '<STR_LIT>' , views . student_image_upload ) , <EOL> path ( '<STR_LIT>' , views . addPaper ) , <EOL> path ( '<STR_LIT>' , views . removePaper ) , <EOL> path ( '<STR_LIT>' , views . setPaperName ) , <EOL> path ( '<STR_LIT>' , views . ans_set ) , <EOL> path ( '<STR_LIT>' , views . showPapersForTeacher ) , <EOL> path ( '<STR_LIT>' , views . showPaperForStudent ) , <EOL> path ( '<STR_LIT>' , views . showPaperDetail ) , <EOL> path ( '<STR_LIT>' , views . showPaperAnsDetail ) , <EOL> path ( '<STR_LIT>' , views . deletePaperAnsPhoto ) , <EOL> path ( '<STR_LIT>' , views . getScore ) <EOL> ] <EOL> </s>
<s> import os <EOL> import time <EOL> import argparse <EOL> import random <EOL> import torch <EOL> import numpy as np <EOL> from tensorboardX import SummaryWriter <EOL> from utils import load_config , save_checkpoint , load_checkpoint <EOL> from dataset import get_crohme_dataset <EOL> from models . can import CAN <EOL> from training import train , eval <EOL> parser = argparse . ArgumentParser ( description = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , action = '<STR_LIT>' , help = '<STR_LIT>' ) <EOL> args = parser . parse_args ( ) <EOL> if not args . dataset : <EOL> print ( '<STR_LIT>' ) <EOL> exit ( - <NUM_LIT> ) <EOL> if args . dataset == '<STR_LIT>' : <EOL> config_file = '<STR_LIT>' <EOL> params = load_config ( config_file ) <EOL> random . seed ( params [ '<STR_LIT>' ] ) <EOL> np . random . seed ( params [ '<STR_LIT>' ] ) <EOL> torch . manual_seed ( params [ '<STR_LIT>' ] ) <EOL> torch . cuda . manual_seed ( params [ '<STR_LIT>' ] ) <EOL> os . environ [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> device = torch . device ( '<STR_LIT>' if torch . cuda . is_available ( ) else '<STR_LIT>' ) <EOL> params [ '<STR_LIT>' ] = device <EOL> if args . dataset == '<STR_LIT>' : <EOL> train_loader , eval_loader = get_crohme_dataset ( params ) <EOL> model = CAN ( params ) <EOL> now = time . strftime ( "<STR_LIT>" , time . localtime ( ) ) <EOL> model . name = f'<STR_LIT>' <EOL> print ( model . name ) <EOL> model = model . to ( device ) <EOL> if args . check : <EOL> writer = None <EOL> else : <EOL> writer = SummaryWriter ( f'<STR_LIT>' ) <EOL> optimizer = getattr ( torch . optim , params [ '<STR_LIT>' ] ) ( model . parameters ( ) , lr = float ( params [ '<STR_LIT>' ] ) , <EOL> eps = float ( params [ '<STR_LIT>' ] ) , weight_decay = float ( params [ '<STR_LIT>' ] ) ) <EOL> if params [ '<STR_LIT>' ] : <EOL> print ( '<STR_LIT>' ) <EOL> print ( f'<STR_LIT>' ) <EOL> load_checkpoint ( model , optimizer , params [ '<STR_LIT>' ] ) <EOL> if not args . check : <EOL> if not os . path . exists ( os . path . join ( params [ '<STR_LIT>' ] , model . name ) ) : <EOL> os . makedirs ( os . path . join ( params [ '<STR_LIT>' ] , model . name ) , exist_ok = True ) <EOL> os . system ( f'<STR_LIT>' ) <EOL> if args . dataset == '<STR_LIT>' : <EOL> min_score , init_epoch = <NUM_LIT> , <NUM_LIT> <EOL> for epoch in range ( init_epoch , params [ '<STR_LIT>' ] ) : <EOL> train_loss , train_word_score , train_exprate = train ( params , model , optimizer , epoch , train_loader , writer = writer ) <EOL> if epoch >= params [ '<STR_LIT>' ] : <EOL> eval_loss , eval_word_score , eval_exprate = eval ( params , model , epoch , eval_loader , writer = writer ) <EOL> print ( f'<STR_LIT>' ) <EOL> if eval_exprate > min_score and not args . check and epoch >= params [ '<STR_LIT>' ] : <EOL> min_score = eval_exprate <EOL> save_checkpoint ( model , optimizer , eval_word_score , eval_exprate , epoch + <NUM_LIT> , <EOL> optimizer_save = params [ '<STR_LIT>' ] , path = params [ '<STR_LIT>' ] ) <EOL> </s>
<s> from scipy . stats import pearsonr <EOL> import numpy as np <EOL> def confusion_matrix ( rater_a , rater_b , min_rating = None , max_rating = None ) : <EOL> assert ( len ( rater_a ) == len ( rater_b ) ) <EOL> if min_rating is None : <EOL> min_rating = min ( rater_a + rater_b ) <EOL> if max_rating is None : <EOL> max_rating = max ( rater_a + rater_b ) <EOL> num_ratings = int ( max_rating - min_rating + <NUM_LIT> ) <EOL> conf_mat = [ [ <NUM_LIT> for i in range ( num_ratings ) ] <EOL> for j in range ( num_ratings ) ] <EOL> for a , b in zip ( rater_a , rater_b ) : <EOL> conf_mat [ a - min_rating ] [ b - min_rating ] += <NUM_LIT> <EOL> return conf_mat <EOL> def histogram ( ratings , min_rating = None , max_rating = None ) : <EOL> if min_rating is None : <EOL> min_rating = min ( ratings ) <EOL> if max_rating is None : <EOL> max_rating = max ( ratings ) <EOL> num_ratings = int ( max_rating - min_rating + <NUM_LIT> ) <EOL> hist_ratings = [ <NUM_LIT> for x in range ( num_ratings ) ] <EOL> for r in ratings : <EOL> hist_ratings [ r - min_rating ] += <NUM_LIT> <EOL> return hist_ratings <EOL> def quadratic_weighted_kappa ( rater_a , rater_b , min_rating = None , max_rating = None ) : <EOL> rater_a = np . array ( rater_a , dtype = int ) <EOL> rater_b = np . array ( rater_b , dtype = int ) <EOL> assert ( len ( rater_a ) == len ( rater_b ) ) <EOL> if min_rating is None : <EOL> min_rating = min ( min ( rater_a ) , min ( rater_b ) ) <EOL> if max_rating is None : <EOL> max_rating = max ( max ( rater_a ) , max ( rater_b ) ) <EOL> conf_mat = confusion_matrix ( rater_a , rater_b , <EOL> min_rating , max_rating ) <EOL> num_ratings = len ( conf_mat ) <EOL> num_scored_items = float ( len ( rater_a ) ) <EOL> hist_rater_a = histogram ( rater_a , min_rating , max_rating ) <EOL> hist_rater_b = histogram ( rater_b , min_rating , max_rating ) <EOL> numerator = <NUM_LIT> <EOL> denominator = <NUM_LIT> <EOL> for i in range ( num_ratings ) : <EOL> for j in range ( num_ratings ) : <EOL> expected_count = ( hist_rater_a [ i ] * hist_rater_b [ j ] / num_scored_items ) <EOL> if num_ratings == <NUM_LIT> : <EOL> num_ratings += <NUM_LIT> <EOL> d = pow ( i - j , <NUM_LIT> ) / pow ( num_ratings - <NUM_LIT> , <NUM_LIT> ) <EOL> numerator += d * conf_mat [ i ] [ j ] / num_scored_items <EOL> denominator += d * expected_count / num_scored_items <EOL> if denominator <= <NUM_LIT> : <EOL> denominator = <NUM_LIT> <EOL> return <NUM_LIT> - numerator / denominator <EOL> def evaluation ( true_label , pre_label , high_score = <NUM_LIT> , second_high_score = <NUM_LIT> , low_score = <NUM_LIT> , second_low_score = <NUM_LIT> ) : <EOL> assert len ( pre_label ) == len ( true_label ) <EOL> res = [ <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ] <EOL> for i in range ( len ( pre_label ) ) : <EOL> if pre_label [ i ] is None : <EOL> pre_label [ i ] = <NUM_LIT> <EOL> index = int ( abs ( pre_label [ i ] - true_label [ i ] ) / <NUM_LIT> ) <EOL> if index <= <NUM_LIT> : <EOL> res [ index ] += <NUM_LIT> <EOL> else : <EOL> res [ <NUM_LIT> ] += <NUM_LIT> <EOL> total_score = sum ( res ) <EOL> result = [ float ( item ) / total_score for item in res ] <EOL> result . append ( result [ <NUM_LIT> ] + result [ <NUM_LIT> ] ) <EOL> result . append ( result [ <NUM_LIT> ] + result [ <NUM_LIT> ] + result [ <NUM_LIT> ] ) <EOL> result . append ( pearsonr ( true_label , pre_label ) [ <NUM_LIT> ] ) <EOL> result . append ( quadratic_weighted_kappa ( true_label , pre_label ) ) <EOL> high_score_recall , high_score_precision , f1 = evaluation_high_score ( true_label , pre_label , high_score ) <EOL> result . append ( high_score_recall ) <EOL> result . append ( high_score_precision ) <EOL> result . append ( f1 ) <EOL> second_high_score_recall , second_high_score_precision , f1 = evaluation_high_score ( true_label , pre_label , <EOL> second_high_score ) <EOL> result . append ( second_high_score_recall ) <EOL> result . append ( second_high_score_precision ) <EOL> result . append ( f1 ) <EOL> second_low_score_recall , second_low_score_precision , f1 = evaluation_low_score ( true_label , pre_label , second_low_score ) <EOL> result . append ( second_low_score_recall ) <EOL> result . append ( second_low_score_precision ) <EOL> result . append ( f1 ) <EOL> low_score_recall , low_score_precision , f1 = evaluation_low_score ( true_label , pre_label , low_score ) <EOL> result . append ( low_score_recall ) <EOL> result . append ( low_score_precision ) <EOL> result . append ( f1 ) <EOL> result = [ str ( round ( item , <NUM_LIT> ) ) for item in result ] <EOL> return result <EOL> def f1 ( precision , recall , weight = <NUM_LIT> ) : <EOL> if precision == <NUM_LIT> or recall == <NUM_LIT> : <EOL> return <NUM_LIT> <EOL> return ( weight * weight + <NUM_LIT> ) * precision * recall / ( weight * weight * precision + recall ) <EOL> def evaluation_high_score ( true_score , pre_score , high_score ) : <EOL> assert len ( pre_score ) == len ( true_score ) <EOL> true_high_score_num = <NUM_LIT> <EOL> pred_high_score_num = <NUM_LIT> <EOL> both_high_score_num = <NUM_LIT> <EOL> qualified_num = <NUM_LIT> <EOL> smooth_value = <NUM_LIT> <EOL> for i in range ( len ( pre_score ) ) : <EOL> if true_score [ i ] >= high_score : <EOL> true_high_score_num += <NUM_LIT> <EOL> if pre_score [ i ] >= high_score : <EOL> pred_high_score_num += <NUM_LIT> <EOL> if pre_score [ i ] >= high_score and true_score [ i ] >= high_score : <EOL> both_high_score_num += <NUM_LIT> <EOL> if pre_score [ i ] >= high_score and abs ( pre_score [ i ] - true_score [ i ] ) <= <NUM_LIT> : <EOL> qualified_num += <NUM_LIT> <EOL> high_score_recall = both_high_score_num / ( true_high_score_num + smooth_value ) <EOL> high_score_precision = qualified_num / ( pred_high_score_num + smooth_value ) <EOL> high_score_f1 = f1 ( high_score_precision , high_score_recall ) <EOL> return high_score_recall , high_score_precision , high_score_f1 <EOL> def evaluation_low_score ( true_score , pre_score , low_score ) : <EOL> assert len ( pre_score ) == len ( true_score ) <EOL> true_low_score_num = <NUM_LIT> <EOL> pred_low_score_num = <NUM_LIT> <EOL> both_low_score_num = <NUM_LIT> <EOL> qualified_num = <NUM_LIT> <EOL> smooth_value = <NUM_LIT> <EOL> for i in range ( len ( pre_score ) ) : <EOL> if true_score [ i ] <= low_score : <EOL> true_low_score_num += <NUM_LIT> <EOL> if pre_score [ i ] <= low_score : <EOL> pred_low_score_num += <NUM_LIT> <EOL> if pre_score [ i ] <= low_score and true_score [ i ] <= low_score : <EOL> both_low_score_num += <NUM_LIT> <EOL> if pre_score [ i ] <= low_score and abs ( pre_score [ i ] - true_score [ i ] ) <= <NUM_LIT> : <EOL> qualified_num += <NUM_LIT> <EOL> low_score_recall = both_low_score_num / ( true_low_score_num + smooth_value ) <EOL> low_score_precision = qualified_num / ( pred_low_score_num + smooth_value ) <EOL> low_score_f1 = f1 ( low_score_precision , low_score_recall ) <EOL> return low_score_recall , low_score_precision , low_score_f1 <EOL> </s>
<s> import torch <EOL> import torch . nn . functional as F <EOL> import numpy as np <EOL> from torch . autograd import Function <EOL> import torch . nn as nn <EOL> import functools <EOL> from math import ceil <EOL> import pywt <EOL> from einops import rearrange , repeat <EOL> from einops . layers . torch import Rearrange <EOL> device = '<STR_LIT>' <EOL> def sfb1d ( lo , hi , g0 , g1 , mode = '<STR_LIT>' , dim = - <NUM_LIT> ) : <EOL> C = lo . shape [ <NUM_LIT> ] <EOL> d = dim % <NUM_LIT> <EOL> if not isinstance ( g0 , torch . Tensor ) : <EOL> g0 = torch . tensor ( np . copy ( np . array ( g0 ) . ravel ( ) ) , <EOL> dtype = torch . float , device = lo . device ) <EOL> if not isinstance ( g1 , torch . Tensor ) : <EOL> g1 = torch . tensor ( np . copy ( np . array ( g1 ) . ravel ( ) ) , <EOL> dtype = torch . float , device = lo . device ) <EOL> L = g0 . numel ( ) <EOL> shape = [ <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ] <EOL> shape [ d ] = L <EOL> N = <NUM_LIT> * lo . shape [ d ] <EOL> if g0 . shape != tuple ( shape ) : <EOL> g0 = g0 . reshape ( * shape ) <EOL> if g1 . shape != tuple ( shape ) : <EOL> g1 = g1 . reshape ( * shape ) <EOL> s = ( <NUM_LIT> , <NUM_LIT> ) if d == <NUM_LIT> else ( <NUM_LIT> , <NUM_LIT> ) <EOL> g0 = torch . cat ( [ g0 ] * C , dim = <NUM_LIT> ) <EOL> g1 = torch . cat ( [ g1 ] * C , dim = <NUM_LIT> ) <EOL> if mode == '<STR_LIT>' or mode == '<STR_LIT>' : <EOL> y = F . conv_transpose2d ( lo , g0 , stride = s , groups = C ) + F . conv_transpose2d ( hi , g1 , stride = s , groups = C ) <EOL> if d == <NUM_LIT> : <EOL> y [ : , : , : L - <NUM_LIT> ] = y [ : , : , : L - <NUM_LIT> ] + y [ : , : , N : N + L - <NUM_LIT> ] <EOL> y = y [ : , : , : N ] <EOL> else : <EOL> y [ : , : , : , : L - <NUM_LIT> ] = y [ : , : , : , : L - <NUM_LIT> ] + y [ : , : , : , N : N + L - <NUM_LIT> ] <EOL> y = y [ : , : , : , : N ] <EOL> y = roll ( y , <NUM_LIT> - L // <NUM_LIT> , dim = dim ) <EOL> else : <EOL> if mode == '<STR_LIT>' or mode == '<STR_LIT>' or mode == '<STR_LIT>' or mode == '<STR_LIT>' : <EOL> pad = ( L - <NUM_LIT> , <NUM_LIT> ) if d == <NUM_LIT> else ( <NUM_LIT> , L - <NUM_LIT> ) <EOL> y = F . conv_transpose2d ( lo , g0 , stride = s , padding = pad , groups = C ) + F . conv_transpose2d ( hi , g1 , stride = s , padding = pad , groups = C ) <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" . format ( mode ) ) <EOL> return y <EOL> def reflect ( x , minx , maxx ) : <EOL> x = np . asanyarray ( x ) <EOL> rng = maxx - minx <EOL> rng_by_2 = <NUM_LIT> * rng <EOL> mod = np . fmod ( x - minx , rng_by_2 ) <EOL> normed_mod = np . where ( mod < <NUM_LIT> , mod + rng_by_2 , mod ) <EOL> out = np . where ( normed_mod >= rng , rng_by_2 - normed_mod , normed_mod ) + minx <EOL> return np . array ( out , dtype = x . dtype ) <EOL> def mode_to_int ( mode ) : <EOL> if mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> elif mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> elif mode == '<STR_LIT>' or mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> elif mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> elif mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> elif mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> elif mode == '<STR_LIT>' : <EOL> return <NUM_LIT> <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" . format ( mode ) ) <EOL> def int_to_mode ( mode ) : <EOL> if mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> elif mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> elif mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> elif mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> elif mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> elif mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> elif mode == <NUM_LIT> : <EOL> return '<STR_LIT>' <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" . format ( mode ) ) <EOL> def afb1d ( x , h0 , h1 , mode = '<STR_LIT>' , dim = - <NUM_LIT> ) : <EOL> C = x . shape [ <NUM_LIT> ] <EOL> d = dim % <NUM_LIT> <EOL> s = ( <NUM_LIT> , <NUM_LIT> ) if d == <NUM_LIT> else ( <NUM_LIT> , <NUM_LIT> ) <EOL> N = x . shape [ d ] <EOL> if not isinstance ( h0 , torch . Tensor ) : <EOL> h0 = torch . tensor ( np . copy ( np . array ( h0 ) . ravel ( ) [ : : - <NUM_LIT> ] ) , <EOL> dtype = torch . float , device = x . device ) <EOL> if not isinstance ( h1 , torch . Tensor ) : <EOL> h1 = torch . tensor ( np . copy ( np . array ( h1 ) . ravel ( ) [ : : - <NUM_LIT> ] ) , <EOL> dtype = torch . float , device = x . device ) <EOL> L = h0 . numel ( ) <EOL> L2 = L // <NUM_LIT> <EOL> shape = [ <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ] <EOL> shape [ d ] = L <EOL> if h0 . shape != tuple ( shape ) : <EOL> h0 = h0 . reshape ( * shape ) <EOL> if h1 . shape != tuple ( shape ) : <EOL> h1 = h1 . reshape ( * shape ) <EOL> h = torch . cat ( [ h0 , h1 ] * C , dim = <NUM_LIT> ) <EOL> if mode == '<STR_LIT>' or mode == '<STR_LIT>' : <EOL> if x . shape [ dim ] % <NUM_LIT> == <NUM_LIT> : <EOL> if d == <NUM_LIT> : <EOL> x = torch . cat ( ( x , x [ : , : , - <NUM_LIT> : ] ) , dim = <NUM_LIT> ) <EOL> else : <EOL> x = torch . cat ( ( x , x [ : , : , : , - <NUM_LIT> : ] ) , dim = <NUM_LIT> ) <EOL> N += <NUM_LIT> <EOL> x = roll ( x , - L2 , dim = d ) <EOL> pad = ( L - <NUM_LIT> , <NUM_LIT> ) if d == <NUM_LIT> else ( <NUM_LIT> , L - <NUM_LIT> ) <EOL> lohi = F . conv2d ( x , h , padding = pad , stride = s , groups = C ) <EOL> N2 = N // <NUM_LIT> <EOL> if d == <NUM_LIT> : <EOL> lohi [ : , : , : L2 ] = lohi [ : , : , : L2 ] + lohi [ : , : , N2 : N2 + L2 ] <EOL> lohi = lohi [ : , : , : N2 ] <EOL> else : <EOL> lohi [ : , : , : , : L2 ] = lohi [ : , : , : , : L2 ] + lohi [ : , : , : , N2 : N2 + L2 ] <EOL> lohi = lohi [ : , : , : , : N2 ] <EOL> else : <EOL> outsize = pywt . dwt_coeff_len ( N , L , mode = mode ) <EOL> p = <NUM_LIT> * ( outsize - <NUM_LIT> ) - N + L <EOL> if mode == '<STR_LIT>' : <EOL> if p % <NUM_LIT> == <NUM_LIT> : <EOL> pad = ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) if d == <NUM_LIT> else ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> x = F . pad ( x , pad ) <EOL> pad = ( p // <NUM_LIT> , <NUM_LIT> ) if d == <NUM_LIT> else ( <NUM_LIT> , p // <NUM_LIT> ) <EOL> lohi = F . conv2d ( x , h , padding = pad , stride = s , groups = C ) <EOL> elif mode == '<STR_LIT>' or mode == '<STR_LIT>' or mode == '<STR_LIT>' : <EOL> pad = ( <NUM_LIT> , <NUM_LIT> , p // <NUM_LIT> , ( p + <NUM_LIT> ) // <NUM_LIT> ) if d == <NUM_LIT> else ( p // <NUM_LIT> , ( p + <NUM_LIT> ) // <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> x = mypad ( x , pad = pad , mode = mode ) <EOL> lohi = F . conv2d ( x , h , stride = s , groups = C ) <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" . format ( mode ) ) <EOL> return lohi <EOL> class AFB2D ( Function ) : <EOL> @ staticmethod <EOL> def forward ( ctx , x , h0_row , h1_row , h0_col , h1_col , mode ) : <EOL> ctx . save_for_backward ( h0_row , h1_row , h0_col , h1_col ) <EOL> ctx . shape = x . shape [ - <NUM_LIT> : ] <EOL> mode = int_to_mode ( mode ) <EOL> ctx . mode = mode <EOL> lohi = afb1d ( x , h0_row , h1_row , mode = mode , dim = <NUM_LIT> ) <EOL> y = afb1d ( lohi , h0_col , h1_col , mode = mode , dim = <NUM_LIT> ) <EOL> s = y . shape <EOL> y = y . reshape ( s [ <NUM_LIT> ] , - <NUM_LIT> , <NUM_LIT> , s [ - <NUM_LIT> ] , s [ - <NUM_LIT> ] ) <EOL> low = y [ : , : , <NUM_LIT> ] . contiguous ( ) <EOL> highs = y [ : , : , <NUM_LIT> : ] . contiguous ( ) <EOL> return low , highs <EOL> @ staticmethod <EOL> def backward ( ctx , low , highs ) : <EOL> dx = None <EOL> if ctx . needs_input_grad [ <NUM_LIT> ] : <EOL> mode = ctx . mode <EOL> h0_row , h1_row , h0_col , h1_col = ctx . saved_tensors <EOL> lh , hl , hh = torch . unbind ( highs , dim = <NUM_LIT> ) <EOL> lo = sfb1d ( low , lh , h0_col , h1_col , mode = mode , dim = <NUM_LIT> ) <EOL> hi = sfb1d ( hl , hh , h0_col , h1_col , mode = mode , dim = <NUM_LIT> ) <EOL> dx = sfb1d ( lo , hi , h0_row , h1_row , mode = mode , dim = <NUM_LIT> ) <EOL> if dx . shape [ - <NUM_LIT> ] > ctx . shape [ - <NUM_LIT> ] and dx . shape [ - <NUM_LIT> ] > ctx . shape [ - <NUM_LIT> ] : <EOL> dx = dx [ : , : , : ctx . shape [ - <NUM_LIT> ] , : ctx . shape [ - <NUM_LIT> ] ] <EOL> elif dx . shape [ - <NUM_LIT> ] > ctx . shape [ - <NUM_LIT> ] : <EOL> dx = dx [ : , : , : ctx . shape [ - <NUM_LIT> ] ] <EOL> elif dx . shape [ - <NUM_LIT> ] > ctx . shape [ - <NUM_LIT> ] : <EOL> dx = dx [ : , : , : , : ctx . shape [ - <NUM_LIT> ] ] <EOL> return dx , None , None , None , None , None <EOL> def prep_filt_afb2d ( h0_col , h1_col , h0_row = None , h1_row = None , device = device ) : <EOL> h0_col , h1_col = prep_filt_afb1d ( h0_col , h1_col , device ) <EOL> if h0_row is None : <EOL> h0_row , h1_col = h0_col , h1_col <EOL> else : <EOL> h0_row , h1_row = prep_filt_afb1d ( h0_row , h1_row , device ) <EOL> h0_col = h0_col . reshape ( ( <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , <NUM_LIT> ) ) <EOL> h1_col = h1_col . reshape ( ( <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> , <NUM_LIT> ) ) <EOL> h0_row = h0_row . reshape ( ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> ) ) <EOL> h1_row = h1_row . reshape ( ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> ) ) <EOL> return h0_col , h1_col , h0_row , h1_row <EOL> def prep_filt_afb1d ( h0 , h1 , device = device ) : <EOL> h0 = np . array ( h0 [ : : - <NUM_LIT> ] ) . ravel ( ) <EOL> h1 = np . array ( h1 [ : : - <NUM_LIT> ] ) . ravel ( ) <EOL> t = torch . get_default_dtype ( ) <EOL> h0 = torch . tensor ( h0 , device = device , dtype = t ) . reshape ( ( <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> ) ) <EOL> h1 = torch . tensor ( h1 , device = device , dtype = t ) . reshape ( ( <NUM_LIT> , <NUM_LIT> , - <NUM_LIT> ) ) <EOL> return h0 , h1 <EOL> class DWTForward ( nn . Module ) : <EOL> def __init__ ( self , J = <NUM_LIT> , wave = '<STR_LIT>' , mode = '<STR_LIT>' ) : <EOL> super ( ) . __init__ ( ) <EOL> if isinstance ( wave , str ) : <EOL> wave = pywt . Wavelet ( wave ) <EOL> if isinstance ( wave , pywt . Wavelet ) : <EOL> h0_col , h1_col = wave . dec_lo , wave . dec_hi <EOL> h0_row , h1_row = h0_col , h1_col <EOL> else : <EOL> if len ( wave ) == <NUM_LIT> : <EOL> h0_col , h1_col = wave [ <NUM_LIT> ] , wave [ <NUM_LIT> ] <EOL> h0_row , h1_row = h0_col , h1_col <EOL> elif len ( wave ) == <NUM_LIT> : <EOL> h0_col , h1_col = wave [ <NUM_LIT> ] , wave [ <NUM_LIT> ] <EOL> h0_row , h1_row = wave [ <NUM_LIT> ] , wave [ <NUM_LIT> ] <EOL> filts = prep_filt_afb2d ( h0_col , h1_col , h0_row , h1_row ) <EOL> self . register_buffer ( '<STR_LIT>' , filts [ <NUM_LIT> ] ) <EOL> self . register_buffer ( '<STR_LIT>' , filts [ <NUM_LIT> ] ) <EOL> self . register_buffer ( '<STR_LIT>' , filts [ <NUM_LIT> ] ) <EOL> self . register_buffer ( '<STR_LIT>' , filts [ <NUM_LIT> ] ) <EOL> self . J = J <EOL> self . mode = mode <EOL> def forward ( self , x ) : <EOL> yh = [ ] <EOL> ll = x <EOL> mode = mode_to_int ( self . mode ) <EOL> for j in range ( self . J ) : <EOL> ll , high = AFB2D . apply ( <EOL> ll , self . h0_col , self . h1_col , self . h0_row , self . h1_row , mode ) <EOL> yh . append ( high ) <EOL> return ll , yh <EOL> from numpy . lib . function_base import hamming <EOL> class Waveblock ( nn . Module ) : <EOL> def __init__ ( <EOL> self , <EOL> * , <EOL> mult = <NUM_LIT> , <EOL> ff_channel = <NUM_LIT> , <EOL> final_dim = <NUM_LIT> , <EOL> dropout = <NUM_LIT> , <EOL> ) : <EOL> super ( ) . __init__ ( ) <EOL> self . feedforward = nn . Sequential ( <EOL> nn . Conv2d ( final_dim , final_dim * mult , <NUM_LIT> ) , <EOL> nn . GELU ( ) , <EOL> nn . Dropout ( dropout ) , <EOL> nn . Conv2d ( final_dim * mult , ff_channel , <NUM_LIT> ) , <EOL> nn . ConvTranspose2d ( ff_channel , final_dim , <NUM_LIT> , stride = <NUM_LIT> , padding = <NUM_LIT> ) , <EOL> nn . BatchNorm2d ( final_dim ) <EOL> ) <EOL> self . reduction = nn . Conv2d ( final_dim , int ( final_dim / <NUM_LIT> ) , <NUM_LIT> ) <EOL> def forward ( self , x ) : <EOL> b , c , h , w = x . shape <EOL> x = self . reduction ( x ) <EOL> xf1 = DWTForward ( J = <NUM_LIT> , mode = '<STR_LIT>' , wave = '<STR_LIT>' ) . cuda ( ) <EOL> Y1 , Yh = xf1 ( x ) <EOL> x = torch . reshape ( Yh [ <NUM_LIT> ] , ( b , int ( c * <NUM_LIT> / <NUM_LIT> ) , int ( h / <NUM_LIT> ) , int ( w / <NUM_LIT> ) ) ) <EOL> x = torch . cat ( ( Y1 , x ) , dim = <NUM_LIT> ) <EOL> x = self . feedforward ( x ) <EOL> return x <EOL> class WaveMix ( nn . Module ) : <EOL> def __init__ ( <EOL> self , <EOL> * , <EOL> num_classes , <EOL> depth , <EOL> mult = <NUM_LIT> , <EOL> ff_channel = <NUM_LIT> , <EOL> final_dim = <NUM_LIT> , <EOL> dropout = <NUM_LIT> , <EOL> ) : <EOL> super ( ) . __init__ ( ) <EOL> self . layers = nn . ModuleList ( [ ] ) <EOL> for _ in range ( depth ) : <EOL> self . layers . append ( Waveblock ( mult = mult , ff_channel = ff_channel , final_dim = final_dim , dropout = dropout ) ) <EOL> self . pool = nn . Sequential ( <EOL> nn . AdaptiveAvgPool2d ( <NUM_LIT> ) , <EOL> Rearrange ( '<STR_LIT>' ) , <EOL> nn . Linear ( final_dim , num_classes ) <EOL> ) <EOL> self . conv = nn . Sequential ( <EOL> nn . Conv2d ( <NUM_LIT> , int ( final_dim / <NUM_LIT> ) , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) , <EOL> nn . Conv2d ( int ( final_dim / <NUM_LIT> ) , final_dim , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> ) <EOL> def forward ( self , img ) : <EOL> x = self . conv ( img ) <EOL> for attn in self . layers : <EOL> x = attn ( x ) + x <EOL> out = self . pool ( x ) <EOL> return out <EOL> model = WaveMix ( <EOL> num_classes = <NUM_LIT> , <EOL> depth = <NUM_LIT> , <EOL> mult = <NUM_LIT> , <EOL> ff_channel = <NUM_LIT> , <EOL> final_dim = <NUM_LIT> , <EOL> dropout = <NUM_LIT> <EOL> ) <EOL> </s>
<s> import segmentation . Layout4Card . api as OuterSegmentation <EOL> import segmentation . blankSegmentation . blank_segmentation as BlankSegmentation <EOL> import scoreblocks . singleCharacterRecognition as SingleCharacterRecognition <EOL> import scoreblocks . fillblankmodel as FillBlankModel <EOL> import scoreblocks . candemo as CanDemo <EOL> import scoreblocks . essayscoremodel as EssayScoreModel <EOL> import PIL . Image <EOL> import cv2 <EOL> import os <EOL> class scoresystem : <EOL> def __init__ ( self ) : <EOL> self . outer_segmentation = OuterSegmentation . OuterSegmentation ( ) <EOL> self . blank_segmentation = BlankSegmentation . Model ( ) <EOL> self . single_character_recognition = SingleCharacterRecognition . Model ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> self . fill_blank_model = FillBlankModel . model ( ) <EOL> self . candemo = CanDemo . model ( ) <EOL> self . essay_score_model = EssayScoreModel . model ( ) <EOL> self . answer = None <EOL> def set_answer ( self , answer ) : <EOL> self . answer = answer <EOL> def tkt_score ( self , section_img , section_answer ) : <EOL> blank_segmentation_result = self . blank_segmentation . process_img ( section_img ) <EOL> score_result = { '<STR_LIT>' : '<STR_LIT>' } <EOL> right_array = [ ] <EOL> for i in range ( len ( blank_segmentation_result ) ) : <EOL> recognition_result = self . fill_blank_model . recognize_text ( blank_segmentation_result [ i ] ) <EOL> if recognition_result is not None : <EOL> if recognition_result [ <NUM_LIT> ] == section_answer [ i ] : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> judge_index = self . fill_blank_model . judge_with_clip ( section_answer [ i ] , recognition_result [ <NUM_LIT> ] , blank_segmentation_result [ i ] ) <EOL> if judge_index == <NUM_LIT> : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> right_array . append ( <NUM_LIT> ) <EOL> score_result [ '<STR_LIT>' ] = right_array <EOL> return score_result <EOL> def tkt_math_score ( self , section_img , section_answer ) : <EOL> blank_segmentation_result = self . blank_segmentation . process_img ( <EOL> section_img ) <EOL> score_result = { '<STR_LIT>' : '<STR_LIT>' } <EOL> right_array = [ ] <EOL> for i in range ( len ( blank_segmentation_result ) ) : <EOL> recognition_result = self . candemo . output_img ( blank_segmentation_result [ i ] ) <EOL> if recognition_result is not None : <EOL> if recognition_result [ <NUM_LIT> ] == section_answer [ i ] : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> judge_index = self . fill_blank_model . judge_with_clip ( section_answer [ i ] , recognition_result [ <NUM_LIT> ] , blank_segmentation_result [ i ] ) <EOL> if judge_index == <NUM_LIT> : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> right_array . append ( <NUM_LIT> ) <EOL> score_result [ '<STR_LIT>' ] = right_array <EOL> return score_result <EOL> def zwt_score ( self , section_img ) : <EOL> score_result = { '<STR_LIT>' : '<STR_LIT>' } <EOL> right_array = [ ] <EOL> essay = '<STR_LIT>' <EOL> str_set = self . fill_blank_model . ocr . ocr ( section_img ) [ <NUM_LIT> ] <EOL> if str_set is not None : <EOL> for str_item in str_set : <EOL> essay += str_item [ <NUM_LIT> ] [ <NUM_LIT> ] <EOL> result = self . essay_score_model . getscore ( [ essay ] ) <EOL> if result != None : <EOL> result = result / <NUM_LIT> * <NUM_LIT> <EOL> right_array . append ( result ) <EOL> else : <EOL> right_array . append ( <NUM_LIT> ) <EOL> else : <EOL> right_array . append ( <NUM_LIT> ) <EOL> score_result [ '<STR_LIT>' ] = right_array <EOL> return score_result <EOL> def get_score ( self , img : PIL . Image . Image ) : <EOL> total_result = [ ] <EOL> answer_set_index = <NUM_LIT> <EOL> outer_segmentation_results = self . outer_segmentation . get_segmentation ( img ) <EOL> CLS_ID_NAME_MAP = { <EOL> <NUM_LIT> : '<STR_LIT>' , <EOL> <NUM_LIT> : '<STR_LIT>' , <EOL> <NUM_LIT> : '<STR_LIT>' , <EOL> <NUM_LIT> : '<STR_LIT>' <EOL> } <EOL> for outer_segmentation_result in outer_segmentation_results : <EOL> for box in outer_segmentation_result . boxes : <EOL> cls_id = box . cls . cpu ( ) . numpy ( ) [ <NUM_LIT> ] <EOL> x1 , y1 , x2 , y2 = box . xyxy . cpu ( ) . numpy ( ) [ <NUM_LIT> ] <EOL> cls_name = CLS_ID_NAME_MAP [ cls_id ] <EOL> if cls_name == '<STR_LIT>' : <EOL> continue <EOL> if cls_name == '<STR_LIT>' : <EOL> for answer in self . answer [ answer_set_index : ] : <EOL> if answer [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> answer_set_index = self . answer . index ( answer ) <EOL> section_answer = answer [ '<STR_LIT>' ] <EOL> section_img = outer_segmentation_result . orig_img <EOL> section_img = section_img [ int ( y1 ) : int ( y2 ) , int ( x1 ) : int ( x2 ) ] <EOL> score_result = self . tkt_score ( section_img , section_answer ) <EOL> total_result . append ( score_result ) <EOL> elif answer [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> answer_set_index = self . answer . index ( answer ) <EOL> section_answer = answer [ '<STR_LIT>' ] <EOL> section_img = outer_segmentation_result . orig_img <EOL> section_img = section_img [ int ( y1 ) : int ( y2 ) , int ( x1 ) : int ( x2 ) ] <EOL> score_result = self . tkt_math_score ( section_img , section_answer ) <EOL> total_result . append ( score_result ) <EOL> elif cls_name == '<STR_LIT>' : <EOL> for answer in self . answer [ answer_set_index : ] : <EOL> if answer [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> answer_set_index = self . answer . index ( answer ) <EOL> section_img = outer_segmentation_result . orig_img <EOL> section_img = section_img [ int ( y1 ) : int ( y2 ) , int ( x1 ) : int ( x2 ) ] <EOL> score_result = self . zwt_score ( section_img ) <EOL> total_result . append ( score_result ) <EOL> elif cls_name == '<STR_LIT>' : <EOL> for answer in self . answer [ answer_set_index : ] : <EOL> if answer [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> answer_set_index = self . answer . index ( answer ) <EOL> section_answer = answer [ '<STR_LIT>' ] <EOL> section_img = outer_segmentation_result . orig_img <EOL> section_img = section_img [ int ( y1 ) : int ( y2 ) , int ( x1 ) : int ( x2 ) ] <EOL> pass <EOL> return total_result <EOL> if __name__ == '<STR_LIT>' : <EOL> test_dir = '<STR_LIT>' <EOL> lst = os . listdir ( test_dir ) <EOL> s = scoresystem ( ) <EOL> s . set_answer ( [ { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] } , { '<STR_LIT>' : '<STR_LIT>' } ] ) <EOL> for i in lst : <EOL> if i . endswith ( '<STR_LIT>' ) or i . endswith ( '<STR_LIT>' ) : <EOL> path = os . path . join ( test_dir , i ) <EOL> img = PIL . Image . open ( path ) <EOL> total_result = s . get_score ( img ) <EOL> print ( total_result ) <EOL> break <EOL> </s>
<s> import torch <EOL> import torch . nn as nn <EOL> class Attention ( nn . Module ) : <EOL> def __init__ ( self , params ) : <EOL> super ( Attention , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . hidden = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . attention_dim = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . hidden_weight = nn . Linear ( self . hidden , self . attention_dim ) <EOL> self . attention_conv = nn . Conv2d ( <NUM_LIT> , <NUM_LIT> , kernel_size = <NUM_LIT> , padding = <NUM_LIT> , bias = False ) <EOL> self . attention_weight = nn . Linear ( <NUM_LIT> , self . attention_dim , bias = False ) <EOL> self . alpha_convert = nn . Linear ( self . attention_dim , <NUM_LIT> ) <EOL> def forward ( self , cnn_features , cnn_features_trans , hidden , alpha_sum , image_mask = None ) : <EOL> query = self . hidden_weight ( hidden ) <EOL> alpha_sum_trans = self . attention_conv ( alpha_sum ) <EOL> coverage_alpha = self . attention_weight ( alpha_sum_trans . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) ) <EOL> alpha_score = torch . tanh ( query [ : , None , None , : ] + coverage_alpha + cnn_features_trans . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) ) <EOL> energy = self . alpha_convert ( alpha_score ) <EOL> energy = energy - energy . max ( ) <EOL> energy_exp = torch . exp ( energy . squeeze ( - <NUM_LIT> ) ) <EOL> if image_mask is not None : <EOL> energy_exp = energy_exp * image_mask . squeeze ( <NUM_LIT> ) <EOL> alpha = energy_exp / ( energy_exp . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) [ : , None , None ] + <NUM_LIT> ) <EOL> alpha_sum = alpha [ : , None , : , : ] + alpha_sum <EOL> context_vector = ( alpha [ : , None , : , : ] * cnn_features ) . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) <EOL> return context_vector , alpha , alpha_sum <EOL> </s>
<s> import torch <EOL> from transformers import AutoTokenizer <EOL> from plms import mainplm , chunkplm <EOL> from evaluate import evaluation <EOL> from encoder import encode_documents <EOL> from data import asap_essay_lengths , fix_score <EOL> from lossfunctions import multi_loss <EOL> import pandas as pd <EOL> import matplotlib . pyplot as plt <EOL> import math <EOL> from torch . cuda . amp import autocast , GradScaler <EOL> class AESmodel ( ) : <EOL> def __init__ ( self , traindata , valdata , testdata , foldname , args = None ) : <EOL> if args is not None : <EOL> self . args = vars ( args ) <EOL> self . tokenizer = AutoTokenizer . from_pretrained ( self . args [ '<STR_LIT>' ] ) <EOL> self . prompt = int ( args . prompt [ <NUM_LIT> ] ) <EOL> chunk_sizes_str = self . args [ '<STR_LIT>' ] <EOL> self . chunk_sizes = [ ] <EOL> self . bert_batch_sizes = [ ] <EOL> if "<STR_LIT>" != chunk_sizes_str : <EOL> for chunk_size_str in chunk_sizes_str . split ( "<STR_LIT>" ) : <EOL> chunk_size = int ( chunk_size_str ) <EOL> self . chunk_sizes . append ( chunk_size ) <EOL> bert_batch_size = int ( asap_essay_lengths [ self . prompt ] / chunk_size ) + <NUM_LIT> <EOL> self . bert_batch_sizes . append ( bert_batch_size ) <EOL> plm_batch_size_str = "<STR_LIT>" . join ( [ str ( item ) for item in self . bert_batch_sizes ] ) <EOL> print ( "<STR_LIT>" % ( self . prompt , asap_essay_lengths [ self . prompt ] ) ) <EOL> print ( "<STR_LIT>" % ( chunk_sizes_str , plm_batch_size_str ) ) <EOL> self . bert_regression_by_word_document = mainplm ( self . args ) <EOL> self . bert_regression_by_chunk = chunkplm ( self . args ) <EOL> self . multi_loss = multi_loss ( self . args ) <EOL> self . lr = [ self . args [ '<STR_LIT>' ] , self . args [ '<STR_LIT>' ] ] <EOL> self . optim = torch . optim . Adam ( [ <EOL> { '<STR_LIT>' : self . bert_regression_by_word_document . parameters ( ) , '<STR_LIT>' : self . lr [ <NUM_LIT> ] } , <EOL> { '<STR_LIT>' : self . bert_regression_by_chunk . parameters ( ) , '<STR_LIT>' : self . lr [ <NUM_LIT> ] } <EOL> ] ) <EOL> self . traindata = traindata <EOL> self . valdata = valdata <EOL> self . testdata = testdata <EOL> self . foldname = foldname <EOL> self . plt_x = [ ] <EOL> self . plt_train_qwk = [ ] <EOL> self . plt_val_qwk = [ ] <EOL> self . plt_test_qwk = [ ] <EOL> self . best_val_qwk = <NUM_LIT> <EOL> def adjust_learning_rate ( self , epoch , start_lr , min_lr = <NUM_LIT> ) : <EOL> optimizer = self . optim <EOL> lr_0 = max ( start_lr [ <NUM_LIT> ] * ( <NUM_LIT> ** epoch ) , min_lr ) <EOL> lr_1 = max ( start_lr [ <NUM_LIT> ] * ( <NUM_LIT> ** epoch ) , min_lr ) <EOL> optimizer . param_groups [ <NUM_LIT> ] [ '<STR_LIT>' ] = lr_0 <EOL> optimizer . param_groups [ <NUM_LIT> ] [ '<STR_LIT>' ] = lr_1 <EOL> print ( f'<STR_LIT>' ) <EOL> def adjust_loss_weight ( self , e ) : <EOL> cosvalue = max ( ( math . cos ( ( e / ( self . args [ '<STR_LIT>' ] * <NUM_LIT> ) ) * math . pi ) + <NUM_LIT> ) / <NUM_LIT> , <NUM_LIT> ) <EOL> self . multi_loss . weight = [ self . args [ '<STR_LIT>' ] , <EOL> self . args [ '<STR_LIT>' ] , <EOL> self . args [ '<STR_LIT>' ] * cosvalue ] <EOL> def validate ( self , valdata , e = - <NUM_LIT> , mode = '<STR_LIT>' ) : <EOL> self . bert_regression_by_word_document . eval ( ) <EOL> self . bert_regression_by_chunk . eval ( ) <EOL> scaler = GradScaler ( ) <EOL> with torch . no_grad ( ) : <EOL> target_scores = None <EOL> if isinstance ( valdata , tuple ) and len ( valdata ) == <NUM_LIT> : <EOL> doctok_token_indexes , doctok_token_indexes_slicenum = encode_documents ( <EOL> valdata [ <NUM_LIT> ] , self . tokenizer , max_input_length = <NUM_LIT> ) <EOL> chunk_token_indexes_list , chunk_token_indexes_length_list = [ ] , [ ] <EOL> for i in range ( len ( self . chunk_sizes ) ) : <EOL> document_representations_chunk , document_sequence_lengths_chunk = encode_documents ( <EOL> valdata [ <NUM_LIT> ] , <EOL> self . tokenizer , <EOL> max_input_length = self . chunk_sizes [ i ] ) <EOL> chunk_token_indexes_list . append ( document_representations_chunk ) <EOL> chunk_token_indexes_length_list . append ( document_sequence_lengths_chunk ) <EOL> target_scores = torch . FloatTensor ( valdata [ <NUM_LIT> ] ) <EOL> predictions = torch . empty ( ( doctok_token_indexes . shape [ <NUM_LIT> ] ) ) <EOL> acculation_loss = <NUM_LIT> <EOL> for i in range ( <NUM_LIT> , doctok_token_indexes . shape [ <NUM_LIT> ] , self . args [ '<STR_LIT>' ] ) : <EOL> batch_doctok_token_indexes = doctok_token_indexes [ i : i + self . args [ '<STR_LIT>' ] ] . to ( <EOL> device = self . args [ '<STR_LIT>' ] ) <EOL> batch_target_scores = target_scores [ i : i + self . args [ '<STR_LIT>' ] ] . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> with autocast ( ) : <EOL> batch_doctok_predictions = self . bert_regression_by_word_document ( batch_doctok_token_indexes , <EOL> device = self . args [ '<STR_LIT>' ] ) <EOL> batch_doctok_predictions = torch . squeeze ( batch_doctok_predictions ) <EOL> batch_predictions = batch_doctok_predictions <EOL> if len ( batch_predictions . shape ) == <NUM_LIT> : <EOL> batch_predictions = torch . tensor ( [ batch_predictions ] , device = self . args [ '<STR_LIT>' ] ) <EOL> with autocast ( ) : <EOL> loss = self . multi_loss ( batch_target_scores . unsqueeze ( <NUM_LIT> ) , batch_predictions . unsqueeze ( <NUM_LIT> ) ) <EOL> acculation_loss += loss . item ( ) <EOL> predictions [ i : i + self . args [ '<STR_LIT>' ] ] = batch_predictions <EOL> assert target_scores . shape == predictions . shape <EOL> print ( f'<STR_LIT>' ) <EOL> prediction_scores = [ ] <EOL> label_scores = [ ] <EOL> predictions = predictions . detach ( ) . numpy ( ) <EOL> target_scores = target_scores . detach ( ) . numpy ( ) <EOL> for index , item in enumerate ( predictions ) : <EOL> prediction_scores . append ( fix_score ( item , self . prompt ) ) <EOL> label_scores . append ( target_scores [ index ] ) <EOL> train_eva_res = evaluation ( label_scores , prediction_scores ) <EOL> df = pd . DataFrame ( dict ( zip ( [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] , <EOL> [ predictions . tolist ( ) , prediction_scores , label_scores ] ) ) ) <EOL> df . to_csv ( f'<STR_LIT>' , index = False ) <EOL> print ( '<STR_LIT>' * <NUM_LIT> + f'<STR_LIT>' + '<STR_LIT>' * <NUM_LIT> ) <EOL> print ( "<STR_LIT>" , float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> print ( "<STR_LIT>" , float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> if mode == '<STR_LIT>' : <EOL> self . plt_val_qwk . append ( float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> if self . best_val_qwk < float ( train_eva_res [ <NUM_LIT> ] ) : <EOL> self . best_val_qwk = float ( train_eva_res [ <NUM_LIT> ] ) <EOL> elif mode == '<STR_LIT>' : <EOL> self . plt_test_qwk . append ( float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> if self . best_val_qwk == self . plt_val_qwk [ - <NUM_LIT> ] : <EOL> torch . save ( self . bert_regression_by_word_document . state_dict ( ) , f'<STR_LIT>' ) <EOL> torch . save ( self . bert_regression_by_chunk . state_dict ( ) , f'<STR_LIT>' ) <EOL> with open ( f'<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> f . write ( f'<STR_LIT>' ) <EOL> def train ( self ) : <EOL> epoch = self . args [ '<STR_LIT>' ] <EOL> traindata = self . traindata <EOL> self . bert_regression_by_word_document . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> self . bert_regression_by_chunk . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> self . multi_loss . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> scaler = GradScaler ( ) <EOL> for e in range ( epoch ) : <EOL> print ( '<STR_LIT>' * <NUM_LIT> + f'<STR_LIT>' + '<STR_LIT>' * <NUM_LIT> ) <EOL> self . adjust_learning_rate ( e , self . lr ) <EOL> self . adjust_loss_weight ( e ) <EOL> self . bert_regression_by_word_document . train ( ) <EOL> self . bert_regression_by_chunk . train ( ) <EOL> target_scores = None <EOL> if isinstance ( traindata , tuple ) and len ( traindata ) == <NUM_LIT> : <EOL> doctok_token_indexes , doctok_token_indexes_slicenum = encode_documents ( <EOL> traindata [ <NUM_LIT> ] , self . tokenizer , max_input_length = <NUM_LIT> ) <EOL> chunk_token_indexes_list , chunk_token_indexes_length_list = [ ] , [ ] <EOL> for i in range ( len ( self . chunk_sizes ) ) : <EOL> document_representations_chunk , document_sequence_lengths_chunk = encode_documents ( <EOL> traindata [ <NUM_LIT> ] , <EOL> self . tokenizer , <EOL> max_input_length = self . chunk_sizes [ i ] ) <EOL> chunk_token_indexes_list . append ( document_representations_chunk ) <EOL> chunk_token_indexes_length_list . append ( document_sequence_lengths_chunk ) <EOL> target_scores = torch . FloatTensor ( traindata [ <NUM_LIT> ] ) <EOL> predictions = torch . empty ( ( doctok_token_indexes . shape [ <NUM_LIT> ] ) ) <EOL> acculation_loss = <NUM_LIT> <EOL> for i in range ( <NUM_LIT> , doctok_token_indexes . shape [ <NUM_LIT> ] , self . args [ '<STR_LIT>' ] ) : <EOL> self . optim . zero_grad ( ) <EOL> batch_doctok_token_indexes = doctok_token_indexes [ i : i + self . args [ '<STR_LIT>' ] ] . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> batch_target_scores = target_scores [ i : i + self . args [ '<STR_LIT>' ] ] . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> with autocast ( ) : <EOL> batch_doctok_predictions = self . bert_regression_by_word_document ( batch_doctok_token_indexes , device = self . args [ '<STR_LIT>' ] ) <EOL> batch_doctok_predictions = torch . squeeze ( batch_doctok_predictions ) <EOL> batch_predictions = batch_doctok_predictions <EOL> if len ( batch_predictions . shape ) == <NUM_LIT> : <EOL> batch_predictions = torch . tensor ( [ batch_predictions ] , device = self . args [ '<STR_LIT>' ] ) <EOL> with autocast ( ) : <EOL> loss = self . multi_loss ( batch_target_scores . unsqueeze ( <NUM_LIT> ) , batch_predictions . unsqueeze ( <NUM_LIT> ) ) <EOL> loss . requires_grad_ ( True ) <EOL> scaler . scale ( loss ) . backward ( ) <EOL> scaler . step ( self . optim ) <EOL> scaler . update ( ) <EOL> acculation_loss += loss . item ( ) <EOL> predictions [ i : i + self . args [ '<STR_LIT>' ] ] = batch_predictions <EOL> assert target_scores . shape == predictions . shape <EOL> print ( f'<STR_LIT>' ) <EOL> prediction_scores = [ ] <EOL> label_scores = [ ] <EOL> predictions = predictions . detach ( ) . numpy ( ) <EOL> target_scores = target_scores . detach ( ) . numpy ( ) <EOL> for index , item in enumerate ( predictions ) : <EOL> prediction_scores . append ( fix_score ( item , self . prompt ) ) <EOL> label_scores . append ( target_scores [ index ] ) <EOL> train_eva_res = evaluation ( label_scores , prediction_scores ) <EOL> df = pd . DataFrame ( dict ( zip ( [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] , [ predictions . tolist ( ) , prediction_scores , label_scores ] ) ) ) <EOL> df . to_csv ( f'<STR_LIT>' , index = False ) <EOL> print ( '<STR_LIT>' * <NUM_LIT> + '<STR_LIT>' + '<STR_LIT>' * <NUM_LIT> ) <EOL> print ( "<STR_LIT>" , float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> print ( "<STR_LIT>" , float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> self . plt_x . append ( e + <NUM_LIT> ) <EOL> self . plt_train_qwk . append ( float ( train_eva_res [ <NUM_LIT> ] ) ) <EOL> self . validate ( self . valdata , e , mode = '<STR_LIT>' ) <EOL> self . validate ( self . testdata , e , mode = '<STR_LIT>' ) <EOL> plt . plot ( self . plt_x , self . plt_train_qwk , '<STR_LIT>' , color = '<STR_LIT>' , alpha = <NUM_LIT> , linewidth = <NUM_LIT> , label = '<STR_LIT>' ) <EOL> plt . plot ( self . plt_x , self . plt_val_qwk , '<STR_LIT>' , color = '<STR_LIT>' , alpha = <NUM_LIT> , linewidth = <NUM_LIT> , label = '<STR_LIT>' ) <EOL> plt . plot ( self . plt_x , self . plt_test_qwk , '<STR_LIT>' , color = '<STR_LIT>' , alpha = <NUM_LIT> , linewidth = <NUM_LIT> , label = '<STR_LIT>' ) <EOL> plt . title ( self . foldname ) <EOL> plt . xlabel ( '<STR_LIT>' ) <EOL> plt . ylabel ( '<STR_LIT>' ) <EOL> plt . legend ( loc = '<STR_LIT>' ) <EOL> plt . savefig ( f'<STR_LIT>' ) <EOL> plt . close ( ) <EOL> </s>
<s> from django . test import TestCase <EOL> </s>
<s> import torch <EOL> from tqdm import tqdm <EOL> from utils import update_lr , Meter , cal_score <EOL> from dataset import Words <EOL> def train ( params , model , optimizer , epoch , train_loader , writer = None ) : <EOL> model . train ( ) <EOL> device = params [ '<STR_LIT>' ] <EOL> loss_meter = Meter ( ) <EOL> word_right , exp_right , length , cal_num = <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> <EOL> with tqdm ( train_loader , total = len ( train_loader ) // params [ '<STR_LIT>' ] ) as pbar : <EOL> for batch_idx , ( images , image_masks , labels , label_masks ) in enumerate ( pbar ) : <EOL> images , image_masks , labels , label_masks = images . to ( device ) , image_masks . to ( <EOL> device ) , labels . to ( device ) , label_masks . to ( device ) <EOL> batch , time = labels . shape [ : <NUM_LIT> ] <EOL> if not '<STR_LIT>' in params or params [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> update_lr ( optimizer , epoch , batch_idx , len ( train_loader ) , params [ '<STR_LIT>' ] , params [ '<STR_LIT>' ] ) <EOL> optimizer . zero_grad ( ) <EOL> probs , counting_preds , word_loss , counting_loss = model ( images , image_masks , labels , label_masks ) <EOL> loss = word_loss + counting_loss <EOL> loss . backward ( ) <EOL> if params [ '<STR_LIT>' ] : <EOL> torch . nn . utils . clip_grad_norm_ ( model . parameters ( ) , params [ '<STR_LIT>' ] ) <EOL> optimizer . step ( ) <EOL> loss_meter . add ( loss . item ( ) ) <EOL> wordRate , ExpRate = cal_score ( probs , labels , label_masks ) <EOL> word_right = word_right + wordRate * time <EOL> exp_right = exp_right + ExpRate * batch <EOL> length = length + time <EOL> cal_num = cal_num + batch <EOL> if writer : <EOL> current_step = epoch * len ( train_loader ) // params [ '<STR_LIT>' ] + batch_idx + <NUM_LIT> <EOL> writer . add_scalar ( '<STR_LIT>' , word_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , counting_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , wordRate , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , ExpRate , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , optimizer . param_groups [ <NUM_LIT> ] [ '<STR_LIT>' ] , current_step ) <EOL> pbar . set_description ( f'<STR_LIT>' <EOL> f'<STR_LIT>' ) <EOL> if batch_idx >= len ( train_loader ) // params [ '<STR_LIT>' ] : <EOL> break <EOL> if writer : <EOL> writer . add_scalar ( '<STR_LIT>' , loss_meter . mean , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , word_right / length , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , exp_right / cal_num , epoch + <NUM_LIT> ) <EOL> return loss_meter . mean , word_right / length , exp_right / cal_num <EOL> def eval ( params , model , epoch , eval_loader , writer = None ) : <EOL> model . eval ( ) <EOL> device = params [ '<STR_LIT>' ] <EOL> loss_meter = Meter ( ) <EOL> word_right , exp_right , length , cal_num = <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> <EOL> with tqdm ( eval_loader , total = len ( eval_loader ) // params [ '<STR_LIT>' ] ) as pbar , torch . no_grad ( ) : <EOL> for batch_idx , ( images , image_masks , labels , label_masks ) in enumerate ( pbar ) : <EOL> images , image_masks , labels , label_masks = images . to ( device ) , image_masks . to ( <EOL> device ) , labels . to ( device ) , label_masks . to ( device ) <EOL> batch , time = labels . shape [ : <NUM_LIT> ] <EOL> probs , counting_preds , word_loss , counting_loss = model ( images , image_masks , labels , label_masks , is_train = False ) <EOL> loss = word_loss + counting_loss <EOL> loss_meter . add ( loss . item ( ) ) <EOL> wordRate , ExpRate = cal_score ( probs , labels , label_masks ) <EOL> word_right = word_right + wordRate * time <EOL> exp_right = exp_right + ExpRate * batch <EOL> length = length + time <EOL> cal_num = cal_num + batch <EOL> if writer : <EOL> current_step = epoch * len ( eval_loader ) // params [ '<STR_LIT>' ] + batch_idx + <NUM_LIT> <EOL> writer . add_scalar ( '<STR_LIT>' , word_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , counting_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , wordRate , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , ExpRate , current_step ) <EOL> pbar . set_description ( f'<STR_LIT>' <EOL> f'<STR_LIT>' ) <EOL> if batch_idx >= len ( eval_loader ) // params [ '<STR_LIT>' ] : <EOL> break <EOL> if writer : <EOL> writer . add_scalar ( '<STR_LIT>' , loss_meter . mean , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , word_right / length , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , exp_right / len ( eval_loader . dataset ) , epoch + <NUM_LIT> ) <EOL> return loss_meter . mean , word_right / length , exp_right / cal_num <EOL> </s>
<s> import base64 <EOL> import json <EOL> import cv2 <EOL> import numpy as np <EOL> from flask import Flask , request <EOL> from ultralytics import YOLO <EOL> import yaml <EOL> MODEL_CLS_2_REAL_ID = { <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> , <EOL> <NUM_LIT> : <NUM_LIT> <EOL> } <EOL> config_file = open ( '<STR_LIT>' ) <EOL> config = yaml . load ( config_file , yaml . loader . SafeLoader ) <EOL> config_file . close ( ) <EOL> app = Flask ( __name__ ) <EOL> model = YOLO ( model = config [ '<STR_LIT>' ] ) <EOL> @ app . route ( '<STR_LIT>' , methods = [ '<STR_LIT>' , '<STR_LIT>' ] ) <EOL> def infer ( ) : <EOL> ret = { "<STR_LIT>" : False } <EOL> img = request . files . get ( '<STR_LIT>' ) <EOL> if img is None : <EOL> ret = { '<STR_LIT>' : - <NUM_LIT> , '<STR_LIT>' : '<STR_LIT>' } <EOL> return json . dumps ( ret , ensure_ascii = False ) <EOL> try : <EOL> input_image = img . read ( ) <EOL> imBytes = np . frombuffer ( input_image , np . uint8 ) <EOL> in_img = cv2 . imdecode ( imBytes , cv2 . IMREAD_COLOR ) <EOL> result = model . predict ( source = in_img , save = True , imgsz = <NUM_LIT> , device = <NUM_LIT> ) [ <NUM_LIT> ] <EOL> results = [ ] <EOL> for box in result . boxes : <EOL> cls_id = box . cls . cpu ( ) . numpy ( ) [ <NUM_LIT> ] <EOL> ret_id = MODEL_CLS_2_REAL_ID [ cls_id ] <EOL> x , y , w , h = box . xywh . cpu ( ) . numpy ( ) [ <NUM_LIT> ] <EOL> results += [ { <EOL> '<STR_LIT>' : ret_id , <EOL> '<STR_LIT>' : [ float ( x ) , float ( y ) , float ( w ) , float ( h ) ] <EOL> } ] <EOL> ret = { <EOL> '<STR_LIT>' : <NUM_LIT> , <EOL> '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : results <EOL> } <EOL> except Exception as e : <EOL> print ( e ) <EOL> return json . dumps ( ret , ensure_ascii = False ) <EOL> if __name__ == "<STR_LIT>" : <EOL> port = config [ '<STR_LIT>' ] <EOL> app . run ( debug = False , host = '<STR_LIT>' , port = port ) <EOL> </s>
<s> import datetime <EOL> import random <EOL> def tid_maker ( ) : <EOL> return '<STR_LIT>' . format ( datetime . datetime . now ( ) ) + '<STR_LIT>' . join ( <EOL> [ str ( random . randint ( <NUM_LIT> , <NUM_LIT> ) ) for i in range ( <NUM_LIT> ) ] ) <EOL> </s>
<s> import torch <EOL> import csv <EOL> import pickle <EOL> class Dataset ( torch . utils . data . Dataset ) : <EOL> def __init__ ( self ) : <EOL> self . id = [ ] <EOL> self . essay = [ ] <EOL> self . score = [ ] <EOL> self . prediction_id = [ ] <EOL> def __len__ ( self ) : <EOL> return len ( self . essay ) <EOL> def __getitem__ ( self , i ) : <EOL> id = self . id [ i ] <EOL> essay = self . essay [ i ] <EOL> score = self . score [ i ] <EOL> prediction_id = self . prediction_id [ i ] <EOL> return id , essay , score , prediction_id <EOL> if __name__ == '<STR_LIT>' : <EOL> p1_dataset = Dataset ( ) <EOL> p2_d1_dataset = Dataset ( ) <EOL> p2_d2_dataset = Dataset ( ) <EOL> p3_dataset = Dataset ( ) <EOL> p4_dataset = Dataset ( ) <EOL> p5_dataset = Dataset ( ) <EOL> p6_dataset = Dataset ( ) <EOL> p7_dataset = Dataset ( ) <EOL> p8_dataset = Dataset ( ) <EOL> p1_val_dataset = Dataset ( ) <EOL> p2_d1_val_dataset = Dataset ( ) <EOL> p2_d2_val_dataset = Dataset ( ) <EOL> p3_val_dataset = Dataset ( ) <EOL> p4_val_dataset = Dataset ( ) <EOL> p5_val_dataset = Dataset ( ) <EOL> p6_val_dataset = Dataset ( ) <EOL> p7_val_dataset = Dataset ( ) <EOL> p8_val_dataset = Dataset ( ) <EOL> with open ( '<STR_LIT>' , encoding = '<STR_LIT>' ) as tsvfile : <EOL> text = tsvfile . read ( ) <EOL> lines = text . split ( '<STR_LIT>' ) <EOL> for line in lines [ <NUM_LIT> : ] : <EOL> item = line . split ( '<STR_LIT>' ) <EOL> if len ( item ) == <NUM_LIT> : <EOL> continue <EOL> essay_id = item [ <NUM_LIT> ] <EOL> essay_set = item [ <NUM_LIT> ] <EOL> essay = item [ <NUM_LIT> ] <EOL> domain_1 = int ( item [ <NUM_LIT> ] ) <EOL> domain_2 = item [ <NUM_LIT> ] <EOL> if essay_set == '<STR_LIT>' : <EOL> p1_dataset . id . append ( essay_id ) <EOL> p1_dataset . essay . append ( essay ) <EOL> p1_dataset . score . append ( domain_1 ) <EOL> p1_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p2_d1_dataset . id . append ( essay_id ) <EOL> p2_d1_dataset . essay . append ( essay ) <EOL> p2_d1_dataset . score . append ( domain_1 ) <EOL> p2_d1_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> p2_d2_dataset . id . append ( essay_id ) <EOL> p2_d2_dataset . essay . append ( essay ) <EOL> p2_d2_dataset . score . append ( int ( domain_2 ) ) <EOL> p2_d2_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p3_dataset . id . append ( essay_id ) <EOL> p3_dataset . essay . append ( essay ) <EOL> p3_dataset . score . append ( domain_1 ) <EOL> p3_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p4_dataset . id . append ( essay_id ) <EOL> p4_dataset . essay . append ( essay ) <EOL> p4_dataset . score . append ( domain_1 ) <EOL> p4_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p5_dataset . id . append ( essay_id ) <EOL> p5_dataset . essay . append ( essay ) <EOL> p5_dataset . score . append ( domain_1 ) <EOL> p5_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p6_dataset . id . append ( essay_id ) <EOL> p6_dataset . essay . append ( essay ) <EOL> p6_dataset . score . append ( domain_1 ) <EOL> p6_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p7_dataset . id . append ( essay_id ) <EOL> p7_dataset . essay . append ( essay ) <EOL> p7_dataset . score . append ( domain_1 ) <EOL> p7_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p8_dataset . id . append ( essay_id ) <EOL> p8_dataset . essay . append ( essay ) <EOL> p8_dataset . score . append ( domain_1 ) <EOL> p8_dataset . prediction_id . append ( '<STR_LIT>' ) <EOL> score_dit = { } <EOL> with open ( '<STR_LIT>' ) as csvfile : <EOL> csv_reader = csv . reader ( csvfile ) <EOL> header = next ( csv_reader ) <EOL> for row in csv_reader : <EOL> prediction_id = row [ <NUM_LIT> ] <EOL> score = row [ <NUM_LIT> ] <EOL> score_dit [ prediction_id ] = int ( score ) <EOL> with open ( '<STR_LIT>' , encoding = '<STR_LIT>' ) as tsvfile : <EOL> text = tsvfile . read ( ) <EOL> lines = text . split ( '<STR_LIT>' ) <EOL> for line in lines [ <NUM_LIT> : ] : <EOL> item = line . split ( '<STR_LIT>' ) <EOL> if len ( item ) == <NUM_LIT> : <EOL> continue <EOL> essay_id = item [ <NUM_LIT> ] <EOL> essay_set = item [ <NUM_LIT> ] <EOL> essay = item [ <NUM_LIT> ] <EOL> domain1_predictionid = item [ <NUM_LIT> ] <EOL> domain2_predictionid = item [ <NUM_LIT> ] <EOL> if essay_set == '<STR_LIT>' : <EOL> p1_val_dataset . id . append ( essay_id ) <EOL> p1_val_dataset . essay . append ( essay ) <EOL> p1_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p1_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p2_d1_val_dataset . id . append ( essay_id ) <EOL> p2_d1_val_dataset . essay . append ( essay ) <EOL> p2_d1_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p2_d1_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> p2_d2_val_dataset . id . append ( essay_id ) <EOL> p2_d2_val_dataset . essay . append ( essay ) <EOL> p2_d2_val_dataset . score . append ( score_dit [ domain2_predictionid ] ) <EOL> p2_d2_val_dataset . prediction_id . append ( domain2_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p3_val_dataset . id . append ( essay_id ) <EOL> p3_val_dataset . essay . append ( essay ) <EOL> p3_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p3_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p4_val_dataset . id . append ( essay_id ) <EOL> p4_val_dataset . essay . append ( essay ) <EOL> p4_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p4_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p5_val_dataset . id . append ( essay_id ) <EOL> p5_val_dataset . essay . append ( essay ) <EOL> p5_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p5_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p6_val_dataset . id . append ( essay_id ) <EOL> p6_val_dataset . essay . append ( essay ) <EOL> p6_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p6_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p7_val_dataset . id . append ( essay_id ) <EOL> p7_val_dataset . essay . append ( essay ) <EOL> p7_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p7_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> elif essay_set == '<STR_LIT>' : <EOL> p8_val_dataset . id . append ( essay_id ) <EOL> p8_val_dataset . essay . append ( essay ) <EOL> p8_val_dataset . score . append ( score_dit [ domain1_predictionid ] ) <EOL> p8_val_dataset . prediction_id . append ( domain1_predictionid ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p1_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p2_d1_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p2_d2_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p3_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p4_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p5_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p6_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p7_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p8_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p1_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p2_d1_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p2_d2_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p3_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p4_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p5_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p6_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p7_val_dataset , f ) <EOL> with open ( "<STR_LIT>" , '<STR_LIT>' ) as f : <EOL> pickle . dump ( p8_val_dataset , f ) <EOL> </s>
<s> import torch <EOL> import torch . nn as nn <EOL> import torch . nn . functional as F <EOL> import models <EOL> from models . densenet import DenseNet <EOL> from models . counting import CountingDecoder as counting_decoder <EOL> from counting_utils import gen_counting_label <EOL> class CAN ( nn . Module ) : <EOL> def __init__ ( self , params = None ) : <EOL> super ( CAN , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . use_label_mask = params [ '<STR_LIT>' ] <EOL> self . encoder = DenseNet ( params = self . params ) <EOL> self . in_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . out_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . counting_decoder1 = counting_decoder ( self . in_channel , self . out_channel , <NUM_LIT> ) <EOL> self . counting_decoder2 = counting_decoder ( self . in_channel , self . out_channel , <NUM_LIT> ) <EOL> self . decoder = getattr ( models , params [ '<STR_LIT>' ] [ '<STR_LIT>' ] ) ( params = self . params ) <EOL> self . cross = nn . CrossEntropyLoss ( reduction = '<STR_LIT>' ) if self . use_label_mask else nn . CrossEntropyLoss ( ) <EOL> self . counting_loss = nn . SmoothL1Loss ( reduction = '<STR_LIT>' ) <EOL> self . ratio = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> def forward ( self , images , images_mask , labels , labels_mask , is_train = True ) : <EOL> cnn_features = self . encoder ( images ) <EOL> counting_mask = images_mask [ : , : , : : self . ratio , : : self . ratio ] <EOL> counting_labels = gen_counting_label ( labels , self . out_channel , True ) <EOL> counting_preds1 , _ = self . counting_decoder1 ( cnn_features , counting_mask ) <EOL> counting_preds2 , _ = self . counting_decoder2 ( cnn_features , counting_mask ) <EOL> counting_preds = ( counting_preds1 + counting_preds2 ) / <NUM_LIT> <EOL> counting_loss = self . counting_loss ( counting_preds1 , counting_labels ) + self . counting_loss ( counting_preds2 , counting_labels ) + self . counting_loss ( counting_preds , counting_labels ) <EOL> word_probs , word_alphas = self . decoder ( cnn_features , labels , counting_preds , images_mask , labels_mask , is_train = is_train ) <EOL> word_loss = self . cross ( word_probs . contiguous ( ) . view ( - <NUM_LIT> , word_probs . shape [ - <NUM_LIT> ] ) , labels . view ( - <NUM_LIT> ) ) <EOL> word_average_loss = ( word_loss * labels_mask . view ( - <NUM_LIT> ) ) . sum ( ) / ( labels_mask . sum ( ) + <NUM_LIT> ) if self . use_label_mask else word_loss <EOL> return word_probs , counting_preds , word_average_loss , counting_loss <EOL> </s>
<s> import torch <EOL> import torch . nn as nn <EOL> import torch . nn . functional as F <EOL> import numpy as np <EOL> import matplotlib . pyplot as plt <EOL> import os <EOL> def gen_counting_label ( labels , channel , tag ) : <EOL> b , t = labels . size ( ) <EOL> device = labels . device <EOL> counting_labels = torch . zeros ( ( b , channel ) ) <EOL> if tag : <EOL> ignore = [ <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ] <EOL> else : <EOL> ignore = [ ] <EOL> for i in range ( b ) : <EOL> for j in range ( t ) : <EOL> k = labels [ i ] [ j ] <EOL> if k in ignore : <EOL> continue <EOL> else : <EOL> counting_labels [ i ] [ k ] += <NUM_LIT> <EOL> return counting_labels . to ( device ) <EOL> </s>
<s> from torch . utils . data import random_split <EOL> class fivefold : <EOL> def __init__ ( self , dataset ) : <EOL> self . essay_folds = [ ] <EOL> self . score_folds = [ ] <EOL> fold_length = len ( dataset ) // <NUM_LIT> <EOL> fold_last_length = len ( dataset ) - ( len ( dataset ) // <NUM_LIT> ) * <NUM_LIT> <EOL> subsets = random_split ( dataset = dataset , lengths = [ fold_length , fold_length , fold_length , fold_length , fold_last_length ] ) <EOL> for subset in subsets : <EOL> essays = [ ] <EOL> scores = [ ] <EOL> for id , essay , score , prediction_id in subset : <EOL> essays . append ( essay ) <EOL> scores . append ( score ) <EOL> self . essay_folds . append ( essays ) <EOL> self . score_folds . append ( scores ) <EOL> if __name__ == '<STR_LIT>' : <EOL> from asap . makedataset import Dataset <EOL> import pickle <EOL> import matplotlib . pyplot as plt <EOL> with open ( f'<STR_LIT>' , '<STR_LIT>' ) as f : <EOL> dataset = pickle . load ( f ) <EOL> folds = fivefold ( dataset ) <EOL> for scores in folds . score_folds : <EOL> plt . plot ( range ( <NUM_LIT> , <NUM_LIT> ) , [ scores . count ( i ) / len ( scores ) for i in range ( <NUM_LIT> , <NUM_LIT> ) ] , color = '<STR_LIT>' ) <EOL> plt . show ( ) <EOL> plt . close ( ) <EOL> valessays = [ ] <EOL> valscores = [ ] <EOL> testessays = [ ] <EOL> testscores = [ ] <EOL> trainessays = [ ] <EOL> trainscores = [ ] <EOL> for val_index in range ( len ( folds . essay_folds ) ) : <EOL> for test_index in range ( len ( folds . essay_folds ) ) : <EOL> if val_index == test_index : <EOL> continue <EOL> foldname = f'<STR_LIT>' <EOL> for i , ( essays , scores ) in enumerate ( zip ( folds . essay_folds , folds . score_folds ) ) : <EOL> if i == val_index : <EOL> valessays = folds . essay_folds [ i ] <EOL> valscores = folds . score_folds [ i ] <EOL> elif i == test_index : <EOL> testessays = folds . essay_folds [ i ] <EOL> testscores = folds . score_folds [ i ] <EOL> else : <EOL> trainessays = trainessays + folds . essay_folds [ i ] <EOL> trainscores = trainscores + folds . score_folds [ i ] <EOL> plt . plot ( range ( <NUM_LIT> , <NUM_LIT> ) , [ trainscores . count ( i ) / len ( trainscores ) for i in range ( <NUM_LIT> , <NUM_LIT> ) ] , color = '<STR_LIT>' ) <EOL> plt . plot ( range ( <NUM_LIT> , <NUM_LIT> ) , [ testscores . count ( i ) / len ( testscores ) for i in range ( <NUM_LIT> , <NUM_LIT> ) ] , color = '<STR_LIT>' ) <EOL> plt . plot ( range ( <NUM_LIT> , <NUM_LIT> ) , [ valscores . count ( i ) / len ( valscores ) for i in range ( <NUM_LIT> , <NUM_LIT> ) ] , color = '<STR_LIT>' ) <EOL> plt . show ( ) <EOL> plt . close ( ) <EOL> pass <EOL> </s>
<s> from django . apps import AppConfig <EOL> class IndexConfig ( AppConfig ) : <EOL> name = '<STR_LIT>' <EOL> </s>
<s> import torch <EOL> from torch import nn <EOL> from transformers import AutoModel <EOL> import torch . nn . functional as F <EOL> def init_weights ( m ) : <EOL> if isinstance ( m , nn . Linear ) : <EOL> torch . nn . init . xavier_uniform ( m . weight ) <EOL> m . bias . data . fill_ ( <NUM_LIT> ) <EOL> class mainplm ( nn . Module ) : <EOL> def __init__ ( self , args ) : <EOL> super ( mainplm , self ) . __init__ ( ) <EOL> self . args = args <EOL> self . plm_batch_size = <NUM_LIT> <EOL> self . plm = AutoModel . from_pretrained ( self . args [ '<STR_LIT>' ] ) <EOL> for param in self . plm . embeddings . parameters ( ) : <EOL> param . requires_grad = False <EOL> for i in range ( <NUM_LIT> ) : <EOL> for param in self . plm . encoder . layer [ i ] . parameters ( ) : <EOL> param . requires_grad = False <EOL> self . mlp = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , <EOL> nn . Linear ( self . plm . config . hidden_size , <NUM_LIT> ) <EOL> ) <EOL> self . mlp . apply ( init_weights ) <EOL> def forward ( self , document_batch : torch . Tensor , device = '<STR_LIT>' ) : <EOL> plm_output = torch . zeros ( size = ( document_batch . shape [ <NUM_LIT> ] , <EOL> min ( document_batch . shape [ <NUM_LIT> ] , self . plm_batch_size ) , <EOL> self . plm . config . hidden_size ) , <EOL> dtype = torch . float , device = device ) <EOL> for doc_id in range ( document_batch . shape [ <NUM_LIT> ] ) : <EOL> all_plm_output = self . plm ( document_batch [ doc_id ] [ : self . plm_batch_size , <NUM_LIT> ] , <EOL> token_type_ids = document_batch [ doc_id ] [ : self . plm_batch_size , <NUM_LIT> ] , <EOL> attention_mask = document_batch [ doc_id ] [ : self . plm_batch_size , <NUM_LIT> ] ) <EOL> plm_output [ doc_id ] [ : self . plm_batch_size ] = all_plm_output . last_hidden_state [ <NUM_LIT> ] [ <NUM_LIT> ] . unsqueeze ( <NUM_LIT> ) <EOL> prediction = self . mlp ( plm_output . view ( plm_output . shape [ <NUM_LIT> ] , - <NUM_LIT> ) ) <EOL> assert prediction . shape [ <NUM_LIT> ] == document_batch . shape [ <NUM_LIT> ] <EOL> return prediction <EOL> class chunkplm ( nn . Module ) : <EOL> def __init__ ( self , args ) : <EOL> super ( chunkplm , self ) . __init__ ( ) <EOL> self . args = args <EOL> self . plm = AutoModel . from_pretrained ( self . args [ '<STR_LIT>' ] ) <EOL> for param in self . plm . embeddings . parameters ( ) : <EOL> param . requires_grad = False <EOL> for i in range ( <NUM_LIT> ) : <EOL> for param in self . plm . encoder . layer [ i ] . parameters ( ) : <EOL> param . requires_grad = False <EOL> self . dropout = nn . Dropout ( p = <NUM_LIT> ) <EOL> self . lstm = nn . LSTM ( self . plm . config . hidden_size , self . plm . config . hidden_size ) <EOL> self . mlp = nn . Sequential ( <EOL> nn . Dropout ( p = <NUM_LIT> ) , <EOL> nn . Linear ( self . plm . config . hidden_size , <NUM_LIT> ) <EOL> ) <EOL> self . w_omega = nn . Parameter ( torch . Tensor ( self . plm . config . hidden_size , self . plm . config . hidden_size ) ) <EOL> self . b_omega = nn . Parameter ( torch . Tensor ( <NUM_LIT> , self . plm . config . hidden_size ) ) <EOL> self . u_omega = nn . Parameter ( torch . Tensor ( self . plm . config . hidden_size , <NUM_LIT> ) ) <EOL> nn . init . uniform_ ( self . w_omega , - <NUM_LIT> , <NUM_LIT> ) <EOL> nn . init . uniform_ ( self . u_omega , - <NUM_LIT> , <NUM_LIT> ) <EOL> nn . init . uniform_ ( self . b_omega , - <NUM_LIT> , <NUM_LIT> ) <EOL> self . mlp . apply ( init_weights ) <EOL> def forward ( self , document_batch : torch . Tensor , device = '<STR_LIT>' , plm_batch_size = <NUM_LIT> ) : <EOL> plm_output = torch . zeros ( size = ( document_batch . shape [ <NUM_LIT> ] , <EOL> min ( document_batch . shape [ <NUM_LIT> ] , <EOL> plm_batch_size ) , <EOL> self . plm . config . hidden_size ) , dtype = torch . float , device = device ) <EOL> for doc_id in range ( document_batch . shape [ <NUM_LIT> ] ) : <EOL> plm_output [ doc_id ] [ : plm_batch_size ] = self . dropout ( <EOL> self . plm ( document_batch [ doc_id ] [ : plm_batch_size , <NUM_LIT> ] , <EOL> token_type_ids = document_batch [ doc_id ] [ <EOL> : plm_batch_size , <NUM_LIT> ] , <EOL> attention_mask = document_batch [ doc_id ] [ <EOL> : plm_batch_size , <NUM_LIT> ] ) [ <NUM_LIT> ] ) <EOL> output , ( _ , _ ) = self . lstm ( plm_output . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) ) <EOL> output = output . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) <EOL> attention_w = torch . tanh ( torch . matmul ( output , self . w_omega ) + self . b_omega ) <EOL> attention_u = torch . matmul ( attention_w , self . u_omega ) <EOL> attention_score = F . softmax ( attention_u , dim = <NUM_LIT> ) <EOL> attention_hidden = output * attention_score <EOL> attention_hidden = torch . sum ( attention_hidden , dim = <NUM_LIT> ) <EOL> prediction = self . mlp ( attention_hidden ) <EOL> assert prediction . shape [ <NUM_LIT> ] == document_batch . shape [ <NUM_LIT> ] <EOL> return prediction <EOL> </s>
<s> from ultralytics import YOLO <EOL> import os <EOL> import cv2 <EOL> import random <EOL> CLS_ID_NAME_MAP = { <EOL> <NUM_LIT> : '<STR_LIT>' , <EOL> <NUM_LIT> : '<STR_LIT>' , <EOL> <NUM_LIT> : '<STR_LIT>' , <EOL> <NUM_LIT> : '<STR_LIT>' <EOL> } <EOL> model = YOLO ( model = '<STR_LIT>' ) <EOL> folder = '<STR_LIT>' <EOL> file_names = os . listdir ( folder ) <EOL> random . shuffle ( file_names ) <EOL> imgs = [ ] <EOL> for file_name in file_names [ : <NUM_LIT> ] : <EOL> img_path = os . path . join ( folder , file_name ) <EOL> img = cv2 . imread ( img_path ) <EOL> imgs += [ img ] <EOL> results = model . predict ( source = imgs , save = True , imgsz = <NUM_LIT> ) <EOL> </s>
<s> import torch <EOL> import cv2 <EOL> import torchvision <EOL> from torchvision import transforms <EOL> import os <EOL> from scoreblocks . CharacterRecognition . model import SpinalVGG <EOL> from scoreblocks . CharacterRecognition . model_new import * <EOL> class Model : <EOL> def __init__ ( self , path , name ) : <EOL> self . model_name = name <EOL> if self . model_name == '<STR_LIT>' : <EOL> self . model = WaveMix ( <EOL> num_classes = <NUM_LIT> , <EOL> depth = <NUM_LIT> , <EOL> mult = <NUM_LIT> , <EOL> ff_channel = <NUM_LIT> , <EOL> final_dim = <NUM_LIT> , <EOL> dropout = <NUM_LIT> <EOL> ) <EOL> elif self . model_name == '<STR_LIT>' : <EOL> self . model = SpinalVGG ( <NUM_LIT> ) <EOL> self . model . load_state_dict ( torch . load ( path ) ) <EOL> self . transforms = transforms . Compose ( [ torchvision . transforms . ToTensor ( ) , <EOL> torchvision . transforms . Normalize ( <EOL> ( <NUM_LIT> , ) , ( <NUM_LIT> , ) ) ] ) <EOL> def img_preprocessing ( self , img_path ) : <EOL> img = cv2 . imread ( img_path ) <EOL> gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) <EOL> gray = cv2 . resize ( gray , ( <NUM_LIT> , <NUM_LIT> ) ) <EOL> gray = cv2 . transpose ( gray ) <EOL> _ , binary = cv2 . threshold ( gray , <NUM_LIT> , <NUM_LIT> , cv2 . THRESH_BINARY_INV ) <EOL> binary = cv2 . dilate ( binary , ( <NUM_LIT> , <NUM_LIT> ) ) <EOL> return binary <EOL> def output ( self , img_path ) : <EOL> binary = self . img_preprocessing ( img_path ) <EOL> inp = self . transforms ( binary ) <EOL> inp = torch . unsqueeze ( inp , <NUM_LIT> ) <EOL> inp = inp . cuda ( ) <EOL> self . model . eval ( ) <EOL> with torch . no_grad ( ) : <EOL> out = self . model ( inp ) <EOL> return out <EOL> if __name__ == '<STR_LIT>' : <EOL> selection = { '<STR_LIT>' : '<STR_LIT>' , <EOL> '<STR_LIT>' : '<STR_LIT>' } <EOL> m = Model ( selection [ '<STR_LIT>' ] , '<STR_LIT>' ) <EOL> img_path = input ( "<STR_LIT>" ) <EOL> acc = <NUM_LIT> <EOL> sum_ = <NUM_LIT> <EOL> lst = os . listdir ( img_path ) <EOL> for i in lst : <EOL> if i . endswith ( '<STR_LIT>' ) or i . endswith ( '<STR_LIT>' ) : <EOL> sum_ += <NUM_LIT> <EOL> path = os . path . join ( img_path , i ) <EOL> out = m . output ( path ) <EOL> res = chr ( out . argmax ( <NUM_LIT> ) + <NUM_LIT> ) <EOL> print ( res ) <EOL> </s>
<s> import os <EOL> import cv2 <EOL> import argparse <EOL> import torch <EOL> import cv2 <EOL> import json <EOL> import pickle as pkl <EOL> from tqdm import tqdm <EOL> import time <EOL> import matplotlib . pyplot <EOL> from PIL import Image <EOL> import numpy as np <EOL> from utils import load_config , load_checkpoint , compute_edit_distance <EOL> from models . infer_model import Inference <EOL> from dataset import Words <EOL> parser = argparse . ArgumentParser ( description = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = '<STR_LIT>' , type = str , help = '<STR_LIT>' ) <EOL> parser . add_argument ( '<STR_LIT>' , default = False ) <EOL> device = torch . device ( '<STR_LIT>' if torch . cuda . is_available ( ) else '<STR_LIT>' ) <EOL> args = parser . parse_args ( ) <EOL> os . environ [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> config_file = '<STR_LIT>' <EOL> params = load_config ( config_file ) <EOL> params [ '<STR_LIT>' ] = device <EOL> words = Words ( args . word_path ) <EOL> params [ '<STR_LIT>' ] = len ( words ) <EOL> model = Inference ( params , draw_map = False ) <EOL> model = model . to ( device ) <EOL> load_checkpoint ( model , None , '<STR_LIT>' ) <EOL> model . eval ( ) <EOL> line_right = <NUM_LIT> <EOL> e1 , e2 , e3 = <NUM_LIT> , <NUM_LIT> , <NUM_LIT> <EOL> bad_case = { } <EOL> model_time = <NUM_LIT> <EOL> mae_sum , mse_sum = <NUM_LIT> , <NUM_LIT> <EOL> with open ( args . label_path ) as f : <EOL> lines = f . readlines ( ) <EOL> with torch . no_grad ( ) : <EOL> for line in tqdm ( lines ) : <EOL> name , * labels = line . split ( ) <EOL> name = name . split ( '<STR_LIT>' ) [ <NUM_LIT> ] if name . endswith ( '<STR_LIT>' ) else name <EOL> input_labels = labels <EOL> labels = '<STR_LIT>' . join ( labels ) <EOL> img_index = name + '<STR_LIT>' <EOL> image = cv2 . imread ( os . path . join ( args . image_path , img_index ) ) <EOL> image = cv2 . cvtColor ( image , cv2 . COLOR_BGR2GRAY ) <EOL> image = np . asarray ( image ) <EOL> print ( np . shape ( image ) ) <EOL> image = torch . Tensor ( <NUM_LIT> - image ) / <NUM_LIT> <EOL> image = image . unsqueeze ( <NUM_LIT> ) . unsqueeze ( <NUM_LIT> ) <EOL> image = image . to ( device ) <EOL> input_labels = words . encode ( input_labels ) <EOL> input_labels = torch . LongTensor ( input_labels ) <EOL> input_labels = input_labels . unsqueeze ( <NUM_LIT> ) . to ( device ) <EOL> probs , _ , mae , mse = model ( image , input_labels , os . path . join ( params [ '<STR_LIT>' ] [ '<STR_LIT>' ] , name ) ) <EOL> prediction = words . decode ( probs ) <EOL> print ( prediction ) <EOL> mae_sum += mae <EOL> mse_sum += mse <EOL> </s>
<s> import os <EOL> import cv2 <EOL> import yaml <EOL> import math <EOL> import torch <EOL> import numpy as np <EOL> from difflib import SequenceMatcher <EOL> def load_config ( yaml_path ) : <EOL> try : <EOL> with open ( yaml_path , '<STR_LIT>' ) as f : <EOL> params = yaml . load ( f , Loader = yaml . FullLoader ) <EOL> except : <EOL> print ( '<STR_LIT>' ) <EOL> with open ( yaml_path , '<STR_LIT>' , encoding = '<STR_LIT>' ) as f : <EOL> params = yaml . load ( f , Loader = yaml . FullLoader ) <EOL> if not params [ '<STR_LIT>' ] : <EOL> print ( '<STR_LIT>' ) <EOL> exit ( - <NUM_LIT> ) <EOL> if not params [ '<STR_LIT>' ] : <EOL> print ( '<STR_LIT>' ) <EOL> exit ( - <NUM_LIT> ) <EOL> if not params [ '<STR_LIT>' ] : <EOL> print ( '<STR_LIT>' ) <EOL> exit ( - <NUM_LIT> ) <EOL> if not params [ '<STR_LIT>' ] : <EOL> print ( '<STR_LIT>' ) <EOL> exit ( - <NUM_LIT> ) <EOL> if '<STR_LIT>' not in params : <EOL> params [ '<STR_LIT>' ] = <NUM_LIT> <EOL> if '<STR_LIT>' not in params : <EOL> params [ '<STR_LIT>' ] = <NUM_LIT> <EOL> if '<STR_LIT>' not in params : <EOL> params [ '<STR_LIT>' ] = <NUM_LIT> <EOL> if '<STR_LIT>' not in params [ '<STR_LIT>' ] : <EOL> params [ '<STR_LIT>' ] [ '<STR_LIT>' ] = <NUM_LIT> <EOL> return params <EOL> def update_lr ( optimizer , current_epoch , current_step , steps , epochs , initial_lr ) : <EOL> if current_epoch < <NUM_LIT> : <EOL> new_lr = initial_lr / steps * ( current_step + <NUM_LIT> ) <EOL> elif <NUM_LIT> <= current_epoch <= <NUM_LIT> : <EOL> new_lr = <NUM_LIT> * ( <NUM_LIT> + math . cos ( ( current_step + <NUM_LIT> + ( current_epoch - <NUM_LIT> ) * steps ) * math . pi / ( <NUM_LIT> * steps ) ) ) * initial_lr <EOL> else : <EOL> new_lr = <NUM_LIT> * ( <NUM_LIT> + math . cos ( ( current_step + <NUM_LIT> + ( current_epoch - <NUM_LIT> ) * steps ) * math . pi / ( epochs * steps ) ) ) * initial_lr <EOL> for param_group in optimizer . param_groups : <EOL> param_group [ '<STR_LIT>' ] = new_lr <EOL> def save_checkpoint ( model , optimizer , word_score , ExpRate_score , epoch , optimizer_save = False , path = '<STR_LIT>' , multi_gpu = False , local_rank = <NUM_LIT> ) : <EOL> filename = f'<STR_LIT>' <EOL> if optimizer_save : <EOL> state = { <EOL> '<STR_LIT>' : model . state_dict ( ) , <EOL> '<STR_LIT>' : optimizer . state_dict ( ) , <EOL> } <EOL> else : <EOL> state = { <EOL> '<STR_LIT>' : model . state_dict ( ) <EOL> } <EOL> torch . save ( state , filename ) <EOL> print ( f'<STR_LIT>' ) <EOL> return filename <EOL> def load_checkpoint ( model , optimizer , path ) : <EOL> state = torch . load ( path , map_location = '<STR_LIT>' ) <EOL> if optimizer is not None and '<STR_LIT>' in state : <EOL> optimizer . load_state_dict ( state [ '<STR_LIT>' ] ) <EOL> else : <EOL> print ( f'<STR_LIT>' ) <EOL> model . load_state_dict ( state [ '<STR_LIT>' ] ) <EOL> class Meter : <EOL> def __init__ ( self , alpha = <NUM_LIT> ) : <EOL> self . nums = [ ] <EOL> self . exp_mean = <NUM_LIT> <EOL> self . alpha = alpha <EOL> @ property <EOL> def mean ( self ) : <EOL> return np . mean ( self . nums ) <EOL> def add ( self , num ) : <EOL> if len ( self . nums ) == <NUM_LIT> : <EOL> self . exp_mean = num <EOL> self . nums . append ( num ) <EOL> self . exp_mean = self . alpha * self . exp_mean + ( <NUM_LIT> - self . alpha ) * num <EOL> def cal_score ( word_probs , word_label , mask ) : <EOL> line_right = <NUM_LIT> <EOL> if word_probs is not None : <EOL> _ , word_pred = word_probs . max ( <NUM_LIT> ) <EOL> word_scores = [ SequenceMatcher ( None , s1 [ : int ( np . sum ( s3 ) ) ] , s2 [ : int ( np . sum ( s3 ) ) ] , autojunk = False ) . ratio ( ) * ( len ( s1 [ : int ( np . sum ( s3 ) ) ] ) + len ( s2 [ : int ( np . sum ( s3 ) ) ] ) ) / len ( s1 [ : int ( np . sum ( s3 ) ) ] ) / <NUM_LIT> <EOL> for s1 , s2 , s3 in zip ( word_label . cpu ( ) . detach ( ) . numpy ( ) , word_pred . cpu ( ) . detach ( ) . numpy ( ) , mask . cpu ( ) . detach ( ) . numpy ( ) ) ] <EOL> batch_size = len ( word_scores ) <EOL> for i in range ( batch_size ) : <EOL> if word_scores [ i ] == <NUM_LIT> : <EOL> line_right += <NUM_LIT> <EOL> ExpRate = line_right / batch_size <EOL> word_scores = np . mean ( word_scores ) <EOL> return word_scores , ExpRate <EOL> def draw_attention_map ( image , attention ) : <EOL> h , w = image . shape <EOL> attention = cv2 . resize ( attention , ( w , h ) ) <EOL> attention_heatmap = ( ( attention - np . min ( attention ) ) / ( np . max ( attention ) - np . min ( attention ) ) * <NUM_LIT> ) . astype ( np . uint8 ) <EOL> attention_heatmap = cv2 . applyColorMap ( attention_heatmap , cv2 . COLORMAP_JET ) <EOL> image_new = np . stack ( ( image , image , image ) , axis = - <NUM_LIT> ) . astype ( np . uint8 ) <EOL> attention_map = cv2 . addWeighted ( attention_heatmap , <NUM_LIT> , image_new , <NUM_LIT> , <NUM_LIT> ) <EOL> return attention_map <EOL> def draw_counting_map ( image , counting_attention ) : <EOL> h , w = image . shape <EOL> counting_attention = torch . clamp ( counting_attention , <NUM_LIT> , <NUM_LIT> ) . numpy ( ) <EOL> counting_attention = cv2 . resize ( counting_attention , ( w , h ) ) <EOL> counting_attention_heatmap = ( counting_attention * <NUM_LIT> ) . astype ( np . uint8 ) <EOL> counting_attention_heatmap = cv2 . applyColorMap ( counting_attention_heatmap , cv2 . COLORMAP_JET ) <EOL> image_new = np . stack ( ( image , image , image ) , axis = - <NUM_LIT> ) . astype ( np . uint8 ) <EOL> counting_map = cv2 . addWeighted ( counting_attention_heatmap , <NUM_LIT> , image_new , <NUM_LIT> , <NUM_LIT> ) <EOL> return counting_map <EOL> def cal_distance ( word1 , word2 ) : <EOL> m = len ( word1 ) <EOL> n = len ( word2 ) <EOL> if m * n == <NUM_LIT> : <EOL> return m + n <EOL> dp = [ [ <NUM_LIT> ] * ( n + <NUM_LIT> ) for _ in range ( m + <NUM_LIT> ) ] <EOL> for i in range ( m + <NUM_LIT> ) : <EOL> dp [ i ] [ <NUM_LIT> ] = i <EOL> for j in range ( n + <NUM_LIT> ) : <EOL> dp [ <NUM_LIT> ] [ j ] = j <EOL> for i in range ( <NUM_LIT> , m + <NUM_LIT> ) : <EOL> for j in range ( <NUM_LIT> , n + <NUM_LIT> ) : <EOL> a = dp [ i - <NUM_LIT> ] [ j ] + <NUM_LIT> <EOL> b = dp [ i ] [ j - <NUM_LIT> ] + <NUM_LIT> <EOL> c = dp [ i - <NUM_LIT> ] [ j - <NUM_LIT> ] <EOL> if word1 [ i - <NUM_LIT> ] != word2 [ j - <NUM_LIT> ] : <EOL> c += <NUM_LIT> <EOL> dp [ i ] [ j ] = min ( a , b , c ) <EOL> return dp [ m ] [ n ] <EOL> def compute_edit_distance ( prediction , label ) : <EOL> prediction = prediction . strip ( ) . split ( '<STR_LIT>' ) <EOL> label = label . strip ( ) . split ( '<STR_LIT>' ) <EOL> distance = cal_distance ( prediction , label ) <EOL> return distance <EOL> </s>
<s> import torch <EOL> from tqdm import tqdm <EOL> from utils import update_lr , Meter , cal_score <EOL> def train ( params , model , optimizer , epoch , train_loader , writer = None ) : <EOL> model . train ( ) <EOL> device = params [ '<STR_LIT>' ] <EOL> loss_meter = Meter ( ) <EOL> word_right , exp_right , length , cal_num = <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> <EOL> with tqdm ( train_loader , total = len ( train_loader ) // params [ '<STR_LIT>' ] ) as pbar : <EOL> for batch_idx , ( images , image_masks , labels , label_masks ) in enumerate ( pbar ) : <EOL> images , image_masks , labels , label_masks = images . to ( device ) , image_masks . to ( <EOL> device ) , labels . to ( device ) , label_masks . to ( device ) <EOL> batch , time = labels . shape [ : <NUM_LIT> ] <EOL> if not '<STR_LIT>' in params or params [ '<STR_LIT>' ] == '<STR_LIT>' : <EOL> update_lr ( optimizer , epoch , batch_idx , len ( train_loader ) , params [ '<STR_LIT>' ] , params [ '<STR_LIT>' ] ) <EOL> optimizer . zero_grad ( ) <EOL> probs , counting_preds , word_loss , counting_loss = model ( images , image_masks , labels , label_masks ) <EOL> loss = word_loss + counting_loss <EOL> loss . backward ( ) <EOL> if params [ '<STR_LIT>' ] : <EOL> torch . nn . utils . clip_grad_norm_ ( model . parameters ( ) , params [ '<STR_LIT>' ] ) <EOL> optimizer . step ( ) <EOL> loss_meter . add ( loss . item ( ) ) <EOL> wordRate , ExpRate = cal_score ( probs , labels , label_masks ) <EOL> word_right = word_right + wordRate * time <EOL> exp_right = exp_right + ExpRate * batch <EOL> length = length + time <EOL> cal_num = cal_num + batch <EOL> if writer : <EOL> current_step = epoch * len ( train_loader ) // params [ '<STR_LIT>' ] + batch_idx + <NUM_LIT> <EOL> writer . add_scalar ( '<STR_LIT>' , word_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , counting_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , wordRate , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , ExpRate , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , optimizer . param_groups [ <NUM_LIT> ] [ '<STR_LIT>' ] , current_step ) <EOL> pbar . set_description ( f'<STR_LIT>' <EOL> f'<STR_LIT>' ) <EOL> if batch_idx >= len ( train_loader ) // params [ '<STR_LIT>' ] : <EOL> break <EOL> if writer : <EOL> writer . add_scalar ( '<STR_LIT>' , loss_meter . mean , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , word_right / length , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , exp_right / cal_num , epoch + <NUM_LIT> ) <EOL> return loss_meter . mean , word_right / length , exp_right / cal_num <EOL> def eval ( params , model , epoch , eval_loader , writer = None ) : <EOL> model . eval ( ) <EOL> device = params [ '<STR_LIT>' ] <EOL> loss_meter = Meter ( ) <EOL> word_right , exp_right , length , cal_num = <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> <EOL> with tqdm ( eval_loader , total = len ( eval_loader ) // params [ '<STR_LIT>' ] ) as pbar , torch . no_grad ( ) : <EOL> for batch_idx , ( images , image_masks , labels , label_masks ) in enumerate ( pbar ) : <EOL> images , image_masks , labels , label_masks = images . to ( device ) , image_masks . to ( <EOL> device ) , labels . to ( device ) , label_masks . to ( device ) <EOL> batch , time = labels . shape [ : <NUM_LIT> ] <EOL> probs , counting_preds , word_loss , counting_loss = model ( images , image_masks , labels , label_masks , is_train = False ) <EOL> loss = word_loss + counting_loss <EOL> loss_meter . add ( loss . item ( ) ) <EOL> wordRate , ExpRate = cal_score ( probs , labels , label_masks ) <EOL> word_right = word_right + wordRate * time <EOL> exp_right = exp_right + ExpRate * batch <EOL> length = length + time <EOL> cal_num = cal_num + batch <EOL> if writer : <EOL> current_step = epoch * len ( eval_loader ) // params [ '<STR_LIT>' ] + batch_idx + <NUM_LIT> <EOL> writer . add_scalar ( '<STR_LIT>' , word_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , counting_loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , loss . item ( ) , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , wordRate , current_step ) <EOL> writer . add_scalar ( '<STR_LIT>' , ExpRate , current_step ) <EOL> pbar . set_description ( f'<STR_LIT>' <EOL> f'<STR_LIT>' ) <EOL> if batch_idx >= len ( eval_loader ) // params [ '<STR_LIT>' ] : <EOL> break <EOL> if writer : <EOL> writer . add_scalar ( '<STR_LIT>' , loss_meter . mean , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , word_right / length , epoch + <NUM_LIT> ) <EOL> writer . add_scalar ( '<STR_LIT>' , exp_right / len ( eval_loader . dataset ) , epoch + <NUM_LIT> ) <EOL> return loss_meter . mean , word_right / length , exp_right / cal_num <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> import torch <EOL> import numpy as np <EOL> from CAN . utils import load_config , load_checkpoint , compute_edit_distance <EOL> from CAN . dataset import Words <EOL> import sys <EOL> from CAN . models . infer_model import Inference <EOL> import cv2 <EOL> class model : <EOL> def __init__ ( self ) : <EOL> self . params = load_config ( '<STR_LIT>' ) <EOL> self . words = Words ( '<STR_LIT>' ) <EOL> self . params [ '<STR_LIT>' ] = len ( self . words ) <EOL> self . params [ '<STR_LIT>' ] = '<STR_LIT>' <EOL> if '<STR_LIT>' not in self . params : <EOL> self . params [ '<STR_LIT>' ] = False <EOL> self . model = Inference ( self . params , draw_map = False ) <EOL> load_checkpoint ( self . model , None , '<STR_LIT>' ) <EOL> def output ( self , img_path ) : <EOL> img = cv2 . imread ( img_path ) <EOL> image = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) <EOL> image = np . asarray ( image ) <EOL> image = torch . Tensor ( <NUM_LIT> - image ) / <NUM_LIT> <EOL> image = image . unsqueeze ( <NUM_LIT> ) . unsqueeze ( <NUM_LIT> ) <EOL> pre , _ , mae , mse = self . model ( image , None , None ) <EOL> pre = self . words . decode ( pre ) <EOL> print ( pre ) <EOL> return pre <EOL> def output_img ( self , img ) : <EOL> image = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) <EOL> image = np . asarray ( image ) <EOL> image = torch . Tensor ( <NUM_LIT> - image ) / <NUM_LIT> <EOL> image = image . unsqueeze ( <NUM_LIT> ) . unsqueeze ( <NUM_LIT> ) <EOL> pre , _ , mae , mse = self . model ( image , None , None ) <EOL> pre = self . words . decode ( pre ) <EOL> return pre <EOL> if __name__ == '<STR_LIT>' : <EOL> model = model ( ) <EOL> image_path = '<STR_LIT>' <EOL> model . output ( img_path = image_path ) <EOL> </s>
<s> import functools <EOL> import sys <EOL> import cv2 <EOL> import os <EOL> import numpy as np <EOL> import math <EOL> class Model : <EOL> def __init__ ( self , debug = False ) : <EOL> self . rects = [ ] <EOL> self . crop_img = [ ] <EOL> self . img = None <EOL> self . debug = debug <EOL> self . name = '<STR_LIT>' <EOL> def process ( self , img_path , name ) : <EOL> binary = self . __preProcessing ( img_path , name ) <EOL> horizon = self . __detectLines ( binary ) <EOL> self . __contourExtraction ( horizon ) <EOL> result = self . __segmentation ( ) <EOL> self . rects . clear ( ) <EOL> self . img = None <EOL> self . name = '<STR_LIT>' <EOL> return result <EOL> def __preProcessing ( self , img_path , name ) : <EOL> img = cv2 . imread ( img_path ) <EOL> self . img = img <EOL> self . name = name <EOL> gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) <EOL> blur = cv2 . GaussianBlur ( gray , ( <NUM_LIT> , <NUM_LIT> ) , <NUM_LIT> ) <EOL> _ , binary = cv2 . threshold ( blur , <NUM_LIT> , <NUM_LIT> , cv2 . THRESH_BINARY + cv2 . THRESH_OTSU ) <EOL> thresh , binary = cv2 . threshold ( blur , int ( _ * <NUM_LIT> ) , <NUM_LIT> , cv2 . THRESH_BINARY ) <EOL> return binary <EOL> def process_img ( self , img ) : <EOL> self . __preProcessing_img ( img ) <EOL> binary = self . __preProcessing_img ( img ) <EOL> horizon = self . __detectLines ( binary ) <EOL> self . __contourExtraction ( horizon ) <EOL> result = self . __segmentation ( ) <EOL> self . rects . clear ( ) <EOL> self . img = None <EOL> return result <EOL> def __preProcessing_img ( self , img ) : <EOL> self . img = img <EOL> gray = cv2 . cvtColor ( img , cv2 . COLOR_BGR2GRAY ) <EOL> blur = cv2 . GaussianBlur ( gray , ( <NUM_LIT> , <NUM_LIT> ) , <NUM_LIT> ) <EOL> _ , binary = cv2 . threshold ( blur , <NUM_LIT> , <NUM_LIT> , cv2 . THRESH_BINARY + cv2 . THRESH_OTSU ) <EOL> thresh , binary = cv2 . threshold ( blur , int ( _ * <NUM_LIT> ) , <NUM_LIT> , cv2 . THRESH_BINARY ) <EOL> return binary <EOL> @ staticmethod <EOL> def __detectLines ( img ) : <EOL> horizon_k = int ( math . sqrt ( img . shape [ <NUM_LIT> ] ) * <NUM_LIT> ) <EOL> kernel = cv2 . getStructuringElement ( cv2 . MORPH_RECT , ( horizon_k , <NUM_LIT> ) ) <EOL> horizon = ~ cv2 . dilate ( img , kernel , iterations = <NUM_LIT> ) <EOL> kernel = cv2 . getStructuringElement ( cv2 . MORPH_RECT , ( int ( horizon_k / <NUM_LIT> ) , <NUM_LIT> ) ) <EOL> horizon = cv2 . dilate ( horizon , kernel , iterations = <NUM_LIT> ) <EOL> return horizon <EOL> def __contourExtraction ( self , img , debug = False ) : <EOL> cnts = cv2 . findContours ( img , cv2 . RETR_EXTERNAL , cv2 . CHAIN_APPROX_SIMPLE ) <EOL> border_y , border_x = img . shape <EOL> for cnt in cnts [ <NUM_LIT> ] : <EOL> x , y , w , h = cv2 . boundingRect ( cnt ) <EOL> if y < <NUM_LIT> or y > border_y - <NUM_LIT> : <EOL> continue <EOL> if self . debug and debug : <EOL> cv2 . rectangle ( self . img , ( x , y ) , ( w + x , h + y ) , ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) , <NUM_LIT> ) <EOL> self . rects . append ( [ x , y , w , h ] ) <EOL> self . rects = sorted ( self . rects , key = functools . cmp_to_key ( self . __cmp_rect_r ) ) <EOL> pre = None <EOL> idx_lst = [ ] <EOL> for idx , cnt in enumerate ( self . rects ) : <EOL> x , y , w , h = cnt <EOL> if w < <NUM_LIT> : <EOL> continue <EOL> if pre is None : <EOL> pre = [ x , y , w ] <EOL> elif <NUM_LIT> < abs ( pre [ <NUM_LIT> ] - ( y + h / <NUM_LIT> ) ) < <NUM_LIT> : <EOL> continue <EOL> pre [ <NUM_LIT> ] = y + h / <NUM_LIT> <EOL> pre [ <NUM_LIT> ] = x <EOL> pre [ <NUM_LIT> ] = w <EOL> idx_lst . append ( idx ) <EOL> self . rects = [ self . rects [ x ] for x in idx_lst ] <EOL> self . rects = sorted ( self . rects , key = functools . cmp_to_key ( self . __cmp_rect ) ) <EOL> pre_y , pre_h = - <NUM_LIT> , - <NUM_LIT> <EOL> for idx , cnt in enumerate ( self . rects ) : <EOL> x , y , w , h = cnt <EOL> if pre_h == - <NUM_LIT> : <EOL> pre_y = y <EOL> h = y - <NUM_LIT> <EOL> y = <NUM_LIT> <EOL> pre_h = h <EOL> else : <EOL> if abs ( pre_y - y ) < <NUM_LIT> : <EOL> h = pre_h <EOL> y = max ( y - h , <NUM_LIT> ) <EOL> else : <EOL> pre_h = abs ( y - pre_y ) - <NUM_LIT> <EOL> pre_y = y <EOL> h = pre_h <EOL> y = pre_y - h <EOL> self . rects [ idx ] = [ x , y , w , h + <NUM_LIT> ] <EOL> def __segmentation ( self ) : <EOL> if self . debug : <EOL> if not os . path . exists ( '<STR_LIT>' ) : <EOL> os . mkdir ( '<STR_LIT>' ) <EOL> for idx , rect in enumerate ( self . rects ) : <EOL> x , y , w , h = rect <EOL> cv2 . rectangle ( self . img , ( x , y ) , ( w + x , h + y ) , ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) , <NUM_LIT> ) <EOL> cv2 . putText ( self . img , str ( idx + <NUM_LIT> ) , ( x , y + <NUM_LIT> ) , cv2 . FONT_HERSHEY_SIMPLEX , <NUM_LIT> , ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) , <NUM_LIT> ) <EOL> cv2 . imwrite ( '<STR_LIT>' . format ( self . name ) , self . img ) <EOL> else : <EOL> for idx , rect in enumerate ( self . rects ) : <EOL> x , y , w , h = rect <EOL> crop_img = self . img [ y : y + h , x : x + w ] <EOL> crop_img = crop_img . copy ( ) <EOL> self . crop_img . append ( crop_img ) <EOL> return self . crop_img <EOL> @ staticmethod <EOL> def __cmp_rect ( a , b ) : <EOL> if ( abs ( a [ <NUM_LIT> ] - b [ <NUM_LIT> ] ) < <NUM_LIT> and a [ <NUM_LIT> ] > b [ <NUM_LIT> ] ) or a [ <NUM_LIT> ] > b [ <NUM_LIT> ] : <EOL> return <NUM_LIT> <EOL> elif abs ( a [ <NUM_LIT> ] - b [ <NUM_LIT> ] ) < <NUM_LIT> and abs ( a [ <NUM_LIT> ] - b [ <NUM_LIT> ] ) < <NUM_LIT> : <EOL> return <NUM_LIT> <EOL> else : <EOL> return - <NUM_LIT> <EOL> @ staticmethod <EOL> def __cmp_rect_r ( a , b ) : <EOL> if ( abs ( a [ <NUM_LIT> ] - b [ <NUM_LIT> ] ) < <NUM_LIT> and a [ <NUM_LIT> ] < b [ <NUM_LIT> ] ) or a [ <NUM_LIT> ] > b [ <NUM_LIT> ] : <EOL> return - <NUM_LIT> <EOL> elif abs ( a [ <NUM_LIT> ] - b [ <NUM_LIT> ] ) < <NUM_LIT> and abs ( a [ <NUM_LIT> ] - b [ <NUM_LIT> ] ) < <NUM_LIT> : <EOL> return <NUM_LIT> <EOL> else : <EOL> return <NUM_LIT> <EOL> if __name__ == '<STR_LIT>' : <EOL> path = input ( '<STR_LIT>' ) <EOL> debug = input ( '<STR_LIT>' ) <EOL> if debug == '<STR_LIT>' : <EOL> debug = True <EOL> elif debug == '<STR_LIT>' : <EOL> debug = False <EOL> else : <EOL> print ( '<STR_LIT>' ) <EOL> sys . exit ( ) <EOL> folder = os . listdir ( path ) <EOL> count = <NUM_LIT> <EOL> model = Model ( debug = debug ) <EOL> for i in folder : <EOL> pic_path = os . path . join ( path , i ) <EOL> name_ = i [ : - <NUM_LIT> ] <EOL> res = model . process ( pic_path , name_ ) <EOL> </s>
<s> from torch import nn <EOL> import torch <EOL> class multi_loss ( nn . Module ) : <EOL> def __init__ ( self , args ) : <EOL> super ( ) . __init__ ( ) <EOL> self . args = args <EOL> self . weight = [ args [ '<STR_LIT>' ] , args [ '<STR_LIT>' ] , args [ '<STR_LIT>' ] ] <EOL> self . MSE = nn . MSELoss ( ) . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> self . CosineEmbeddingLoss = nn . CosineEmbeddingLoss ( ) . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> self . MarginRankingLoss = nn . MarginRankingLoss ( ) . to ( device = self . args [ '<STR_LIT>' ] ) <EOL> def forward ( self , y_trues , y_preds ) : <EOL> m , n = y_trues . size ( ) <EOL> batchsize = y_preds . shape [ <NUM_LIT> ] <EOL> mseloss = self . MSE ( y_trues , y_preds ) <EOL> simloss = torch . max ( torch . tensor ( <NUM_LIT> , device = self . args [ '<STR_LIT>' ] ) , self . CosineEmbeddingLoss ( y_trues . resize ( n , m ) , y_preds . resize ( n , m ) , torch . ones ( batchsize , dtype = torch . int , device = self . args [ '<STR_LIT>' ] ) ) ) <EOL> rankloss = torch . tensor ( <NUM_LIT> , device = self . args [ '<STR_LIT>' ] ) <EOL> for i in range ( batchsize ) : <EOL> for j in range ( i + <NUM_LIT> , batchsize ) : <EOL> input1_pred = y_preds [ i ] <EOL> input2_pred = y_preds [ j ] <EOL> input1_true = y_trues [ i ] <EOL> input2_true = y_trues [ j ] <EOL> target = <NUM_LIT> <EOL> if input1_true > input2_true : <EOL> target = <NUM_LIT> <EOL> elif input1_true < input2_true : <EOL> target = - <NUM_LIT> <EOL> else : <EOL> if input1_pred > input2_pred : <EOL> target = - <NUM_LIT> <EOL> elif input1_pred < input2_pred : <EOL> target = <NUM_LIT> <EOL> target = torch . tensor ( [ target ] , device = self . args [ '<STR_LIT>' ] ) <EOL> rankloss += self . MarginRankingLoss ( input1_pred , input2_pred , target ) <EOL> print ( f'<STR_LIT>' ) <EOL> return self . weight [ <NUM_LIT> ] * mseloss + self . weight [ <NUM_LIT> ] * simloss + self . weight [ <NUM_LIT> ] * rankloss <EOL> if __name__ == '<STR_LIT>' : <EOL> x1 = torch . tensor ( [ <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ] , device = '<STR_LIT>' ) . resize ( <NUM_LIT> , <NUM_LIT> ) <EOL> x2 = torch . tensor ( [ <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ] , device = '<STR_LIT>' ) . resize ( <NUM_LIT> , <NUM_LIT> ) <EOL> print ( x1 , x2 ) <EOL> loss = multi_loss ( args = { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : <NUM_LIT> , '<STR_LIT>' : <NUM_LIT> } ) <EOL> print ( loss ( x1 , x2 ) ) <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> import os <EOL> import cv2 <EOL> import torch <EOL> import torch . nn as nn <EOL> import math <EOL> from CAN . models . densenet import DenseNet <EOL> from CAN . models . attention import Attention <EOL> from CAN . models . decoder import PositionEmbeddingSine <EOL> from CAN . models . counting import CountingDecoder as counting_decoder <EOL> from CAN . counting_utils import gen_counting_label <EOL> from CAN . utils import draw_attention_map , draw_counting_map <EOL> class Inference ( nn . Module ) : <EOL> def __init__ ( self , params = None , draw_map = False ) : <EOL> super ( Inference , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . draw_map = draw_map <EOL> self . use_label_mask = params [ '<STR_LIT>' ] <EOL> self . encoder = DenseNet ( params = self . params ) <EOL> self . in_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . out_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . counting_decoder1 = counting_decoder ( self . in_channel , self . out_channel , <NUM_LIT> ) <EOL> self . counting_decoder2 = counting_decoder ( self . in_channel , self . out_channel , <NUM_LIT> ) <EOL> self . device = params [ '<STR_LIT>' ] <EOL> self . decoder = decoder_dict [ params [ '<STR_LIT>' ] [ '<STR_LIT>' ] ] ( params = self . params ) <EOL> self . ratio = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> with open ( params [ '<STR_LIT>' ] ) as f : <EOL> words = f . readlines ( ) <EOL> print ( f'<STR_LIT>' ) <EOL> self . words_index_dict = { i : words [ i ] . strip ( ) for i in range ( len ( words ) ) } <EOL> self . cal_mae = nn . L1Loss ( reduction = '<STR_LIT>' ) <EOL> self . cal_mse = nn . MSELoss ( reduction = '<STR_LIT>' ) <EOL> def forward ( self , images , labels , name , is_train = False ) : <EOL> cnn_features = self . encoder ( images ) <EOL> batch_size , _ , height , width = cnn_features . shape <EOL> counting_preds1 , counting_maps1 = self . counting_decoder1 ( cnn_features , None ) <EOL> counting_preds2 , counting_maps2 = self . counting_decoder2 ( cnn_features , None ) <EOL> counting_preds = ( counting_preds1 + counting_preds2 ) / <NUM_LIT> <EOL> counting_maps = ( counting_maps1 + counting_maps2 ) / <NUM_LIT> <EOL> if labels == None : <EOL> mae , mse = None , None <EOL> else : <EOL> mae = self . cal_mae ( counting_preds , gen_counting_label ( labels , self . out_channel , True ) ) . item ( ) <EOL> mse = math . sqrt ( self . cal_mse ( counting_preds , gen_counting_label ( labels , self . out_channel , True ) ) . item ( ) ) <EOL> word_probs , word_alphas = self . decoder ( cnn_features , counting_preds , is_train = is_train ) <EOL> if self . draw_map : <EOL> if not os . path . exists ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) ) : <EOL> os . makedirs ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) , exist_ok = True ) <EOL> if not os . path . exists ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) ) : <EOL> os . makedirs ( os . path . join ( self . params [ '<STR_LIT>' ] , name ) , exist_ok = True ) <EOL> for i in range ( images . shape [ <NUM_LIT> ] ) : <EOL> img = images [ i ] [ <NUM_LIT> ] . detach ( ) . cpu ( ) . numpy ( ) * <NUM_LIT> <EOL> for step in range ( len ( word_probs ) ) : <EOL> word_atten = word_alphas [ step ] [ <NUM_LIT> ] . detach ( ) . cpu ( ) . numpy ( ) <EOL> word_heatmap = draw_attention_map ( img , word_atten ) <EOL> cv2 . imwrite ( os . path . join ( self . params [ '<STR_LIT>' ] , name , f'<STR_LIT>' ) , word_heatmap ) <EOL> for idx in range ( self . out_channel ) : <EOL> counting_map = counting_maps [ <NUM_LIT> ] . permute ( <NUM_LIT> , <NUM_LIT> , <NUM_LIT> ) [ : , : , idx ] . detach ( ) . cpu ( ) <EOL> counting_heatmap = draw_counting_map ( img , counting_map ) <EOL> img_name = '<STR_LIT>' + self . words_index_dict [ idx ] + '<STR_LIT>' <EOL> cv2 . imwrite ( os . path . join ( self . params [ '<STR_LIT>' ] , name , img_name ) , counting_heatmap ) <EOL> return word_probs , word_alphas , mae , mse <EOL> class AttDecoder ( nn . Module ) : <EOL> def __init__ ( self , params ) : <EOL> super ( AttDecoder , self ) . __init__ ( ) <EOL> self . params = params <EOL> self . input_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . hidden_size = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . out_channel = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . attention_dim = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . dropout_prob = params [ '<STR_LIT>' ] <EOL> self . device = params [ '<STR_LIT>' ] <EOL> self . word_num = params [ '<STR_LIT>' ] <EOL> self . ratio = params [ '<STR_LIT>' ] [ '<STR_LIT>' ] <EOL> self . init_weight = nn . Linear ( self . out_channel , self . hidden_size ) <EOL> self . embedding = nn . Embedding ( self . word_num , self . input_size ) <EOL> self . word_input_gru = nn . GRUCell ( self . input_size , self . hidden_size ) <EOL> self . encoder_feature_conv = nn . Conv2d ( self . out_channel , self . attention_dim , kernel_size = <NUM_LIT> ) <EOL> self . word_attention = Attention ( params ) <EOL> self . word_state_weight = nn . Linear ( self . hidden_size , self . hidden_size ) <EOL> self . word_embedding_weight = nn . Linear ( self . input_size , self . hidden_size ) <EOL> self . word_context_weight = nn . Linear ( self . out_channel , self . hidden_size ) <EOL> self . counting_context_weight = nn . Linear ( self . word_num , self . hidden_size ) <EOL> self . word_convert = nn . Linear ( self . hidden_size , self . word_num ) <EOL> if params [ '<STR_LIT>' ] : <EOL> self . dropout = nn . Dropout ( params [ '<STR_LIT>' ] ) <EOL> def forward ( self , cnn_features , counting_preds , is_train = False ) : <EOL> batch_size , _ , height , width = cnn_features . shape <EOL> image_mask = torch . ones ( ( batch_size , <NUM_LIT> , height , width ) ) . to ( self . device ) <EOL> cnn_features_trans = self . encoder_feature_conv ( cnn_features ) <EOL> position_embedding = PositionEmbeddingSine ( <NUM_LIT> , normalize = True ) <EOL> pos = position_embedding ( cnn_features_trans , image_mask [ : , <NUM_LIT> , : , : ] ) <EOL> cnn_features_trans = cnn_features_trans + pos <EOL> word_alpha_sum = torch . zeros ( ( batch_size , <NUM_LIT> , height , width ) ) . to ( device = self . device ) <EOL> hidden = self . init_hidden ( cnn_features , image_mask ) <EOL> word_embedding = self . embedding ( torch . ones ( [ batch_size ] ) . long ( ) . to ( device = self . device ) ) <EOL> counting_context_weighted = self . counting_context_weight ( counting_preds ) <EOL> word_probs = [ ] <EOL> word_alphas = [ ] <EOL> i = <NUM_LIT> <EOL> while i < <NUM_LIT> : <EOL> hidden = self . word_input_gru ( word_embedding , hidden ) <EOL> word_context_vec , word_alpha , word_alpha_sum = self . word_attention ( cnn_features , cnn_features_trans , hidden , <EOL> word_alpha_sum , image_mask ) <EOL> current_state = self . word_state_weight ( hidden ) <EOL> word_weighted_embedding = self . word_embedding_weight ( word_embedding ) <EOL> word_context_weighted = self . word_context_weight ( word_context_vec ) <EOL> if self . params [ '<STR_LIT>' ] : <EOL> word_out_state = self . dropout ( current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted ) <EOL> else : <EOL> word_out_state = current_state + word_weighted_embedding + word_context_weighted + counting_context_weighted <EOL> word_prob = self . word_convert ( word_out_state ) <EOL> _ , word = word_prob . max ( <NUM_LIT> ) <EOL> word_embedding = self . embedding ( word ) <EOL> if word . item ( ) == <NUM_LIT> : <EOL> return word_probs , word_alphas <EOL> word_alphas . append ( word_alpha ) <EOL> word_probs . append ( word ) <EOL> i += <NUM_LIT> <EOL> return word_probs , word_alphas <EOL> def init_hidden ( self , features , feature_mask ) : <EOL> average = ( features * feature_mask ) . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) / feature_mask . sum ( - <NUM_LIT> ) . sum ( - <NUM_LIT> ) <EOL> average = self . init_weight ( average ) <EOL> return torch . tanh ( average ) <EOL> decoder_dict = { <EOL> '<STR_LIT>' : AttDecoder <EOL> } <EOL> </s>
<s> from django . db import models <EOL> class User ( models . Model ) : <EOL> username = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> email = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> password = models . CharField ( max_length = <NUM_LIT> ) <EOL> school = models . CharField ( max_length = <NUM_LIT> ) <EOL> class Meta : <EOL> abstract = True <EOL> class Student ( User ) : <EOL> pass <EOL> class Teacher ( User ) : <EOL> pass <EOL> class Paper ( models . Model ) : <EOL> teacher = models . ForeignKey ( to = Teacher , on_delete = models . CASCADE ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> name = models . CharField ( max_length = <NUM_LIT> ) <EOL> class Problem ( models . Model ) : <EOL> paper = models . ForeignKey ( to = Paper , on_delete = models . CASCADE ) <EOL> type = models . CharField ( max_length = <NUM_LIT> ) <EOL> class Answer ( models . Model ) : <EOL> problem = models . ForeignKey ( to = Problem , on_delete = models . CASCADE ) <EOL> answer = models . TextField ( ) <EOL> class Score ( models . Model ) : <EOL> student = models . ForeignKey ( to = Problem , on_delete = models . CASCADE ) <EOL> paper = models . ForeignKey ( to = Paper , on_delete = models . CASCADE ) <EOL> class UploadPhoto ( models . Model ) : <EOL> photoPath = models . CharField ( max_length = <NUM_LIT> ) <EOL> paper = models . ForeignKey ( to = Paper , on_delete = models . CASCADE ) <EOL> class Meta : <EOL> abstract = True <EOL> class PaperPhoto ( UploadPhoto ) : <EOL> pass <EOL> class StudentUploadAnswerPhoto ( UploadPhoto ) : <EOL> student = models . ForeignKey ( to = Student , on_delete = models . CASCADE ) <EOL> </s>
<s> import hashlib <EOL> import os <EOL> from django . contrib . auth . models import AbstractUser , UserManager <EOL> from django . db import models <EOL> from django . core . exceptions import ObjectDoesNotExist , ValidationError <EOL> from application import dispatch <EOL> from dvadmin . utils . models import CoreModel , table_prefix , get_custom_app_models <EOL> class Role ( CoreModel ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> key = models . CharField ( max_length = <NUM_LIT> , unique = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> sort = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> status = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class CustomUserManager ( UserManager ) : <EOL> def create_superuser ( self , username , email = None , password = None , ** extra_fields ) : <EOL> user = super ( CustomUserManager , self ) . create_superuser ( username , email , password , ** extra_fields ) <EOL> user . set_password ( password ) <EOL> try : <EOL> user . role . add ( Role . objects . get ( name = "<STR_LIT>" ) ) <EOL> user . save ( using = self . _db ) <EOL> return user <EOL> except ObjectDoesNotExist : <EOL> user . delete ( ) <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> class Users ( CoreModel , AbstractUser ) : <EOL> username = models . CharField ( max_length = <NUM_LIT> , unique = True , db_index = True , verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> email = models . EmailField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> mobile = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> avatar = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> GENDER_CHOICES = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> gender = models . IntegerField ( <EOL> choices = GENDER_CHOICES , default = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" <EOL> ) <EOL> USER_TYPE = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> user_type = models . IntegerField ( <EOL> choices = USER_TYPE , default = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" <EOL> ) <EOL> post = models . ManyToManyField ( to = "<STR_LIT>" , blank = True , verbose_name = "<STR_LIT>" , db_constraint = False , <EOL> help_text = "<STR_LIT>" ) <EOL> role = models . ManyToManyField ( to = "<STR_LIT>" , blank = True , verbose_name = "<STR_LIT>" , db_constraint = False , <EOL> help_text = "<STR_LIT>" ) <EOL> dept = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> on_delete = models . PROTECT , <EOL> db_constraint = False , <EOL> null = True , <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> objects = CustomUserManager ( ) <EOL> def set_password ( self , raw_password ) : <EOL> super ( ) . set_password ( hashlib . md5 ( raw_password . encode ( encoding = "<STR_LIT>" ) ) . hexdigest ( ) ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class Post ( CoreModel ) : <EOL> name = models . CharField ( null = False , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> code = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> sort = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> STATUS_CHOICES = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> status = models . IntegerField ( choices = STATUS_CHOICES , default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class Dept ( CoreModel ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> key = models . CharField ( max_length = <NUM_LIT> , unique = True , null = True , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> sort = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> owner = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> phone = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> email = models . EmailField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> status = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> parent = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> default = None , <EOL> verbose_name = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> null = True , <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> @ classmethod <EOL> def recursion_all_dept ( cls , dept_id : int , dept_all_list = None , dept_list = None ) : <EOL> if not dept_all_list : <EOL> dept_all_list = Dept . objects . values ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> if dept_list is None : <EOL> dept_list = [ dept_id ] <EOL> for ele in dept_all_list : <EOL> if ele . get ( "<STR_LIT>" ) == dept_id : <EOL> dept_list . append ( ele . get ( "<STR_LIT>" ) ) <EOL> cls . recursion_all_dept ( ele . get ( "<STR_LIT>" ) , dept_all_list , dept_list ) <EOL> return list ( set ( dept_list ) ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class Menu ( CoreModel ) : <EOL> parent = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> verbose_name = "<STR_LIT>" , <EOL> null = True , <EOL> blank = True , <EOL> db_constraint = False , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> icon = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> sort = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> ISLINK_CHOICES = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> is_link = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> link_url = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> is_catalog = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> web_path = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> component = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> component_name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> status = models . BooleanField ( default = True , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> cache = models . BooleanField ( default = False , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> visible = models . BooleanField ( default = True , blank = True , verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> is_iframe = models . BooleanField ( default = False , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> is_affix = models . BooleanField ( default = False , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> @ classmethod <EOL> def get_all_parent ( cls , id : int , all_list = None , nodes = None ) : <EOL> if not all_list : <EOL> all_list = Menu . objects . values ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> if nodes is None : <EOL> nodes = [ ] <EOL> for ele in all_list : <EOL> if ele . get ( "<STR_LIT>" ) == id : <EOL> parent_id = ele . get ( "<STR_LIT>" ) <EOL> if parent_id is not None : <EOL> cls . get_all_parent ( parent_id , all_list , nodes ) <EOL> nodes . append ( ele ) <EOL> return nodes <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class MenuField ( CoreModel ) : <EOL> model = models . CharField ( max_length = <NUM_LIT> , verbose_name = '<STR_LIT>' ) <EOL> menu = models . ForeignKey ( to = '<STR_LIT>' , on_delete = models . CASCADE , verbose_name = '<STR_LIT>' , db_constraint = False ) <EOL> field_name = models . CharField ( max_length = <NUM_LIT> , verbose_name = '<STR_LIT>' ) <EOL> title = models . CharField ( max_length = <NUM_LIT> , verbose_name = '<STR_LIT>' ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class FieldPermission ( CoreModel ) : <EOL> role = models . ForeignKey ( to = '<STR_LIT>' , on_delete = models . CASCADE , verbose_name = '<STR_LIT>' , db_constraint = False ) <EOL> field = models . ForeignKey ( to = '<STR_LIT>' , on_delete = models . CASCADE , related_name = '<STR_LIT>' , verbose_name = '<STR_LIT>' , db_constraint = False ) <EOL> is_query = models . BooleanField ( default = <NUM_LIT> , verbose_name = '<STR_LIT>' ) <EOL> is_create = models . BooleanField ( default = <NUM_LIT> , verbose_name = '<STR_LIT>' ) <EOL> is_update = models . BooleanField ( default = <NUM_LIT> , verbose_name = '<STR_LIT>' ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class MenuButton ( CoreModel ) : <EOL> menu = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> related_name = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> value = models . CharField ( unique = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> api = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> METHOD_CHOICES = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> method = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class RoleMenuPermission ( CoreModel ) : <EOL> role = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> related_name = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> menu = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> related_name = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> class RoleMenuButtonPermission ( CoreModel ) : <EOL> role = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> related_name = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> menu_button = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> related_name = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" , <EOL> null = True , <EOL> blank = True <EOL> ) <EOL> DATASCOPE_CHOICES = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> data_range = models . IntegerField ( default = <NUM_LIT> , choices = DATASCOPE_CHOICES , verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> dept = models . ManyToManyField ( to = "<STR_LIT>" , blank = True , verbose_name = "<STR_LIT>" , db_constraint = False , <EOL> help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class Dictionary ( CoreModel ) : <EOL> TYPE_LIST = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> label = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> value = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> parent = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> db_constraint = False , <EOL> on_delete = models . PROTECT , <EOL> blank = True , <EOL> null = True , <EOL> verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> type = models . IntegerField ( choices = TYPE_LIST , default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> color = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> is_value = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> status = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> sort = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> remark = models . CharField ( max_length = <NUM_LIT> , blank = True , null = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> def save ( self , force_insert = False , force_update = False , using = None , update_fields = None ) : <EOL> super ( ) . save ( force_insert , force_update , using , update_fields ) <EOL> dispatch . refresh_dictionary ( ) <EOL> def delete ( self , using = None , keep_parents = False ) : <EOL> res = super ( ) . delete ( using , keep_parents ) <EOL> dispatch . refresh_dictionary ( ) <EOL> return res <EOL> class OperationLog ( CoreModel ) : <EOL> request_modular = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> request_path = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> request_body = models . TextField ( verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> request_method = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> request_msg = models . TextField ( verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> request_ip = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> request_browser = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> response_code = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> request_os = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> json_result = models . TextField ( verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> status = models . BooleanField ( default = False , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> def media_file_name ( instance , filename ) : <EOL> h = instance . md5sum <EOL> basename , ext = os . path . splitext ( filename ) <EOL> return os . path . join ( "<STR_LIT>" , h [ : <NUM_LIT> ] , h [ <NUM_LIT> : <NUM_LIT> ] , h + ext . lower ( ) ) <EOL> class FileList ( CoreModel ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , null = True , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> url = models . FileField ( upload_to = media_file_name , null = True , blank = True , ) <EOL> file_url = models . CharField ( max_length = <NUM_LIT> , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> engine = models . CharField ( max_length = <NUM_LIT> , default = '<STR_LIT>' , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> mime_type = models . CharField ( max_length = <NUM_LIT> , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> size = models . CharField ( max_length = <NUM_LIT> , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> md5sum = models . CharField ( max_length = <NUM_LIT> , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> def save ( self , * args , ** kwargs ) : <EOL> if not self . md5sum : <EOL> md5 = hashlib . md5 ( ) <EOL> for chunk in self . url . chunks ( ) : <EOL> md5 . update ( chunk ) <EOL> self . md5sum = md5 . hexdigest ( ) <EOL> if not self . size : <EOL> self . size = self . url . size <EOL> if not self . file_url : <EOL> url = media_file_name ( self , self . name ) <EOL> self . file_url = f'<STR_LIT>' <EOL> super ( FileList , self ) . save ( * args , ** kwargs ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class Area ( CoreModel ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> code = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , unique = True , db_index = True ) <EOL> level = models . BigIntegerField ( verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> pinyin = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> initials = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> enable = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> pcode = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> to_field = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> db_constraint = False , <EOL> null = True , <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> def __str__ ( self ) : <EOL> return f"<STR_LIT>" <EOL> class ApiWhiteList ( CoreModel ) : <EOL> url = models . CharField ( max_length = <NUM_LIT> , help_text = "<STR_LIT>" , verbose_name = "<STR_LIT>" ) <EOL> METHOD_CHOICES = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> method = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> enable_datasource = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , <EOL> blank = True ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class SystemConfig ( CoreModel ) : <EOL> parent = models . ForeignKey ( <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> on_delete = models . CASCADE , <EOL> db_constraint = False , <EOL> null = True , <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> ) <EOL> title = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> key = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , db_index = True ) <EOL> value = models . JSONField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , null = True , blank = True ) <EOL> sort = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , blank = True ) <EOL> status = models . BooleanField ( default = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> data_options = models . JSONField ( verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , null = True , blank = True ) <EOL> FORM_ITEM_TYPE_LIST = ( <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ( <NUM_LIT> , "<STR_LIT>" ) , <EOL> ) <EOL> form_item_type = models . IntegerField ( <EOL> choices = FORM_ITEM_TYPE_LIST , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" , default = <NUM_LIT> , blank = True <EOL> ) <EOL> rule = models . JSONField ( null = True , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> placeholder = models . CharField ( max_length = <NUM_LIT> , null = True , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> setting = models . JSONField ( null = True , blank = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> unique_together = ( ( "<STR_LIT>" , "<STR_LIT>" ) , ) <EOL> def __str__ ( self ) : <EOL> return f"<STR_LIT>" <EOL> def save ( self , force_insert = False , force_update = False , using = None , update_fields = None ) : <EOL> super ( ) . save ( force_insert , force_update , using , update_fields ) <EOL> dispatch . refresh_system_config ( ) <EOL> def delete ( self , using = None , keep_parents = False ) : <EOL> res = super ( ) . delete ( using , keep_parents ) <EOL> dispatch . refresh_system_config ( ) <EOL> return res <EOL> class LoginLog ( CoreModel ) : <EOL> LOGIN_TYPE_CHOICES = ( ( <NUM_LIT> , "<STR_LIT>" ) , ( <NUM_LIT> , "<STR_LIT>" ) , ) <EOL> username = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> ip = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> agent = models . TextField ( verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> browser = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> os = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> continent = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> country = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> province = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> city = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> district = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> isp = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> area_code = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> country_english = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , <EOL> help_text = "<STR_LIT>" ) <EOL> country_code = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> longitude = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> latitude = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> login_type = models . IntegerField ( default = <NUM_LIT> , choices = LOGIN_TYPE_CHOICES , verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class MessageCenter ( CoreModel ) : <EOL> title = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> content = models . TextField ( verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> target_type = models . IntegerField ( default = <NUM_LIT> , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> target_user = models . ManyToManyField ( to = Users , related_name = '<STR_LIT>' , through = '<STR_LIT>' , <EOL> through_fields = ( '<STR_LIT>' , '<STR_LIT>' ) , blank = True , verbose_name = "<STR_LIT>" , <EOL> help_text = "<STR_LIT>" ) <EOL> target_dept = models . ManyToManyField ( to = Dept , blank = True , db_constraint = False , <EOL> verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> target_role = models . ManyToManyField ( to = Role , blank = True , db_constraint = False , <EOL> verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> ordering = ( "<STR_LIT>" , ) <EOL> class MessageCenterTargetUser ( CoreModel ) : <EOL> users = models . ForeignKey ( Users , related_name = "<STR_LIT>" , on_delete = models . CASCADE , db_constraint = False , <EOL> verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> messagecenter = models . ForeignKey ( MessageCenter , on_delete = models . CASCADE , db_constraint = False , <EOL> verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> is_read = models . BooleanField ( default = False , blank = True , null = True , verbose_name = "<STR_LIT>" , help_text = "<STR_LIT>" ) <EOL> class Meta : <EOL> db_table = table_prefix + "<STR_LIT>" <EOL> verbose_name = "<STR_LIT>" <EOL> verbose_name_plural = verbose_name <EOL> </s>
<s> import os <EOL> from channels . auth import AuthMiddlewareStack <EOL> from channels . security . websocket import AllowedHostsOriginValidator <EOL> from channels . routing import ProtocolTypeRouter , URLRouter <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> os . environ [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> http_application = get_asgi_application ( ) <EOL> from application . routing import websocket_urlpatterns <EOL> application = ProtocolTypeRouter ( { <EOL> "<STR_LIT>" : http_application , <EOL> '<STR_LIT>' : AllowedHostsOriginValidator ( <EOL> AuthMiddlewareStack ( <EOL> URLRouter ( <EOL> websocket_urlpatterns <EOL> ) <EOL> ) <EOL> ) , <EOL> } ) <EOL> </s>
<s> import os <EOL> from application . settings import BASE_DIR <EOL> DATABASE_ENGINE = "<STR_LIT>" <EOL> DATABASE_NAME = '<STR_LIT>' <EOL> DATABASE_HOST = '<STR_LIT>' <EOL> DATABASE_PORT = <NUM_LIT> <EOL> DATABASE_USER = "<STR_LIT>" <EOL> DATABASE_PASSWORD = "<STR_LIT>" <EOL> TABLE_PREFIX = "<STR_LIT>" <EOL> REDIS_PASSWORD = '<STR_LIT>' <EOL> REDIS_HOST = '<STR_LIT>' <EOL> REDIS_URL = f'<STR_LIT>' <EOL> DEBUG = True <EOL> ENABLE_LOGIN_ANALYSIS_LOG = True <EOL> LOGIN_NO_CAPTCHA_AUTH = True <EOL> ALLOWED_HOSTS = [ "<STR_LIT>" ] <EOL> COLUMN_EXCLUDE_APPS = [ ] <EOL> </s>
<s> from django . apps import apps <EOL> from rest_framework import serializers <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import Role , MenuField <EOL> from dvadmin . utils . models import get_custom_app_models <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . json_response import DetailResponse , ErrorResponse , SuccessResponse <EOL> class MenuFieldSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = MenuField <EOL> fields = '<STR_LIT>' <EOL> read_only_fields = [ '<STR_LIT>' ] <EOL> class MenuFieldViewSet ( CustomModelViewSet ) : <EOL> queryset = MenuField . objects . order_by ( '<STR_LIT>' ) <EOL> serializer_class = MenuFieldSerializer <EOL> def list ( self , request , * args , ** kwargs ) : <EOL> menu = request . query_params . get ( '<STR_LIT>' ) <EOL> if not menu : <EOL> return SuccessResponse ( [ ] ) <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) . filter ( menu = menu ) ) <EOL> serializer = self . get_serializer ( queryset , many = True , request = request ) <EOL> return SuccessResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> def create ( self , request , * args , ** kwargs ) : <EOL> payload = request . data <EOL> for model in apps . get_models ( ) : <EOL> if payload . get ( '<STR_LIT>' ) == model . __name__ : <EOL> break <EOL> else : <EOL> return ErrorResponse ( msg = '<STR_LIT>' ) <EOL> if MenuField . objects . filter ( menu = payload . get ( '<STR_LIT>' ) , model = model . __name__ , field_name = payload . get ( '<STR_LIT>' ) ) . exists ( ) : <EOL> return ErrorResponse ( msg = '<STR_LIT>' % payload . get ( '<STR_LIT>' ) ) <EOL> return super ( ) . create ( request , * args , ** kwargs ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def get_models ( self , request ) : <EOL> res = [ ] <EOL> for model in get_custom_app_models ( ) : <EOL> res . append ( { <EOL> '<STR_LIT>' : model [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : model [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : model [ '<STR_LIT>' ] <EOL> } ) <EOL> return DetailResponse ( res ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def auto_match_fields ( self , request ) : <EOL> menu_id = request . data . get ( '<STR_LIT>' ) <EOL> model_name = request . data . get ( '<STR_LIT>' ) <EOL> if not menu_id or not model_name : <EOL> return ErrorResponse ( msg = '<STR_LIT>' ) <EOL> for model in get_custom_app_models ( ) : <EOL> if model [ '<STR_LIT>' ] != model_name : <EOL> continue <EOL> for field in model [ '<STR_LIT>' ] : <EOL> if MenuField . objects . filter ( <EOL> menu_id = menu_id , model = model_name , field_name = field [ '<STR_LIT>' ] <EOL> ) . exists ( ) : <EOL> continue <EOL> data = { <EOL> '<STR_LIT>' : menu_id , <EOL> '<STR_LIT>' : model_name , <EOL> '<STR_LIT>' : field [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : str ( field [ '<STR_LIT>' ] ) , <EOL> } <EOL> serializer = self . get_serializer ( data = data , request = request ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> serializer . save ( ) <EOL> return SuccessResponse ( msg = '<STR_LIT>' ) <EOL> </s>
<s> from rest_framework . decorators import action <EOL> from rest_framework . permissions import AllowAny <EOL> from dvadmin . utils . json_response import DetailResponse <EOL> class FastCrudMixin : <EOL> crud_fields = None <EOL> exclude_fields = None <EOL> custom_crud_json = None <EOL> crud_update_key_value = None <EOL> def __handle_type ( self , type ) : <EOL> if type in [ '<STR_LIT>' , '<STR_LIT>' ] : <EOL> return "<STR_LIT>" <EOL> if type == '<STR_LIT>' : <EOL> return "<STR_LIT>" <EOL> if type == '<STR_LIT>' : <EOL> return "<STR_LIT>" <EOL> if type == '<STR_LIT>' : <EOL> return "<STR_LIT>" <EOL> if type == '<STR_LIT>' : <EOL> return "<STR_LIT>" <EOL> def __get_field_attribute ( self ) : <EOL> result = [ ] <EOL> queryset = self . get_queryset ( ) <EOL> __name = "<STR_LIT>" <EOL> __verbose_name = "<STR_LIT>" <EOL> __type = "<STR_LIT>" <EOL> if self . crud_fields and type ( self . crud_fields == list ) : <EOL> for item in self . crud_fields : <EOL> try : <EOL> field = queryset . model . _meta . get_field ( item ) <EOL> field_type = field . get_internal_type ( ) <EOL> __name = field . name <EOL> if field_type in [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] : <EOL> continue <EOL> else : <EOL> __verbose_name = field . verbose_name <EOL> __type = self . __handle_type ( field_type ) <EOL> except : <EOL> continue <EOL> result . append ( { "<STR_LIT>" : __name , "<STR_LIT>" : __verbose_name , "<STR_LIT>" : __type } ) <EOL> else : <EOL> model_fields = queryset . model . _meta . get_fields ( ) <EOL> for field in model_fields : <EOL> field_type = field . get_internal_type ( ) <EOL> __name = field . name <EOL> if self . exclude_fields and type ( self . exclude_fields == list ) : <EOL> if __name in self . exclude_fields : <EOL> continue <EOL> if field_type in [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] : <EOL> continue <EOL> else : <EOL> __verbose_name = field . verbose_name <EOL> __type = self . __handle_type ( field_type ) <EOL> result . append ( { "<STR_LIT>" : __name , "<STR_LIT>" : __verbose_name , "<STR_LIT>" : __type } ) <EOL> return result <EOL> def __find_key ( self , dct : dict , <EOL> target_key : str , <EOL> level : int = - <NUM_LIT> , <EOL> index : int = - <NUM_LIT> ) -> tuple : <EOL> for k , v in dct . items ( ) : <EOL> level += <NUM_LIT> <EOL> index += <NUM_LIT> <EOL> if k == target_key : <EOL> return level , index <EOL> elif isinstance ( v , list ) : <EOL> for i , dct_ in enumerate ( v ) : <EOL> if isinstance ( dct_ , dict ) : <EOL> result = self . __find_key ( dct_ , target_key ) <EOL> if result is not None : <EOL> return result <EOL> else : <EOL> continue <EOL> elif isinstance ( v , str ) or isinstance ( v , int ) or isinstance ( v , float ) : <EOL> continue <EOL> def __update_nested_dict ( self , nested_dict : dict , <EOL> target_key : str , <EOL> new_value ) -> dict : <EOL> split_target_key = target_key . split ( '<STR_LIT>' ) <EOL> if len ( split_target_key ) > <NUM_LIT> : <EOL> new_dict = nested_dict [ split_target_key [ <NUM_LIT> ] ] <EOL> for item in split_target_key [ <NUM_LIT> : - <NUM_LIT> ] : <EOL> new_dict = new_dict [ item ] <EOL> self . __update_nested_dict ( new_dict , split_target_key [ - <NUM_LIT> ] , new_value ) <EOL> else : <EOL> nested_dict [ target_key ] = new_value <EOL> return nested_dict <EOL> def __handle_crud ( self ) : <EOL> result = self . __get_field_attribute ( ) <EOL> columns = dict ( ) <EOL> for item in result : <EOL> key = item . get ( '<STR_LIT>' ) <EOL> title = item . get ( '<STR_LIT>' ) <EOL> type = item . get ( '<STR_LIT>' ) <EOL> columns [ key ] = { <EOL> "<STR_LIT>" : title , <EOL> "<STR_LIT>" : key , <EOL> "<STR_LIT>" : type <EOL> } <EOL> if self . custom_crud_json and isinstance ( self . custom_crud_json , dict ) : <EOL> columns = columns | self . custom_crud_json <EOL> if self . crud_update_key_value and isinstance ( self . crud_update_key_value , dict ) : <EOL> for key , value in self . crud_update_key_value . items ( ) : <EOL> columns = self . __update_nested_dict ( columns , key , value ) <EOL> return columns <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ AllowAny ] ) <EOL> def init_crud ( self , request ) : <EOL> self . permission_classes = [ AllowAny ] <EOL> columns = self . __handle_crud ( ) <EOL> expose = "<STR_LIT>" <EOL> ret = "<STR_LIT>" <EOL> res = "<STR_LIT>" <EOL> data = <EOL> return DetailResponse ( data = data ) <EOL> </s>
<s> import os <EOL> import re <EOL> from datetime import datetime <EOL> import openpyxl <EOL> from django . conf import settings <EOL> from dvadmin . utils . validator import CustomValidationError <EOL> def import_to_data ( file_url , field_data , m2m_fields = None ) : <EOL> file_path_dir = os . path . join ( settings . BASE_DIR , file_url ) <EOL> workbook = openpyxl . load_workbook ( file_path_dir ) <EOL> table = workbook [ workbook . sheetnames [ <NUM_LIT> ] ] <EOL> theader = tuple ( table . values ) [ <NUM_LIT> ] <EOL> is_update = '<STR_LIT>' in theader <EOL> if is_update is False : <EOL> field_data . pop ( '<STR_LIT>' ) <EOL> validation_data_dict = { } <EOL> for key , value in field_data . items ( ) : <EOL> if isinstance ( value , dict ) : <EOL> choices = value . get ( "<STR_LIT>" , { } ) <EOL> data_dict = { } <EOL> if choices . get ( "<STR_LIT>" ) : <EOL> for k , v in choices . get ( "<STR_LIT>" ) . items ( ) : <EOL> data_dict [ k ] = v <EOL> elif choices . get ( "<STR_LIT>" ) and choices . get ( "<STR_LIT>" ) : <EOL> data_list = choices . get ( "<STR_LIT>" ) . values ( choices . get ( "<STR_LIT>" ) , "<STR_LIT>" ) <EOL> for ele in data_list : <EOL> data_dict [ ele . get ( choices . get ( "<STR_LIT>" ) ) ] = ele . get ( "<STR_LIT>" ) <EOL> else : <EOL> continue <EOL> validation_data_dict [ key ] = data_dict <EOL> tables = [ ] <EOL> for i , row in enumerate ( range ( table . max_row ) ) : <EOL> if i == <NUM_LIT> : <EOL> continue <EOL> array = { } <EOL> for index , item in enumerate ( field_data . items ( ) ) : <EOL> items = list ( item ) <EOL> key = items [ <NUM_LIT> ] <EOL> values = items [ <NUM_LIT> ] <EOL> value_type = '<STR_LIT>' <EOL> if isinstance ( values , dict ) : <EOL> value_type = values . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> cell_value = table . cell ( row = row + <NUM_LIT> , column = index + <NUM_LIT> ) . value <EOL> if cell_value is None or cell_value == '<STR_LIT>' : <EOL> continue <EOL> elif value_type == '<STR_LIT>' : <EOL> print ( <NUM_LIT> , datetime . strptime ( str ( cell_value ) , '<STR_LIT>' ) . date ( ) ) <EOL> try : <EOL> cell_value = datetime . strptime ( str ( cell_value ) , '<STR_LIT>' ) . date ( ) <EOL> except : <EOL> raise CustomValidationError ( '<STR_LIT>' ) <EOL> elif value_type == '<STR_LIT>' : <EOL> cell_value = datetime . strptime ( str ( cell_value ) , '<STR_LIT>' ) <EOL> else : <EOL> if type ( cell_value ) is float and str ( cell_value ) . split ( "<STR_LIT>" ) [ <NUM_LIT> ] == "<STR_LIT>" : <EOL> cell_value = int ( str ( cell_value ) . split ( "<STR_LIT>" ) [ <NUM_LIT> ] ) <EOL> elif type ( cell_value ) is str : <EOL> cell_value = cell_value . strip ( "<STR_LIT>" ) <EOL> if key in validation_data_dict : <EOL> array [ key ] = validation_data_dict . get ( key , { } ) . get ( cell_value , None ) <EOL> if key in m2m_fields : <EOL> array [ key ] = list ( <EOL> filter ( <EOL> lambda x : x , <EOL> [ <EOL> validation_data_dict . get ( key , { } ) . get ( value , None ) <EOL> for value in re . split ( r"<STR_LIT>" , cell_value ) <EOL> ] , <EOL> ) <EOL> ) <EOL> else : <EOL> array [ key ] = cell_value <EOL> tables . append ( array ) <EOL> return tables <EOL> </s>
<s> from functools import wraps <EOL> from django . db . models import Func , F , OuterRef , Exists <EOL> from django . test import TestCase <EOL> import django <EOL> import os <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> django . setup ( ) <EOL> from dvadmin . system . models import Menu , RoleMenuPermission , RoleMenuButtonPermission , MenuButton <EOL> import time <EOL> def timing_decorator ( func ) : <EOL> @ wraps ( func ) <EOL> def wrapper ( * args , ** kwargs ) : <EOL> start_time = time . time ( ) <EOL> result = func ( * args , ** kwargs ) <EOL> end_time = time . time ( ) <EOL> run_time = end_time - start_time <EOL> print ( f"<STR_LIT>" ) <EOL> return result <EOL> return wrapper <EOL> @ timing_decorator <EOL> def getMenu ( ) : <EOL> data = [ ] <EOL> queryset = Menu . objects . filter ( status = <NUM_LIT> , is_catalog = False ) . values ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> for item in queryset : <EOL> parent_list = Menu . get_all_parent ( item [ '<STR_LIT>' ] ) <EOL> names = [ d [ "<STR_LIT>" ] for d in parent_list ] <EOL> completeName = "<STR_LIT>" . join ( names ) <EOL> isCheck = RoleMenuPermission . objects . filter ( <EOL> menu__id = item [ '<STR_LIT>' ] , <EOL> role__id = <NUM_LIT> , <EOL> ) . exists ( ) <EOL> mbCheck = RoleMenuButtonPermission . objects . filter ( <EOL> menu_button = OuterRef ( "<STR_LIT>" ) , <EOL> role__id = <NUM_LIT> , <EOL> ) <EOL> btns = MenuButton . objects . filter ( <EOL> menu__id = item [ '<STR_LIT>' ] , <EOL> ) . annotate ( isCheck = Exists ( mbCheck ) ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , data_range = F ( '<STR_LIT>' ) ) <EOL> dicts = { <EOL> '<STR_LIT>' : completeName , <EOL> '<STR_LIT>' : item [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : isCheck , <EOL> '<STR_LIT>' : btns <EOL> } <EOL> print ( dicts ) <EOL> data . append ( dicts ) <EOL> if __name__ == '<STR_LIT>' : <EOL> getMenu ( ) <EOL> </s>
<s> import multiprocessing <EOL> workers = multiprocessing . cpu_count ( ) * <NUM_LIT> + <NUM_LIT> <EOL> threads = <NUM_LIT> <EOL> bind = '<STR_LIT>' <EOL> daemon = '<STR_LIT>' <EOL> worker_class = '<STR_LIT>' <EOL> worker_connections = <NUM_LIT> <EOL> max_requests = <NUM_LIT> <EOL> max_requests_jitter = <NUM_LIT> <EOL> pidfile = '<STR_LIT>' <EOL> loglevel = '<STR_LIT>' <EOL> access_log_format = '<STR_LIT>' <EOL> backlog = <NUM_LIT> <EOL> proc_name = '<STR_LIT>' <EOL> timeout = <NUM_LIT> <EOL> graceful_timeout = <NUM_LIT> <EOL> keepalive = <NUM_LIT> <EOL> limit_request_line = <NUM_LIT> <EOL> limit_request_fields = <NUM_LIT> <EOL> limit_request_field_size = <NUM_LIT> <EOL> accesslog = '<STR_LIT>' <EOL> </s>
<s> from django . db import DataError <EOL> from rest_framework . exceptions import APIException <EOL> from rest_framework . validators import UniqueValidator <EOL> class CustomValidationError ( APIException ) : <EOL> def __init__ ( self , detail ) : <EOL> self . detail = detail <EOL> def qs_exists ( queryset ) : <EOL> try : <EOL> return queryset . exists ( ) <EOL> except ( TypeError , ValueError , DataError ) : <EOL> return False <EOL> def qs_filter ( queryset , ** kwargs ) : <EOL> try : <EOL> return queryset . filter ( ** kwargs ) <EOL> except ( TypeError , ValueError , DataError ) : <EOL> return queryset . none ( ) <EOL> class CustomUniqueValidator ( UniqueValidator ) : <EOL> def filter_queryset ( self , value , queryset , field_name ) : <EOL> filter_kwargs = { '<STR_LIT>' % ( field_name , self . lookup ) : value } <EOL> return qs_filter ( queryset , ** filter_kwargs ) <EOL> def exclude_current_instance ( self , queryset , instance ) : <EOL> if instance is not None : <EOL> return queryset . exclude ( pk = instance . pk ) <EOL> return queryset <EOL> def __call__ ( self , value , serializer_field ) : <EOL> field_name = serializer_field . source_attrs [ - <NUM_LIT> ] <EOL> instance = getattr ( serializer_field . parent , '<STR_LIT>' , None ) <EOL> queryset = self . queryset <EOL> queryset = self . filter_queryset ( value , queryset , field_name ) <EOL> queryset = self . exclude_current_instance ( queryset , instance ) <EOL> if qs_exists ( queryset ) : <EOL> raise CustomValidationError ( self . message ) <EOL> def __repr__ ( self ) : <EOL> return super ( ) . __repr__ ( ) <EOL> </s>
<s> from django . db . models import Q <EOL> from rest_framework import serializers <EOL> from dvadmin . system . models import Area <EOL> from dvadmin . utils . json_response import SuccessResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class AreaSerializer ( CustomModelSerializer ) : <EOL> pcode_count = serializers . SerializerMethodField ( read_only = True ) <EOL> hasChild = serializers . SerializerMethodField ( ) <EOL> def get_pcode_count ( self , instance : Area ) : <EOL> return Area . objects . filter ( pcode = instance ) . count ( ) <EOL> def get_hasChild ( self , instance ) : <EOL> hasChild = Area . objects . filter ( pcode = instance . code ) <EOL> if hasChild : <EOL> return True <EOL> return False <EOL> class Meta : <EOL> model = Area <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class AreaCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = Area <EOL> fields = '<STR_LIT>' <EOL> class AreaViewSet ( CustomModelViewSet ) : <EOL> queryset = Area . objects . all ( ) <EOL> serializer_class = AreaSerializer <EOL> extra_filter_class = [ ] <EOL> def get_queryset ( self ) : <EOL> self . request . query_params . _mutable = True <EOL> params = self . request . query_params <EOL> pcode = params . get ( '<STR_LIT>' , None ) <EOL> page = params . get ( '<STR_LIT>' , None ) <EOL> limit = params . get ( '<STR_LIT>' , None ) <EOL> if page : <EOL> del params [ '<STR_LIT>' ] <EOL> if limit : <EOL> del params [ '<STR_LIT>' ] <EOL> if params and pcode : <EOL> queryset = self . queryset . filter ( enable = True , pcode = pcode ) <EOL> else : <EOL> queryset = self . queryset . filter ( enable = True ) <EOL> return queryset <EOL> </s>
<s> from rest_framework import serializers <EOL> from rest_framework . decorators import action <EOL> from dvadmin . system . models import Menu , RoleMenuPermission <EOL> from dvadmin . system . views . menu_button import MenuButtonSerializer <EOL> from dvadmin . utils . json_response import SuccessResponse , ErrorResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class MenuSerializer ( CustomModelSerializer ) : <EOL> menuPermission = serializers . SerializerMethodField ( read_only = True ) <EOL> hasChild = serializers . SerializerMethodField ( ) <EOL> def get_menuPermission ( self , instance ) : <EOL> queryset = instance . menuPermission . order_by ( '<STR_LIT>' ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> if queryset : <EOL> return queryset <EOL> else : <EOL> return None <EOL> def get_hasChild ( self , instance ) : <EOL> hasChild = Menu . objects . filter ( parent = instance . id ) <EOL> if hasChild : <EOL> return True <EOL> return False <EOL> class Meta : <EOL> model = Menu <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MenuCreateSerializer ( CustomModelSerializer ) : <EOL> name = serializers . CharField ( required = False ) <EOL> def create ( self , validated_data ) : <EOL> menu_obj = Menu . objects . filter ( parent_id = validated_data . get ( '<STR_LIT>' , None ) ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> last_sort = menu_obj . sort if menu_obj else <NUM_LIT> <EOL> validated_data [ '<STR_LIT>' ] = last_sort + <NUM_LIT> <EOL> return super ( ) . create ( validated_data ) <EOL> class Meta : <EOL> model = Menu <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class WebRouterSerializer ( CustomModelSerializer ) : <EOL> path = serializers . CharField ( source = "<STR_LIT>" ) <EOL> title = serializers . CharField ( source = "<STR_LIT>" ) <EOL> class Meta : <EOL> model = Menu <EOL> fields = ( <EOL> '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , <EOL> '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MenuViewSet ( CustomModelViewSet ) : <EOL> queryset = Menu . objects . all ( ) <EOL> serializer_class = MenuSerializer <EOL> create_serializer_class = MenuCreateSerializer <EOL> update_serializer_class = MenuCreateSerializer <EOL> search_fields = [ '<STR_LIT>' , '<STR_LIT>' ] <EOL> filter_fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> def list ( self , request ) : <EOL> request . query_params . _mutable = True <EOL> params = request . query_params <EOL> parent = params . get ( '<STR_LIT>' , None ) <EOL> page = params . get ( '<STR_LIT>' , None ) <EOL> limit = params . get ( '<STR_LIT>' , None ) <EOL> if page : <EOL> del params [ '<STR_LIT>' ] <EOL> if limit : <EOL> del params [ '<STR_LIT>' ] <EOL> if params : <EOL> if parent : <EOL> queryset = self . queryset . filter ( parent = parent ) <EOL> else : <EOL> queryset = self . queryset . filter ( ) <EOL> else : <EOL> queryset = self . queryset . filter ( parent__isnull = True ) <EOL> queryset = self . filter_queryset ( queryset ) <EOL> serializer = MenuSerializer ( queryset , many = True , request = request ) <EOL> data = serializer . data <EOL> return SuccessResponse ( data = data ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ ] ) <EOL> def web_router ( self , request ) : <EOL> user = request . user <EOL> if user . is_superuser : <EOL> queryset = self . queryset . filter ( status = <NUM_LIT> ) <EOL> else : <EOL> role_list = user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> menu_list = RoleMenuPermission . objects . filter ( role__in = role_list ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> queryset = Menu . objects . filter ( id__in = menu_list ) <EOL> serializer = WebRouterSerializer ( queryset , many = True , request = request ) <EOL> data = serializer . data <EOL> return SuccessResponse ( data = data , total = len ( data ) , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ ] ) <EOL> def get_all_menu ( self , request ) : <EOL> user = request . user <EOL> queryset = self . queryset . all ( ) <EOL> if not user . is_superuser : <EOL> role_list = user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> menu_list = RoleMenuPermission . objects . filter ( role__in = role_list ) . values_list ( '<STR_LIT>' ) <EOL> queryset = Menu . objects . filter ( id__in = menu_list ) <EOL> serializer = WebRouterSerializer ( queryset , many = True , request = request ) <EOL> data = serializer . data <EOL> return SuccessResponse ( data = data , total = len ( data ) , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ ] ) <EOL> def move_up ( self , request ) : <EOL> menu_id = request . data . get ( '<STR_LIT>' ) <EOL> try : <EOL> menu = Menu . objects . get ( id = menu_id ) <EOL> except Menu . DoesNotExist : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> previous_menu = Menu . objects . filter ( sort__lt = menu . sort , parent = menu . parent ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> if previous_menu : <EOL> previous_menu . sort , menu . sort = menu . sort , previous_menu . sort <EOL> previous_menu . save ( ) <EOL> menu . save ( ) <EOL> return SuccessResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ ] ) <EOL> def move_down ( self , request ) : <EOL> menu_id = request . data [ '<STR_LIT>' ] <EOL> try : <EOL> menu = Menu . objects . get ( id = menu_id ) <EOL> except Menu . DoesNotExist : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> next_menu = Menu . objects . filter ( sort__gt = menu . sort , parent = menu . parent ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> if next_menu : <EOL> next_menu . sort , menu . sort = menu . sort , next_menu . sort <EOL> next_menu . save ( ) <EOL> menu . save ( ) <EOL> return SuccessResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> </s>
<s> from django . db . models import F <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import RoleMenuPermission , Menu , MenuButton <EOL> from dvadmin . utils . json_response import DetailResponse , ErrorResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class RoleMenuPermissionSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = RoleMenuPermission <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class RoleMenuPermissionInitSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = RoleMenuPermission <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class RoleMenuPermissionCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = RoleMenuPermission <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class RoleMenuPermissionViewSet ( CustomModelViewSet ) : <EOL> queryset = RoleMenuPermission . objects . all ( ) <EOL> serializer_class = RoleMenuPermissionSerializer <EOL> create_serializer_class = RoleMenuPermissionCreateUpdateSerializer <EOL> update_serializer_class = RoleMenuPermissionCreateUpdateSerializer <EOL> extra_filter_class = [ ] <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False ) <EOL> def save_auth ( self , request ) : <EOL> body = request . data <EOL> role_id = body . get ( '<STR_LIT>' , None ) <EOL> if role_id is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> menu_list = body . get ( '<STR_LIT>' , None ) <EOL> if menu_list is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> obj_list = RoleMenuPermission . objects . filter ( role__id = role_id ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> old_set = set ( obj_list ) <EOL> new_set = set ( menu_list ) <EOL> need_del = old_set . difference ( new_set ) <EOL> need_add = new_set . difference ( old_set ) <EOL> RoleMenuPermission . objects . filter ( role__id = role_id , menu__in = list ( need_del ) ) . delete ( ) <EOL> data = [ { "<STR_LIT>" : role_id , "<STR_LIT>" : item } for item in list ( need_add ) ] <EOL> serializer = RoleMenuPermissionSerializer ( data = data , many = True , request = request ) <EOL> if serializer . is_valid ( raise_exception = True ) : <EOL> serializer . save ( ) <EOL> return DetailResponse ( msg = "<STR_LIT>" , data = serializer . data ) <EOL> </s>
<s> from django . db . models import F , Subquery , OuterRef , Exists <EOL> from rest_framework import serializers <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import RoleMenuButtonPermission , Menu , MenuButton , Dept , RoleMenuPermission , FieldPermission , MenuField <EOL> from dvadmin . system . views . menu import MenuSerializer <EOL> from dvadmin . utils . json_response import DetailResponse , ErrorResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class RoleMenuButtonPermissionSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = RoleMenuButtonPermission <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class RoleMenuButtonPermissionCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> menu_button__name = serializers . CharField ( source = '<STR_LIT>' , read_only = True ) <EOL> menu_button__value = serializers . CharField ( source = '<STR_LIT>' , read_only = True ) <EOL> class Meta : <EOL> model = RoleMenuButtonPermission <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class RoleButtonPermissionSerializer ( CustomModelSerializer ) : <EOL> isCheck = serializers . SerializerMethodField ( ) <EOL> data_range = serializers . SerializerMethodField ( ) <EOL> def get_isCheck ( self , instance ) : <EOL> params = self . request . query_params <EOL> return RoleMenuButtonPermission . objects . filter ( <EOL> menu_button__id = instance [ '<STR_LIT>' ] , <EOL> role__id = params . get ( '<STR_LIT>' ) , <EOL> ) . exists ( ) <EOL> def get_data_range ( self , instance ) : <EOL> params = self . request . query_params <EOL> obj = RoleMenuButtonPermission . objects . filter ( <EOL> menu_button__id = instance [ '<STR_LIT>' ] , <EOL> role__id = params . get ( '<STR_LIT>' ) , <EOL> ) . first ( ) <EOL> if obj is None : <EOL> return None <EOL> return obj . data_range <EOL> class Meta : <EOL> model = MenuButton <EOL> fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> class RoleFieldPermissionSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = FieldPermission <EOL> fields = "<STR_LIT>" <EOL> class RoleMenuFieldSerializer ( CustomModelSerializer ) : <EOL> is_query = serializers . SerializerMethodField ( ) <EOL> is_create = serializers . SerializerMethodField ( ) <EOL> is_update = serializers . SerializerMethodField ( ) <EOL> def get_is_query ( self , instance ) : <EOL> params = self . request . query_params <EOL> queryset = instance . menu_field . filter ( role = params . get ( '<STR_LIT>' ) ) . first ( ) <EOL> if queryset : <EOL> return queryset . is_query <EOL> return False <EOL> def get_is_create ( self , instance ) : <EOL> params = self . request . query_params <EOL> queryset = instance . menu_field . filter ( role = params . get ( '<STR_LIT>' ) ) . first ( ) <EOL> if queryset : <EOL> return queryset . is_create <EOL> return False <EOL> def get_is_update ( self , instance ) : <EOL> params = self . request . query_params <EOL> queryset = instance . menu_field . filter ( role = params . get ( '<STR_LIT>' ) ) . first ( ) <EOL> if queryset : <EOL> return queryset . is_update <EOL> return False <EOL> class Meta : <EOL> model = MenuField <EOL> fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> class RoleMenuPermissionSerializer ( CustomModelSerializer ) : <EOL> name = serializers . SerializerMethodField ( ) <EOL> isCheck = serializers . SerializerMethodField ( ) <EOL> btns = serializers . SerializerMethodField ( ) <EOL> columns = serializers . SerializerMethodField ( ) <EOL> def get_name ( self , instance ) : <EOL> parent_list = Menu . get_all_parent ( instance [ '<STR_LIT>' ] ) <EOL> names = [ d [ "<STR_LIT>" ] for d in parent_list ] <EOL> return "<STR_LIT>" . join ( names ) <EOL> def get_isCheck ( self , instance ) : <EOL> params = self . request . query_params <EOL> return RoleMenuPermission . objects . filter ( <EOL> menu__id = instance [ '<STR_LIT>' ] , <EOL> role__id = params . get ( '<STR_LIT>' ) , <EOL> ) . exists ( ) <EOL> def get_btns ( self , instance ) : <EOL> btn_list = MenuButton . objects . filter ( menu__id = instance [ '<STR_LIT>' ] ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> serializer = RoleButtonPermissionSerializer ( btn_list , many = True , request = self . request ) <EOL> return serializer . data <EOL> def get_columns ( self , instance ) : <EOL> col_list = MenuField . objects . filter ( menu = instance [ '<STR_LIT>' ] ) <EOL> serializer = RoleMenuFieldSerializer ( col_list , many = True , request = self . request ) <EOL> return serializer . data <EOL> class Meta : <EOL> model = Menu <EOL> fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> class RoleMenuButtonPermissionViewSet ( CustomModelViewSet ) : <EOL> queryset = RoleMenuButtonPermission . objects . all ( ) <EOL> serializer_class = RoleMenuButtonPermissionSerializer <EOL> create_serializer_class = RoleMenuButtonPermissionCreateUpdateSerializer <EOL> update_serializer_class = RoleMenuButtonPermissionCreateUpdateSerializer <EOL> extra_filter_class = [ ] <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def get_role_premission ( self , request ) : <EOL> params = request . query_params <EOL> role = params . get ( '<STR_LIT>' , None ) <EOL> if role is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> is_superuser = request . user . is_superuser <EOL> data = [ ] <EOL> if is_superuser : <EOL> queryset = Menu . objects . filter ( status = <NUM_LIT> , is_catalog = False ) . values ( '<STR_LIT>' , '<STR_LIT>' ) . all ( ) <EOL> else : <EOL> role_id = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> menu_list = RoleMenuPermission . objects . filter ( role__in = role_id ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> queryset = Menu . objects . filter ( status = <NUM_LIT> , is_catalog = False , id__in = menu_list ) . values ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> for item in queryset : <EOL> parent_list = Menu . get_all_parent ( item [ '<STR_LIT>' ] ) <EOL> names = [ d [ "<STR_LIT>" ] for d in parent_list ] <EOL> completeName = "<STR_LIT>" . join ( names ) <EOL> isCheck = RoleMenuPermission . objects . filter ( <EOL> menu__id = item [ '<STR_LIT>' ] , <EOL> role__id = role , <EOL> ) . exists ( ) <EOL> mbCheck = RoleMenuButtonPermission . objects . filter ( <EOL> menu_button = OuterRef ( "<STR_LIT>" ) , <EOL> role__id = role , <EOL> ) <EOL> btns = MenuButton . objects . filter ( <EOL> menu__id = item [ '<STR_LIT>' ] , <EOL> ) . annotate ( isCheck = Exists ( mbCheck ) ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , <EOL> data_range = F ( '<STR_LIT>' ) ) <EOL> dicts = { <EOL> '<STR_LIT>' : completeName , <EOL> '<STR_LIT>' : item [ '<STR_LIT>' ] , <EOL> '<STR_LIT>' : isCheck , <EOL> '<STR_LIT>' : btns , <EOL> } <EOL> data . append ( dicts ) <EOL> return DetailResponse ( data = data ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = True , permission_classes = [ IsAuthenticated ] ) <EOL> def set_role_premission ( self , request , pk ) : <EOL> body = request . data <EOL> RoleMenuPermission . objects . filter ( role = pk ) . delete ( ) <EOL> RoleMenuButtonPermission . objects . filter ( role = pk ) . delete ( ) <EOL> for menu in body : <EOL> if menu . get ( '<STR_LIT>' ) : <EOL> menu_parent = Menu . get_all_parent ( menu . get ( '<STR_LIT>' ) ) <EOL> role_menu_permission_list = [ ] <EOL> for d in menu_parent : <EOL> role_menu_permission_list . append ( RoleMenuPermission ( role_id = pk , menu_id = d [ "<STR_LIT>" ] ) ) <EOL> RoleMenuPermission . objects . bulk_create ( role_menu_permission_list ) <EOL> for btn in menu . get ( '<STR_LIT>' ) : <EOL> if btn . get ( '<STR_LIT>' ) : <EOL> data_range = btn . get ( '<STR_LIT>' , <NUM_LIT> ) or <NUM_LIT> <EOL> instance = RoleMenuButtonPermission . objects . create ( role_id = pk , menu_button_id = btn . get ( '<STR_LIT>' ) , data_range = data_range ) <EOL> instance . dept . set ( btn . get ( '<STR_LIT>' , [ ] ) ) <EOL> for col in menu . get ( '<STR_LIT>' ) : <EOL> FieldPermission . objects . update_or_create ( role_id = pk , field_id = col . get ( '<STR_LIT>' ) , is_query = col . get ( '<STR_LIT>' ) , is_create = col . get ( '<STR_LIT>' ) , is_update = col . get ( '<STR_LIT>' ) ) <EOL> return DetailResponse ( msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def role_menu_get_button ( self , request ) : <EOL> if params := request . query_params : <EOL> if menu_id := params . get ( '<STR_LIT>' , None ) : <EOL> is_superuser = request . user . is_superuser <EOL> if is_superuser : <EOL> queryset = MenuButton . objects . filter ( menu = menu_id ) . values ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> else : <EOL> role_list = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> queryset = RoleMenuButtonPermission . objects . filter ( <EOL> role__in = role_list , menu_button__menu = menu_id <EOL> ) . values ( btn_id = F ( '<STR_LIT>' ) , name = F ( '<STR_LIT>' ) ) <EOL> return DetailResponse ( data = queryset ) <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def data_scope ( self , request ) : <EOL> is_superuser = request . user . is_superuser <EOL> if is_superuser : <EOL> data = [ <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } <EOL> ] <EOL> return DetailResponse ( data = data ) <EOL> else : <EOL> data = [ ] <EOL> role_list = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> if params := request . query_params : <EOL> if menu_button_id := params . get ( '<STR_LIT>' , None ) : <EOL> role_queryset = RoleMenuButtonPermission . objects . filter ( <EOL> role__in = role_list , menu_button__id = menu_button_id <EOL> ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> data_range_list = list ( set ( role_queryset ) ) <EOL> for item in data_range_list : <EOL> if item == <NUM_LIT> : <EOL> data = [ { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } ] <EOL> elif item == <NUM_LIT> : <EOL> data = [ { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } ] <EOL> elif item == <NUM_LIT> : <EOL> data = [ { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } ] <EOL> elif item == <NUM_LIT> : <EOL> data = [ { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , ] <EOL> elif item == <NUM_LIT> : <EOL> data = [ { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } , <EOL> { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : '<STR_LIT>' <EOL> } ] <EOL> else : <EOL> data = [ ] <EOL> return DetailResponse ( data = data ) <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def role_to_dept_all ( self , request ) : <EOL> params = request . query_params <EOL> is_superuser = request . user . is_superuser <EOL> if is_superuser : <EOL> queryset = Dept . objects . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> else : <EOL> if not params : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> menu_button = params . get ( '<STR_LIT>' ) <EOL> if menu_button is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> role_list = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> queryset = RoleMenuButtonPermission . objects . filter ( role__in = role_list , menu_button = None ) . values ( <EOL> dept_id = F ( '<STR_LIT>' ) , <EOL> name = F ( '<STR_LIT>' ) , <EOL> parent = F ( '<STR_LIT>' ) <EOL> ) <EOL> return DetailResponse ( data = queryset ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def menu_to_button ( self , request ) : <EOL> params = request . query_params <EOL> menu_id = params . get ( '<STR_LIT>' , None ) <EOL> if menu_id is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> is_superuser = request . user . is_superuser <EOL> if is_superuser : <EOL> queryset = RoleMenuButtonPermission . objects . filter ( menu_button__menu = menu_id ) . values ( <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' <EOL> ) <EOL> return DetailResponse ( data = queryset ) <EOL> else : <EOL> if params : <EOL> role_id = params . get ( '<STR_LIT>' , None ) <EOL> if role_id is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> queryset = RoleMenuButtonPermission . objects . filter ( role = role_id , menu_button__menu = menu_id ) . values ( <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' <EOL> ) <EOL> return DetailResponse ( data = queryset ) <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def role_to_menu ( self , request ) : <EOL> params = request . query_params <EOL> role_id = params . get ( '<STR_LIT>' , None ) <EOL> if role_id is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> queryset = RoleMenuPermission . objects . filter ( role_id = role_id ) . values_list ( '<STR_LIT>' , flat = True ) . distinct ( ) <EOL> return DetailResponse ( data = queryset ) <EOL> </s>
<s> import os <EOL> exclude = [ "<STR_LIT>" ] <EOL> for root , dirs , files in os . walk ( '<STR_LIT>' ) : <EOL> dirs [ : ] = list ( set ( dirs ) - set ( exclude ) ) <EOL> if '<STR_LIT>' in dirs : <EOL> dir = dirs [ dirs . index ( '<STR_LIT>' ) ] <EOL> for root_j , dirs_j , files_j in os . walk ( os . path . join ( root , dir ) ) : <EOL> for file_k in files_j : <EOL> if file_k != '<STR_LIT>' : <EOL> dst_file = os . path . join ( root_j , file_k ) <EOL> print ( '<STR_LIT>' , dst_file ) <EOL> os . remove ( dst_file ) <EOL> </s>
<s> from django . urls import path <EOL> from rest_framework import routers <EOL> from dvadmin . system . views . api_white_list import ApiWhiteListViewSet <EOL> from dvadmin . system . views . area import AreaViewSet <EOL> from dvadmin . system . views . clause import PrivacyView , TermsServiceView <EOL> from dvadmin . system . views . dept import DeptViewSet <EOL> from dvadmin . system . views . dictionary import DictionaryViewSet <EOL> from dvadmin . system . views . file_list import FileViewSet <EOL> from dvadmin . system . views . login_log import LoginLogViewSet <EOL> from dvadmin . system . views . menu import MenuViewSet <EOL> from dvadmin . system . views . menu_button import MenuButtonViewSet <EOL> from dvadmin . system . views . message_center import MessageCenterViewSet <EOL> from dvadmin . system . views . operation_log import OperationLogViewSet <EOL> from dvadmin . system . views . role import RoleViewSet <EOL> from dvadmin . system . views . role_menu import RoleMenuPermissionViewSet <EOL> from dvadmin . system . views . role_menu_button_permission import RoleMenuButtonPermissionViewSet <EOL> from dvadmin . system . views . system_config import SystemConfigViewSet <EOL> from dvadmin . system . views . user import UserViewSet <EOL> from dvadmin . system . views . menu_field import MenuFieldViewSet <EOL> system_url = routers . SimpleRouter ( ) <EOL> system_url . register ( r'<STR_LIT>' , MenuViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , MenuButtonViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , RoleViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , DeptViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , UserViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , OperationLogViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , DictionaryViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , AreaViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , FileViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , ApiWhiteListViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , SystemConfigViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , MessageCenterViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , RoleMenuButtonPermissionViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , RoleMenuPermissionViewSet ) <EOL> system_url . register ( r'<STR_LIT>' , MenuFieldViewSet ) <EOL> urlpatterns = [ <EOL> path ( '<STR_LIT>' , UserViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' , } ) ) , <EOL> path ( '<STR_LIT>' , UserViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , SystemConfigViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , SystemConfigViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , SystemConfigViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , SystemConfigViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , LoginLogViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , LoginLogViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , DeptViewSet . as_view ( { '<STR_LIT>' : '<STR_LIT>' } ) ) , <EOL> path ( '<STR_LIT>' , PrivacyView . as_view ( ) ) , <EOL> path ( '<STR_LIT>' , TermsServiceView . as_view ( ) ) , <EOL> ] <EOL> urlpatterns += system_url . urls <EOL> </s>
<s> from rest_framework . response import Response <EOL> class SuccessResponse ( Response ) : <EOL> def __init__ ( self , data = None , msg = '<STR_LIT>' , status = None , template_name = None , headers = None , exception = False , <EOL> content_type = None , page = <NUM_LIT> , limit = <NUM_LIT> , total = <NUM_LIT> ) : <EOL> std_data = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : page , <EOL> "<STR_LIT>" : limit , <EOL> "<STR_LIT>" : total , <EOL> "<STR_LIT>" : data , <EOL> "<STR_LIT>" : msg <EOL> } <EOL> super ( ) . __init__ ( std_data , status , template_name , headers , exception , content_type ) <EOL> class DetailResponse ( Response ) : <EOL> def __init__ ( self , data = None , msg = '<STR_LIT>' , status = None , template_name = None , headers = None , exception = False , <EOL> content_type = None , ) : <EOL> std_data = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : data , <EOL> "<STR_LIT>" : msg <EOL> } <EOL> super ( ) . __init__ ( std_data , status , template_name , headers , exception , content_type ) <EOL> class ErrorResponse ( Response ) : <EOL> def __init__ ( self , data = None , msg = '<STR_LIT>' , code = <NUM_LIT> , status = None , template_name = None , headers = None , <EOL> exception = False , content_type = None ) : <EOL> std_data = { <EOL> "<STR_LIT>" : code , <EOL> "<STR_LIT>" : data , <EOL> "<STR_LIT>" : msg <EOL> } <EOL> super ( ) . __init__ ( std_data , status , template_name , headers , exception , content_type ) <EOL> </s>
<s> import urllib <EOL> from asgiref . sync import sync_to_async , async_to_sync <EOL> from channels . db import database_sync_to_async <EOL> from channels . generic . websocket import AsyncJsonWebsocketConsumer , AsyncWebsocketConsumer <EOL> import json <EOL> from channels . layers import get_channel_layer <EOL> from jwt import InvalidSignatureError <EOL> from rest_framework . request import Request <EOL> from application import settings <EOL> from dvadmin . system . models import MessageCenter , Users , MessageCenterTargetUser <EOL> from dvadmin . system . views . message_center import MessageCenterTargetUserSerializer <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> send_dict = { } <EOL> def set_message ( sender , msg_type , msg , unread = <NUM_LIT> ) : <EOL> text = { <EOL> '<STR_LIT>' : sender , <EOL> '<STR_LIT>' : msg_type , <EOL> '<STR_LIT>' : msg , <EOL> '<STR_LIT>' : unread <EOL> } <EOL> return text <EOL> @ database_sync_to_async <EOL> def _get_message_center_instance ( message_id ) : <EOL> from dvadmin . system . models import MessageCenter <EOL> _MessageCenter = MessageCenter . objects . filter ( id = message_id ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> if _MessageCenter : <EOL> return _MessageCenter <EOL> else : <EOL> return [ ] <EOL> @ database_sync_to_async <EOL> def _get_message_unread ( user_id ) : <EOL> from dvadmin . system . models import MessageCenterTargetUser <EOL> count = MessageCenterTargetUser . objects . filter ( users = user_id , is_read = False ) . count ( ) <EOL> return count or <NUM_LIT> <EOL> def request_data ( scope ) : <EOL> query_string = scope . get ( '<STR_LIT>' , b'<STR_LIT>' ) . decode ( '<STR_LIT>' ) <EOL> qs = urllib . parse . parse_qs ( query_string ) <EOL> return qs <EOL> class DvadminWebSocket ( AsyncJsonWebsocketConsumer ) : <EOL> async def connect ( self ) : <EOL> try : <EOL> import jwt <EOL> self . service_uid = self . scope [ "<STR_LIT>" ] [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> decoded_result = jwt . decode ( self . service_uid , settings . SECRET_KEY , algorithms = [ "<STR_LIT>" ] ) <EOL> if decoded_result : <EOL> self . user_id = decoded_result . get ( '<STR_LIT>' ) <EOL> self . chat_group_name = "<STR_LIT>" + str ( self . user_id ) <EOL> await self . channel_layer . group_add ( <EOL> self . chat_group_name , <EOL> self . channel_name <EOL> ) <EOL> await self . accept ( ) <EOL> unread_count = await _get_message_unread ( self . user_id ) <EOL> if unread_count == <NUM_LIT> : <EOL> await self . send_json ( set_message ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) ) <EOL> else : <EOL> await self . send_json ( <EOL> set_message ( '<STR_LIT>' , '<STR_LIT>' , "<STR_LIT>" , <EOL> unread = unread_count ) ) <EOL> except InvalidSignatureError : <EOL> await self . disconnect ( None ) <EOL> async def disconnect ( self , close_code ) : <EOL> await self . channel_layer . group_discard ( self . chat_group_name , self . channel_name ) <EOL> print ( "<STR_LIT>" ) <EOL> try : <EOL> await self . close ( close_code ) <EOL> except Exception : <EOL> pass <EOL> class MegCenter ( DvadminWebSocket ) : <EOL> async def receive ( self , text_data ) : <EOL> text_data_json = json . loads ( text_data ) <EOL> message_id = text_data_json . get ( '<STR_LIT>' , None ) <EOL> user_list = await _get_message_center_instance ( message_id ) <EOL> for send_user in user_list : <EOL> await self . channel_layer . group_send ( <EOL> "<STR_LIT>" + str ( send_user ) , <EOL> { '<STR_LIT>' : '<STR_LIT>' , '<STR_LIT>' : text_data_json } <EOL> ) <EOL> async def push_message ( self , event ) : <EOL> message = event [ '<STR_LIT>' ] <EOL> await self . send ( text_data = json . dumps ( message ) ) <EOL> class MessageCreateSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = MessageCenter <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> def websocket_push ( user_id , message ) : <EOL> username = "<STR_LIT>" + str ( user_id ) <EOL> channel_layer = get_channel_layer ( ) <EOL> async_to_sync ( channel_layer . group_send ) ( <EOL> username , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : message <EOL> } <EOL> ) <EOL> def create_message_push ( title : str , content : str , target_type : int = <NUM_LIT> , target_user : list = None , target_dept = None , <EOL> target_role = None , message : dict = None , request = Request ) : <EOL> if message is None : <EOL> message = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : None } <EOL> if target_role is None : <EOL> target_role = [ ] <EOL> if target_dept is None : <EOL> target_dept = [ ] <EOL> data = { <EOL> "<STR_LIT>" : title , <EOL> "<STR_LIT>" : content , <EOL> "<STR_LIT>" : target_type , <EOL> "<STR_LIT>" : target_user , <EOL> "<STR_LIT>" : target_dept , <EOL> "<STR_LIT>" : target_role <EOL> } <EOL> message_center_instance = MessageCreateSerializer ( data = data , request = request ) <EOL> message_center_instance . is_valid ( raise_exception = True ) <EOL> message_center_instance . save ( ) <EOL> users = target_user or [ ] <EOL> if target_type in [ <NUM_LIT> ] : <EOL> users = Users . objects . filter ( role__id__in = target_role ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> if target_type in [ <NUM_LIT> ] : <EOL> users = Users . objects . filter ( dept__id__in = target_dept ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> if target_type in [ <NUM_LIT> ] : <EOL> users = Users . objects . values_list ( '<STR_LIT>' , flat = True ) <EOL> targetuser_data = [ ] <EOL> for user in users : <EOL> targetuser_data . append ( { <EOL> "<STR_LIT>" : message_center_instance . instance . id , <EOL> "<STR_LIT>" : user <EOL> } ) <EOL> targetuser_instance = MessageCenterTargetUserSerializer ( data = targetuser_data , many = True , request = request ) <EOL> targetuser_instance . is_valid ( raise_exception = True ) <EOL> targetuser_instance . save ( ) <EOL> for user in users : <EOL> username = "<STR_LIT>" + str ( user ) <EOL> unread_count = async_to_sync ( _get_message_unread ) ( user ) <EOL> channel_layer = get_channel_layer ( ) <EOL> async_to_sync ( channel_layer . group_send ) ( <EOL> username , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : { ** message , '<STR_LIT>' : unread_count } <EOL> } <EOL> ) <EOL> </s>
<s> from dvadmin . system . models import OperationLog <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class OperationLogSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = OperationLog <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class OperationLogCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = OperationLog <EOL> fields = '<STR_LIT>' <EOL> class OperationLogViewSet ( CustomModelViewSet ) : <EOL> queryset = OperationLog . objects . order_by ( '<STR_LIT>' ) <EOL> serializer_class = OperationLogSerializer <EOL> </s>
<s> import base64 <EOL> import hashlib <EOL> from datetime import datetime , timedelta <EOL> from captcha . views import CaptchaStore , captcha_image <EOL> from django . contrib import auth <EOL> from django . contrib . auth import login <EOL> from django . shortcuts import redirect <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from drf_yasg import openapi <EOL> from drf_yasg . utils import swagger_auto_schema <EOL> from rest_framework import serializers <EOL> from rest_framework . views import APIView <EOL> from rest_framework_simplejwt . serializers import TokenObtainPairSerializer <EOL> from rest_framework_simplejwt . views import TokenObtainPairView <EOL> from django . conf import settings <EOL> from application import dispatch <EOL> from dvadmin . system . models import Users <EOL> from dvadmin . utils . json_response import ErrorResponse , DetailResponse <EOL> from dvadmin . utils . request_util import save_login_log <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . validator import CustomValidationError <EOL> class CaptchaView ( APIView ) : <EOL> authentication_classes = [ ] <EOL> permission_classes = [ ] <EOL> @ swagger_auto_schema ( <EOL> responses = { "<STR_LIT>" : openapi . Response ( "<STR_LIT>" ) } , <EOL> security = [ ] , <EOL> operation_id = "<STR_LIT>" , <EOL> operation_description = "<STR_LIT>" , <EOL> ) <EOL> def get ( self , request ) : <EOL> data = { } <EOL> if dispatch . get_system_config_values ( "<STR_LIT>" ) : <EOL> hashkey = CaptchaStore . generate_key ( ) <EOL> id = CaptchaStore . objects . filter ( hashkey = hashkey ) . first ( ) . id <EOL> imgage = captcha_image ( request , hashkey ) <EOL> image_base = base64 . b64encode ( imgage . content ) <EOL> data = { <EOL> "<STR_LIT>" : id , <EOL> "<STR_LIT>" : "<STR_LIT>" + image_base . decode ( "<STR_LIT>" ) , <EOL> } <EOL> return DetailResponse ( data = data ) <EOL> class LoginSerializer ( TokenObtainPairSerializer ) : <EOL> captcha = serializers . CharField ( <EOL> max_length = <NUM_LIT> , required = False , allow_null = True , allow_blank = True <EOL> ) <EOL> class Meta : <EOL> model = Users <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> default_error_messages = { "<STR_LIT>" : _ ( "<STR_LIT>" ) } <EOL> def validate ( self , attrs ) : <EOL> captcha = self . initial_data . get ( "<STR_LIT>" , None ) <EOL> if dispatch . get_system_config_values ( "<STR_LIT>" ) : <EOL> if captcha is None : <EOL> raise CustomValidationError ( "<STR_LIT>" ) <EOL> self . image_code = CaptchaStore . objects . filter ( <EOL> id = self . initial_data [ "<STR_LIT>" ] <EOL> ) . first ( ) <EOL> five_minute_ago = datetime . now ( ) - timedelta ( hours = <NUM_LIT> , minutes = <NUM_LIT> , seconds = <NUM_LIT> ) <EOL> if self . image_code and five_minute_ago > self . image_code . expiration : <EOL> self . image_code and self . image_code . delete ( ) <EOL> raise CustomValidationError ( "<STR_LIT>" ) <EOL> else : <EOL> if self . image_code and ( <EOL> self . image_code . response == captcha <EOL> or self . image_code . challenge == captcha <EOL> ) : <EOL> self . image_code and self . image_code . delete ( ) <EOL> else : <EOL> self . image_code and self . image_code . delete ( ) <EOL> raise CustomValidationError ( "<STR_LIT>" ) <EOL> user = Users . objects . get ( username = attrs [ '<STR_LIT>' ] ) <EOL> if not user . is_active : <EOL> raise CustomValidationError ( "<STR_LIT>" ) <EOL> data = super ( ) . validate ( attrs ) <EOL> data [ "<STR_LIT>" ] = self . user . name <EOL> data [ "<STR_LIT>" ] = self . user . id <EOL> data [ "<STR_LIT>" ] = self . user . avatar <EOL> data [ '<STR_LIT>' ] = self . user . user_type <EOL> dept = getattr ( self . user , '<STR_LIT>' , None ) <EOL> if dept : <EOL> data [ '<STR_LIT>' ] = { <EOL> '<STR_LIT>' : dept . id , <EOL> '<STR_LIT>' : dept . name , <EOL> } <EOL> role = getattr ( self . user , '<STR_LIT>' , None ) <EOL> if role : <EOL> data [ '<STR_LIT>' ] = role . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> request = self . context . get ( "<STR_LIT>" ) <EOL> request . user = self . user <EOL> save_login_log ( request = request ) <EOL> return { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : data } <EOL> class LoginView ( TokenObtainPairView ) : <EOL> serializer_class = LoginSerializer <EOL> permission_classes = [ ] <EOL> class LoginTokenSerializer ( TokenObtainPairSerializer ) : <EOL> class Meta : <EOL> model = Users <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> default_error_messages = { "<STR_LIT>" : _ ( "<STR_LIT>" ) } <EOL> def validate ( self , attrs ) : <EOL> if not getattr ( settings , "<STR_LIT>" , False ) : <EOL> return { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : None } <EOL> data = super ( ) . validate ( attrs ) <EOL> data [ "<STR_LIT>" ] = self . user . name <EOL> data [ "<STR_LIT>" ] = self . user . id <EOL> return { "<STR_LIT>" : <NUM_LIT> , "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : data } <EOL> class LoginTokenView ( TokenObtainPairView ) : <EOL> serializer_class = LoginTokenSerializer <EOL> permission_classes = [ ] <EOL> class LogoutView ( APIView ) : <EOL> def post ( self , request ) : <EOL> return DetailResponse ( msg = "<STR_LIT>" ) <EOL> class ApiLoginSerializer ( CustomModelSerializer ) : <EOL> username = serializers . CharField ( ) <EOL> password = serializers . CharField ( ) <EOL> class Meta : <EOL> model = Users <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> class ApiLogin ( APIView ) : <EOL> serializer_class = ApiLoginSerializer <EOL> authentication_classes = [ ] <EOL> permission_classes = [ ] <EOL> def post ( self , request ) : <EOL> username = request . data . get ( "<STR_LIT>" ) <EOL> password = request . data . get ( "<STR_LIT>" ) <EOL> user_obj = auth . authenticate ( <EOL> request , <EOL> username = username , <EOL> password = hashlib . md5 ( password . encode ( encoding = "<STR_LIT>" ) ) . hexdigest ( ) , <EOL> ) <EOL> if user_obj : <EOL> login ( request , user_obj ) <EOL> return redirect ( "<STR_LIT>" ) <EOL> else : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> </s>
<s> from django . db . models import F <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import FieldPermission , MenuField <EOL> from dvadmin . utils . json_response import DetailResponse <EOL> from dvadmin . utils . models import get_custom_app_models <EOL> class FieldPermissionMixin : <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def field_permission ( self , request ) : <EOL> finded = False <EOL> for model in get_custom_app_models ( ) : <EOL> if model [ '<STR_LIT>' ] is self . serializer_class . Meta . model : <EOL> finded = True <EOL> break <EOL> if finded : <EOL> break <EOL> if finded is False : <EOL> return [ ] <EOL> user = request . user <EOL> if user . is_superuser == <NUM_LIT> : <EOL> data = MenuField . objects . filter ( model = model [ '<STR_LIT>' ] ) . values ( '<STR_LIT>' ) <EOL> for item in data : <EOL> item [ '<STR_LIT>' ] = True <EOL> item [ '<STR_LIT>' ] = True <EOL> item [ '<STR_LIT>' ] = True <EOL> else : <EOL> roles = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> data = FieldPermission . objects . filter ( <EOL> field__model = model [ '<STR_LIT>' ] , role__in = roles <EOL> ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , field_name = F ( '<STR_LIT>' ) ) <EOL> return DetailResponse ( data = data ) <EOL> </s>
<s> import json <EOL> import requests <EOL> from django . conf import settings <EOL> from django . contrib . auth . models import AbstractBaseUser <EOL> from django . contrib . auth . models import AnonymousUser <EOL> from django . urls . resolvers import ResolverMatch <EOL> from rest_framework_simplejwt . authentication import JWTAuthentication <EOL> from user_agents import parse <EOL> from dvadmin . system . models import LoginLog <EOL> def get_request_user ( request ) : <EOL> user : AbstractBaseUser = getattr ( request , '<STR_LIT>' , None ) <EOL> if user and user . is_authenticated : <EOL> return user <EOL> try : <EOL> user , tokrn = JWTAuthentication ( ) . authenticate ( request ) <EOL> except Exception as e : <EOL> pass <EOL> return user or AnonymousUser ( ) <EOL> def get_request_ip ( request ) : <EOL> x_forwarded_for = request . META . get ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> if x_forwarded_for : <EOL> ip = x_forwarded_for . split ( '<STR_LIT>' ) [ - <NUM_LIT> ] . strip ( ) <EOL> return ip <EOL> ip = request . META . get ( '<STR_LIT>' , '<STR_LIT>' ) or getattr ( request , '<STR_LIT>' , None ) <EOL> return ip or '<STR_LIT>' <EOL> def get_request_data ( request ) : <EOL> request_data = getattr ( request , '<STR_LIT>' , None ) <EOL> if request_data : <EOL> return request_data <EOL> data : dict = { ** request . GET . dict ( ) , ** request . POST . dict ( ) } <EOL> if not data : <EOL> try : <EOL> body = request . body <EOL> if body : <EOL> data = json . loads ( body ) <EOL> except Exception as e : <EOL> pass <EOL> if not isinstance ( data , dict ) : <EOL> data = { '<STR_LIT>' : data } <EOL> return data <EOL> def get_request_path ( request , * args , ** kwargs ) : <EOL> request_path = getattr ( request , '<STR_LIT>' , None ) <EOL> if request_path : <EOL> return request_path <EOL> values = [ ] <EOL> for arg in args : <EOL> if len ( arg ) == <NUM_LIT> : <EOL> continue <EOL> if isinstance ( arg , str ) : <EOL> values . append ( arg ) <EOL> elif isinstance ( arg , ( tuple , set , list ) ) : <EOL> values . extend ( arg ) <EOL> elif isinstance ( arg , dict ) : <EOL> values . extend ( arg . values ( ) ) <EOL> if len ( values ) == <NUM_LIT> : <EOL> return request . path <EOL> path : str = request . path <EOL> for value in values : <EOL> path = path . replace ( '<STR_LIT>' + value , '<STR_LIT>' + '<STR_LIT>' ) <EOL> return path <EOL> def get_request_canonical_path ( request , ) : <EOL> request_path = getattr ( request , '<STR_LIT>' , None ) <EOL> if request_path : <EOL> return request_path <EOL> path : str = request . path <EOL> resolver_match : ResolverMatch = request . resolver_match <EOL> for value in resolver_match . args : <EOL> path = path . replace ( f"<STR_LIT>" , "<STR_LIT>" ) <EOL> for key , value in resolver_match . kwargs . items ( ) : <EOL> if key == '<STR_LIT>' : <EOL> path = path . replace ( f"<STR_LIT>" , f"<STR_LIT>" ) <EOL> continue <EOL> path = path . replace ( f"<STR_LIT>" , f"<STR_LIT>" ) <EOL> return path <EOL> def get_browser ( request , ) : <EOL> ua_string = request . META [ '<STR_LIT>' ] <EOL> user_agent = parse ( ua_string ) <EOL> return user_agent . get_browser ( ) <EOL> def get_os ( request , ) : <EOL> ua_string = request . META [ '<STR_LIT>' ] <EOL> user_agent = parse ( ua_string ) <EOL> return user_agent . get_os ( ) <EOL> def get_verbose_name ( queryset = None , view = None , model = None ) : <EOL> try : <EOL> if queryset is not None and hasattr ( queryset , '<STR_LIT>' ) : <EOL> model = queryset . model <EOL> elif view and hasattr ( view . get_queryset ( ) , '<STR_LIT>' ) : <EOL> model = view . get_queryset ( ) . model <EOL> elif view and hasattr ( view . get_serializer ( ) , '<STR_LIT>' ) and hasattr ( view . get_serializer ( ) . Meta , '<STR_LIT>' ) : <EOL> model = view . get_serializer ( ) . Meta . model <EOL> if model : <EOL> return getattr ( model , '<STR_LIT>' ) . verbose_name <EOL> else : <EOL> model = queryset . model . _meta . verbose_name <EOL> except Exception as e : <EOL> pass <EOL> return model if model else "<STR_LIT>" <EOL> def get_ip_analysis ( ip ) : <EOL> data = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } <EOL> if ip != '<STR_LIT>' and ip : <EOL> if getattr ( settings , '<STR_LIT>' , True ) : <EOL> try : <EOL> res = requests . get ( url = '<STR_LIT>' , params = { "<STR_LIT>" : ip } , timeout = <NUM_LIT> ) <EOL> if res . status_code == <NUM_LIT> : <EOL> res_data = res . json ( ) <EOL> if res_data . get ( '<STR_LIT>' ) == <NUM_LIT> : <EOL> data = res_data . get ( '<STR_LIT>' ) <EOL> return data <EOL> except Exception as e : <EOL> print ( e ) <EOL> return data <EOL> def save_login_log ( request ) : <EOL> ip = get_request_ip ( request = request ) <EOL> analysis_data = get_ip_analysis ( ip ) <EOL> analysis_data [ '<STR_LIT>' ] = request . user . username <EOL> analysis_data [ '<STR_LIT>' ] = ip <EOL> analysis_data [ '<STR_LIT>' ] = str ( parse ( request . META [ '<STR_LIT>' ] ) ) <EOL> analysis_data [ '<STR_LIT>' ] = get_browser ( request ) <EOL> analysis_data [ '<STR_LIT>' ] = get_os ( request ) <EOL> analysis_data [ '<STR_LIT>' ] = request . user . id <EOL> analysis_data [ '<STR_LIT>' ] = getattr ( request . user , '<STR_LIT>' , '<STR_LIT>' ) <EOL> LoginLog . objects . create ( ** analysis_data ) <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> os . environ [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> import os <EOL> import sys <EOL> from pathlib import Path <EOL> from datetime import timedelta <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent <EOL> from conf . env import * <EOL> SECRET_KEY = "<STR_LIT>" <EOL> PLUGINS_PATH = os . path . join ( BASE_DIR , "<STR_LIT>" ) <EOL> sys . path . insert ( <NUM_LIT> , os . path . join ( PLUGINS_PATH ) ) <EOL> [ <EOL> sys . path . insert ( <NUM_LIT> , os . path . join ( PLUGINS_PATH , ele ) ) <EOL> for ele in os . listdir ( PLUGINS_PATH ) <EOL> if os . path . isdir ( os . path . join ( PLUGINS_PATH , ele ) ) and not ele . startswith ( "<STR_LIT>" ) <EOL> ] <EOL> DEBUG = locals ( ) . get ( "<STR_LIT>" , True ) <EOL> ALLOWED_HOSTS = locals ( ) . get ( "<STR_LIT>" , [ "<STR_LIT>" ] ) <EOL> COLUMN_EXCLUDE_APPS = [ '<STR_LIT>' , '<STR_LIT>' ] + locals ( ) . get{ <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ os . path . join ( BASE_DIR , "<STR_LIT>" ) ] , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = "<STR_LIT>" <EOL> DATABASES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : DATABASE_ENGINE , <EOL> "<STR_LIT>" : DATABASE_NAME , <EOL> "<STR_LIT>" : DATABASE_USER , <EOL> "<STR_LIT>" : DATABASE_PASSWORD , <EOL> "<STR_LIT>" : DATABASE_HOST , <EOL> "<STR_LIT>" : DATABASE_PORT , <EOL> } <EOL> } <EOL> AUTH_USER_MODEL = "<STR_LIT>" <EOL> USERNAME_FIELD = "<STR_LIT>" <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ] <EOL> LANGUAGE_CODE = "<STR_LIT>" <EOL> TIME_ZONE = "<STR_LIT>" <EOL> USE_I18N = True <EOL> USE_L10N = True <EOL> USE_TZ = False <EOL> STATIC_URL = "<STR_LIT>" <EOL> STATICFILES_DIRS = [ <EOL> os . path . join ( BASE_DIR , "<STR_LIT>" ) , <EOL> ] <EOL> MEDIA_ROOT = "<STR_LIT>" <EOL> MEDIA_URL = "<STR_LIT>" <EOL> STATICFILES_FINDERS = ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" <EOL> ) <EOL> CORS_ORIGIN_ALLOW_ALL = True <EOL> CORS_ALLOW_CREDENTIALS = True <EOL> ASGI_APPLICATION = '<STR_LIT>' <EOL> CHANNEL_LAYERS = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } <EOL> } <EOL> SERVER_LOGS_FILE = os . path . join ( BASE_DIR , "<STR_LIT>" , "<STR_LIT>" ) <EOL> ERROR_LOGS_FILE = os . path . join ( BASE_DIR , "<STR_LIT>" , "<STR_LIT>" ) <EOL> LOGS_FILE = os . path . join ( BASE_DIR , "<STR_LIT>" ) <EOL> if not os . path . exists ( os . path . join ( BASE_DIR , "<STR_LIT>" ) ) : <EOL> os . makedirs ( os . path . join ( BASE_DIR , "<STR_LIT>" ) ) <EOL> STANDARD_LOG_FORMAT = ( <EOL> "<STR_LIT>" <EOL> ) <EOL> CONSOLE_LOG_FORMAT = ( <EOL> "<STR_LIT>" <EOL> ) <EOL> LOGGING = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : False , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { "<STR_LIT>" : STANDARD_LOG_FORMAT } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : CONSOLE_LOG_FORMAT , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : CONSOLE_LOG_FORMAT , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : SERVER_LOGS_FILE , <EOL> "<STR_LIT>" : <NUM_LIT> * <NUM_LIT> * <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ERROR_LOGS_FILE , <EOL> "<STR_LIT>" : <NUM_LIT> * <NUM_LIT> * <NUM_LIT> , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> '<STR_LIT>' : False , <EOL> '<STR_LIT>' : "<STR_LIT>" <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } , <EOL> } , <EOL> } <EOL> REST_FRAMEWORK = { <EOL> '<STR_LIT>' : ( <EOL> '<STR_LIT>' , <EOL> '<STR_LIT>' , <EOL> ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) , <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> AUTHENTICATION_BACKENDS = [ "<STR_LIT>" ] <EOL> SIMPLE_JWT = { <EOL> "<STR_LIT>" : timedelta ( minutes = <NUM_LIT> ) , <EOL> "<STR_LIT>" : timedelta ( days = <NUM_LIT> ) , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , ) , <EOL> "<STR_LIT>" : True , <EOL> } <EOL> SWAGGER_SETTINGS = { <EOL> "<STR_LIT>" : { "<STR_LIT>" : { "<STR_LIT>" : "<STR_LIT>" } } , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> CAPTCHA_IMAGE_SIZE = ( <NUM_LIT> , <NUM_LIT> ) <EOL> CAPTCHA_LENGTH = <NUM_LIT> <EOL> CAPTCHA_TIMEOUT = <NUM_LIT> <EOL> CAPTCHA_OUTPUT_FORMAT = "<STR_LIT>" <EOL> CAPTCHA_FONT_SIZE = <NUM_LIT> <EOL> CAPTCHA_FOREGROUND_COLOR = "<STR_LIT>" <EOL> CAPTCHA_BACKGROUND_COLOR = "<STR_LIT>" <EOL> CAPTCHA_NOISE_FUNCTIONS = ( <EOL> "<STR_LIT>" , <EOL> ) <EOL> CAPTCHA_CHALLENGE_FUNCT = "<STR_LIT>" <EOL> DEFAULT_AUTO_FIELD = "<STR_LIT>" <EOL> API_LOG_ENABLE = True <EOL> API_LOG_METHODS = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> API_MODEL_MAP = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> DJANGO_CELERY_BEAT_TZ_AWARE = False <EOL> CELERY_TIMEZONE = "<STR_LIT>" <EOL> STATICFILES_STORAGE = "<STR_LIT>" <EOL> ALL_MODELS_OBJECTS = [ ] <EOL> INITIALIZE_LIST = [ ] <EOL> INITIALIZE_RESET_LIST = [ ] <EOL> TABLE_PREFIX = locals ( ) . get ( '<STR_LIT>' , "<STR_LIT>" ) <EOL> SYSTEM_CONFIG = { } <EOL> DICTIONARY_CONFIG = { } <EOL> TENANT_SHARED_APPS = [ ] <EOL> PLUGINS_URL_PATTERNS = [ ] <EOL> </s>
<s> import logging <EOL> from django . core . management . base import BaseCommand <EOL> from application import settings <EOL> logger = logging . getLogger ( __name__ ) <EOL> class Command ( BaseCommand ) : <EOL> def add_arguments ( self , parser ) : <EOL> parser . add_argument ( <EOL> "<STR_LIT>" , <EOL> nargs = "<STR_LIT>" , <EOL> type = str , <EOL> ) <EOL> parser . add_argument ( "<STR_LIT>" , nargs = "<STR_LIT>" ) <EOL> parser . add_argument ( "<STR_LIT>" , nargs = "<STR_LIT>" ) <EOL> parser . add_argument ( "<STR_LIT>" , nargs = "<STR_LIT>" ) <EOL> parser . add_argument ( "<STR_LIT>" , nargs = "<STR_LIT>" ) <EOL> def handle ( self , * args , ** options ) : <EOL> reset = False <EOL> if isinstance ( options . get ( "<STR_LIT>" ) , list ) or isinstance ( options . get ( "<STR_LIT>" ) , list ) : <EOL> reset = True <EOL> if isinstance ( options . get ( "<STR_LIT>" ) , list ) or isinstance ( options . get ( "<STR_LIT>" ) , list ) : <EOL> reset = False <EOL> for app in settings . INSTALLED_APPS : <EOL> try : <EOL> exec ( <EOL> ) <EOL> except ModuleNotFoundError : <EOL> try : <EOL> exec ( <EOL> ) <EOL> except ModuleNotFoundError : <EOL> pass <EOL> print ( "<STR_LIT>" ) <EOL> </s>
<s> import django_filters <EOL> from django . db . models import Q <EOL> from django_filters . rest_framework import BooleanFilter <EOL> from rest_framework import serializers <EOL> from rest_framework . views import APIView <EOL> from application import dispatch <EOL> from dvadmin . system . models import SystemConfig <EOL> from dvadmin . utils . json_response import DetailResponse , SuccessResponse , ErrorResponse <EOL> from dvadmin . utils . models import get_all_models_objects <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . validator import CustomValidationError <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class SystemConfigCreateSerializer ( CustomModelSerializer ) : <EOL> form_item_type_label = serializers . CharField ( source = '<STR_LIT>' , read_only = True ) <EOL> class Meta : <EOL> model = SystemConfig <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> def validate_key ( self , value ) : <EOL> instance = SystemConfig . objects . filter ( key = value , parent__isnull = True ) . exists ( ) <EOL> if instance : <EOL> raise CustomValidationError ( '<STR_LIT>' ) <EOL> return value <EOL> class SystemConfigSerializer ( CustomModelSerializer ) : <EOL> form_item_type_label = serializers . CharField ( source = '<STR_LIT>' , read_only = True ) <EOL> class Meta : <EOL> model = SystemConfig <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class SystemConfigChinldernSerializer ( CustomModelSerializer ) : <EOL> children = serializers . SerializerMethodField ( ) <EOL> form_item_type_label = serializers . CharField ( source = '<STR_LIT>' , read_only = True ) <EOL> def get_children ( self , instance ) : <EOL> queryset = SystemConfig . objects . filter ( parent = instance ) <EOL> serializer = SystemConfigSerializer ( queryset , many = True ) <EOL> return serializer . data <EOL> class Meta : <EOL> model = SystemConfig <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class SystemConfigListSerializer ( CustomModelSerializer ) : <EOL> def update ( self , instance , validated_data ) : <EOL> instance_mapping = { obj . id : obj for obj in instance } <EOL> data_mapping = { item [ '<STR_LIT>' ] : item for item in validated_data } <EOL> for obj_id , data in data_mapping . items ( ) : <EOL> instance_obj = instance_mapping . get ( obj_id , None ) <EOL> if instance_obj is None : <EOL> return SystemConfig . objects . create ( ** data ) <EOL> else : <EOL> return instance_obj . objects . update ( ** data ) <EOL> class Meta : <EOL> model = SystemConfig <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class SystemConfigSaveSerializer ( serializers . Serializer ) : <EOL> class Meta : <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> list_serializer_class = SystemConfigListSerializer <EOL> class SystemConfigFilter ( django_filters . rest_framework . FilterSet ) : <EOL> parent__isnull = BooleanFilter ( field_name = '<STR_LIT>' , lookup_expr = "<STR_LIT>" ) <EOL> class Meta : <EOL> model = SystemConfig <EOL> fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> class SystemConfigViewSet ( CustomModelViewSet ) : <EOL> queryset = SystemConfig . objects . order_by ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> serializer_class = SystemConfigChinldernSerializer <EOL> create_serializer_class = SystemConfigCreateSerializer <EOL> retrieve_serializer_class = SystemConfigChinldernSerializer <EOL> filter_class = SystemConfigFilter <EOL> def save_content ( self , request ) : <EOL> body = request . data <EOL> data_mapping = { item [ '<STR_LIT>' ] : item for item in body } <EOL> for obj_id , data in data_mapping . items ( ) : <EOL> instance_obj = SystemConfig . objects . filter ( id = obj_id ) . first ( ) <EOL> if instance_obj is None : <EOL> serializer = SystemConfigCreateSerializer ( data = data ) <EOL> else : <EOL> serializer = SystemConfigCreateSerializer ( instance_obj , data = data ) <EOL> if serializer . is_valid ( raise_exception = True ) : <EOL> serializer . save ( ) <EOL> return DetailResponse ( msg = "<STR_LIT>" ) <EOL> def get_association_table ( self , request ) : <EOL> res = [ ele . get ( '<STR_LIT>' ) for ele in get_all_models_objects ( ) . values ( ) ] <EOL> return DetailResponse ( msg = "<STR_LIT>" , data = res ) <EOL> def get_table_data ( self , request , pk ) : <EOL> instance = SystemConfig . objects . filter ( id = pk ) . first ( ) <EOL> if instance is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> setting = instance . setting <EOL> if setting is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> table = setting . get ( '<STR_LIT>' ) <EOL> model = get_all_models_objects ( table ) . get ( "<STR_LIT>" , { } ) <EOL> queryset = model . objects . values ( ) <EOL> body = request . query_params <EOL> search_value = body . get ( '<STR_LIT>' , None ) <EOL> if search_value : <EOL> search_fields = setting . get ( '<STR_LIT>' ) <EOL> filters = Q ( ) <EOL> filters . connector = '<STR_LIT>' <EOL> for item in search_fields : <EOL> filed = '<STR_LIT>' . format ( item . get ( '<STR_LIT>' ) ) <EOL> filters . children . append ( ( filed , search_value ) ) <EOL> queryset = model . objects . filter ( filters ) . values ( ) <EOL> page = self . paginate_queryset ( queryset ) <EOL> if page is not None : <EOL> return self . get_paginated_response ( queryset ) <EOL> return SuccessResponse ( msg = "<STR_LIT>" , data = queryset , total = len ( queryset ) ) <EOL> def get_relation_info ( self , request ) : <EOL> body = request . query_params <EOL> var_name = body . get ( '<STR_LIT>' , None ) <EOL> table = body . get ( '<STR_LIT>' , None ) <EOL> instance = SystemConfig . objects . filter ( key = var_name , setting__table = table ) . first ( ) <EOL> if instance is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> relation_id = body . get ( '<STR_LIT>' , None ) <EOL> relationIds = [ ] <EOL> if relation_id is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> if instance . form_item_type in [ <NUM_LIT> ] : <EOL> relationIds = [ relation_id ] <EOL> elif instance . form_item_type in [ <NUM_LIT> ] : <EOL> relationIds = relation_id . split ( '<STR_LIT>' ) <EOL> queryset = SystemConfig . objects . filter ( value__in = relationIds ) . first ( ) <EOL> if queryset is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> serializer = SystemConfigChinldernSerializer ( queryset . parent ) <EOL> return DetailResponse ( msg = "<STR_LIT>" , data = serializer . data ) <EOL> class InitSettingsViewSet ( APIView ) : <EOL> authentication_classes = [ ] <EOL> permission_classes = [ ] <EOL> def filter_system_config_values ( self , data : dict ) : <EOL> if not self . request . query_params . get ( '<STR_LIT>' , '<STR_LIT>' ) : <EOL> return data <EOL> new_data = { } <EOL> for key in self . request . query_params . get ( '<STR_LIT>' , '<STR_LIT>' ) . split ( '<STR_LIT>' ) : <EOL> if key : <EOL> new_data . update ( ** dict ( filter ( lambda x : x [ <NUM_LIT> ] . startswith ( key ) , data . items ( ) ) ) ) <EOL> return new_data <EOL> def get ( self , request ) : <EOL> data = dispatch . get_system_config ( ) <EOL> if not data : <EOL> dispatch . refresh_system_config ( ) <EOL> data = dispatch . get_system_config ( ) <EOL> backend_config = [ f"<STR_LIT>" for ele in <EOL> SystemConfig . objects . filter ( status = False , parent_id__isnull = False ) . values ( '<STR_LIT>' , <EOL> '<STR_LIT>' ) ] <EOL> data = dict ( filter ( lambda x : x [ <NUM_LIT> ] not in backend_config , data . items ( ) ) ) <EOL> data = self . filter_system_config_values ( data = data ) <EOL> return DetailResponse ( data = data ) <EOL> </s>
<s> import json <EOL> import os <EOL> from django . apps import apps <EOL> from rest_framework import request <EOL> from application import settings <EOL> from dvadmin . system . models import Users <EOL> class CoreInitialize : <EOL> creator_id = None <EOL> reset = False <EOL> request = request <EOL> file_path = None <EOL> def __init__ ( self , reset = False , creator_id = None , app = None ) : <EOL> self . reset = reset or self . reset <EOL> self . creator_id = creator_id or self . creator_id <EOL> self . app = app or '<STR_LIT>' <EOL> self . request . user = Users . objects . order_by ( '<STR_LIT>' ) . first ( ) <EOL> def init_base ( self , Serializer , unique_fields = None ) : <EOL> model = Serializer . Meta . model <EOL> path_file = os . path . join ( apps . get_app_config ( self . app . split ( '<STR_LIT>' ) [ - <NUM_LIT> ] ) . path , '<STR_LIT>' , <EOL> f'<STR_LIT>' ) <EOL> if not os . path . isfile ( path_file ) : <EOL> print ( "<STR_LIT>" ) <EOL> return <EOL> with open ( path_file , encoding = "<STR_LIT>" ) as f : <EOL> for data in json . load ( f ) : <EOL> filter_data = { } <EOL> if unique_fields : <EOL> for field in unique_fields : <EOL> if field in data : <EOL> filter_data [ field ] = data [ field ] <EOL> else : <EOL> for key , value in data . items ( ) : <EOL> if isinstance ( value , list ) or value == None or value == '<STR_LIT>' : <EOL> continue <EOL> filter_data [ key ] = value <EOL> instance = model . objects . filter ( ** filter_data ) . first ( ) <EOL> data [ "<STR_LIT>" ] = self . reset <EOL> serializer = Serializer ( instance , data = data , request = self . request ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> serializer . save ( ) <EOL> print ( f"<STR_LIT>" ) <EOL> def save ( self , obj , data : list , name = None , no_reset = False ) : <EOL> name = name or obj . _meta . verbose_name <EOL> print ( f"<STR_LIT>" ) <EOL> if not no_reset and self . reset and obj not in settings . INITIALIZE_RESET_LIST : <EOL> try : <EOL> obj . objects . all ( ) . delete ( ) <EOL> settings . INITIALIZE_RESET_LIST . append ( obj ) <EOL> except Exception : <EOL> pass <EOL> for ele in data : <EOL> m2m_dict = { } <EOL> new_data = { } <EOL> for key , value in ele . items ( ) : <EOL> if isinstance ( value , list ) and value and isinstance ( value [ <NUM_LIT> ] , int ) : <EOL> m2m_dict [ key ] = value <EOL> else : <EOL> new_data [ key ] = value <EOL> object , _ = obj . objects . get_or_create ( id = ele . get ( "<STR_LIT>" ) , defaults = new_data ) <EOL> for key , m2m in m2m_dict . items ( ) : <EOL> m2m = list ( set ( m2m ) ) <EOL> if m2m and len ( m2m ) > <NUM_LIT> and m2m [ <NUM_LIT> ] : <EOL> exec ( ) <EOL> print ( f"<STR_LIT>" ) <EOL> def run ( self ) : <EOL> raise NotImplementedError ( '<STR_LIT>' ) <EOL> </s>
<s> import functools <EOL> import os <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> from django . conf import settings <EOL> from celery import platforms <EOL> if "<STR_LIT>" in settings . INSTALLED_APPS : <EOL> from tenant_schemas_celery . app import CeleryApp as TenantAwareCeleryApp <EOL> app = TenantAwareCeleryApp ( ) <EOL> else : <EOL> from celery import Celery <EOL> app = Celery ( f"<STR_LIT>" ) <EOL> app . config_from_object ( '<STR_LIT>' ) <EOL> app . autodiscover_tasks ( lambda : settings . INSTALLED_APPS ) <EOL> platforms . C_FORCE_ROOT = True <EOL> def retry_base_task_error ( ) : <EOL> def wraps ( func ) : <EOL> @ app . task ( bind = True , retry_delay = <NUM_LIT> , max_retries = <NUM_LIT> ) <EOL> @ functools . wraps ( func ) <EOL> def wrapper ( self , * args , ** kwargs ) : <EOL> try : <EOL> return func ( * args , ** kwargs ) <EOL> except Exception as exc : <EOL> raise self . retry ( exc = exc ) <EOL> return wrapper <EOL> return wraps <EOL> </s>
<s> import re <EOL> from django . contrib . auth . models import AnonymousUser <EOL> from django . db . models import F <EOL> from rest_framework . permissions import BasePermission <EOL> from dvadmin . system . models import ApiWhiteList , RoleMenuButtonPermission <EOL> def ValidationApi ( reqApi , validApi ) : <EOL> if validApi is not None : <EOL> valid_api = validApi . replace ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> matchObj = re . match ( valid_api , reqApi , re . M | re . I ) <EOL> if matchObj : <EOL> return True <EOL> else : <EOL> return False <EOL> else : <EOL> return False <EOL> class AnonymousUserPermission ( BasePermission ) : <EOL> def has_permission ( self , request , view ) : <EOL> if isinstance ( request . user , AnonymousUser ) : <EOL> return False <EOL> return True <EOL> def ReUUID ( api ) : <EOL> pattern = re . compile ( r'<STR_LIT>' ) <EOL> m = pattern . search ( api ) <EOL> if m : <EOL> res = api . replace ( m . group ( <NUM_LIT> ) , "<STR_LIT>" ) <EOL> return res <EOL> else : <EOL> return None <EOL> class CustomPermission ( BasePermission ) : <EOL> def has_permission ( self , request , view ) : <EOL> if isinstance ( request . user , AnonymousUser ) : <EOL> return False <EOL> if request . user . is_superuser : <EOL> return True <EOL> else : <EOL> api = request . path <EOL> method = request . method <EOL> methodList = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> method = methodList . index ( method ) <EOL> api_white_list = ApiWhiteList . objects . values ( permission__api = F ( '<STR_LIT>' ) , permission__method = F ( '<STR_LIT>' ) ) <EOL> api_white_list = [ <EOL> str ( item . get ( '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) ) + "<STR_LIT>" + str ( <EOL> item . get ( '<STR_LIT>' ) ) + '<STR_LIT>' for item in api_white_list if item . get ( '<STR_LIT>' ) ] <EOL> if not hasattr ( request . user , "<STR_LIT>" ) : <EOL> return False <EOL> role_id_list = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> userApiList = RoleMenuButtonPermission . objects . filter ( role__in = role_id_list ) . values ( permission__api = F ( '<STR_LIT>' ) , permission__method = F ( '<STR_LIT>' ) ) <EOL> ApiList = [ <EOL> str ( item . get ( '<STR_LIT>' ) . replace ( '<STR_LIT>' , '<STR_LIT>' ) ) + "<STR_LIT>" + str ( <EOL> item . get ( '<STR_LIT>' ) ) + '<STR_LIT>' for item in userApiList if item . get ( '<STR_LIT>' ) ] <EOL> new_api_ist = api_white_list + ApiList <EOL> new_api = api + "<STR_LIT>" + str ( method ) <EOL> for item in new_api_ist : <EOL> matchObj = re . match ( item , new_api , re . M | re . I ) <EOL> if matchObj is None : <EOL> continue <EOL> else : <EOL> return True <EOL> else : <EOL> return False <EOL> </s>
<s> import logging <EOL> import traceback <EOL> from django . db . models import ProtectedError <EOL> from django . http import Http404 <EOL> from rest_framework . exceptions import APIException as DRFAPIException , AuthenticationFailed , NotAuthenticated <EOL> from rest_framework . status import HTTP_401_UNAUTHORIZED <EOL> from rest_framework . views import set_rollback , exception_handler <EOL> from dvadmin . utils . json_response import ErrorResponse <EOL> logger = logging . getLogger ( __name__ ) <EOL> class CustomAuthenticationFailed ( NotAuthenticated ) : <EOL> status_code = <NUM_LIT> <EOL> def CustomExceptionHandler ( ex , context ) : <EOL> msg = '<STR_LIT>' <EOL> code = <NUM_LIT> <EOL> response = exception_handler ( ex , context ) <EOL> if isinstance ( ex , AuthenticationFailed ) : <EOL> if response and response . data . get ( '<STR_LIT>' ) == "<STR_LIT>" : <EOL> code = <NUM_LIT> <EOL> msg = ex . detail <EOL> elif response and response . data . get ( '<STR_LIT>' ) == "<STR_LIT>" : <EOL> return ErrorResponse ( status = HTTP_401_UNAUTHORIZED ) <EOL> else : <EOL> code = <NUM_LIT> <EOL> msg = ex . detail <EOL> elif isinstance ( ex , Http404 ) : <EOL> code = <NUM_LIT> <EOL> msg = "<STR_LIT>" <EOL> elif isinstance ( ex , DRFAPIException ) : <EOL> set_rollback ( ) <EOL> msg = ex . detail <EOL> if isinstance ( msg , dict ) : <EOL> for k , v in msg . items ( ) : <EOL> for i in v : <EOL> msg = "<STR_LIT>" % ( k , i ) <EOL> elif isinstance ( ex , ProtectedError ) : <EOL> set_rollback ( ) <EOL> msg = "<STR_LIT>" <EOL> elif isinstance ( ex , Exception ) : <EOL> logger . exception ( traceback . format_exc ( ) ) <EOL> msg = str ( ex ) <EOL> return ErrorResponse ( msg = msg , code = code ) <EOL> </s>
<s> import json <EOL> import logging <EOL> from django . conf import settings <EOL> from django . contrib . auth . models import AnonymousUser <EOL> from django . http import HttpResponse , HttpResponseServerError <EOL> from django . utils . deprecation import MiddlewareMixin <EOL> from dvadmin . system . models import OperationLog <EOL> from dvadmin . utils . request_util import get_request_user , get_request_ip , get_request_data , get_request_path , get_os , get_browser , get_verbose_name <EOL> class ApiLoggingMiddleware ( MiddlewareMixin ) : <EOL> def __init__ ( self , get_response = None ) : <EOL> super ( ) . __init__ ( get_response ) <EOL> self . enable = getattr ( settings , '<STR_LIT>' , None ) or False <EOL> self . methods = getattr ( settings , '<STR_LIT>' , None ) or set ( ) <EOL> self . operation_log_id = None <EOL> @ classmethod <EOL> def __handle_request ( cls , request ) : <EOL> request . request_ip = get_request_ip ( request ) <EOL> request . request_data = get_request_data ( request ) <EOL> request . request_path = get_request_path ( request ) <EOL> def __handle_response ( self , request , response ) : <EOL> body = getattr ( request , '<STR_LIT>' , { } ) <EOL> if isinstance ( body , dict ) and body . get ( '<STR_LIT>' , '<STR_LIT>' ) : <EOL> body [ '<STR_LIT>' ] = '<STR_LIT>' * len ( body [ '<STR_LIT>' ] ) <EOL> if not hasattr ( response , '<STR_LIT>' ) or not isinstance ( response . data , dict ) : <EOL> response . data = { } <EOL> try : <EOL> if not response . data and response . content : <EOL> content = json . loads ( response . content . decode ( ) ) <EOL> response . data = content if isinstance ( content , dict ) else { } <EOL> except Exception : <EOL> return <EOL> user = get_request_user ( request ) <EOL> info = { <EOL> '<STR_LIT>' : getattr ( request , '<STR_LIT>' , '<STR_LIT>' ) , <EOL> '<STR_LIT>' : user if not isinstance ( user , AnonymousUser ) else None , <EOL> '<STR_LIT>' : getattr ( request . user , '<STR_LIT>' , None ) , <EOL> '<STR_LIT>' : request . method , <EOL> '<STR_LIT>' : request . request_path , <EOL> '<STR_LIT>' : body , <EOL> '<STR_LIT>' : response . data . get ( '<STR_LIT>' ) , <EOL> '<STR_LIT>' : get_os ( request ) , <EOL> '<STR_LIT>' : get_browser ( request ) , <EOL> '<STR_LIT>' : request . session . get ( '<STR_LIT>' ) , <EOL> '<STR_LIT>' : True if response . data . get ( '<STR_LIT>' ) in [ <NUM_LIT> , ] else False , <EOL> '<STR_LIT>' : { "<STR_LIT>" : response . data . get ( '<STR_LIT>' ) , "<STR_LIT>" : response . data . get ( '<STR_LIT>' ) } , <EOL> } <EOL> operation_log , creat = OperationLog . objects . update_or_create ( defaults = info , id = self . operation_log_id ) <EOL> if not operation_log . request_modular and settings . API_MODEL_MAP . get ( request . request_path , None ) : <EOL> operation_log . request_modular = settings . API_MODEL_MAP [ request . request_path ] <EOL> operation_log . save ( ) <EOL> def process_view ( self , request , view_func , view_args , view_kwargs ) : <EOL> if hasattr ( view_func , '<STR_LIT>' ) and hasattr ( view_func . cls , '<STR_LIT>' ) : <EOL> if self . enable : <EOL> if self . methods == '<STR_LIT>' or request . method in self . methods : <EOL> log = OperationLog ( request_modular = get_verbose_name ( view_func . cls . queryset ) ) <EOL> log . save ( ) <EOL> self . operation_log_id = log . id <EOL> return <EOL> def process_request ( self , request ) : <EOL> self . __handle_request ( request ) <EOL> def process_response ( self , request , response ) : <EOL> if self . enable : <EOL> if self . methods == '<STR_LIT>' or request . method in self . methods : <EOL> self . __handle_response ( request , response ) <EOL> return response <EOL> logger = logging . getLogger ( "<STR_LIT>" ) <EOL> class HealthCheckMiddleware ( object ) : <EOL> def __init__ ( self , get_response ) : <EOL> self . get_response = get_response <EOL> def __call__ ( self , request ) : <EOL> if request . method == "<STR_LIT>" : <EOL> if request . path == "<STR_LIT>" : <EOL> return self . readiness ( request ) <EOL> elif request . path == "<STR_LIT>" : <EOL> return self . healthz ( request ) <EOL> return self . get_response ( request ) <EOL> def healthz ( self , request ) : <EOL> return HttpResponse ( "<STR_LIT>" ) <EOL> def readiness ( self , request ) : <EOL> try : <EOL> from django . db import connections <EOL> for name in connections : <EOL> cursor = connections [ name ] . cursor ( ) <EOL> cursor . execute ( "<STR_LIT>" ) <EOL> row = cursor . fetchone ( ) <EOL> if row is None : <EOL> return HttpResponseServerError ( "<STR_LIT>" ) <EOL> except Exception as e : <EOL> logger . exception ( e ) <EOL> return HttpResponseServerError ( "<STR_LIT>" ) <EOL> try : <EOL> from django . core . cache import caches <EOL> from django . core . cache . backends . memcached import BaseMemcachedCache <EOL> for cache in caches . all ( ) : <EOL> if isinstance ( cache , BaseMemcachedCache ) : <EOL> stats = cache . _cache . get_stats ( ) <EOL> if len ( stats ) != len ( cache . _servers ) : <EOL> return HttpResponseServerError ( "<STR_LIT>" ) <EOL> except Exception as e : <EOL> logger . exception ( e ) <EOL> return HttpResponseServerError ( "<STR_LIT>" ) <EOL> return HttpResponse ( "<STR_LIT>" ) <EOL> </s>
<s> from rest_framework import serializers <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import Role , Menu , MenuButton , Dept <EOL> from dvadmin . system . views . dept import DeptSerializer <EOL> from dvadmin . system . views . menu import MenuSerializer <EOL> from dvadmin . system . views . menu_button import MenuButtonSerializer <EOL> from dvadmin . utils . crud_mixin import FastCrudMixin <EOL> from dvadmin . utils . field_permission import FieldPermissionMixin <EOL> from dvadmin . utils . json_response import SuccessResponse , DetailResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . validator import CustomUniqueValidator <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class RoleSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = Role <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class RoleCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> menu = MenuSerializer ( many = True , read_only = True ) <EOL> dept = DeptSerializer ( many = True , read_only = True ) <EOL> permission = MenuButtonSerializer ( many = True , read_only = True ) <EOL> key = serializers . CharField ( max_length = <NUM_LIT> , <EOL> validators = [ CustomUniqueValidator ( queryset = Role . objects . all ( ) , message = "<STR_LIT>" ) ] ) <EOL> name = serializers . CharField ( max_length = <NUM_LIT> , validators = [ CustomUniqueValidator ( queryset = Role . objects . all ( ) ) ] ) <EOL> def validate ( self , attrs : dict ) : <EOL> return super ( ) . validate ( attrs ) <EOL> class Meta : <EOL> model = Role <EOL> fields = '<STR_LIT>' <EOL> class MenuPermissionSerializer ( CustomModelSerializer ) : <EOL> menuPermission = serializers . SerializerMethodField ( ) <EOL> def get_menuPermission ( self , instance ) : <EOL> is_superuser = self . request . user . is_superuser <EOL> if is_superuser : <EOL> queryset = MenuButton . objects . filter ( menu__id = instance . id ) <EOL> else : <EOL> menu_permission_id_list = self . request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> queryset = MenuButton . objects . filter ( id__in = menu_permission_id_list , menu__id = instance . id ) <EOL> serializer = MenuButtonSerializer ( queryset , many = True , read_only = True ) <EOL> return serializer . data <EOL> class Meta : <EOL> model = Menu <EOL> fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> class MenuButtonPermissionSerializer ( CustomModelSerializer ) : <EOL> isCheck = serializers . SerializerMethodField ( ) <EOL> def get_isCheck ( self , instance ) : <EOL> is_superuser = self . request . user . is_superuser <EOL> if is_superuser : <EOL> return True <EOL> else : <EOL> return MenuButton . objects . filter ( <EOL> menu__id = instance . id , <EOL> role__id__in = self . request . user . role . values_list ( '<STR_LIT>' , flat = True ) , <EOL> ) . exists ( ) <EOL> class Meta : <EOL> model = Menu <EOL> fields = '<STR_LIT>' <EOL> class RoleViewSet ( CustomModelViewSet , FastCrudMixin , FieldPermissionMixin ) : <EOL> queryset = Role . objects . all ( ) <EOL> serializer_class = RoleSerializer <EOL> create_serializer_class = RoleCreateUpdateSerializer <EOL> update_serializer_class = RoleCreateUpdateSerializer <EOL> search_fields = [ '<STR_LIT>' , '<STR_LIT>' ] <EOL> </s>
<s> import os <EOL> import django <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> django . setup ( ) <EOL> from dvadmin . utils . core_initialize import CoreInitialize <EOL> from dvadmin . system . fixtures . initSerializer import ( <EOL> UsersInitSerializer , DeptInitSerializer , RoleInitSerializer , <EOL> MenuInitSerializer , ApiWhiteListInitSerializer , DictionaryInitSerializer , <EOL> SystemConfigInitSerializer , RoleMenuInitSerializer , RoleMenuButtonInitSerializer <EOL> ) <EOL> class Initialize ( CoreInitialize ) : <EOL> def init_dept ( self ) : <EOL> self . init_base ( DeptInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] ) <EOL> def init_role ( self ) : <EOL> self . init_base ( RoleInitSerializer , unique_fields = [ '<STR_LIT>' ] ) <EOL> def init_users ( self ) : <EOL> self . init_base ( UsersInitSerializer , unique_fields = [ '<STR_LIT>' ] ) <EOL> def init_menu ( self ) : <EOL> self . init_base ( MenuInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] ) <EOL> def init_role_menu ( self ) : <EOL> self . init_base ( RoleMenuInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' ] ) <EOL> def init_role_menu_button ( self ) : <EOL> self . init_base ( RoleMenuButtonInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' ] ) <EOL> def init_api_white_list ( self ) : <EOL> self . init_base ( ApiWhiteListInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' , ] ) <EOL> def init_dictionary ( self ) : <EOL> self . init_base ( DictionaryInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' , ] ) <EOL> def init_system_config ( self ) : <EOL> self . init_base ( SystemConfigInitSerializer , unique_fields = [ '<STR_LIT>' , '<STR_LIT>' , ] ) <EOL> def run ( self ) : <EOL> self . init_dept ( ) <EOL> self . init_role ( ) <EOL> self . init_users ( ) <EOL> self . init_menu ( ) <EOL> self . init_role_menu ( ) <EOL> self . init_role_menu_button ( ) <EOL> self . init_api_white_list ( ) <EOL> self . init_dictionary ( ) <EOL> self . init_system_config ( ) <EOL> if __name__ == "<STR_LIT>" : <EOL> Initialize ( app = '<STR_LIT>' ) . run ( ) <EOL> </s>
<s> import hashlib <EOL> import mimetypes <EOL> from rest_framework import serializers <EOL> from rest_framework . decorators import action <EOL> from application import dispatch <EOL> from dvadmin . system . models import FileList <EOL> from dvadmin . utils . json_response import DetailResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class FileSerializer ( CustomModelSerializer ) : <EOL> url = serializers . SerializerMethodField ( read_only = True ) <EOL> def get_url ( self , instance ) : <EOL> return instance . file_url or ( f'<STR_LIT>' ) <EOL> class Meta : <EOL> model = FileList <EOL> fields = "<STR_LIT>" <EOL> def create ( self , validated_data ) : <EOL> file_engine = dispatch . get_system_config_values ( "<STR_LIT>" ) or '<STR_LIT>' <EOL> file_backup = dispatch . get_system_config_values ( "<STR_LIT>" ) <EOL> file = self . initial_data . get ( '<STR_LIT>' ) <EOL> file_size = file . size <EOL> validated_data [ '<STR_LIT>' ] = str ( file ) <EOL> validated_data [ '<STR_LIT>' ] = file_size <EOL> md5 = hashlib . md5 ( ) <EOL> for chunk in file . chunks ( ) : <EOL> md5 . update ( chunk ) <EOL> validated_data [ '<STR_LIT>' ] = md5 . hexdigest ( ) <EOL> validated_data [ '<STR_LIT>' ] = file_engine <EOL> validated_data [ '<STR_LIT>' ] = file . content_type <EOL> if file_backup : <EOL> validated_data [ '<STR_LIT>' ] = file <EOL> if file_engine == '<STR_LIT>' : <EOL> from dvadmin_cloud_storage . views . aliyun import ali_oss_upload <EOL> file_path = ali_oss_upload ( file ) <EOL> if file_path : <EOL> validated_data [ '<STR_LIT>' ] = file_path <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> elif file_engine == '<STR_LIT>' : <EOL> from dvadmin_cloud_storage . views . tencent import tencent_cos_upload <EOL> file_path = tencent_cos_upload ( file ) <EOL> if file_path : <EOL> validated_data [ '<STR_LIT>' ] = file_path <EOL> else : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> else : <EOL> validated_data [ '<STR_LIT>' ] = file <EOL> try : <EOL> request_user = self . request . user <EOL> validated_data [ '<STR_LIT>' ] = request_user . dept . id <EOL> validated_data [ '<STR_LIT>' ] = request_user . id <EOL> validated_data [ '<STR_LIT>' ] = request_user . id <EOL> except : <EOL> pass <EOL> return super ( ) . create ( validated_data ) <EOL> class FileViewSet ( CustomModelViewSet ) : <EOL> queryset = FileList . objects . all ( ) <EOL> serializer_class = FileSerializer <EOL> filter_fields = [ '<STR_LIT>' , ] <EOL> permission_classes = [ ] <EOL> </s>
<s> from django . db . models import F <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import MenuButton , RoleMenuButtonPermission <EOL> from dvadmin . utils . json_response import DetailResponse , SuccessResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class MenuButtonSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = MenuButton <EOL> fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MenuButtonCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = MenuButton <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MenuButtonViewSet ( CustomModelViewSet ) : <EOL> queryset = MenuButton . objects . order_by ( '<STR_LIT>' ) <EOL> serializer_class = MenuButtonSerializer <EOL> create_serializer_class = MenuButtonCreateUpdateSerializer <EOL> update_serializer_class = MenuButtonCreateUpdateSerializer <EOL> extra_filter_class = [ ] <EOL> def list ( self , request , * args , ** kwargs ) : <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) ) . order_by ( '<STR_LIT>' ) <EOL> serializer = self . get_serializer ( queryset , many = True , request = request ) <EOL> return SuccessResponse ( serializer . data , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def menu_button_all_permission ( self , request ) : <EOL> is_superuser = request . user . is_superuser <EOL> if is_superuser : <EOL> queryset = MenuButton . objects . values_list ( '<STR_LIT>' , flat = True ) <EOL> else : <EOL> role_id = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> queryset = RoleMenuButtonPermission . objects . filter ( role__in = role_id ) . values_list ( '<STR_LIT>' , flat = True ) . distinct ( ) <EOL> return DetailResponse ( data = queryset ) <EOL> </s>
<s> from dvadmin . system . models import ApiWhiteList <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class ApiWhiteListSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = ApiWhiteList <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class ApiWhiteListViewSet ( CustomModelViewSet ) : <EOL> queryset = ApiWhiteList . objects . all ( ) <EOL> serializer_class = ApiWhiteListSerializer <EOL> </s>
<s> from rest_framework import serializers <EOL> from rest_framework . fields import empty <EOL> from rest_framework . request import Request <EOL> from rest_framework . serializers import ModelSerializer <EOL> from django . utils . functional import cached_property <EOL> from rest_framework . utils . serializer_helpers import BindingDict <EOL> from dvadmin . system . models import Users <EOL> from django_restql . mixins import DynamicFieldsMixin <EOL> class CustomModelSerializer ( DynamicFieldsMixin , ModelSerializer ) : <EOL> modifier_field_id = "<STR_LIT>" <EOL> modifier_name = serializers . SerializerMethodField ( read_only = True ) <EOL> dept_belong_id = serializers . IntegerField ( required = False , allow_null = True ) <EOL> def get_modifier_name ( self , instance ) : <EOL> if not hasattr ( instance , "<STR_LIT>" ) : <EOL> return None <EOL> queryset = ( <EOL> Users . objects . filter ( id = instance . modifier ) <EOL> . values_list ( "<STR_LIT>" , flat = True ) <EOL> . first ( ) <EOL> ) <EOL> if queryset : <EOL> return queryset <EOL> return None <EOL> creator_field_id = "<STR_LIT>" <EOL> creator_name = serializers . SlugRelatedField ( <EOL> slug_field = "<STR_LIT>" , source = "<STR_LIT>" , read_only = True <EOL> ) <EOL> dept_belong_id_field_name = "<STR_LIT>" <EOL> create_datetime = serializers . DateTimeField ( <EOL> format = "<STR_LIT>" , required = False , read_only = True <EOL> ) <EOL> update_datetime = serializers . DateTimeField ( <EOL> format = "<STR_LIT>" , required = False <EOL> ) <EOL> def __init__ ( self , instance = None , data = empty , request = None , ** kwargs ) : <EOL> super ( ) . __init__ ( instance , data , ** kwargs ) <EOL> self . request : Request = request or self . context . get ( "<STR_LIT>" , None ) <EOL> def save ( self , ** kwargs ) : <EOL> return super ( ) . save ( ** kwargs ) <EOL> def create ( self , validated_data ) : <EOL> if self . request : <EOL> if str ( self . request . user ) != "<STR_LIT>" : <EOL> if self . modifier_field_id in self . fields . fields : <EOL> validated_data [ self . modifier_field_id ] = self . get_request_user_id ( ) <EOL> if self . creator_field_id in self . fields . fields : <EOL> validated_data [ self . creator_field_id ] = self . request . user <EOL> if ( <EOL> self . dept_belong_id_field_name in self . fields . fields <EOL> and validated_data . get ( self . dept_belong_id_field_name , None ) is None <EOL> ) : <EOL> validated_data [ self . dept_belong_id_field_name ] = getattr ( <EOL> self . request . user , "<STR_LIT>" , None <EOL> ) <EOL> return super ( ) . create ( validated_data ) <EOL> def update ( self , instance , validated_data ) : <EOL> if self . request : <EOL> if str ( self . request . user ) != "<STR_LIT>" : <EOL> if self . modifier_field_id in self . fields . fields : <EOL> validated_data [ self . modifier_field_id ] = self . get_request_user_id ( ) <EOL> if hasattr ( self . instance , self . modifier_field_id ) : <EOL> setattr ( <EOL> self . instance , self . modifier_field_id , self . get_request_user_id ( ) <EOL> ) <EOL> return super ( ) . update ( instance , validated_data ) <EOL> def get_request_username ( self ) : <EOL> if getattr ( self . request , "<STR_LIT>" , None ) : <EOL> return getattr ( self . request . user , "<STR_LIT>" , None ) <EOL> return None <EOL> def get_request_name ( self ) : <EOL> if getattr ( self . request , "<STR_LIT>" , None ) : <EOL> return getattr ( self . request . user , "<STR_LIT>" , None ) <EOL> return None <EOL> def get_request_user_id ( self ) : <EOL> if getattr ( self . request , "<STR_LIT>" , None ) : <EOL> return getattr ( self . request . user , "<STR_LIT>" , None ) <EOL> return None <EOL> @ property <EOL> def errors ( self ) : <EOL> errors = super ( ) . errors <EOL> verbose_errors = { } <EOL> fields = { field . name : field . verbose_name for field in <EOL> self . Meta . model . _meta . get_fields ( ) if hasattr ( field , '<STR_LIT>' ) } <EOL> for field_name , error in errors . items ( ) : <EOL> if field_name in fields : <EOL> verbose_errors [ str ( fields [ field_name ] ) ] = error <EOL> else : <EOL> verbose_errors [ field_name ] = error <EOL> return verbose_errors <EOL> </s>
<s> import operator <EOL> import re <EOL> from collections import OrderedDict <EOL> from functools import reduce <EOL> import six <EOL> from django . db import models <EOL> from django . db . models import Q , F <EOL> from django . db . models . constants import LOOKUP_SEP <EOL> from django_filters import utils , FilterSet <EOL> from django_filters . constants import ALL_FIELDS <EOL> from django_filters . filters import CharFilter , DateTimeFromToRangeFilter <EOL> from django_filters . rest_framework import DjangoFilterBackend <EOL> from django_filters . utils import get_model_field <EOL> from rest_framework . filters import BaseFilterBackend <EOL> from django_filters . conf import settings <EOL> from dvadmin . system . models import Dept , ApiWhiteList , RoleMenuButtonPermission <EOL> from dvadmin . utils . models import CoreModel <EOL> class CoreModelFilterBankend ( BaseFilterBackend ) : <EOL> def filter_queryset ( self , request , queryset , view ) : <EOL> create_datetime_after = request . query_params . get ( '<STR_LIT>' , None ) <EOL> create_datetime_before = request . query_params . get ( '<STR_LIT>' , None ) <EOL> update_datetime_after = request . query_params . get ( '<STR_LIT>' , None ) <EOL> update_datetime_before = request . query_params . get ( '<STR_LIT>' , None ) <EOL> if any ( [ create_datetime_after , create_datetime_before , update_datetime_after , update_datetime_before ] ) : <EOL> create_filter = Q ( ) <EOL> if create_datetime_after and create_datetime_before : <EOL> create_filter &= Q ( create_datetime__gte = create_datetime_after ) & Q ( create_datetime__lte = create_datetime_before ) <EOL> elif create_datetime_after : <EOL> create_filter &= Q ( create_datetime__gte = create_datetime_after ) <EOL> elif create_datetime_before : <EOL> create_filter &= Q ( create_datetime__lte = create_datetime_before ) <EOL> update_filter = Q ( ) <EOL> if update_datetime_after and update_datetime_before : <EOL> update_filter &= Q ( update_datetime__gte = update_datetime_after ) & Q ( update_datetime__lte = update_datetime_before ) <EOL> elif update_datetime_after : <EOL> update_filter &= Q ( update_datetime__gte = update_datetime_after ) <EOL> elif update_datetime_before : <EOL> update_filter &= Q ( update_datetime__lte = update_datetime_before ) <EOL> queryset = queryset . filter ( create_filter & update_filter ) <EOL> return queryset <EOL> return queryset <EOL> def get_dept ( dept_id : int , dept_all_list = None , dept_list = None ) : <EOL> if not dept_all_list : <EOL> dept_all_list = Dept . objects . all ( ) . values ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> if dept_list is None : <EOL> dept_list = [ dept_id ] <EOL> for ele in dept_all_list : <EOL> if ele . get ( "<STR_LIT>" ) == dept_id : <EOL> dept_list . append ( ele . get ( "<STR_LIT>" ) ) <EOL> get_dept ( ele . get ( "<STR_LIT>" ) , dept_all_list , dept_list ) <EOL> return list ( set ( dept_list ) ) <EOL> class DataLevelPermissionsFilter ( BaseFilterBackend ) : <EOL> def filter_queryset ( self , request , queryset , view ) : <EOL> api = request . path <EOL> method = request . method <EOL> methodList = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> method = methodList . index ( method ) <EOL> api_white_list = ApiWhiteList . objects . filter ( enable_datasource = False ) . values ( <EOL> permission__api = F ( "<STR_LIT>" ) , permission__method = F ( "<STR_LIT>" ) <EOL> ) <EOL> api_white_list = [ <EOL> str ( item . get ( "<STR_LIT>" ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) ) <EOL> + "<STR_LIT>" <EOL> + str ( item . get ( "<STR_LIT>" ) ) <EOL> for item in api_white_list <EOL> if item . get ( "<STR_LIT>" ) <EOL> ] <EOL> for item in api_white_list : <EOL> new_api = f"<STR_LIT>" <EOL> matchObj = re . match ( item , new_api , re . M | re . I ) <EOL> if matchObj is None : <EOL> continue <EOL> else : <EOL> return queryset <EOL> if request . user . is_superuser == <NUM_LIT> : <EOL> return self . _extracted_from_filter_queryset_33 ( request , queryset , api , method ) <EOL> else : <EOL> return queryset <EOL> def _extracted_from_filter_queryset_33 ( self , request , queryset , api , method ) : <EOL> user_dept_id = getattr ( request . user , "<STR_LIT>" , None ) <EOL> if not user_dept_id : <EOL> return queryset . none ( ) <EOL> if not getattr ( queryset . model , "<STR_LIT>" , None ) : <EOL> return queryset <EOL> if not hasattr ( request . user , "<STR_LIT>" ) : <EOL> return queryset . filter ( dept_belong_id = user_dept_id ) <EOL> re_api = api <EOL> _pk = request . parser_context [ "<STR_LIT>" ] . get ( '<STR_LIT>' ) <EOL> if _pk : <EOL> re_api = re . sub ( _pk , '<STR_LIT>' , api ) <EOL> role_id_list = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> role_permission_list = RoleMenuButtonPermission . objects . filter ( <EOL> role__in = role_id_list , <EOL> role__status = <NUM_LIT> , <EOL> menu_button__api = re_api , <EOL> menu_button__method = method ) . values ( <EOL> '<STR_LIT>' <EOL> ) <EOL> dataScope_list = [ ] <EOL> for ele in role_permission_list : <EOL> if ele . get ( "<STR_LIT>" ) == <NUM_LIT> : <EOL> return queryset <EOL> dataScope_list . append ( ele . get ( "<STR_LIT>" ) ) <EOL> dataScope_list = list ( set ( dataScope_list ) ) <EOL> if <NUM_LIT> in dataScope_list : <EOL> return queryset . filter ( <EOL> creator = request . user , dept_belong_id = user_dept_id <EOL> ) <EOL> dept_list = [ ] <EOL> for ele in dataScope_list : <EOL> if ele == <NUM_LIT> : <EOL> dept_list . append ( user_dept_id ) <EOL> dept_list . extend ( <EOL> get_dept ( <EOL> user_dept_id , <EOL> ) <EOL> ) <EOL> elif ele == <NUM_LIT> : <EOL> dept_list . append ( user_dept_id ) <EOL> elif ele == <NUM_LIT> : <EOL> dept_ids = RoleMenuButtonPermission . objects . filter ( <EOL> role__in = role_id_list , <EOL> role__status = <NUM_LIT> , <EOL> data_range = <NUM_LIT> ) . values_list ( <EOL> '<STR_LIT>' , flat = True <EOL> ) <EOL> dept_list . extend ( <EOL> dept_ids <EOL> ) <EOL> if queryset . model . _meta . model_name == '<STR_LIT>' : <EOL> return queryset . filter ( id__in = list ( set ( dept_list ) ) ) <EOL> return queryset . filter ( dept_belong_id__in = list ( set ( dept_list ) ) ) <EOL> class CustomDjangoFilterBackend ( DjangoFilterBackend ) : <EOL> lookup_prefixes = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> filter_fields = "<STR_LIT>" <EOL> def construct_search ( self , field_name , lookup_expr = None ) : <EOL> lookup = self . lookup_prefixes . get ( field_name [ <NUM_LIT> ] ) <EOL> if lookup : <EOL> field_name = field_name [ <NUM_LIT> : ] <EOL> else : <EOL> lookup = lookup_expr <EOL> if lookup : <EOL> if field_name . endswith ( lookup ) : <EOL> return field_name <EOL> return LOOKUP_SEP . join ( [ field_name , lookup ] ) <EOL> return field_name <EOL> def find_filter_lookups ( self , orm_lookups , search_term_key ) : <EOL> for lookup in orm_lookups : <EOL> new_lookup = LOOKUP_SEP . join ( lookup . split ( LOOKUP_SEP ) [ : - <NUM_LIT> ] ) if len ( lookup . split ( LOOKUP_SEP ) ) > <NUM_LIT> else lookup <EOL> if new_lookup == search_term_key : <EOL> return lookup <EOL> return None <EOL> def get_filterset_class ( self , view , queryset = None ) : <EOL> filterset_class = getattr ( view , "<STR_LIT>" , None ) <EOL> filterset_fields = getattr ( view , "<STR_LIT>" , None ) <EOL> if filterset_class is None and hasattr ( view , "<STR_LIT>" ) : <EOL> utils . deprecate ( <EOL> "<STR_LIT>" % view . __class__ . __name__ <EOL> ) <EOL> filterset_class = getattr ( view , "<STR_LIT>" , None ) <EOL> if filterset_fields is None and hasattr ( view , "<STR_LIT>" ) : <EOL> utils . deprecate ( <EOL> "<STR_LIT>" % view . __class__ . __name__ <EOL> ) <EOL> self . filter_fields = getattr ( view , "<STR_LIT>" , None ) <EOL> if isinstance ( self . filter_fields , ( list , tuple ) ) : <EOL> filterset_fields = [ <EOL> field [ <NUM_LIT> : ] if field [ <NUM_LIT> ] in self . lookup_prefixes . keys ( ) else field for field in self . filter_fields <EOL> ] <EOL> else : <EOL> filterset_fields = self . filter_fields <EOL> if filterset_class : <EOL> filterset_model = filterset_class . _meta . model <EOL> if filterset_model and queryset is not None : <EOL> assert issubclass ( <EOL> queryset . model , filterset_model <EOL> ) , "<STR_LIT>" % ( <EOL> filterset_model , <EOL> queryset . model , <EOL> ) <EOL> return filterset_class <EOL> if filterset_fields and queryset is not None : <EOL> MetaBase = getattr ( self . filterset_base , "<STR_LIT>" , object ) <EOL> class AutoFilterSet ( self . filterset_base ) : <EOL> @ classmethod <EOL> def get_all_model_fields ( cls , model ) : <EOL> opts = model . _meta <EOL> return [ <EOL> f . name <EOL> for f in sorted ( opts . fields + opts . many_to_many ) <EOL> if ( f . name == "<STR_LIT>" ) <EOL> or not isinstance ( f , models . AutoField ) <EOL> and not ( getattr ( f . remote_field , "<STR_LIT>" , False ) ) <EOL> ] <EOL> @ classmethod <EOL> def get_fields ( cls ) : <EOL> model = cls . _meta . model <EOL> fields = cls . _meta . fields <EOL> exclude = cls . _meta . exclude <EOL> assert not ( fields is None and exclude is None ) , ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" % cls . __name__ <EOL> ) <EOL> if exclude is not None and fields is None : <EOL> fields = ALL_FIELDS <EOL> if fields == ALL_FIELDS : <EOL> fields = cls . get_all_model_fields ( model ) <EOL> exclude = exclude or [ ] <EOL> if not isinstance ( fields , dict ) : <EOL> fields = [ ( f , [ settings . DEFAULT_LOOKUP_EXPR ] ) for f in fields if f not in exclude ] <EOL> else : <EOL> fields = [ ( f , lookups ) for f , lookups in fields . items ( ) if f not in exclude ] <EOL> return OrderedDict ( fields ) <EOL> @ classmethod <EOL> def get_filters ( cls ) : <EOL> if not cls . _meta . model : <EOL> return cls . declared_filters . copy ( ) <EOL> filters = OrderedDict ( ) <EOL> fields = cls . get_fields ( ) <EOL> undefined = [ ] <EOL> for field_name , lookups in fields . items ( ) : <EOL> field = get_model_field ( cls . _meta . model , field_name ) <EOL> from django . db import models <EOL> from timezone_field import TimeZoneField <EOL> if isinstance ( field , ( models . JSONField , TimeZoneField ) ) : <EOL> continue <EOL> if field is None : <EOL> undefined . append ( field_name ) <EOL> if ( <EOL> isinstance ( field , ( models . CharField ) ) <EOL> and filterset_fields == "<STR_LIT>" <EOL> and lookups == [ "<STR_LIT>" ] <EOL> ) : <EOL> lookups = [ "<STR_LIT>" ] <EOL> for lookup_expr in lookups : <EOL> filter_name = cls . get_filter_name ( field_name , lookup_expr ) <EOL> if filter_name in cls . declared_filters : <EOL> filters [ filter_name ] = cls . declared_filters [ filter_name ] <EOL> continue <EOL> if field is not None : <EOL> filters [ filter_name ] = cls . filter_for_field ( field , field_name , lookup_expr ) <EOL> if isinstance ( cls . _meta . fields , ( list , tuple ) ) : <EOL> undefined = [ f for f in undefined if f not in cls . declared_filters ] <EOL> if undefined : <EOL> raise TypeError ( <EOL> "<STR_LIT>" % "<STR_LIT>" . join ( undefined ) <EOL> ) <EOL> filters . update ( cls . declared_filters ) <EOL> return filters <EOL> class Meta ( MetaBase ) : <EOL> model = queryset . model <EOL> fields = filterset_fields <EOL> return AutoFilterSet <EOL> return None <EOL> def filter_queryset ( self , request , queryset , view ) : <EOL> filterset = self . get_filterset ( request , queryset , view ) <EOL> if filterset is None : <EOL> return queryset <EOL> if filterset . __class__ . __name__ == "<STR_LIT>" : <EOL> queryset = filterset . queryset <EOL> filter_fields = filterset . filters if self . filter_fields == "<STR_LIT>" else self . filter_fields <EOL> orm_lookup_dict = dict ( <EOL> zip ( <EOL> [ field for field in filter_fields ] , <EOL> [ filterset . filters [ lookup ] . lookup_expr for lookup in filterset . filters . keys ( ) ] , <EOL> ) <EOL> ) <EOL> orm_lookups = [ <EOL> self . construct_search ( lookup , lookup_expr ) for lookup , lookup_expr in orm_lookup_dict . items ( ) <EOL> ] <EOL> conditions = [ ] <EOL> queries = [ ] <EOL> for search_term_key in filterset . data . keys ( ) : <EOL> orm_lookup = self . find_filter_lookups ( orm_lookups , search_term_key ) <EOL> if not orm_lookup or filterset . data . get ( search_term_key ) == '<STR_LIT>' : <EOL> continue <EOL> filterset_data_len = len ( filterset . data . getlist ( search_term_key ) ) <EOL> if filterset_data_len == <NUM_LIT> : <EOL> query = Q ( ** { orm_lookup : filterset . data [ search_term_key ] } ) <EOL> queries . append ( query ) <EOL> elif filterset_data_len == <NUM_LIT> : <EOL> orm_lookup += '<STR_LIT>' <EOL> query = Q ( ** { orm_lookup : filterset . data . getlist ( search_term_key ) } ) <EOL> queries . append ( query ) <EOL> if len ( queries ) > <NUM_LIT> : <EOL> conditions . append ( reduce ( operator . and_ , queries ) ) <EOL> queryset = queryset . filter ( reduce ( operator . and_ , conditions ) ) <EOL> return queryset <EOL> else : <EOL> return queryset <EOL> if not filterset . is_valid ( ) and self . raise_exception : <EOL> raise utils . translate_validation ( filterset . errors ) <EOL> return filterset . qs <EOL> </s>
<s> from importlib import import_module <EOL> from django . apps import apps <EOL> from django . db import models <EOL> from django . conf import settings <EOL> from application import settings <EOL> table_prefix = settings . TABLE_PREFIX <EOL> class SoftDeleteQuerySet ( models . QuerySet ) : <EOL> pass <EOL> class SoftDeleteManager ( models . Manager ) : <EOL> def __init__ ( self , * args , ** kwargs ) : <EOL> self . __add_is_del_filter = False <EOL> super ( SoftDeleteManager , self ) . __init__ ( * args , ** kwargs ) <EOL> def filter ( self , * args , ** kwargs ) : <EOL> if not kwargs . get ( '<STR_LIT>' ) is None : <EOL> self . __add_is_del_filter = True <EOL> return super ( SoftDeleteManager , self ) . filter ( * args , ** kwargs ) <EOL> def get_queryset ( self ) : <EOL> if self . __add_is_del_filter : <EOL> return SoftDeleteQuerySet ( self . model , using = self . _db ) . exclude ( is_deleted = False ) <EOL> return SoftDeleteQuerySet ( self . model ) . exclude ( is_deleted = True ) <EOL> def get_by_natural_key ( self , name ) : <EOL> return SoftDeleteQuerySet ( self . model ) . get ( username = name ) <EOL> class SoftDeleteModel ( models . Model ) : <EOL> is_deleted = models . BooleanField ( verbose_name = "<STR_LIT>" , help_text = '<STR_LIT>' , default = False , db_index = True ) <EOL> objects = SoftDeleteManager ( ) <EOL> class Meta : <EOL> abstract = True <EOL> verbose_name = '<STR_LIT>' <EOL> verbose_name_plural = verbose_name <EOL> def delete ( self , using = None , soft_delete = True , * args , ** kwargs ) : <EOL> self . is_deleted = True <EOL> self . save ( using = using ) <EOL> class CoreModel ( models . Model ) : <EOL> id = models . BigAutoField ( primary_key = True , help_text = "<STR_LIT>" , verbose_name = "<STR_LIT>" ) <EOL> description = models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" , null = True , blank = True , help_text = "<STR_LIT>" ) <EOL> creator = models . ForeignKey ( to = settings . AUTH_USER_MODEL , related_query_name = '<STR_LIT>' , null = True , <EOL> verbose_name = '<STR_LIT>' , help_text = "<STR_LIT>" , on_delete = models . SET_NULL , <EOL> db_constraint = False ) <EOL> modifier = models . CharField ( max_length = <NUM_LIT> , null = True , blank = True , help_text = "<STR_LIT>" , verbose_name = "<STR_LIT>" ) <EOL> dept_belong_id = models . CharField ( max_length = <NUM_LIT> , help_text = "<STR_LIT>" , null = True , blank = True , <EOL> verbose_name = "<STR_LIT>" ) <EOL> update_datetime = models . DateTimeField ( auto_now = True , null = True , blank = True , help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" ) <EOL> create_datetime = models . DateTimeField ( auto_now_add = True , null = True , blank = True , help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" ) <EOL> class Meta : <EOL> abstract = True <EOL> verbose_name = '<STR_LIT>' <EOL> verbose_name_plural = verbose_name <EOL> def get_all_models_objects ( model_name = None ) : <EOL> settings . ALL_MODELS_OBJECTS = { } <EOL> if not settings . ALL_MODELS_OBJECTS : <EOL> all_models = apps . get_models ( ) <EOL> for item in list ( all_models ) : <EOL> table = { <EOL> "<STR_LIT>" : item . _meta . verbose_name , <EOL> "<STR_LIT>" : item . __name__ , <EOL> "<STR_LIT>" : [ ] <EOL> } <EOL> for field in item . _meta . fields : <EOL> fields = { <EOL> "<STR_LIT>" : field . verbose_name , <EOL> "<STR_LIT>" : field . name <EOL> } <EOL> table [ '<STR_LIT>' ] . append ( fields ) <EOL> settings . ALL_MODELS_OBJECTS . setdefault ( item . __name__ , { "<STR_LIT>" : table , "<STR_LIT>" : item } ) <EOL> if model_name : <EOL> return settings . ALL_MODELS_OBJECTS [ model_name ] or { } <EOL> return settings . ALL_MODELS_OBJECTS or { } <EOL> def get_model_from_app ( app_name ) : <EOL> model_module = import_module ( app_name + '<STR_LIT>' ) <EOL> filter_model = [ <EOL> getattr ( model_module , item ) for item in dir ( model_module ) <EOL> if item != '<STR_LIT>' and issubclass ( getattr ( model_module , item ) . __class__ , models . base . ModelBase ) <EOL> ] <EOL> model_list = [ ] <EOL> for model in filter_model : <EOL> if model . __name__ == '<STR_LIT>' : <EOL> continue <EOL> fields = [ <EOL> { '<STR_LIT>' : field . verbose_name , '<STR_LIT>' : field . name , '<STR_LIT>' : field } <EOL> for field in model . _meta . fields <EOL> ] <EOL> model_list . append ( { <EOL> '<STR_LIT>' : app_name , <EOL> '<STR_LIT>' : model . _meta . verbose_name , <EOL> '<STR_LIT>' : model . __name__ , <EOL> '<STR_LIT>' : model , <EOL> '<STR_LIT>' : fields <EOL> } ) <EOL> return model_list <EOL> def get_custom_app_models ( app_name = None ) : <EOL> if app_name : <EOL> return get_model_from_app ( app_name ) <EOL> all_apps = apps . get_app_configs ( ) <EOL> res = [ ] <EOL> for app in all_apps : <EOL> if app . name . startswith ( '<STR_LIT>' ) : <EOL> continue <EOL> if app . name in settings . COLUMN_EXCLUDE_APPS : <EOL> continue <EOL> try : <EOL> all_models = get_model_from_app ( app . name ) <EOL> if all_models : <EOL> for model in all_models : <EOL> res . append ( model ) <EOL> except Exception as e : <EOL> pass <EOL> return res <EOL> </s>
<s> from django . db import transaction <EOL> from django_filters import DateTimeFromToRangeFilter <EOL> from django_filters . rest_framework import FilterSet <EOL> from drf_yasg import openapi <EOL> from drf_yasg . utils import swagger_auto_schema <EOL> from rest_framework . decorators import action <EOL> from rest_framework . viewsets import ModelViewSet <EOL> from dvadmin . utils . filters import DataLevelPermissionsFilter , CoreModelFilterBankend <EOL> from dvadmin . utils . import_export_mixin import ExportSerializerMixin , ImportSerializerMixin <EOL> from dvadmin . utils . json_response import SuccessResponse , ErrorResponse , DetailResponse <EOL> from dvadmin . utils . permission import CustomPermission <EOL> from dvadmin . utils . models import get_custom_app_models , CoreModel <EOL> from dvadmin . system . models import FieldPermission , MenuField <EOL> from django_restql . mixins import QueryArgumentsMixin <EOL> class CustomModelViewSet ( ModelViewSet , ImportSerializerMixin , ExportSerializerMixin , QueryArgumentsMixin ) : <EOL> values_queryset = None <EOL> ordering_fields = '<STR_LIT>' <EOL> create_serializer_class = None <EOL> update_serializer_class = None <EOL> filter_fields = '<STR_LIT>' <EOL> search_fields = ( ) <EOL> extra_filter_class = [ CoreModelFilterBankend , DataLevelPermissionsFilter ] <EOL> permission_classes = [ CustomPermission ] <EOL> import_field_dict = { } <EOL> export_field_label = { } <EOL> def filter_queryset ( self , queryset ) : <EOL> for backend in set ( set ( self . filter_backends ) | set ( self . extra_filter_class or [ ] ) ) : <EOL> queryset = backend ( ) . filter_queryset ( self . request , queryset , self ) <EOL> return queryset <EOL> def get_queryset ( self ) : <EOL> if getattr ( self , '<STR_LIT>' , None ) : <EOL> return self . values_queryset <EOL> return super ( ) . get_queryset ( ) <EOL> def get_serializer_class ( self ) : <EOL> action_serializer_name = f"<STR_LIT>" <EOL> action_serializer_class = getattr ( self , action_serializer_name , None ) <EOL> if action_serializer_class : <EOL> return action_serializer_class <EOL> return super ( ) . get_serializer_class ( ) <EOL> def get_serializer ( self , * args , ** kwargs ) : <EOL> serializer_class = self . get_serializer_class ( ) <EOL> kwargs . setdefault ( '<STR_LIT>' , self . get_serializer_context ( ) ) <EOL> can_see = self . get_menu_field ( serializer_class ) <EOL> self . request . permission_fields = can_see <EOL> if isinstance ( self . request . data , list ) : <EOL> with transaction . atomic ( ) : <EOL> return serializer_class ( many = True , * args , ** kwargs ) <EOL> else : <EOL> return serializer_class ( * args , ** kwargs ) <EOL> def get_menu_field ( self , serializer_class ) : <EOL> finded = False <EOL> for model in get_custom_app_models ( ) : <EOL> if model [ '<STR_LIT>' ] is serializer_class . Meta . model : <EOL> finded = True <EOL> break <EOL> if finded is False : <EOL> return [ ] <EOL> return MenuField . objects . filter ( model = model [ '<STR_LIT>' ] <EOL> ) . values ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> def create ( self , request , * args , ** kwargs ) : <EOL> serializer = self . get_serializer ( data = request . data , request = request ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> self . perform_create ( serializer ) <EOL> return DetailResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> def list ( self , request , * args , ** kwargs ) : <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) ) <EOL> page = self . paginate_queryset ( queryset ) <EOL> if page is not None : <EOL> serializer = self . get_serializer ( page , many = True , request = request ) <EOL> return self . get_paginated_response ( serializer . data ) <EOL> serializer = self . get_serializer ( queryset , many = True , request = request ) <EOL> return SuccessResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> def retrieve ( self , request , * args , ** kwargs ) : <EOL> instance = self . get_object ( ) <EOL> serializer = self . get_serializer ( instance ) <EOL> return DetailResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> def update ( self , request , * args , ** kwargs ) : <EOL> partial = kwargs . pop ( '<STR_LIT>' , False ) <EOL> instance = self . get_object ( ) <EOL> serializer = self . get_serializer ( instance , data = request . data , request = request , partial = partial ) <EOL> serializer . is_valid ( raise_exception = True ) <EOL> self . perform_update ( serializer ) <EOL> if getattr ( instance , '<STR_LIT>' , None ) : <EOL> instance . _prefetched_objects_cache = { } <EOL> return DetailResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> def destroy ( self , request , * args , ** kwargs ) : <EOL> instance = self . get_object ( ) <EOL> instance . delete ( ) <EOL> return DetailResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> keys = openapi . Schema ( description = '<STR_LIT>' , type = openapi . TYPE_ARRAY , items = openapi . TYPE_STRING ) <EOL> @ swagger_auto_schema ( request_body = openapi . Schema ( <EOL> type = openapi . TYPE_OBJECT , <EOL> required = [ '<STR_LIT>' ] , <EOL> properties = { '<STR_LIT>' : keys } <EOL> ) , operation_summary = '<STR_LIT>' ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False ) <EOL> def multiple_delete ( self , request , * args , ** kwargs ) : <EOL> request_data = request . data <EOL> keys = request_data . get ( '<STR_LIT>' , None ) <EOL> if keys : <EOL> self . get_queryset ( ) . filter ( id__in = keys ) . delete ( ) <EOL> return SuccessResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> else : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> </s>
<s> import hashlib <EOL> import logging <EOL> from django . contrib . auth import get_user_model <EOL> from django . contrib . auth . backends import ModelBackend <EOL> from django . contrib . auth . hashers import check_password <EOL> from django . utils import timezone <EOL> from dvadmin . utils . validator import CustomValidationError <EOL> logger = logging . getLogger ( __name__ ) <EOL> UserModel = get_user_model ( ) <EOL> class CustomBackend ( ModelBackend ) : <EOL> def authenticate ( self , request , username = None , password = None , ** kwargs ) : <EOL> msg = '<STR_LIT>' % username <EOL> logger . info ( msg ) <EOL> if username is None : <EOL> username = kwargs . get ( UserModel . USERNAME_FIELD ) <EOL> try : <EOL> user = UserModel . _default_manager . get_by_natural_key ( username ) <EOL> except UserModel . DoesNotExist : <EOL> UserModel ( ) . set_password ( password ) <EOL> else : <EOL> verify_password = check_password ( password , user . password ) <EOL> if not verify_password : <EOL> password = hashlib . md5 ( password . encode ( encoding = '<STR_LIT>' ) ) . hexdigest ( ) <EOL> verify_password = check_password ( password , user . password ) <EOL> if verify_password : <EOL> if self . user_can_authenticate ( user ) : <EOL> user . last_login = timezone . now ( ) <EOL> user . save ( ) <EOL> return user <EOL> raise CustomValidationError ( "<STR_LIT>" ) <EOL> </s>
<s> from rest_framework . views import APIView <EOL> from django . shortcuts import render <EOL> class PrivacyView ( APIView ) : <EOL> permission_classes = [ ] <EOL> def get ( self , request , * args , ** kwargs ) : <EOL> return render ( request , '<STR_LIT>' ) <EOL> class TermsServiceView ( APIView ) : <EOL> permission_classes = [ ] <EOL> def get ( self , request , * args , ** kwargs ) : <EOL> return render ( request , '<STR_LIT>' ) <EOL> </s>
<s> import hashlib <EOL> import random <EOL> CHAR_SET = ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , <EOL> "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , <EOL> "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , <EOL> "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> def random_str ( number = <NUM_LIT> ) : <EOL> result = "<STR_LIT>" <EOL> for i in range ( <NUM_LIT> , number ) : <EOL> inx = random . randint ( <NUM_LIT> , len ( CHAR_SET ) - <NUM_LIT> ) <EOL> result += CHAR_SET [ inx ] <EOL> return result <EOL> def has_md5 ( str , salt = '<STR_LIT>' ) : <EOL> str = str + salt <EOL> md = hashlib . md5 ( ) <EOL> md . update ( str . encode ( ) ) <EOL> res = md . hexdigest ( ) <EOL> return res <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( '<STR_LIT>' , '<STR_LIT>' ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == '<STR_LIT>' : <EOL> main ( ) <EOL> </s>
<s> from rest_framework import serializers <EOL> from rest_framework . decorators import action <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from dvadmin . system . models import Dept , RoleMenuButtonPermission , Users <EOL> from dvadmin . utils . json_response import DetailResponse , SuccessResponse , ErrorResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class DeptSerializer ( CustomModelSerializer ) : <EOL> parent_name = serializers . CharField ( read_only = True , source = '<STR_LIT>' ) <EOL> status_label = serializers . SerializerMethodField ( ) <EOL> has_children = serializers . SerializerMethodField ( ) <EOL> hasChild = serializers . SerializerMethodField ( ) <EOL> dept_user_count = serializers . SerializerMethodField ( ) <EOL> def get_dept_user_count ( self , obj : Dept ) : <EOL> return Users . objects . filter ( dept = obj ) . count ( ) <EOL> def get_hasChild ( self , instance ) : <EOL> hasChild = Dept . objects . filter ( parent = instance . id ) <EOL> if hasChild : <EOL> return True <EOL> return False <EOL> def get_status_label ( self , obj : Dept ) : <EOL> if obj . status : <EOL> return "<STR_LIT>" <EOL> return "<STR_LIT>" <EOL> def get_has_children ( self , obj : Dept ) : <EOL> return Dept . objects . filter ( parent_id = obj . id ) . count ( ) <EOL> class Meta : <EOL> model = Dept <EOL> fields = '<STR_LIT>' <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class DeptImportSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = Dept <EOL> fields = '<STR_LIT>' <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class DeptCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> def create ( self , validated_data ) : <EOL> value = validated_data . get ( '<STR_LIT>' , None ) <EOL> if value is None : <EOL> validated_data [ '<STR_LIT>' ] = self . request . user . dept <EOL> dept_obj = Dept . objects . filter ( parent = self . request . user . dept ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> last_sort = dept_obj . sort if dept_obj else <NUM_LIT> <EOL> validated_data [ '<STR_LIT>' ] = last_sort + <NUM_LIT> <EOL> instance = super ( ) . create ( validated_data ) <EOL> instance . dept_belong_id = instance . id <EOL> instance . save ( ) <EOL> return instance <EOL> class Meta : <EOL> model = Dept <EOL> fields = '<STR_LIT>' <EOL> class DeptViewSet ( CustomModelViewSet ) : <EOL> queryset = Dept . objects . all ( ) <EOL> serializer_class = DeptSerializer <EOL> create_serializer_class = DeptCreateUpdateSerializer <EOL> update_serializer_class = DeptCreateUpdateSerializer <EOL> filter_fields = [ '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ] <EOL> search_fields = [ ] <EOL> import_serializer_class = DeptImportSerializer <EOL> import_field_dict = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> def list ( self , request , * args , ** kwargs ) : <EOL> request . query_params . _mutable = True <EOL> params = request . query_params <EOL> parent = params . get ( '<STR_LIT>' , None ) <EOL> page = params . get ( '<STR_LIT>' , None ) <EOL> limit = params . get ( '<STR_LIT>' , None ) <EOL> if page : <EOL> del params [ '<STR_LIT>' ] <EOL> if limit : <EOL> del params [ '<STR_LIT>' ] <EOL> if params and parent : <EOL> queryset = self . queryset . filter ( status = True , parent = parent ) <EOL> else : <EOL> queryset = self . queryset . filter ( status = True ) <EOL> queryset = self . filter_queryset ( queryset ) <EOL> serializer = DeptSerializer ( queryset , many = True , request = request ) <EOL> data = serializer . data <EOL> return SuccessResponse ( data = data ) <EOL> @ action ( methods = [ "<STR_LIT>" ] , detail = False , permission_classes = [ IsAuthenticated ] , extra_filter_class = [ ] ) <EOL> def dept_lazy_tree ( self , request , * args , ** kwargs ) : <EOL> parent = self . request . query_params . get ( '<STR_LIT>' ) <EOL> is_superuser = request . user . is_superuser <EOL> if is_superuser : <EOL> queryset = Dept . objects . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> else : <EOL> role_ids = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> data_range = RoleMenuButtonPermission . objects . filter ( role__in = role_ids ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> user_dept_id = request . user . dept . id <EOL> dept_list = [ user_dept_id ] <EOL> data_range_list = list ( set ( data_range ) ) <EOL> for item in data_range_list : <EOL> if item in [ <NUM_LIT> , <NUM_LIT> ] : <EOL> dept_list = [ user_dept_id ] <EOL> elif item == <NUM_LIT> : <EOL> dept_list = Dept . recursion_all_dept ( dept_id = user_dept_id ) <EOL> elif item == <NUM_LIT> : <EOL> dept_list = Dept . objects . values_list ( '<STR_LIT>' , flat = True ) <EOL> elif item == <NUM_LIT> : <EOL> dept_list = request . user . role . values_list ( '<STR_LIT>' , flat = True ) <EOL> else : <EOL> dept_list = [ ] <EOL> queryset = Dept . objects . filter ( id__in = dept_list ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> return DetailResponse ( data = queryset , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ "<STR_LIT>" ] , detail = False , permission_classes = [ IsAuthenticated ] , extra_filter_class = [ ] ) <EOL> def all_dept ( self , request , * args , ** kwargs ) : <EOL> queryset = self . filter_queryset ( self . get_queryset ( ) ) <EOL> data = queryset . filter ( status = True ) . order_by ( '<STR_LIT>' ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' ) <EOL> return DetailResponse ( data = data , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def move_up ( self , request ) : <EOL> dept_id = request . data . get ( '<STR_LIT>' ) <EOL> try : <EOL> dept = Dept . objects . get ( id = dept_id ) <EOL> except Dept . DoesNotExist : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> previous_menu = Dept . objects . filter ( sort__lt = dept . sort , parent = dept . parent ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> if previous_menu : <EOL> previous_menu . sort , dept . sort = dept . sort , previous_menu . sort <EOL> previous_menu . save ( ) <EOL> dept . save ( ) <EOL> return SuccessResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def move_down ( self , request ) : <EOL> dept_id = request . data [ '<STR_LIT>' ] <EOL> try : <EOL> dept = Dept . objects . get ( id = dept_id ) <EOL> except Dept . DoesNotExist : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> next_menu = Dept . objects . filter ( sort__gt = dept . sort , parent = dept . parent ) . order_by ( '<STR_LIT>' ) . first ( ) <EOL> if next_menu : <EOL> next_menu . sort , dept . sort = dept . sort , next_menu . sort <EOL> next_menu . save ( ) <EOL> dept . save ( ) <EOL> return SuccessResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ ] ) <EOL> def dept_info ( self , request ) : <EOL> def inner ( did , li ) : <EOL> sub = Dept . objects . filter ( parent_id = did ) <EOL> if not sub . exists ( ) : <EOL> return li <EOL> for i in sub : <EOL> li . append ( i . pk ) <EOL> inner ( i , li ) <EOL> return li <EOL> dept_id = request . query_params . get ( '<STR_LIT>' ) <EOL> show_all = request . query_params . get ( '<STR_LIT>' ) <EOL> if dept_id is None : <EOL> return ErrorResponse ( msg = "<STR_LIT>" ) <EOL> if not show_all : <EOL> show_all = <NUM_LIT> <EOL> if int ( show_all ) : <EOL> all_did = [ dept_id ] <EOL> inner ( dept_id , all_did ) <EOL> users = Users . objects . filter ( dept_id__in = all_did ) <EOL> else : <EOL> if dept_id != '<STR_LIT>' : <EOL> users = Users . objects . filter ( dept_id = dept_id ) <EOL> else : <EOL> users = Users . objects . none ( ) <EOL> dept_obj = Dept . objects . get ( id = dept_id ) if dept_id != '<STR_LIT>' else None <EOL> sub_dept = Dept . objects . filter ( parent_id = dept_obj . pk ) if dept_id != '<STR_LIT>' else [ ] <EOL> data = { <EOL> '<STR_LIT>' : dept_obj and dept_obj . name , <EOL> '<STR_LIT>' : users . count ( ) , <EOL> '<STR_LIT>' : dept_obj and dept_obj . owner , <EOL> '<STR_LIT>' : dept_obj and dept_obj . description , <EOL> '<STR_LIT>' : { <EOL> '<STR_LIT>' : users . filter ( gender = <NUM_LIT> ) . count ( ) , <EOL> '<STR_LIT>' : users . filter ( gender = <NUM_LIT> ) . count ( ) , <EOL> '<STR_LIT>' : users . filter ( gender = <NUM_LIT> ) . count ( ) , <EOL> } , <EOL> '<STR_LIT>' : [ ] <EOL> } <EOL> for dept in sub_dept : <EOL> all_did = [ dept . pk ] <EOL> inner ( dept . pk , all_did ) <EOL> sub_data = { <EOL> '<STR_LIT>' : dept . name , <EOL> '<STR_LIT>' : Users . objects . filter ( dept_id__in = all_did ) . count ( ) <EOL> } <EOL> data [ '<STR_LIT>' ] . append ( sub_data ) <EOL> return SuccessResponse ( data ) <EOL> </s>
<s> from drf_yasg . generators import OpenAPISchemaGenerator <EOL> from drf_yasg . inspectors import SwaggerAutoSchema <EOL> from application . settings import SWAGGER_SETTINGS <EOL> def get_summary ( string ) : <EOL> if string is not None : <EOL> result = string . strip ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) . split ( "<STR_LIT>" ) <EOL> return result [ <NUM_LIT> ] <EOL> class CustomSwaggerAutoSchema ( SwaggerAutoSchema ) : <EOL> def get_tags ( self , operation_keys = None ) : <EOL> tags = super ( ) . get_tags ( operation_keys ) <EOL> if "<STR_LIT>" in tags and operation_keys : <EOL> tags [ <NUM_LIT> ] = operation_keys [ SWAGGER_SETTINGS . get ( '<STR_LIT>' , <NUM_LIT> ) ] <EOL> return tags <EOL> def get_summary_and_description ( self ) : <EOL> summary_and_description = super ( ) . get_summary_and_description ( ) <EOL> summary = get_summary ( self . __dict__ . get ( '<STR_LIT>' ) . __doc__ ) <EOL> description = summary_and_description [ <NUM_LIT> ] <EOL> return summary , description <EOL> class CustomOpenAPISchemaGenerator ( OpenAPISchemaGenerator ) : <EOL> def get_schema ( self , request = None , public = False ) : <EOL> swagger = super ( ) . get_schema ( request , public ) <EOL> swagger . tags = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> } , <EOL> ] <EOL> return swagger <EOL> </s>
<s> import json <EOL> from asgiref . sync import async_to_sync <EOL> from channels . layers import get_channel_layer <EOL> from django_restql . fields import DynamicSerializerMethodField <EOL> from rest_framework import serializers <EOL> from rest_framework . decorators import action , permission_classes <EOL> from rest_framework . permissions import IsAuthenticated , AllowAny <EOL> from dvadmin . system . models import MessageCenter , Users , MessageCenterTargetUser <EOL> from dvadmin . utils . json_response import SuccessResponse , DetailResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class MessageCenterSerializer ( CustomModelSerializer ) : <EOL> role_info = DynamicSerializerMethodField ( ) <EOL> user_info = DynamicSerializerMethodField ( ) <EOL> dept_info = DynamicSerializerMethodField ( ) <EOL> is_read = serializers . BooleanField ( read_only = True , source = '<STR_LIT>' ) <EOL> def get_role_info ( self , instance , parsed_query ) : <EOL> roles = instance . target_role . all ( ) <EOL> from dvadmin . system . views . role import RoleSerializer <EOL> serializer = RoleSerializer ( <EOL> roles , <EOL> many = True , <EOL> parsed_query = parsed_query <EOL> ) <EOL> return serializer . data <EOL> def get_user_info ( self , instance , parsed_query ) : <EOL> users = instance . target_user . all ( ) <EOL> from dvadmin . system . views . user import UserSerializer <EOL> serializer = UserSerializer ( <EOL> users , <EOL> many = True , <EOL> parsed_query = parsed_query <EOL> ) <EOL> return serializer . data <EOL> def get_dept_info ( self , instance , parsed_query ) : <EOL> dept = instance . target_dept . all ( ) <EOL> from dvadmin . system . views . dept import DeptSerializer <EOL> serializer = DeptSerializer ( <EOL> dept , <EOL> many = True , <EOL> parsed_query = parsed_query <EOL> ) <EOL> return serializer . data <EOL> class Meta : <EOL> model = MessageCenter <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MessageCenterTargetUserSerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = MessageCenterTargetUser <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MessageCenterTargetUserListSerializer ( CustomModelSerializer ) : <EOL> is_read = serializers . SerializerMethodField ( ) <EOL> def get_is_read ( self , instance ) : <EOL> user_id = self . request . user . id <EOL> message_center_id = instance . id <EOL> queryset = MessageCenterTargetUser . objects . filter ( messagecenter__id = message_center_id , users_id = user_id ) . first ( ) <EOL> if queryset : <EOL> return queryset . is_read <EOL> return False <EOL> class Meta : <EOL> model = MessageCenter <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> def websocket_push ( user_id , message ) : <EOL> username = "<STR_LIT>" + str ( user_id ) <EOL> channel_layer = get_channel_layer ( ) <EOL> async_to_sync ( channel_layer . group_send ) ( <EOL> username , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : message <EOL> } <EOL> ) <EOL> class MessageCenterCreateSerializer ( CustomModelSerializer ) : <EOL> def save ( self , ** kwargs ) : <EOL> data = super ( ) . save ( ** kwargs ) <EOL> initial_data = self . initial_data <EOL> target_type = initial_data . get ( '<STR_LIT>' ) <EOL> users = initial_data . get ( '<STR_LIT>' , [ ] ) <EOL> if target_type in [ <NUM_LIT> ] : <EOL> target_role = initial_data . get ( '<STR_LIT>' , [ ] ) <EOL> users = Users . objects . filter ( role__id__in = target_role ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> if target_type in [ <NUM_LIT> ] : <EOL> target_dept = initial_data . get ( '<STR_LIT>' , [ ] ) <EOL> users = Users . objects . filter ( dept__id__in = target_dept ) . values_list ( '<STR_LIT>' , flat = True ) <EOL> if target_type in [ <NUM_LIT> ] : <EOL> users = Users . objects . values_list ( '<STR_LIT>' , flat = True ) <EOL> targetuser_data = [ ] <EOL> for user in users : <EOL> targetuser_data . append ( { <EOL> "<STR_LIT>" : data . id , <EOL> "<STR_LIT>" : user <EOL> } ) <EOL> targetuser_instance = MessageCenterTargetUserSerializer ( data = targetuser_data , many = True , request = self . request ) <EOL> targetuser_instance . is_valid ( raise_exception = True ) <EOL> targetuser_instance . save ( ) <EOL> for user in users : <EOL> unread_count = MessageCenterTargetUser . objects . filter ( users__id = user , is_read = False ) . count ( ) <EOL> websocket_push ( user , message = { "<STR_LIT>" : '<STR_LIT>' , "<STR_LIT>" : '<STR_LIT>' , <EOL> "<STR_LIT>" : '<STR_LIT>' , "<STR_LIT>" : unread_count } ) <EOL> return data <EOL> class Meta : <EOL> model = MessageCenter <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class MessageCenterViewSet ( CustomModelViewSet ) : <EOL> queryset = MessageCenter . objects . order_by ( '<STR_LIT>' ) <EOL> serializer_class = MessageCenterSerializer <EOL> create_serializer_class = MessageCenterCreateSerializer <EOL> extra_filter_backends = [ ] <EOL> def get_queryset ( self ) : <EOL> if self . action == '<STR_LIT>' : <EOL> return MessageCenter . objects . filter ( creator = self . request . user . id ) . all ( ) <EOL> return MessageCenter . objects . all ( ) <EOL> def retrieve ( self , request , * args , ** kwargs ) : <EOL> pk = kwargs . get ( '<STR_LIT>' ) <EOL> user_id = self . request . user . id <EOL> queryset = MessageCenterTargetUser . objects . filter ( users__id = user_id , messagecenter__id = pk ) . first ( ) <EOL> if queryset : <EOL> queryset . is_read = True <EOL> queryset . save ( ) <EOL> instance = self . get_object ( ) <EOL> serializer = self . get_serializer ( instance ) <EOL> unread_count = MessageCenterTargetUser . objects . filter ( users__id = user_id , is_read = False ) . count ( ) <EOL> websocket_push ( user_id , message = { "<STR_LIT>" : '<STR_LIT>' , "<STR_LIT>" : '<STR_LIT>' , <EOL> "<STR_LIT>" : '<STR_LIT>' , "<STR_LIT>" : unread_count } ) <EOL> return DetailResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def get_self_receive ( self , request ) : <EOL> self_user_id = self . request . user . id <EOL> queryset = MessageCenter . objects . filter ( target_user__id = self_user_id ) <EOL> page = self . paginate_queryset ( queryset ) <EOL> if page is not None : <EOL> serializer = MessageCenterTargetUserListSerializer ( page , many = True , request = request ) <EOL> return self . get_paginated_response ( serializer . data ) <EOL> serializer = MessageCenterTargetUserListSerializer ( queryset , many = True , request = request ) <EOL> return SuccessResponse ( data = serializer . data , msg = "<STR_LIT>" ) <EOL> @ action ( methods = [ '<STR_LIT>' ] , detail = False , permission_classes = [ IsAuthenticated ] ) <EOL> def get_newest_msg ( self , request ) : <EOL> self_user_id = self . request . user . id <EOL> queryset = MessageCenterTargetUser . objects . filter ( users__id = self_user_id ) . order_by ( '<STR_LIT>' ) . last ( ) <EOL> data = None <EOL> if queryset : <EOL> serializer = MessageCenterTargetUserListSerializer ( queryset . messagecenter , many = False , request = request ) <EOL> data = serializer . data <EOL> return DetailResponse ( data = data , msg = "<STR_LIT>" ) <EOL> </s>
<s> from django . conf . urls . static import static <EOL> from django . urls import path , include , re_path <EOL> from drf_yasg import openapi <EOL> from drf_yasg . views import get_schema_view <EOL> from rest_framework import permissions <EOL> from rest_framework_simplejwt . views import ( <EOL> TokenRefreshView , <EOL> ) <EOL> from application import dispatch <EOL> from application import settings <EOL> from dvadmin . system . views . dictionary import InitDictionaryViewSet <EOL> from dvadmin . system . views . login import ( <EOL> LoginView , <EOL> CaptchaView , <EOL> ApiLogin , <EOL> LogoutView , <EOL> LoginTokenView <EOL> ) <EOL> from dvadmin . system . views . system_config import InitSettingsViewSet <EOL> from dvadmin . utils . swagger import CustomOpenAPISchemaGenerator <EOL> dispatch . init_system_config ( ) <EOL> dispatch . init_dictionary ( ) <EOL> schema_view = get_schema_view ( <EOL> openapi . Info ( <EOL> title = "<STR_LIT>" , <EOL> default_version = "<STR_LIT>" , <EOL> description = "<STR_LIT>" , <EOL> terms_of_service = "<STR_LIT>" , <EOL> contact = openapi . Contact ( email = "<STR_LIT>" ) , <EOL> license = openapi . License ( name = "<STR_LIT>" ) , <EOL> ) , <EOL> public = True , <EOL> permission_classes = ( permissions . AllowAny , ) , <EOL> generator_class = CustomOpenAPISchemaGenerator , <EOL> ) <EOL> urlpatterns = ( <EOL> [ <EOL> re_path ( <EOL> r"<STR_LIT>" , <EOL> schema_view . without_ui ( cache_timeout = <NUM_LIT> ) , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> path ( <EOL> "<STR_LIT>" , <EOL> schema_view . with_ui ( "<STR_LIT>" , cache_timeout = <NUM_LIT> ) , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> path ( <EOL> r"<STR_LIT>" , <EOL> schema_view . with_ui ( "<STR_LIT>" , cache_timeout = <NUM_LIT> ) , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> path ( "<STR_LIT>" , include ( "<STR_LIT>" ) ) , <EOL> path ( "<STR_LIT>" , LoginView . as_view ( ) , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , LogoutView . as_view ( ) , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , TokenRefreshView . as_view ( ) , name = "<STR_LIT>" ) , <EOL> re_path ( <EOL> r"<STR_LIT>" , include ( "<STR_LIT>" , namespace = "<STR_LIT>" ) <EOL> ) , <EOL> path ( "<STR_LIT>" , CaptchaView . as_view ( ) ) , <EOL> path ( "<STR_LIT>" , InitDictionaryViewSet . as_view ( ) ) , <EOL> path ( "<STR_LIT>" , InitSettingsViewSet . as_view ( ) ) , <EOL> path ( "<STR_LIT>" , ApiLogin . as_view ( ) ) , <EOL> path ( "<STR_LIT>" , LoginTokenView . as_view ( ) ) , <EOL> ] <EOL> + static ( settings . MEDIA_URL , document_root = settings . MEDIA_ROOT ) <EOL> + static ( settings . STATIC_URL , document_root = settings . STATIC_URL ) <EOL> + [ re_path ( ele . get ( '<STR_LIT>' ) , include ( ele . get ( '<STR_LIT>' ) ) ) for ele in settings . PLUGINS_URL_PATTERNS ] <EOL> ) <EOL> </s>
<s> from rest_framework import serializers <EOL> from rest_framework . views import APIView <EOL> from application import dispatch <EOL> from dvadmin . system . models import Dictionary <EOL> from dvadmin . utils . json_response import SuccessResponse <EOL> from dvadmin . utils . serializers import CustomModelSerializer <EOL> from dvadmin . utils . viewset import CustomModelViewSet <EOL> class DictionarySerializer ( CustomModelSerializer ) : <EOL> class Meta : <EOL> model = Dictionary <EOL> fields = "<STR_LIT>" <EOL> read_only_fields = [ "<STR_LIT>" ] <EOL> class DictionaryCreateUpdateSerializer ( CustomModelSerializer ) : <EOL> value = serializers . CharField ( max_length = <NUM_LIT> ) <EOL> def validate_value ( self , value ) : <EOL> initial_data = self . initial_data <EOL> parent = initial_data . get ( '<STR_LIT>' , None ) <EOL> if parent is None : <EOL> unique = Dictionary . objects . filter ( value = value ) . exists ( ) <EOL> if unique : <EOL> raise serializers . ValidationError ( "<STR_LIT>" ) <EOL> return value <EOL> class Meta : <EOL> model = Dictionary <EOL> fields = '<STR_LIT>' <EOL> class DictionaryViewSet ( CustomModelViewSet ) : <EOL> queryset = Dictionary . objects . all ( ) <EOL> serializer_class = DictionarySerializer <EOL> create_serializer_class = DictionaryCreateUpdateSerializer <EOL> extra_filter_class = [ ] <EOL> search_fields = [ '<STR_LIT>' ] <EOL> def get_queryset ( self ) : <EOL> if self . action == '<STR_LIT>' : <EOL> params = self . request . query_params <EOL> parent = params . get ( '<STR_LIT>' , None ) <EOL> if params : <EOL> if parent : <EOL> queryset = self . queryset . filter ( parent = parent ) <EOL> else : <EOL> queryset = self . queryset . filter ( parent__isnull = True ) <EOL> else : <EOL> queryset = self . queryset . filter ( parent__isnull = True ) <EOL> return queryset <EOL> else : <EOL> return self . queryset <EOL> class InitDictionaryViewSet ( APIView ) : <EOL> authentication_classes = [ ] <EOL> permission_classes = [ ] <EOL> queryset = Dictionary . objects . all ( ) <EOL> def get ( self , request ) : <EOL> dictionary_key = self . request . query_params . get ( '<STR_LIT>' ) <EOL> if dictionary_key : <EOL> if dictionary_key == '<STR_LIT>' : <EOL> data = [ ele for ele in dispatch . get_dictionary_config ( ) . values ( ) ] <EOL> if not data : <EOL> dispatch . refresh_dictionary ( ) <EOL> data = [ ele for ele in dispatch . get_dictionary_config ( ) . values ( ) ] <EOL> else : <EOL> data = self . queryset . filter ( parent__value = dictionary_key , status = True ) . values ( '<STR_LIT>' , '<STR_LIT>' , '<STR_LIT>' , <EOL> '<STR_LIT>' ) <EOL> return SuccessResponse ( data = data , msg = "<STR_LIT>" ) <EOL> return SuccessResponse ( data = [ ] , msg = "<STR_LIT>" ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class ProductsConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> import subprocess <EOL> from pathlib import Path <EOL> import cappa <EOL> import pytest <EOL> from cappa . testing import CommandRunner <EOL> def makemigaration ( ) : <EOL> subprocess . run ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , check = False ) <EOL> def test_rm_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> apps_dir = Path ( ) <EOL> makemigaration ( ) <EOL> first_migration = apps_dir / "<STR_LIT>" <EOL> assert first_migration . exists ( ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert not first_migration . exists ( ) <EOL> def test_rm_migrations_fake_apps_dir ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> apps_dir = Path ( ) <EOL> makemigaration ( ) <EOL> first_migration = apps_dir / "<STR_LIT>" <EOL> assert first_migration . exists ( ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert first_migration . exists ( ) <EOL> def test_rm_migrations_not_clean_repo ( django_project , runner : CommandRunner ) : <EOL> with pytest . raises ( cappa . Exit ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> </s>
<s> from pathlib import Path <EOL> from cappa . testing import CommandRunner <EOL> from falco . config import read_falco_config <EOL> def all_files_are_correctly_generated ( project_name , project_dir : Path ) -> bool : <EOL> required_files = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> f"<STR_LIT>" , <EOL> f"<STR_LIT>" , <EOL> f"<STR_LIT>" , <EOL> ] <EOL> return all ( ( project_dir / file ) . exists ( ) for file in required_files ) <EOL> blueprint_path = Path ( "<STR_LIT>" ) . resolve ( strict = True ) <EOL> def test_start_project ( runner : CommandRunner ) : <EOL> runner . invoke ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> str ( blueprint_path ) , <EOL> ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> config = read_falco_config ( Path ( "<STR_LIT>" ) ) <EOL> config_keys = config . keys ( ) <EOL> assert "<STR_LIT>" in config . get ( "<STR_LIT>" ) <EOL> assert "<STR_LIT>" in config_keys <EOL> assert "<STR_LIT>" in config_keys <EOL> assert "<STR_LIT>" in config_keys <EOL> assert all_files_are_correctly_generated ( "<STR_LIT>" , project_dir = Path ( "<STR_LIT>" ) ) <EOL> def test_start_project_in_directory ( runner : CommandRunner , tmp_path ) : <EOL> runner . invoke ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> str ( blueprint_path ) , <EOL> ) <EOL> project_dir = tmp_path / "<STR_LIT>" / "<STR_LIT>" <EOL> assert project_dir . exists ( ) <EOL> assert all_files_are_correctly_generated ( "<STR_LIT>" , project_dir = project_dir ) <EOL> def test_start_project_in_directory_with_root ( runner : CommandRunner , tmp_path ) : <EOL> runner . invoke ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> str ( blueprint_path ) , <EOL> ) <EOL> project_dir = tmp_path / "<STR_LIT>" <EOL> assert project_dir . exists ( ) <EOL> assert all_files_are_correctly_generated ( "<STR_LIT>" , project_dir = project_dir ) <EOL> def test_user_name_and_email ( runner : CommandRunner , git_user_infos ) : <EOL> name , email = git_user_infos <EOL> runner . invoke ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> str ( blueprint_path ) , <EOL> ) <EOL> pyproject_content = ( Path ( "<STR_LIT>" ) / "<STR_LIT>" ) . read_text ( ) <EOL> assert name in pyproject_content <EOL> assert email in pyproject_content <EOL> </s>
<s> import pytest <EOL> from falco . commands . work import default_address <EOL> from falco . commands . work import default_server_cmd <EOL> from falco . commands . work import Work <EOL> from falco . config import write_falco_config <EOL> def test_env_resolution ( tmp_path ) : <EOL> assert Work ( ) . resolve_django_env ( ) <EOL> def test_env_resolution_with_env ( tmp_path ) : <EOL> ( tmp_path / "<STR_LIT>" ) . write_text ( "<STR_LIT>" ) <EOL> assert "<STR_LIT>" in Work ( ) . resolve_django_env ( ) <EOL> def test_without_pyproject_file ( ) : <EOL> assert Work ( ) . get_commands ( ) == { "<STR_LIT>" : default_server_cmd . format ( address = default_address ) } <EOL> def test_with_pyproject_file ( pyproject_toml ) : <EOL> write_falco_config ( pyproject_path = pyproject_toml , work = { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> assert Work ( ) . get_commands ( ) == { <EOL> "<STR_LIT>" : default_server_cmd . format ( address = default_address ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> def test_override_server ( pyproject_toml ) : <EOL> work = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } <EOL> write_falco_config ( pyproject_path = pyproject_toml , work = work ) <EOL> assert Work ( ) . get_commands ( ) == work <EOL> @ pytest . mark . parametrize ( "<STR_LIT>" , [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] ) <EOL> def test_override_server_through_arg ( address ) : <EOL> assert Work ( address = address ) . get_commands ( ) == { "<STR_LIT>" : default_server_cmd . format ( address = address ) } <EOL> @ pytest . mark . parametrize ( "<STR_LIT>" , [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] ) <EOL> def test_override_server_through_arg_by_pyproject ( pyproject_toml , address ) : <EOL> work = { "<STR_LIT>" : "<STR_LIT>" } <EOL> write_falco_config ( pyproject_path = pyproject_toml , work = work ) <EOL> assert Work ( address = address ) . get_commands ( ) == { "<STR_LIT>" : work [ "<STR_LIT>" ] . format ( address = address ) } <EOL> </s>
<s> from pathlib import Path <EOL> from cappa . testing import CommandRunner <EOL> from tests . commands . test_crud import healthy_django_project <EOL> def test_start_app ( django_project , runner : CommandRunner ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> assert healthy_django_project ( ) <EOL> </s>
<s> import django . utils . timezone <EOL> from django . db import migrations <EOL> from django . db import models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , unique = True ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( "<STR_LIT>" , models . DecimalField ( decimal_places = <NUM_LIT> , max_digits = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , unique = True ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( default = django . utils . timezone . now ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from pathlib import Path <EOL> from cappa . testing import CommandRunner <EOL> from falco . config import write_falco_config <EOL> def test_install_crud_utils ( runner : CommandRunner , pyproject_toml ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> def test_install_crud_utils_to_output_dir ( runner : CommandRunner , pyproject_toml ) : <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , str ( output . resolve ( ) ) ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> def test_install_crud_utils_to_existing_config ( runner : CommandRunner , pyproject_toml ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> write_falco_config ( pyproject_path = pyproject_toml , crud = { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class UsersConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> import subprocess <EOL> from contextlib import suppress <EOL> import cappa <EOL> def clean_git_repo ( * , ignore_dirty : bool = False ) -> None : <EOL> if ignore_dirty : <EOL> return <EOL> with suppress ( subprocess . CalledProcessError ) : <EOL> result = subprocess . run ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , capture_output = True , text = True , check = True ) <EOL> if result . stdout . strip ( ) == "<STR_LIT>" : <EOL> return <EOL> raise cappa . Exit ( <EOL> "<STR_LIT>" , <EOL> code = <NUM_LIT> , <EOL> ) <EOL> </s>
<s> from django . db import migrations <EOL> from django . db import models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . EmailField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . ManyToManyField ( to = "<STR_LIT>" ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> from falco import checks <EOL> from falco . utils import get_project_name <EOL> from falco . utils import run_in_shell <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> def get_django_debug_value ( ) -> bool : <EOL> from django . conf import settings <EOL> return settings . DEBUG <EOL> @ cappa . command ( help = "<STR_LIT>" ) <EOL> class RmMigrations : <EOL> apps_dir : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( default = None , help = "<STR_LIT>" ) , <EOL> ] <EOL> skip_git_check : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self , project_name : Annotated [ str , cappa . Dep ( get_project_name ) ] ) : <EOL> checks . clean_git_repo ( ignore_dirty = self . skip_git_check ) <EOL> django_debug_value = run_in_shell ( get_django_debug_value , eval_result = True ) <EOL> if not django_debug_value : <EOL> raise cappa . Exit ( <EOL> "<STR_LIT>" , <EOL> code = <NUM_LIT> , <EOL> ) <EOL> if not self . apps_dir : <EOL> self . apps_dir = Path ( ) / project_name <EOL> apps = set ( ) <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> for folder in self . apps_dir . iterdir ( ) : <EOL> migration_dir = folder / "<STR_LIT>" <EOL> if not migration_dir . exists ( ) : <EOL> continue <EOL> apps . add ( folder . stem ) <EOL> for file in migration_dir . iterdir ( ) : <EOL> if file . suffix == "<STR_LIT>" and file . name not in [ "<STR_LIT>" ] : <EOL> file . unlink ( ) <EOL> apps_ = "<STR_LIT>" . join ( apps ) <EOL> rich_print ( f"<STR_LIT>" ) <EOL> </s>
<s> from __future__ import annotations <EOL> import os <EOL> import secrets <EOL> import shutil <EOL> import subprocess <EOL> from contextlib import contextmanager <EOL> from contextlib import suppress <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import httpx <EOL> from cookiecutter . config import get_user_config <EOL> from cookiecutter . exceptions import CookiecutterException <EOL> from cookiecutter . main import cookiecutter <EOL> from falco . commands import InstallCrudUtils <EOL> from falco . commands . crud . utils import run_html_formatters <EOL> from falco . commands . htmx import get_latest_tag as htmx_latest_tag <EOL> from falco . commands . htmx import Htmx <EOL> from falco . config import read_falco_config <EOL> from falco . config import write_falco_config <EOL> from falco . utils import clean_project_name <EOL> from falco . utils import is_new_falco_cli_available <EOL> from falco . utils import RICH_INFO_MARKER <EOL> from falco . utils import RICH_SUCCESS_MARKER <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from rich . prompt import Prompt <EOL> DEFAULT_SKIP = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> @ cappa . command ( help = "<STR_LIT>" ) <EOL> class StartProject : <EOL> project_name : Annotated [ <EOL> str , <EOL> cappa . Arg ( parse = clean_project_name , help = "<STR_LIT>" ) , <EOL> ] <EOL> directory : Annotated [ Path | None , cappa . Arg ( help = "<STR_LIT>" ) ] = None <EOL> is_root : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> short = "<STR_LIT>" , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] = False <EOL> skip_new_version_check : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] = False <EOL> blueprint : Annotated [ <EOL> str , <EOL> cappa . Arg ( <EOL> default = "<STR_LIT>" , <EOL> long = "<STR_LIT>" , <EOL> short = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] = "<STR_LIT>" <EOL> local : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> long = "<STR_LIT>" , <EOL> short = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] = False <EOL> checkout : Annotated [ str | None , cappa . Arg ( default = None , long = "<STR_LIT>" , short = "<STR_LIT>" , hidden = True ) ] = None <EOL> def __call__ ( self ) -> None : <EOL> if self . is_root and not self . directory : <EOL> raise cappa . Exit ( "<STR_LIT>" , code = <NUM_LIT> ) <EOL> if not self . skip_new_version_check and is_new_falco_cli_available ( ) : <EOL> message = ( <EOL> f"<STR_LIT>" <EOL> f"<STR_LIT>" <EOL> ) <EOL> rich_print ( message ) <EOL> response = Prompt . ask ( <EOL> f"<STR_LIT>" , <EOL> default = "<STR_LIT>" , <EOL> ) <EOL> if response . lower ( ) == "<STR_LIT>" : <EOL> rich_print ( <EOL> f"<STR_LIT>" <EOL> f"<STR_LIT>" <EOL> ) <EOL> raise cappa . Exit ( code = <NUM_LIT> ) <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> self . blueprint , revision = resolve_blueprint ( self . blueprint , use_local = self . local ) <EOL> project_dir = self . init_project ( ) <EOL> with change_directory ( project_dir ) : <EOL> pyproject_path = Path ( "<STR_LIT>" ) <EOL> falco_config = read_falco_config ( pyproject_path ) <EOL> crud_utils = InstallCrudUtils ( ) . install ( project_name = self . project_name , falco_config = falco_config ) <EOL> env_file = Path ( "<STR_LIT>" ) <EOL> env_file . touch ( ) <EOL> env_file . write_text ( "<STR_LIT>" ) <EOL> config = { <EOL> "<STR_LIT>" : { "<STR_LIT>" : str ( crud_utils ) } , <EOL> "<STR_LIT>" : revision , <EOL> "<STR_LIT>" : DEFAULT_SKIP , <EOL> "<STR_LIT>" : self . blueprint , <EOL> } <EOL> if not self . local : <EOL> with suppress ( cappa . Exit , httpx . TimeoutException , httpx . ConnectError ) : <EOL> version = htmx_latest_tag ( ) <EOL> filepath = Htmx ( ) . download ( version = htmx_latest_tag ( ) , falco_config = falco_config ) <EOL> config [ "<STR_LIT>" ] = Htmx . format_for_config ( filepath , version ) <EOL> write_falco_config ( pyproject_path = pyproject_path , ** config ) <EOL> run_html_formatters ( project_dir / self . project_name / "<STR_LIT>" ) <EOL> msg = f"<STR_LIT>" <EOL> msg += ( <EOL> f"<STR_LIT>" <EOL> f"<STR_LIT>" <EOL> ) <EOL> rich_print ( msg ) <EOL> def init_project ( self ) -> Path : <EOL> author_name , author_email = get_authors_info ( ) <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> try : <EOL> project_dir = cookiecutter ( <EOL> self . blueprint , <EOL> no_input = True , <EOL> output_dir = self . directory or Path ( ) , <EOL> checkout = self . checkout , <EOL> extra_context = { <EOL> "<STR_LIT>" : self . project_name , <EOL> "<STR_LIT>" : author_name , <EOL> "<STR_LIT>" : author_email , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } , <EOL> ) <EOL> except CookiecutterException as e : <EOL> msg = str ( e ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) from e <EOL> if self . is_root : <EOL> renamed_project_dir = self . directory / "<STR_LIT>" <EOL> shutil . move ( project_dir , renamed_project_dir ) <EOL> for obj in Path ( renamed_project_dir ) . iterdir ( ) : <EOL> shutil . move ( obj , self . directory ) <EOL> renamed_project_dir . rmdir ( ) <EOL> project_dir = self . directory <EOL> return Path ( project_dir ) <EOL> def find_local_cookiecutter ( repo : str ) -> Path | None : <EOL> repo_name = repo . split ( "<STR_LIT>" ) [ - <NUM_LIT> ] . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> cookiecutters_dir = Path ( get_user_config ( ) [ "<STR_LIT>" ] ) <EOL> if not cookiecutters_dir . exists ( ) : <EOL> return None <EOL> for directory in cookiecutters_dir . iterdir ( ) : <EOL> if not directory . is_dir ( ) : <EOL> continue <EOL> is_empty = not list ( directory . iterdir ( ) ) <EOL> if directory . is_dir ( ) and not is_empty and directory . name == repo_name : <EOL> return directory <EOL> return None <EOL> def resolve_blueprint ( blueprint : str , * , use_local : bool = False ) -> tuple [ str , str ] : <EOL> name_to_urls = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> repo = name_to_urls . get ( blueprint , blueprint ) <EOL> if repo . startswith ( "<STR_LIT>" ) and use_local : <EOL> if local_repo := find_local_cookiecutter ( repo ) : <EOL> repo = str ( local_repo . resolve ( ) ) <EOL> else : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> result = subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , repo , "<STR_LIT>" ] , <EOL> capture_output = True , <EOL> text = True , <EOL> check = False , <EOL> ) <EOL> if result . returncode != <NUM_LIT> : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> revision = result . stdout . split ( "<STR_LIT>" ) [ <NUM_LIT> ] . split ( ) [ <NUM_LIT> ] . strip ( ) <EOL> return repo , revision <EOL> def get_authors_info ( ) -> tuple [ str , str ] : <EOL> default_author_name = "<STR_LIT>" <EOL> default_author_email = "<STR_LIT>" <EOL> git_config_cmd = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> try : <EOL> user_name_cmd = subprocess . run ( [ * git_config_cmd , "<STR_LIT>" ] , capture_output = True , text = True , check = False ) <EOL> user_email_cmd = subprocess . run ( [ * git_config_cmd , "<STR_LIT>" ] , capture_output = True , text = True , check = False ) <EOL> except FileNotFoundError : <EOL> return default_author_name , default_author_email <EOL> if user_email_cmd . returncode != <NUM_LIT> : <EOL> return default_author_name , default_author_email <EOL> return ( <EOL> user_name_cmd . stdout . strip ( "<STR_LIT>" ) , <EOL> user_email_cmd . stdout . strip ( "<STR_LIT>" ) , <EOL> ) <EOL> @ contextmanager <EOL> def change_directory ( new_directory : str | Path ) : <EOL> current_directory = Path . cwd ( ) <EOL> try : <EOL> os . chdir ( new_directory ) <EOL> yield <EOL> finally : <EOL> os . chdir ( current_directory ) <EOL> </s>
<s> from pathlib import Path <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent <EOL> SECRET_KEY = "<STR_LIT>" <EOL> DEBUG = True <EOL> ALLOWED_HOSTS = [ ] <EOL> AUTH_USER_MODEL = "<STR_LIT>" <EOL> INSTALLED_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> MIDDLEWARE = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> ROOT_URLCONF = "<STR_LIT>" <EOL> TEMPLATES = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ BASE_DIR / "<STR_LIT>" ] , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = "<STR_LIT>" <EOL> DATABASES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : BASE_DIR / "<STR_LIT>" , <EOL> } <EOL> } <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ] <EOL> LANGUAGE_CODE = "<STR_LIT>" <EOL> TIME_ZONE = "<STR_LIT>" <EOL> USE_I18N = True <EOL> USE_TZ = True <EOL> STATIC_URL = "<STR_LIT>" <EOL> DEFAULT_AUTO_FIELD = "<STR_LIT>" <EOL> CRISPY_ALLOWED_TEMPLATE_PACKS = "<STR_LIT>" <EOL> CRISPY_TEMPLATE_PACK = "<STR_LIT>" <EOL> SUPERUSER_EMAIL = "<STR_LIT>" <EOL> SUPERUSER_PASSWORD = "<STR_LIT>" <EOL> </s>
<s> from django . db import migrations <EOL> from django . db import models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import ast <EOL> import inspect <EOL> import subprocess <EOL> from collections . abc import Callable <EOL> from contextlib import contextmanager <EOL> from pathlib import Path <EOL> from typing import TypeVar <EOL> import cappa <EOL> import httpx <EOL> import tomlkit <EOL> from falco import falco_version <EOL> from rich . progress import Progress <EOL> from rich . progress import SpinnerColumn <EOL> from rich . progress import TextColumn <EOL> ReturnType = TypeVar ( "<STR_LIT>" ) <EOL> RICH_SUCCESS_MARKER = "<STR_LIT>" <EOL> RICH_ERROR_MARKER = "<STR_LIT>" <EOL> RICH_INFO_MARKER = "<STR_LIT>" <EOL> def clean_project_name ( val : str ) -> str : <EOL> return val . strip ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> def get_pyproject_file ( ) -> Path : <EOL> pyproject_path = Path ( "<STR_LIT>" ) <EOL> if pyproject_path . exists ( ) : <EOL> return pyproject_path <EOL> raise cappa . Exit ( "<STR_LIT>" , code = <NUM_LIT> ) <EOL> def get_project_name ( ) -> str : <EOL> pyproject = tomlkit . parse ( get_pyproject_file ( ) . read_text ( ) ) <EOL> return pyproject [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> @ contextmanager <EOL> def simple_progress ( description : str , display_text = "<STR_LIT>" ) : <EOL> progress = Progress ( SpinnerColumn ( ) , TextColumn ( display_text ) , transient = True ) <EOL> progress . add_task ( description = description , total = None ) <EOL> try : <EOL> yield progress . start ( ) <EOL> finally : <EOL> progress . stop ( ) <EOL> @ contextmanager <EOL> def network_request_with_progress ( url : str , description : str ) : <EOL> try : <EOL> with simple_progress ( description ) : <EOL> yield httpx . get ( url ) <EOL> except httpx . ConnectError as e : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) from e <EOL> class ShellCodeError ( Exception ) : <EOL> pass <EOL> def run_in_shell ( func : Callable [ ... , ReturnType ] , * , eval_result : bool = True , ** kwargs ) -> ReturnType : <EOL> source = inspect . getsource ( func ) <EOL> arguments_list = [ ] <EOL> for k , v in kwargs . items ( ) : <EOL> if isinstance ( v , str ) : <EOL> arguments_list . append ( f"<STR_LIT>" ) <EOL> else : <EOL> arguments_list . append ( f"<STR_LIT>" ) <EOL> arguments = "<STR_LIT>" . join ( arguments_list ) <EOL> func_call = f"<STR_LIT>" <EOL> code = f"<STR_LIT>" <EOL> result = subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , code ] , <EOL> capture_output = True , <EOL> text = True , <EOL> check = False , <EOL> ) <EOL> if result . returncode != <NUM_LIT> : <EOL> raise ShellCodeError ( result . stderr ) <EOL> return ast . literal_eval ( result . stdout ) if eval_result else result . stdout . strip ( ) <EOL> def is_new_falco_cli_available ( ) -> bool : <EOL> try : <EOL> with network_request_with_progress ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) as response : <EOL> latest_version = response . json ( ) [ "<STR_LIT>" ] [ "<STR_LIT>" ] <EOL> current_version = falco_version <EOL> return latest_version != current_version <EOL> except cappa . Exit : <EOL> return False <EOL> </s>
<s> import falco <EOL> project = "<STR_LIT>" <EOL> copyright = "<STR_LIT>" <EOL> author = "<STR_LIT>" <EOL> version = falco . falco_version <EOL> release = version <EOL> extensions = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> todo_include_todos = True <EOL> extlinks = { <EOL> "<STR_LIT>" : ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> "<STR_LIT>" : ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> } <EOL> templates_path = [ "<STR_LIT>" ] <EOL> exclude_patterns = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> html_theme = "<STR_LIT>" <EOL> html_static_path = [ "<STR_LIT>" ] <EOL> html_baseurl = "<STR_LIT>" <EOL> html_title = "<STR_LIT>" <EOL> html_context = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> html_theme_options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } <EOL> html_logo = "<STR_LIT>" <EOL> html_favicon = "<STR_LIT>" <EOL> html_css_files = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> html_js_files = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) , <EOL> "<STR_LIT>" , <EOL> ] <EOL> mermaid_version = "<STR_LIT>" <EOL> mermaid_output_format = "<STR_LIT>" <EOL> </s>
<s> from django . db import migrations <EOL> from django . db import models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( blank = True , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . ImageField ( blank = True , null = True , upload_to = "<STR_LIT>" ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . FileField ( blank = True , null = True , upload_to = "<STR_LIT>" ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib import admin <EOL> from . models import Product <EOL> admin . site . register ( Product ) <EOL> </s>
<s> from pathlib import Path <EOL> from typing import cast <EOL> from typing import TypedDict <EOL> import tomlkit <EOL> from typing_extensions import Unpack <EOL> class FalcoConfig ( TypedDict , total = False ) : <EOL> revision : str <EOL> blueprint : str <EOL> skip : list [ str ] <EOL> work : dict [ str , str ] <EOL> htmx : str <EOL> crud : "<STR_LIT>" <EOL> class CRUDConfig ( TypedDict ) : <EOL> blueprints : str <EOL> utils_path : str <EOL> login_required : bool <EOL> skip_git_check : bool <EOL> always_migrate : bool <EOL> def parse_crud_config_from_pyproject ( values : dict ) -> dict : <EOL> return { key . lower ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) : value for key , value in values . items ( ) } <EOL> def parse_crud_config_to_pyproject ( values : dict ) -> dict : <EOL> return { key . lower ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) : value for key , value in values . items ( ) } <EOL> def write_falco_config ( pyproject_path : Path , ** kwargs : Unpack [ TypedDict ] ) -> None : <EOL> new_falco_config = kwargs <EOL> new_crud_config = parse_crud_config_to_pyproject ( new_falco_config . pop ( "<STR_LIT>" , { } ) ) <EOL> pyproject = tomlkit . parse ( pyproject_path . read_text ( ) ) <EOL> existing_falco_config = pyproject . get ( "<STR_LIT>" , { } ) . get ( "<STR_LIT>" , { } ) <EOL> existing_crud_config = existing_falco_config . pop ( "<STR_LIT>" , { } ) <EOL> existing_crud_config . update ( new_crud_config ) <EOL> existing_falco_config . update ( { ** new_falco_config , "<STR_LIT>" : existing_crud_config } ) <EOL> tool = pyproject . get ( "<STR_LIT>" , { } ) <EOL> tool . update ( { "<STR_LIT>" : existing_falco_config } ) <EOL> pyproject [ "<STR_LIT>" ] = tool <EOL> pyproject_path . write_text ( tomlkit . dumps ( pyproject ) ) <EOL> def read_falco_config ( pyproject_path : Path ) -> FalcoConfig : <EOL> pyproject = tomlkit . parse ( pyproject_path . read_text ( ) ) <EOL> falco_config = pyproject . get ( "<STR_LIT>" , { } ) . get ( "<STR_LIT>" , { } ) <EOL> crud_config = falco_config . pop ( "<STR_LIT>" , { } ) <EOL> crud_config = parse_crud_config_from_pyproject ( crud_config ) <EOL> return cast ( FalcoConfig , { ** falco_config , "<STR_LIT>" : crud_config } ) <EOL> </s>
<s> from demo . users . models import User <EOL> from django . http import HttpRequest as HttpRequestBase <EOL> from django_htmx . middleware import HtmxDetails <EOL> class HttpRequest ( HttpRequestBase ) : <EOL> htmx : HtmxDetails <EOL> class AuthenticatedHttpRequest ( HttpRequest ) : <EOL> user : User <EOL> </s>
<s> import django . contrib . auth . models <EOL> import django . contrib . auth . validators <EOL> import django . utils . timezone <EOL> from django . db import migrations <EOL> from django . db import models <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BigAutoField ( <EOL> auto_created = True , <EOL> primary_key = True , <EOL> serialize = False , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( blank = True , null = True , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = False , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( <EOL> error_messages = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> help_text = "<STR_LIT>" , <EOL> max_length = <NUM_LIT> , <EOL> unique = True , <EOL> validators = [ django . contrib . auth . validators . UnicodeUsernameValidator ( ) ] , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . CharField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . EmailField ( blank = True , max_length = <NUM_LIT> , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = False , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . BooleanField ( <EOL> default = True , <EOL> help_text = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . DateTimeField ( default = django . utils . timezone . now , verbose_name = "<STR_LIT>" ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> models . ManyToManyField ( <EOL> blank = True , <EOL> help_text = "<STR_LIT>" , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> verbose_name = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> managers = [ <EOL> ( "<STR_LIT>" , django . contrib . auth . models . UserManager ( ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> import io <EOL> import os <EOL> from pathlib import Path <EOL> from unittest . mock import patch <EOL> import tomlkit <EOL> from cappa . testing import CommandRunner <EOL> def test_sync_dotenv ( runner : CommandRunner , pyproject_toml ) : <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> env_file = Path ( "<STR_LIT>" ) <EOL> env_template_file = Path ( "<STR_LIT>" ) <EOL> assert env_file . exists ( ) <EOL> assert env_template_file . exists ( ) <EOL> assert "<STR_LIT>" in env_file . read_text ( ) <EOL> assert "<STR_LIT>" in env_template_file . read_text ( ) <EOL> def test_sync_dotenv_update_files ( runner : CommandRunner , pyproject_toml ) : <EOL> env_file = Path ( "<STR_LIT>" ) <EOL> env_template_file = Path ( "<STR_LIT>" ) <EOL> env_file . write_text ( "<STR_LIT>" ) <EOL> env_template_file . write_text ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> assert "<STR_LIT>" in env_file . read_text ( ) <EOL> assert "<STR_LIT>" in env_template_file . read_text ( ) <EOL> def test_sync_dotenv_priority ( runner : CommandRunner , pyproject_toml ) : <EOL> env_file = Path ( "<STR_LIT>" ) <EOL> env_template_file = Path ( "<STR_LIT>" ) <EOL> env_file . write_text ( "<STR_LIT>" ) <EOL> env_template_file . write_text ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> assert "<STR_LIT>" in env_file . read_text ( ) <EOL> def test_print_value ( runner : CommandRunner , pyproject_toml ) : <EOL> env_template_file = Path ( "<STR_LIT>" ) <EOL> env_template_file . write_text ( "<STR_LIT>" ) <EOL> with patch ( "<STR_LIT>" , new = io . StringIO ( ) ) as fake_stdout : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> stdout = fake_stdout . getvalue ( ) <EOL> assert not Path ( "<STR_LIT>" ) . exists ( ) <EOL> assert "<STR_LIT>" in stdout <EOL> def test_prod_config ( runner : CommandRunner , pyproject_toml ) : <EOL> os . environ [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> pyproject = tomlkit . parse ( pyproject_toml . read_text ( ) ) <EOL> pyproject [ "<STR_LIT>" ] [ "<STR_LIT>" ] = [ { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } ] <EOL> pyproject_toml . write_text ( tomlkit . dumps ( pyproject ) ) <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> assert "<STR_LIT>" in Path ( "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" in Path ( "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" in Path ( "<STR_LIT>" ) . read_text ( ) <EOL> </s>
<s> import os <EOL> import sys <EOL> def main ( ) : <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> try : <EOL> from django . core . management import execute_from_command_line <EOL> except ImportError as exc : <EOL> raise ImportError ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) from exc <EOL> execute_from_command_line ( sys . argv ) <EOL> if __name__ == "<STR_LIT>" : <EOL> main ( ) <EOL> </s>
<s> from pathlib import Path <EOL> from unittest . mock import patch <EOL> import pytest <EOL> from cappa . testing import CommandRunner <EOL> from falco . commands . htmx import Htmx <EOL> from falco . config import read_falco_config <EOL> from falco . config import write_falco_config <EOL> @ pytest . fixture ( autouse = True ) <EOL> def mock_latest_tag_getter ( ) : <EOL> def _get_latest_tag ( ) : <EOL> return "<STR_LIT>" <EOL> with patch ( "<STR_LIT>" , new = _get_latest_tag ) : <EOL> yield <EOL> def test_htmx_download ( runner : CommandRunner ) : <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> def test_htmx_download_with_version ( runner : CommandRunner ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> def test_htmx_download_with_specific_version ( runner : CommandRunner ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> def test_htmx_download_to_output_dir ( runner : CommandRunner ) : <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , str ( output . resolve ( ) ) ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> def test_htmx_download_to_output_file ( runner : CommandRunner ) : <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , str ( output . resolve ( ) ) ) <EOL> assert output . exists ( ) <EOL> def test_htmx_with_pyproject_toml ( runner : CommandRunner ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml ) <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> filepath , version = Htmx . read_from_config ( read_falco_config ( pyproject_toml ) ) <EOL> assert filepath == Path ( "<STR_LIT>" ) <EOL> def test_htmx_with_pyproject_toml_custom_folder ( runner : CommandRunner ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> output = Path ( "<STR_LIT>" ) <EOL> assert output . exists ( ) <EOL> filepath , version = Htmx . read_from_config ( read_falco_config ( pyproject_toml ) ) <EOL> assert filepath == output <EOL> def test_htmx_with_pyproject_toml_custom_file ( runner : CommandRunner ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> output = Path ( "<STR_LIT>" ) <EOL> assert output . exists ( ) <EOL> filepath , version = Htmx . read_from_config ( read_falco_config ( pyproject_toml ) ) <EOL> assert filepath == output <EOL> def test_htmx_with_pyproject_toml_custom_file_existing_config ( runner : CommandRunner ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml , htmx = "<STR_LIT>" ) <EOL> existing_path = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" ) <EOL> filepath , _ = Htmx . read_from_config ( read_falco_config ( pyproject_toml ) ) <EOL> assert filepath == existing_path <EOL> assert existing_path . exists ( ) <EOL> </s>
<s> __version__ = "<STR_LIT>" <EOL> </s>
<s> from django . db import models <EOL> class Order ( models . Model ) : <EOL> name = models . CharField ( max_length = <NUM_LIT> ) <EOL> email = models . EmailField ( ) <EOL> address = models . CharField ( max_length = <NUM_LIT> ) <EOL> postal_code = models . CharField ( max_length = <NUM_LIT> ) <EOL> city = models . CharField ( max_length = <NUM_LIT> ) <EOL> products = models . ManyToManyField ( "<STR_LIT>" ) <EOL> created = models . DateTimeField ( auto_now_add = True ) <EOL> completed = models . BooleanField ( default = False ) <EOL> receipt = models . FileField ( null = True , blank = True ) <EOL> image = models . ImageField ( null = True , blank = True ) <EOL> </s>
<s> import pathlib <EOL> from tempfile import TemporaryDirectory <EOL> from falco . commands import StartProject <EOL> from rich . console import Console <EOL> from rich . markup import escape <EOL> from rich . terminal_theme import DIMMED_MONOKAI <EOL> from rich . text import Text <EOL> from rich . tree import Tree <EOL> def walk_directory ( directory : pathlib . Path , tree : Tree ) -> None : <EOL> paths = sorted ( <EOL> pathlib . Path ( directory ) . iterdir ( ) , <EOL> key = lambda path : ( path . is_file ( ) , path . name . lower ( ) ) , <EOL> ) <EOL> for path in paths : <EOL> if path . is_dir ( ) : <EOL> style = "<STR_LIT>" if path . name . startswith ( "<STR_LIT>" ) else "<STR_LIT>" <EOL> branch = tree . add ( <EOL> f"<STR_LIT>" , <EOL> style = style , <EOL> guide_style = style , <EOL> ) <EOL> walk_directory ( path , branch ) <EOL> else : <EOL> text_filename = Text ( path . name , "<STR_LIT>" ) <EOL> text_filename . highlight_regex ( r"<STR_LIT>" , "<STR_LIT>" ) <EOL> text_filename . stylize ( f"<STR_LIT>" ) <EOL> icon = "<STR_LIT>" if path . suffix == "<STR_LIT>" else "<STR_LIT>" <EOL> tree . add ( Text ( icon ) + text_filename ) <EOL> def main ( ) : <EOL> tree = Tree ( <EOL> "<STR_LIT>" <EOL> ) <EOL> with TemporaryDirectory ( ) as temp : <EOL> temp_dir = pathlib . Path ( temp ) <EOL> StartProject ( <EOL> project_name = "<STR_LIT>" , <EOL> directory = temp_dir . resolve ( ) , <EOL> is_root = True , <EOL> skip_new_version_check = True , <EOL> ) ( ) <EOL> walk_directory ( temp_dir , tree ) <EOL> console = Console ( record = True ) <EOL> with console . capture ( ) : <EOL> console . print ( tree ) <EOL> console . save_svg ( <EOL> "<STR_LIT>" , <EOL> title = "<STR_LIT>" , <EOL> theme = DIMMED_MONOKAI , <EOL> ) <EOL> if __name__ == "<STR_LIT>" : <EOL> main ( ) <EOL> </s>
<s> import subprocess <EOL> from pathlib import Path <EOL> import cappa <EOL> import pytest <EOL> from cappa . testing import CommandRunner <EOL> from falco . config import write_falco_config <EOL> views_functions = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> html_templates = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> views_functions_entry_point = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> html_templates_point = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> forms_attributes = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> admin_attributes = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> def create_pyproject_crud_config ( ** kwargs ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml , crud = kwargs ) <EOL> def healthy_django_project ( ) -> bool : <EOL> result = subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> check = False , <EOL> capture_output = True , <EOL> text = True , <EOL> ) <EOL> return result . returncode == <NUM_LIT> <EOL> def fix_users_import ( ) : <EOL> types = Path ( "<STR_LIT>" ) <EOL> types . write_text ( types . read_text ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) ) <EOL> def install_crud_utils ( runner ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> fix_users_import ( ) <EOL> def test_crud ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for a in forms_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for a in admin_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for f in views_functions : <EOL> assert f in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates : <EOL> assert ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_all_models ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for a in forms_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for a in admin_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for f in views_functions : <EOL> assert f in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates : <EOL> assert ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_login ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for a in forms_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for a in admin_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for f in views_functions : <EOL> assert f in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates : <EOL> assert ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_entry_point ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for a in forms_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for a in admin_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for f in views_functions_entry_point : <EOL> assert f in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates_point : <EOL> assert ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_entry_point_login ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for a in forms_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for a in admin_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for f in views_functions_entry_point : <EOL> assert f in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates_point : <EOL> assert ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_only_html ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert not ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> assert not ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for f in views_functions : <EOL> assert f not in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates : <EOL> assert ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_only_python ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert ( app_dir / "<STR_LIT>" ) . exists ( ) <EOL> for a in forms_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for a in admin_attributes : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for f in views_functions : <EOL> assert f in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> for t in html_templates : <EOL> assert not ( app_dir / "<STR_LIT>" / "<STR_LIT>" / f"<STR_LIT>" ) . exists ( ) <EOL> def test_crud_repo_not_clean ( django_project , runner : CommandRunner ) : <EOL> with pytest . raises ( cappa . Exit ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> def test_crud_exclude_field ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> app_dir = Path ( "<STR_LIT>" ) <EOL> assert "<STR_LIT>" not in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" not in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" not in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> forms_attributes_ = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> for a in forms_attributes_ : <EOL> assert a in ( app_dir / "<STR_LIT>" ) . read_text ( ) <EOL> def test_crud_login_required ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> views = ( Path ( "<STR_LIT>" ) / "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" in views <EOL> assert "<STR_LIT>" in views <EOL> def test_crud_config_pyproject_skip_git_check_set ( django_project , runner : CommandRunner ) : <EOL> create_pyproject_crud_config ( skip_git_check = True ) <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> views = ( Path ( "<STR_LIT>" ) / "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" in views <EOL> def test_crud_config_pyproject_login_required ( django_project , runner : CommandRunner ) : <EOL> create_pyproject_crud_config ( skip_git_check = True , login_required = True ) <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> views = ( Path ( "<STR_LIT>" ) / "<STR_LIT>" ) . read_text ( ) <EOL> assert "<STR_LIT>" in views <EOL> assert "<STR_LIT>" in views <EOL> def test_crud_config_pyproject_blueprints ( django_project , runner : CommandRunner ) : <EOL> bp = django_project / "<STR_LIT>" <EOL> bp . mkdir ( ) <EOL> html_file = bp / "<STR_LIT>" <EOL> html_file . touch ( ) <EOL> html_file . write_text ( "<STR_LIT>" ) <EOL> create_pyproject_crud_config ( blueprints = str ( Path ( "<STR_LIT>" ) ) , skip_git_check = True ) <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> views = ( Path ( "<STR_LIT>" ) / "<STR_LIT>" ) . read_text ( ) <EOL> rendered_file = Path ( "<STR_LIT>" ) / "<STR_LIT>" / "<STR_LIT>" / "<STR_LIT>" <EOL> assert rendered_file . exists ( ) <EOL> assert "<STR_LIT>" in rendered_file . read_text ( ) <EOL> assert "<STR_LIT>" in views <EOL> def test_crud_always_migrate ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> create_pyproject_crud_config ( always_migrate = True ) <EOL> settings = django_project / "<STR_LIT>" / "<STR_LIT>" <EOL> settings . write_text ( settings . read_text ( ) + "<STR_LIT>" + "<STR_LIT>" ) <EOL> install_crud_utils ( runner ) <EOL> with pytest . raises ( cappa . Exit ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert "<STR_LIT>" not in Path ( "<STR_LIT>" ) . read_text ( ) <EOL> assert not healthy_django_project ( ) <EOL> def test_forms_dates_widgets ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : <EOL> install_crud_utils ( runner ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> models = django_project / "<STR_LIT>" / "<STR_LIT>" / "<STR_LIT>" <EOL> models . write_text ( <EOL> models . read_text ( ) <EOL> + "<STR_LIT>" <EOL> + "<STR_LIT>" <EOL> + "<STR_LIT>" <EOL> ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert healthy_django_project ( ) <EOL> assert "<STR_LIT>" not in ( django_project / "<STR_LIT>" / "<STR_LIT>" ) . read_text ( ) <EOL> forms = django_project / "<STR_LIT>" / "<STR_LIT>" / "<STR_LIT>" <EOL> assert "<STR_LIT>" in forms . read_text ( ) <EOL> assert "<STR_LIT>" in forms . read_text ( ) <EOL> assert "<STR_LIT>" in forms . read_text ( ) <EOL> assert "<STR_LIT>" in forms . read_text ( ) <EOL> </s>
<s> import os <EOL> import subprocess <EOL> from unittest . mock import MagicMock <EOL> from unittest . mock import patch <EOL> import pytest <EOL> from cappa . testing import CommandRunner <EOL> from falco . __main__ import Falco <EOL> @ pytest . fixture ( autouse = True ) <EOL> def change_test_dir ( monkeypatch , tmp_path ) : <EOL> monkeypatch . chdir ( tmp_path ) <EOL> @ pytest . fixture <EOL> def runner ( ) : <EOL> return CommandRunner ( Falco ) <EOL> @ pytest . fixture <EOL> def django_project ( tmp_path ) : <EOL> project_dir = tmp_path / "<STR_LIT>" <EOL> subprocess . run ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , check = True ) <EOL> os . chdir ( project_dir ) <EOL> subprocess . run ( [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , check = True ) <EOL> model_code = <EOL> ( project_dir / "<STR_LIT>" / "<STR_LIT>" ) . write_text ( model_code ) <EOL> settings_file = project_dir / "<STR_LIT>" / "<STR_LIT>" <EOL> settings_content = settings_file . read_text ( ) <EOL> settings_file . write_text ( settings_content + "<STR_LIT>" + "<STR_LIT>" ) <EOL> ( project_dir / "<STR_LIT>" ) . write_text ( <EOL> ) <EOL> yield project_dir <EOL> os . chdir ( tmp_path ) <EOL> @ pytest . fixture <EOL> def set_git_repo_to_clean ( ) : <EOL> def mock_run ( args , ** kwargs ) : <EOL> if args == [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> mock = MagicMock ( ) <EOL> mock . returncode = <NUM_LIT> <EOL> mock . stdout = "<STR_LIT>" <EOL> return mock <EOL> return original_run ( args , ** kwargs ) <EOL> original_run = subprocess . run <EOL> with patch ( "<STR_LIT>" , side_effect = mock_run ) : <EOL> yield <EOL> @ pytest . fixture <EOL> def pyproject_toml ( tmp_path ) : <EOL> pyproject_toml = tmp_path / "<STR_LIT>" <EOL> pyproject_toml . write_text ( <EOL> ) <EOL> yield pyproject_toml <EOL> pyproject_toml . unlink ( ) <EOL> @ pytest . fixture <EOL> def git_user_infos ( ) : <EOL> name = "<STR_LIT>" <EOL> email = "<STR_LIT>" <EOL> def mock_run ( args , ** kwargs ) : <EOL> if args == [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> mock = MagicMock ( ) <EOL> mock . returncode = <NUM_LIT> <EOL> mock . stdout = name <EOL> return mock <EOL> if args == [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] : <EOL> mock = MagicMock ( ) <EOL> mock . returncode = <NUM_LIT> <EOL> mock . stdout = email <EOL> return mock <EOL> return original_run ( args , ** kwargs ) <EOL> original_run = subprocess . run <EOL> with patch ( "<STR_LIT>" , side_effect = mock_run ) : <EOL> yield name , email <EOL> </s>
<s> import importlib <EOL> import subprocess <EOL> from pathlib import Path <EOL> import cappa <EOL> from falco . utils import simple_progress <EOL> from jinja2 import Template <EOL> IMPORT_START_COMMENT = "<STR_LIT>" <EOL> IMPORT_END_COMMENT = "<STR_LIT>" <EOL> CODE_START_COMMENT = "<STR_LIT>" <EOL> CODE_END_COMMENT = "<STR_LIT>" <EOL> def render_to_string ( template_content : str , context : dict ) : <EOL> return Template ( template_content ) . render ( ** context ) <EOL> def get_crud_blueprints_path ( ) -> Path : <EOL> package = importlib . util . find_spec ( "<STR_LIT>" ) <EOL> if package is None : <EOL> raise cappa . Exit ( "<STR_LIT>" , code = <NUM_LIT> ) <EOL> return Path ( package . submodule_search_locations [ <NUM_LIT> ] ) / "<STR_LIT>" <EOL> @ simple_progress ( "<STR_LIT>" ) <EOL> def run_python_formatters ( filepath : str | Path ) : <EOL> autoflake = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> filepath , <EOL> ] <EOL> black = [ "<STR_LIT>" , filepath ] <EOL> isort = [ "<STR_LIT>" , filepath ] <EOL> subprocess . run ( autoflake , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL , check = False ) <EOL> subprocess . run ( isort , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL , check = False ) <EOL> subprocess . run ( black , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL , check = False ) <EOL> @ simple_progress ( "<STR_LIT>" ) <EOL> def run_html_formatters ( filepath : str | Path ) : <EOL> djlint = [ "<STR_LIT>" , filepath , "<STR_LIT>" ] <EOL> subprocess . run ( djlint , stdout = subprocess . DEVNULL , stderr = subprocess . DEVNULL , check = False ) <EOL> def extract_python_file_templates ( file_content : str ) -> tuple [ str , str ] : <EOL> imports_template = extract_content_from ( file_content , IMPORT_START_COMMENT , IMPORT_END_COMMENT ) <EOL> code_template = extract_content_from ( file_content , CODE_START_COMMENT , CODE_END_COMMENT ) <EOL> return imports_template , code_template <EOL> def extract_content_from ( text : str , start_comment : str , end_comment : str ) : <EOL> start_index = text . find ( start_comment ) + len ( start_comment ) <EOL> end_index = text . find ( end_comment ) <EOL> return text [ start_index : end_index ] <EOL> </s>
<s> import subprocess <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import parso <EOL> from falco . commands . crud . utils import run_python_formatters <EOL> from falco . utils import get_project_name <EOL> from falco . utils import run_in_shell <EOL> from falco . utils import simple_progress <EOL> def get_settings_file_path ( ) -> str : <EOL> from django . conf import settings <EOL> s = settings . SETTINGS_MODULE <EOL> s = s . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> return f"<STR_LIT>" <EOL> @ cappa . command ( help = "<STR_LIT>" ) <EOL> class StartApp : <EOL> app_name : Annotated [ str , cappa . Arg ( help = "<STR_LIT>" ) ] <EOL> def __call__ ( self , project_name : Annotated [ str , cappa . Dep ( get_project_name ) ] ) : <EOL> apps_dir = Path ( ) / project_name <EOL> app_dir = apps_dir / self . app_name <EOL> final_app_name = f"<STR_LIT>" <EOL> try : <EOL> app_dir . mkdir ( ) <EOL> except FileExistsError as e : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) from e <EOL> with simple_progress ( f"<STR_LIT>" ) : <EOL> result = subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , self . app_name , app_dir ] , <EOL> capture_output = True , <EOL> text = True , <EOL> check = False , <EOL> ) <EOL> if result . returncode != <NUM_LIT> : <EOL> msg = result . stderr . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> ( app_dir / "<STR_LIT>" ) . unlink ( ) <EOL> model_name = self . app_name [ : - <NUM_LIT> ] . capitalize ( ) if self . app_name . endswith ( "<STR_LIT>" ) else self . app_name . capitalize ( ) <EOL> models_file = app_dir / "<STR_LIT>" <EOL> models_file . write_text ( <EOL> ) <EOL> ( app_dir / "<STR_LIT>" ) . write_text ( "<STR_LIT>" ) <EOL> ( app_dir / "<STR_LIT>" ) . write_text ( "<STR_LIT>" ) <EOL> app_config_file = app_dir / "<STR_LIT>" <EOL> app_config_file . write_text ( app_config_file . read_text ( ) . replace ( self . app_name , final_app_name ) ) <EOL> run_python_formatters ( models_file ) <EOL> run_python_formatters ( self . register_app ( app_name = final_app_name ) ) <EOL> @ simple_progress ( "<STR_LIT>" ) <EOL> def register_app ( self , app_name : str ) -> Path : <EOL> names = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> settings_file = Path ( run_in_shell ( get_settings_file_path , eval_result = False ) ) <EOL> module = parso . parse ( settings_file . read_text ( ) ) <EOL> for node in module . children : <EOL> try : <EOL> if ( <EOL> node . children [ <NUM_LIT> ] . type == parso . python . tree . ExprStmt . type <EOL> and node . children [ <NUM_LIT> ] . children [ <NUM_LIT> ] . value in names <EOL> ) : <EOL> apps = node . children [ <NUM_LIT> ] . children [ <NUM_LIT> ] <EOL> elements = apps . children [ <NUM_LIT> ] <EOL> elements . children . append ( parso . parse ( f"<STR_LIT>" ) ) <EOL> new_content = module . get_code ( ) <EOL> settings_file . write_text ( new_content ) <EOL> break <EOL> except AttributeError : <EOL> continue <EOL> return settings_file <EOL> </s>
<s> import subprocess <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> from typing import TypedDict <EOL> import cappa <EOL> import parso <EOL> from falco import checks <EOL> from falco . config import CRUDConfig <EOL> from falco . config import read_falco_config <EOL> from falco . utils import get_project_name <EOL> from falco . utils import RICH_ERROR_MARKER <EOL> from falco . utils import RICH_INFO_MARKER <EOL> from falco . utils import RICH_SUCCESS_MARKER <EOL> from falco . utils import run_in_shell <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from . install_crud_utils import InstallCrudUtils <EOL> from . utils import extract_python_file_templates <EOL> from . utils import get_crud_blueprints_path <EOL> from . utils import render_to_string <EOL> from . utils import run_html_formatters <EOL> from . utils import run_python_formatters <EOL> class DjangoField ( TypedDict ) : <EOL> verbose_name : str <EOL> editable : bool <EOL> class_name : str <EOL> accessor : str <EOL> class DjangoModel ( TypedDict ) : <EOL> name : str <EOL> name_plural : str <EOL> verbose_name : str <EOL> verbose_name_plural : str <EOL> fields : dict [ str , DjangoField ] <EOL> has_file_field : bool <EOL> has_editable_date_field : bool <EOL> class PythonBlueprintContext ( TypedDict ) : <EOL> project_name : str <EOL> login_required : bool <EOL> app_label : str <EOL> model_name : str <EOL> model_name_plural : str <EOL> model_verbose_name_plural : str <EOL> model_has_file_fields : bool <EOL> model_has_editable_date_fields : bool <EOL> model_fields : dict [ str , DjangoField ] <EOL> crud_utils_import : str <EOL> entry_point : bool <EOL> class UrlsForContext ( TypedDict ) : <EOL> list_view_url : str <EOL> create_view_url : str <EOL> detail_view_url : str <EOL> update_view_url : str <EOL> delete_view_url : str <EOL> class HtmlBlueprintContext ( UrlsForContext ) : <EOL> app_label : str <EOL> model_name : str <EOL> model_name_plural : str <EOL> model_verbose_name : str <EOL> model_verbose_name_plural : str <EOL> model_has_file_fields : bool <EOL> model_fields : dict [ str , DjangoField ] <EOL> @ cappa . command ( help = "<STR_LIT>" , name = "<STR_LIT>" ) <EOL> class ModelCRUD : <EOL> model_path : Annotated [ <EOL> str , <EOL> cappa . Arg ( <EOL> help = "<STR_LIT>" <EOL> ) , <EOL> ] <EOL> blueprints : Annotated [ <EOL> str , <EOL> cappa . Arg ( <EOL> default = "<STR_LIT>" , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> excluded_fields : Annotated [ <EOL> list [ str ] , <EOL> cappa . Arg ( <EOL> short = True , <EOL> default = [ ] , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> only_python : Annotated [ <EOL> bool , <EOL> cappa . Arg ( default = False , long = "<STR_LIT>" , help = "<STR_LIT>" ) , <EOL> ] <EOL> only_html : Annotated [ <EOL> bool , <EOL> cappa . Arg ( default = False , long = "<STR_LIT>" , help = "<STR_LIT>" ) , <EOL> ] <EOL> entry_point : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> login_required : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> short = "<STR_LIT>" , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> skip_git_check : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self , project_name : Annotated [ str , cappa . Dep ( get_project_name ) ] ) : <EOL> pyproject_path = Path ( "<STR_LIT>" ) <EOL> falco_config = read_falco_config ( pyproject_path = pyproject_path ) if pyproject_path . exists ( ) else { } <EOL> crud_config : CRUDConfig = falco_config . get ( "<STR_LIT>" , { } ) <EOL> self . blueprints = crud_config . get ( "<STR_LIT>" , self . blueprints ) <EOL> self . login_required = crud_config . get ( "<STR_LIT>" , self . login_required ) <EOL> self . skip_git_check = crud_config . get ( "<STR_LIT>" , self . skip_git_check ) <EOL> checks . clean_git_repo ( ignore_dirty = self . skip_git_check ) <EOL> v = self . model_path . split ( "<STR_LIT>" ) <EOL> if len ( v ) == <NUM_LIT> : <EOL> name = None <EOL> app_label = v [ <NUM_LIT> ] <EOL> else : <EOL> name = v . pop ( ) <EOL> app_label = "<STR_LIT>" . join ( v ) <EOL> if crud_config . get ( "<STR_LIT>" , False ) : <EOL> commands = [ <EOL> f"<STR_LIT>" , <EOL> f"<STR_LIT>" , <EOL> ] <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> for cmd in commands : <EOL> result = subprocess . run ( cmd . split ( ) , capture_output = True , check = False , text = True ) <EOL> if result . returncode != <NUM_LIT> : <EOL> msg = result . stderr <EOL> raise cappa . Exit ( "<STR_LIT>" + msg , code = <NUM_LIT> ) <EOL> if self . entry_point and not name : <EOL> raise cappa . Exit ( "<STR_LIT>" , code = <NUM_LIT> ) <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> all_django_models = run_in_shell ( <EOL> get_models_data , <EOL> app_label = app_label , <EOL> excluded_fields = self . excluded_fields , <EOL> entry_point = self . entry_point , <EOL> ) <EOL> app_folder_path_str , app_name , templates_dir_str = run_in_shell ( <EOL> get_app_path_name_and_templates_dir , app_label = app_label <EOL> ) <EOL> app_folder_path = Path ( app_folder_path_str ) <EOL> templates_dir = Path ( templates_dir_str ) <EOL> django_models = ( <EOL> [ m for m in all_django_models if m [ "<STR_LIT>" ] . lower ( ) == name . lower ( ) ] if name else all_django_models <EOL> ) <EOL> if name and not django_models : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> python_blueprint_context : list [ PythonBlueprintContext ] = [ ] <EOL> html_blueprint_context : list [ HtmlBlueprintContext ] = [ ] <EOL> install_path , crud_utils_installed = InstallCrudUtils . get_install_path ( <EOL> project_name = project_name , <EOL> falco_config = falco_config , <EOL> ) <EOL> crud_utils_import = str ( install_path ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> for django_model in django_models : <EOL> python_blueprint_context . append ( <EOL> get_python_blueprint_context ( <EOL> project_name = project_name , <EOL> app_label = app_label , <EOL> django_model = django_model , <EOL> crud_utils_import = crud_utils_import , <EOL> login_required = self . login_required , <EOL> entry_point = self . entry_point , <EOL> ) <EOL> ) <EOL> html_blueprint_context . append ( get_html_blueprint_context ( app_label = app_label , django_model = django_model ) ) <EOL> updated_python_files = set ( ) <EOL> if not self . only_html : <EOL> python_blueprints = list ( ( get_crud_blueprints_path ( ) / "<STR_LIT>" ) . iterdir ( ) ) <EOL> updated_python_files . update ( <EOL> self . generate_python_code ( <EOL> app_label = app_label , <EOL> blueprints = python_blueprints , <EOL> app_folder_path = app_folder_path , <EOL> contexts = python_blueprint_context , <EOL> entry_point = self . entry_point , <EOL> ) <EOL> ) <EOL> updated_python_files . update ( <EOL> self . generating_urls ( <EOL> app_name = app_name , <EOL> app_folder_path = app_folder_path , <EOL> app_label = app_label , <EOL> django_models = django_models , <EOL> entry_point = self . entry_point , <EOL> ) <EOL> ) <EOL> updated_html_files = set ( ) <EOL> if not self . only_python : <EOL> html_blueprints = ( <EOL> list ( Path ( self . blueprints ) . glob ( "<STR_LIT>" ) ) <EOL> if self . blueprints <EOL> else list ( ( get_crud_blueprints_path ( ) / "<STR_LIT>" ) . iterdir ( ) ) <EOL> ) <EOL> updated_html_files . update ( <EOL> self . generate_html_templates ( <EOL> contexts = html_blueprint_context , <EOL> entry_point = self . entry_point , <EOL> blueprints = html_blueprints , <EOL> templates_dir = templates_dir , <EOL> ) <EOL> ) <EOL> for file in updated_python_files : <EOL> run_python_formatters ( str ( file ) ) <EOL> for file in updated_html_files : <EOL> run_html_formatters ( str ( file ) ) <EOL> display_names = "<STR_LIT>" . join ( m . get ( "<STR_LIT>" ) for m in django_models ) <EOL> rich_print ( f"<STR_LIT>" ) <EOL> if not crud_utils_installed : <EOL> rich_print ( <EOL> f"<STR_LIT>" <EOL> f"<STR_LIT>" <EOL> ) <EOL> @ simple_progress ( "<STR_LIT>" ) <EOL> def generate_python_code ( <EOL> self , <EOL> app_label : str , <EOL> app_folder_path : Path , <EOL> blueprints : list [ Path ] , <EOL> contexts : list [ "<STR_LIT>" ] , <EOL> * , <EOL> entry_point : bool , <EOL> ) -> list [ Path ] : <EOL> updated_files = [ ] <EOL> for blueprint in blueprints : <EOL> imports_template , code_template = extract_python_file_templates ( blueprint . read_text ( ) ) <EOL> file_name_without_jinja = "<STR_LIT>" . join ( blueprint . name . split ( "<STR_LIT>" ) [ : - <NUM_LIT> ] ) <EOL> file_to_write_to = app_folder_path / file_name_without_jinja <EOL> file_to_write_to . touch ( exist_ok = True ) <EOL> imports_content , code_content = "<STR_LIT>" , "<STR_LIT>" <EOL> for context in contexts : <EOL> model_name_lower = context [ "<STR_LIT>" ] . lower ( ) <EOL> imports_content += render_to_string ( imports_template , context ) <EOL> code_content += render_to_string ( code_template , context ) <EOL> if entry_point : <EOL> code_content = code_content . replace ( f"<STR_LIT>" , "<STR_LIT>" ) <EOL> code_content = code_content . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> file_to_write_to . write_text ( imports_content + file_to_write_to . read_text ( ) + code_content ) <EOL> updated_files . append ( file_to_write_to ) <EOL> model_name = contexts [ <NUM_LIT> ] [ "<STR_LIT>" ] if len ( contexts ) == <NUM_LIT> else None <EOL> updated_files . append ( <EOL> register_models_in_admin ( <EOL> app_folder_path = app_folder_path , <EOL> app_label = app_label , <EOL> model_name = model_name , <EOL> ) <EOL> ) <EOL> return updated_files <EOL> @ simple_progress ( "<STR_LIT>" ) <EOL> def generating_urls ( <EOL> self , <EOL> app_folder_path : Path , <EOL> app_label : str , <EOL> app_name : str , <EOL> django_models : list [ "<STR_LIT>" ] , <EOL> * , <EOL> entry_point : bool , <EOL> ) -> list [ Path ] : <EOL> urls_content = "<STR_LIT>" <EOL> for django_model in django_models : <EOL> model_name_lower = django_model [ "<STR_LIT>" ] . lower ( ) <EOL> urlsafe_model_verbose_name_plural = django_model [ "<STR_LIT>" ] . lower ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> urls_content += get_urls ( <EOL> model_name_lower = model_name_lower , <EOL> urlsafe_model_verbose_name_plural = urlsafe_model_verbose_name_plural , <EOL> ) <EOL> if entry_point : <EOL> urls_content = urls_content . replace ( f"<STR_LIT>" , "<STR_LIT>" ) <EOL> urls_content = urls_content . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> urls_content = urls_content . replace ( f"<STR_LIT>" , "<STR_LIT>" ) <EOL> app_urls = app_folder_path / "<STR_LIT>" <EOL> updated_files = [ app_urls ] <EOL> if app_urls . exists ( ) : <EOL> urlpatterns = f"<STR_LIT>" <EOL> app_urls . write_text ( app_urls . read_text ( ) + urlpatterns ) <EOL> else : <EOL> app_urls . touch ( ) <EOL> app_urls . write_text ( initial_urls_content ( app_label , urls_content ) ) <EOL> updated_files . append ( register_app_urls ( app_label = app_label , app_name = app_name ) ) <EOL> return updated_files <EOL> @ simple_progress ( "<STR_LIT>" ) <EOL> def generate_html_templates ( <EOL> self , <EOL> templates_dir : Path , <EOL> blueprints : list [ Path ] , <EOL> contexts : list [ "<STR_LIT>" ] , <EOL> * , <EOL> entry_point : bool , <EOL> ) -> list [ Path ] : <EOL> updated_files = [ ] <EOL> templates_dir . mkdir ( exist_ok = True , parents = True ) <EOL> for blueprint in blueprints : <EOL> filecontent = blueprint . read_text ( ) <EOL> for context in contexts : <EOL> model_name_lower = context [ "<STR_LIT>" ] . lower ( ) <EOL> new_filename = f"<STR_LIT>" <EOL> if entry_point : <EOL> new_filename = blueprint . name . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> if new_filename . startswith ( "<STR_LIT>" ) : <EOL> new_filename = new_filename . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> file_to_write_to = templates_dir / new_filename <EOL> file_to_write_to . touch ( exist_ok = True ) <EOL> views_content = render_to_string ( filecontent , context = context ) <EOL> if entry_point : <EOL> views_content = views_content . replace ( f"<STR_LIT>" , "<STR_LIT>" ) <EOL> views_content = views_content . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> file_to_write_to . write_text ( views_content ) <EOL> updated_files . append ( file_to_write_to ) <EOL> return updated_files <EOL> def get_urls ( model_name_lower : str , urlsafe_model_verbose_name_plural : str ) -> str : <EOL> prefix = urlsafe_model_verbose_name_plural <EOL> return <EOL> def get_urls_template_string ( app_label : str , model_name_lower : str ) -> UrlsForContext : <EOL> return { <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> } <EOL> def initial_urls_content ( app_label : str , urls_content : str ) -> str : <EOL> return <EOL> def register_app_urls ( app_label : str , app_name : str ) -> Path : <EOL> root_url = run_in_shell ( get_root_url_config_path , eval_result = False ) <EOL> root_url = root_url . strip ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> rool_url_path = Path ( f"<STR_LIT>" ) <EOL> module = parso . parse ( rool_url_path . read_text ( ) ) <EOL> new_path = parso . parse ( f"<STR_LIT>" ) <EOL> for node in module . children : <EOL> try : <EOL> if ( <EOL> node . children [ <NUM_LIT> ] . type == parso . python . tree . ExprStmt . type <EOL> and node . children [ <NUM_LIT> ] . children [ <NUM_LIT> ] . value == "<STR_LIT>" <EOL> ) : <EOL> patterns = node . children [ <NUM_LIT> ] . children [ <NUM_LIT> ] <EOL> elements = patterns . children [ <NUM_LIT> ] <EOL> elements . children . append ( new_path ) <EOL> new_content = module . get_code ( ) <EOL> new_content = "<STR_LIT>" + new_content <EOL> rool_url_path . write_text ( new_content ) <EOL> break <EOL> except AttributeError : <EOL> continue <EOL> return rool_url_path <EOL> def register_models_in_admin ( app_folder_path : Path , app_label : str , model_name : str | None = None ) -> Path : <EOL> admin_file = app_folder_path / "<STR_LIT>" <EOL> admin_file . touch ( exist_ok = True ) <EOL> cmd_args = [ app_label ] <EOL> if model_name : <EOL> cmd_args . append ( model_name ) <EOL> result = subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , * cmd_args ] , <EOL> capture_output = True , <EOL> text = True , <EOL> check = False , <EOL> ) <EOL> if result . returncode != <NUM_LIT> : <EOL> msg = result . stderr . split ( "<STR_LIT>" ) [ - <NUM_LIT> ] <EOL> rich_print ( f"<STR_LIT>" ) <EOL> return admin_file <EOL> admin_code = result . stdout . split ( "<STR_LIT>" , <NUM_LIT> ) [ <NUM_LIT> ] <EOL> admin_file . write_text ( admin_file . read_text ( ) + admin_code ) <EOL> if not model_name : <EOL> return admin_file <EOL> admin_lines = admin_file . read_text ( ) . split ( "<STR_LIT>" ) <EOL> _imports = [ ] <EOL> _code = [ ] <EOL> for line in admin_lines : <EOL> if line . startswith ( "<STR_LIT>" ) : <EOL> _imports . append ( line ) <EOL> else : <EOL> _code . append ( line ) <EOL> admin_file . write_text ( "<STR_LIT>" + "<STR_LIT>" . join ( _imports ) + "<STR_LIT>" + "<STR_LIT>" . join ( _code ) ) <EOL> return admin_file <EOL> def get_python_blueprint_context ( <EOL> project_name : str , <EOL> app_label : str , <EOL> django_model : DjangoModel , <EOL> crud_utils_import : str , <EOL> * , <EOL> login_required : bool , <EOL> entry_point : bool , <EOL> ) -> PythonBlueprintContext : <EOL> model_fields = django_model [ "<STR_LIT>" ] <EOL> model_name = django_model [ "<STR_LIT>" ] <EOL> return { <EOL> "<STR_LIT>" : project_name , <EOL> "<STR_LIT>" : app_label , <EOL> "<STR_LIT>" : login_required , <EOL> "<STR_LIT>" : model_name , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : model_fields , <EOL> "<STR_LIT>" : crud_utils_import , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : entry_point , <EOL> } <EOL> def get_html_blueprint_context ( app_label : str , django_model : DjangoModel ) -> HtmlBlueprintContext : <EOL> return { <EOL> "<STR_LIT>" : app_label , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : django_model [ "<STR_LIT>" ] , <EOL> ** get_urls_template_string ( <EOL> app_label = app_label , <EOL> model_name_lower = django_model [ "<STR_LIT>" ] . lower ( ) , <EOL> ) , <EOL> } <EOL> def get_models_data ( app_label : str , excluded_fields : list [ str ] , * , entry_point : bool ) -> "<STR_LIT>" : <EOL> from django . apps import apps <EOL> models = apps . get_app_config ( app_label ) . get_models ( ) <EOL> file_fields = ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> dates_fields = ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> def get_model_dict ( model ) -> "<STR_LIT>" : <EOL> name = model . __name__ <EOL> name_lower = name . lower ( ) <EOL> if entry_point : <EOL> name_plural = app_label . lower ( ) <EOL> else : <EOL> name_plural = f"<STR_LIT>" if name . endswith ( "<STR_LIT>" ) else f"<STR_LIT>" <EOL> verbose_name = model . _meta . verbose_name <EOL> verbose_name_plural = model . _meta . verbose_name_plural <EOL> fields : dict [ str , "<STR_LIT>" ] = { <EOL> field . name : { <EOL> "<STR_LIT>" : field . verbose_name , <EOL> "<STR_LIT>" : field . editable , <EOL> "<STR_LIT>" : field . __class__ . __name__ , <EOL> "<STR_LIT>" : "<STR_LIT>" <EOL> f"<STR_LIT>" + ( "<STR_LIT>" if field . __class__ . __name__ in file_fields else "<STR_LIT>" ) , <EOL> } <EOL> for field in model . _meta . fields <EOL> if field . name not in excluded_fields <EOL> } <EOL> return { <EOL> "<STR_LIT>" : name , <EOL> "<STR_LIT>" : name_plural , <EOL> "<STR_LIT>" : fields , <EOL> "<STR_LIT>" : verbose_name , <EOL> "<STR_LIT>" : verbose_name_plural , <EOL> "<STR_LIT>" : any ( f [ "<STR_LIT>" ] in file_fields for f in fields . values ( ) ) , <EOL> "<STR_LIT>" : any ( f [ "<STR_LIT>" ] in dates_fields and f [ "<STR_LIT>" ] for f in fields . values ( ) ) , <EOL> } <EOL> return [ get_model_dict ( model ) for model in models ] <EOL> def get_app_path_name_and_templates_dir ( app_label : str ) -> tuple [ str , str , str ] : <EOL> from django . apps import apps <EOL> from django . conf import settings <EOL> from pathlib import Path <EOL> app = apps . get_app_config ( app_label ) <EOL> dirs = settings . TEMPLATES [ <NUM_LIT> ] . get ( "<STR_LIT>" , [ ] ) <EOL> templates_dir = Path ( dirs [ <NUM_LIT> ] ) if dirs else Path ( app . path ) / "<STR_LIT>" <EOL> app_templates_dir = templates_dir / app_label <EOL> return str ( app . path ) , str ( app . name ) , str ( app_templates_dir ) <EOL> def get_root_url_config_path ( ) -> str : <EOL> from django . conf import settings <EOL> return settings . ROOT_URLCONF <EOL> </s>
<s> from pathlib import Path <EOL> root_dir = Path ( __file__ ) . parent . parent <EOL> readme = root_dir / "<STR_LIT>" <EOL> guides = root_dir / "<STR_LIT>" <EOL> guides_index = guides / "<STR_LIT>" <EOL> def get_rst_doc_title ( file : Path ) : <EOL> title = "<STR_LIT>" <EOL> for line in file . read_text ( ) . splitlines ( ) : <EOL> if line . startswith ( "<STR_LIT>" ) : <EOL> break <EOL> title = line <EOL> return title <EOL> def guides_files ( ) : <EOL> index_content = guides_index . read_text ( ) <EOL> toc_tree_directive = "<STR_LIT>" <EOL> start_index = index_content . find ( toc_tree_directive ) + len ( toc_tree_directive ) <EOL> def valid_line ( line ) : <EOL> return bool ( line ) and not line . strip ( ) . startswith ( "<STR_LIT>" ) <EOL> lines = [ line . strip ( ) for line in index_content [ start_index : ] . split ( "<STR_LIT>" ) if valid_line ( line ) ] <EOL> return [ guides / f"<STR_LIT>" for line in lines ] <EOL> def get_guides_list ( ) : <EOL> guides_md = [ ] <EOL> for file in guides_files ( ) : <EOL> if file . name . startswith ( "<STR_LIT>" ) : <EOL> continue <EOL> link = f"<STR_LIT>" <EOL> title = get_rst_doc_title ( file ) <EOL> guides_md . append ( f"<STR_LIT>" ) <EOL> return "<STR_LIT>" + "<STR_LIT>" . join ( guides_md ) + "<STR_LIT>" <EOL> def update_readme ( start_comment , end_comment , new_content ) : <EOL> text = readme . read_text ( ) <EOL> start_index = text . find ( start_comment ) + len ( start_comment ) <EOL> end_index = text . find ( end_comment ) <EOL> new_content = text [ : start_index ] + new_content + text [ end_index : ] <EOL> readme . write_text ( new_content ) <EOL> def main ( ) : <EOL> update_readme ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> get_guides_list ( ) , <EOL> ) <EOL> print ( "<STR_LIT>" ) <EOL> if __name__ == "<STR_LIT>" : <EOL> main ( ) <EOL> </s>
<s> from . install_crud_utils import InstallCrudUtils <EOL> from . model_crud import ModelCRUD <EOL> </s>
<s> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> from falco . config import FalcoConfig <EOL> from falco . config import read_falco_config <EOL> from falco . config import write_falco_config <EOL> from falco . utils import get_project_name <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from . utils import extract_python_file_templates <EOL> from . utils import get_crud_blueprints_path <EOL> from . utils import render_to_string <EOL> from . utils import run_python_formatters <EOL> @ cappa . command ( help = "<STR_LIT>" , name = "<STR_LIT>" ) <EOL> class InstallCrudUtils : <EOL> output_dir : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( default = None , help = "<STR_LIT>" ) , <EOL> ] = None <EOL> def __call__ ( self , project_name : Annotated [ str , cappa . Dep ( get_project_name ) ] ) : <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> falco_config = read_falco_config ( pyproject_path ) <EOL> except cappa . Exit : <EOL> falco_config = { } <EOL> pyproject_path = None <EOL> output_dir = self . install ( project_name = project_name , falco_config = falco_config ) <EOL> if pyproject_path : <EOL> write_falco_config ( pyproject_path = pyproject_path , crud = { "<STR_LIT>" : str ( output_dir ) } ) <EOL> rich_print ( f"<STR_LIT>" ) <EOL> def install ( self , project_name : str , falco_config : FalcoConfig ) -> Path : <EOL> output_dir = self . output_dir or self . get_install_path ( project_name = project_name , falco_config = falco_config ) [ <NUM_LIT> ] <EOL> output_dir . mkdir ( parents = True , exist_ok = True ) <EOL> ( output_dir / "<STR_LIT>" ) . touch ( exist_ok = True ) <EOL> generated_files = [ ] <EOL> context = { "<STR_LIT>" : project_name } <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> for file_path in ( get_crud_blueprints_path ( ) / "<STR_LIT>" ) . iterdir ( ) : <EOL> imports_template , code_template = extract_python_file_templates ( file_path . read_text ( ) ) <EOL> filename = "<STR_LIT>" . join ( file_path . name . split ( "<STR_LIT>" ) [ : - <NUM_LIT> ] ) <EOL> output_file = output_dir / filename <EOL> output_file . touch ( exist_ok = True ) <EOL> output_file . write_text ( <EOL> render_to_string ( imports_template , context ) <EOL> + render_to_string ( code_template , context ) <EOL> + output_file . read_text ( ) <EOL> ) <EOL> generated_files . append ( output_file ) <EOL> for file in generated_files : <EOL> run_python_formatters ( str ( file ) ) <EOL> return output_dir <EOL> @ classmethod <EOL> def get_install_path ( cls , project_name : str , falco_config : FalcoConfig ) -> tuple [ Path , bool ] : <EOL> if _import_path := falco_config . get ( "<STR_LIT>" , { } ) . get ( "<STR_LIT>" ) : <EOL> return Path ( _import_path ) , True <EOL> return Path ( f"<STR_LIT>" ) , False <EOL> </s>
<s> from __future__ import annotations <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> from falco . config import read_falco_config <EOL> from falco . config import write_falco_config <EOL> from falco . utils import get_pyproject_file <EOL> from falco . utils import network_request_with_progress <EOL> from httpx import codes <EOL> from rich import print as rich_print <EOL> from rich . panel import Panel <EOL> HTMX_DOWNLOAD_URL = "<STR_LIT>" <EOL> HTMX_GH_RELEASE_LATEST_URL = "<STR_LIT>" <EOL> HtmxConfig = tuple [ Path , str | None ] <EOL> def get_latest_tag ( ) -> str : <EOL> with network_request_with_progress ( HTMX_GH_RELEASE_LATEST_URL , "<STR_LIT>" ) as response : <EOL> try : <EOL> return response . json ( ) [ "<STR_LIT>" ] [ <NUM_LIT> : ] <EOL> except KeyError as e : <EOL> msg = ( <EOL> "<STR_LIT>" <EOL> "<STR_LIT>" <EOL> ) <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) from e <EOL> @ cappa . command ( help = "<STR_LIT>" ) <EOL> class Htmx : <EOL> version : Annotated [ str , cappa . Arg ( default = "<STR_LIT>" ) ] = "<STR_LIT>" <EOL> output : Annotated [ Path | None , cappa . Arg ( default = None , short = "<STR_LIT>" , long = "<STR_LIT>" ) ] = None <EOL> def __call__ ( self ) : <EOL> latest_version = get_latest_tag ( ) <EOL> version = self . version if self . version != "<STR_LIT>" else latest_version <EOL> try : <EOL> pyproject_path = get_pyproject_file ( ) <EOL> falco_config = read_falco_config ( pyproject_path ) <EOL> except cappa . Exit : <EOL> falco_config = { } <EOL> pyproject_path = None <EOL> filepath = self . download ( version , falco_config = falco_config ) <EOL> if pyproject_path : <EOL> write_falco_config ( <EOL> pyproject_path = pyproject_path , <EOL> htmx = self . format_for_config ( filepath , version ) , <EOL> ) <EOL> subtitle = ( <EOL> "<STR_LIT>" <EOL> if version == latest_version <EOL> else f"<STR_LIT>" <EOL> ) <EOL> rich_print ( <EOL> Panel ( <EOL> f"<STR_LIT>" , <EOL> subtitle = subtitle , <EOL> ) <EOL> ) <EOL> @ classmethod <EOL> def format_for_config ( cls , filepath : Path , version : str | None ) -> str : <EOL> return str ( filepath ) if version is None else f"<STR_LIT>" <EOL> def download ( self , version : str , falco_config : dict ) -> Path : <EOL> url = HTMX_DOWNLOAD_URL . format ( version = version ) <EOL> with network_request_with_progress ( url , f"<STR_LIT>" ) as response : <EOL> content = response . content . decode ( "<STR_LIT>" ) <EOL> if response . status_code == codes . NOT_FOUND : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) <EOL> filepath = self . resolve_filepath ( falco_config = falco_config ) <EOL> filepath . parent . mkdir ( parents = True , exist_ok = True ) <EOL> filepath . write_text ( content ) <EOL> return filepath <EOL> def resolve_filepath ( self , falco_config : dict ) -> Path : <EOL> if self . output : <EOL> filepath = self . output if str ( self . output ) . endswith ( "<STR_LIT>" ) else self . output / "<STR_LIT>" <EOL> elif self . output is None and "<STR_LIT>" in falco_config : <EOL> htmx_config = self . read_from_config ( falco_config ) <EOL> filepath , _ = htmx_config <EOL> else : <EOL> filepath = Path ( "<STR_LIT>" ) <EOL> return filepath <EOL> @ classmethod <EOL> def read_from_config ( cls , falco_config : dict ) -> HtmxConfig : <EOL> htmx = falco_config . get ( "<STR_LIT>" ) <EOL> if not htmx : <EOL> return Path ( "<STR_LIT>" ) , None <EOL> try : <EOL> filepath , version = htmx . split ( "<STR_LIT>" ) <EOL> except ValueError : <EOL> return Path ( htmx ) , None <EOL> return Path ( filepath ) , version <EOL> </s>
<s> import subprocess <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> from falco . utils import get_project_name <EOL> from falco . utils import run_in_shell <EOL> from falco . utils import simple_progress <EOL> from rich import print as rich_print <EOL> from . rm_migrations import RmMigrations <EOL> def reset_migrations_table ( ) -> None : <EOL> from django . db import connection <EOL> with connection . cursor ( ) as cursor : <EOL> cursor . execute ( "<STR_LIT>" ) <EOL> @ cappa . command ( help = "<STR_LIT>" , name = "<STR_LIT>" ) <EOL> class ResetMigrations : <EOL> apps_dir : Annotated [ <EOL> Path | None , <EOL> cappa . Arg ( default = None , help = "<STR_LIT>" ) , <EOL> ] <EOL> skip_git_check : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> default = False , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> def __call__ ( self , project_name : Annotated [ str , cappa . Dep ( get_project_name ) ] ) : <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> result = subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> check = False , <EOL> capture_output = True , <EOL> text = True , <EOL> ) <EOL> if result . returncode != <NUM_LIT> : <EOL> raise cappa . Exit ( code = <NUM_LIT> ) <EOL> RmMigrations ( skip_git_check = self . skip_git_check , apps_dir = self . apps_dir ) ( project_name ) <EOL> with simple_progress ( "<STR_LIT>" ) : <EOL> run_in_shell ( reset_migrations_table , eval_result = False ) <EOL> subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> check = True , <EOL> stdout = subprocess . DEVNULL , <EOL> stderr = subprocess . DEVNULL , <EOL> ) <EOL> subprocess . run ( <EOL> [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] , <EOL> check = True , <EOL> stdout = subprocess . DEVNULL , <EOL> stderr = subprocess . DEVNULL , <EOL> ) <EOL> rich_print ( "<STR_LIT>" ) <EOL> </s>
<s> import os <EOL> import secrets <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> import tomlkit <EOL> from falco . utils import get_project_name <EOL> from rich import print as rich_print <EOL> from rich . prompt import Prompt <EOL> @ cappa . command ( help = "<STR_LIT>" ) <EOL> class SyncDotenv : <EOL> fill_missing : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> False , <EOL> short = "<STR_LIT>" , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] = False <EOL> print_env : Annotated [ <EOL> bool , <EOL> cappa . Arg ( <EOL> False , <EOL> short = "<STR_LIT>" , <EOL> long = "<STR_LIT>" , <EOL> help = "<STR_LIT>" , <EOL> ) , <EOL> ] = False <EOL> def __call__ ( self , project_name : Annotated [ str , cappa . Dep ( get_project_name ) ] ) : <EOL> dotenv_file = Path ( "<STR_LIT>" ) <EOL> dotenv_template_file = Path ( "<STR_LIT>" ) <EOL> dotenv_content = dotenv_file . read_text ( ) if dotenv_file . exists ( ) else "<STR_LIT>" <EOL> dotenv_template_content = dotenv_template_file . read_text ( ) if dotenv_template_file . exists ( ) else "<STR_LIT>" <EOL> debug = os . getenv ( "<STR_LIT>" , "<STR_LIT>" ) . lower ( ) == "<STR_LIT>" <EOL> base_config = { "<STR_LIT>" : True } if debug else self . get_prod_config ( project_name ) <EOL> config = { <EOL> ** parse ( dotenv_template_content ) , <EOL> ** base_config , <EOL> ** parse ( dotenv_content ) , <EOL> } <EOL> if self . fill_missing : <EOL> for key , value in config . items ( ) : <EOL> if not value : <EOL> config [ key . upper ( ) ] = Prompt . ask ( f"<STR_LIT>" ) <EOL> dotenv_content = get_updated ( dotenv_content , config ) <EOL> if self . print_env : <EOL> rich_print ( dotenv_content ) <EOL> return <EOL> dotenv_file . touch ( exist_ok = True ) <EOL> dotenv_file . write_text ( dotenv_content ) <EOL> dotenv_template_content = get_updated ( <EOL> dotenv_template_content , <EOL> { key : "<STR_LIT>" for key in config } , <EOL> keep_original = True , <EOL> keep_whitespace = True , <EOL> ) <EOL> dotenv_template_file . touch ( exist_ok = True ) <EOL> dotenv_template_file . write_text ( dotenv_template_content ) <EOL> rich_print ( f"<STR_LIT>" ) <EOL> def get_prod_config ( self , project_name : str ) -> dict : <EOL> return { <EOL> "<STR_LIT>" : False , <EOL> "<STR_LIT>" : secrets . token_urlsafe ( <NUM_LIT> ) , <EOL> "<STR_LIT>" : f"<STR_LIT>" , <EOL> "<STR_LIT>" : get_superuser_email ( project_name ) , <EOL> "<STR_LIT>" : secrets . token_urlsafe ( <NUM_LIT> ) , <EOL> } <EOL> def get_superuser_email ( project_name : str ) : <EOL> pyproject_file = Path ( "<STR_LIT>" ) <EOL> if pyproject_file . exists ( ) : <EOL> pyproject = tomlkit . parse ( pyproject_file . read_text ( ) ) <EOL> if authors := pyproject . get ( "<STR_LIT>" , { } ) . get ( "<STR_LIT>" , [ ] ) : <EOL> return authors [ <NUM_LIT> ] [ "<STR_LIT>" ] <EOL> return f"<STR_LIT>" <EOL> def parse ( env_content : str ) -> dict : <EOL> result = { } <EOL> for line in env_content . split ( "<STR_LIT>" ) : <EOL> stripped_line = line . strip ( ) <EOL> if stripped_line . startswith ( "<STR_LIT>" ) or not stripped_line : <EOL> continue <EOL> try : <EOL> key , value = stripped_line . split ( "<STR_LIT>" , <NUM_LIT> ) <EOL> except ValueError as e : <EOL> msg = f"<STR_LIT>" <EOL> raise cappa . Exit ( msg , code = <NUM_LIT> ) from e <EOL> result [ key ] = value <EOL> return result <EOL> def get_updated ( env_content : str , config : dict , * , keep_original = False , keep_whitespace = False ) -> str : <EOL> content_list = env_content . split ( "<STR_LIT>" ) <EOL> content_dict = { line . split ( "<STR_LIT>" ) [ <NUM_LIT> ] : line for line in content_list if "<STR_LIT>" in line } <EOL> new_content_list = content_list . copy ( ) <EOL> for key , value in config . items ( ) : <EOL> line = content_dict . get ( key ) <EOL> if line is not None : <EOL> index = new_content_list . index ( line ) <EOL> if not keep_original : <EOL> new_content_list [ index ] = f"<STR_LIT>" <EOL> else : <EOL> new_content_list . append ( f"<STR_LIT>" ) <EOL> if not keep_whitespace : <EOL> new_content_list = [ line . strip ( ) for line in new_content_list if line . strip ( ) ] <EOL> return "<STR_LIT>" . join ( new_content_list ) <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> from django . contrib . auth . models import AbstractUser <EOL> class User ( AbstractUser ) : <EOL> pass <EOL> </s>
<s> import os <EOL> import sys <EOL> from pathlib import Path <EOL> from typing import Annotated <EOL> import cappa <EOL> from falco . config import read_falco_config <EOL> from honcho . manager import Manager <EOL> from . sync_dotenv import parse as parse_dotenv <EOL> default_server_cmd = "<STR_LIT>" <EOL> default_address = "<STR_LIT>" <EOL> @ cappa . command ( help = "<STR_LIT>" ) <EOL> class Work : <EOL> address : Annotated [ str , cappa . Arg ( default = default_address , help = "<STR_LIT>" ) ] = default_address <EOL> def __call__ ( self ) -> None : <EOL> commands = self . get_commands ( ) <EOL> manager = Manager ( ) <EOL> django_env = self . resolve_django_env ( ) <EOL> for name , cmd in commands . items ( ) : <EOL> manager . add_process ( name , cmd , env = django_env ) <EOL> try : <EOL> manager . loop ( ) <EOL> finally : <EOL> manager . terminate ( ) <EOL> sys . exit ( manager . returncode ) <EOL> def resolve_django_env ( self ) -> dict : <EOL> current_dir = Path ( ) . resolve ( ) <EOL> env_file = current_dir / "<STR_LIT>" <EOL> env_vars = parse_dotenv ( env_file . read_text ( ) ) if env_file . exists ( ) else { } <EOL> return { <EOL> ** os . environ , <EOL> "<STR_LIT>" : str ( current_dir ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> ** env_vars , <EOL> } <EOL> def get_commands ( self ) -> dict : <EOL> commands = { "<STR_LIT>" : default_server_cmd } <EOL> pyproject_file = Path ( "<STR_LIT>" ) <EOL> if pyproject_file . exists ( ) : <EOL> user_commands = read_falco_config ( pyproject_path = pyproject_file ) . get ( "<STR_LIT>" , { } ) <EOL> else : <EOL> user_commands = { } <EOL> commands |= user_commands <EOL> commands [ "<STR_LIT>" ] = commands [ "<STR_LIT>" ] . format ( address = self . address ) <EOL> return commands <EOL> </s>
<s> from django . apps import AppConfig <EOL> class OrdersConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> from django . urls import path <EOL> from . import views <EOL> app_name = "<STR_LIT>" <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , views . product_list , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . product_create , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . product_detail , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . product_update , name = "<STR_LIT>" ) , <EOL> path ( "<STR_LIT>" , views . product_delete , name = "<STR_LIT>" ) , <EOL> ] <EOL> </s>
<s> import django . utils . timezone <EOL> from django . db import migrations <EOL> from django . db import models <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , default = django . utils . timezone . now ) , <EOL> preserve_default = False , <EOL> ) , <EOL> ] <EOL> </s>
<s> from pathlib import Path <EOL> from cappa . testing import CommandRunner <EOL> from falco . config import write_falco_config <EOL> def test_htmx_ext_download ( runner : CommandRunner ) : <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> def test_htmx_ext_download_to_output_dir ( runner : CommandRunner ) : <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , str ( output . resolve ( ) ) ) <EOL> assert ( output / "<STR_LIT>" ) . exists ( ) <EOL> def test_htmx_ext_download_to_output_file ( runner : CommandRunner ) : <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , str ( output . resolve ( ) ) ) <EOL> assert output . exists ( ) <EOL> def test_htmx_ext_file_existing_config ( runner : CommandRunner ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml , htmx = "<STR_LIT>" ) <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert output . exists ( ) <EOL> def test_htmx_ext_download_to_output_file_existing_config ( runner : CommandRunner ) : <EOL> pyproject_toml = Path ( "<STR_LIT>" ) <EOL> pyproject_toml . touch ( ) <EOL> write_falco_config ( pyproject_path = pyproject_toml , htmx = "<STR_LIT>" ) <EOL> output = Path ( "<STR_LIT>" ) <EOL> runner . invoke ( "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ) <EOL> assert not output . exists ( ) <EOL> assert Path ( "<STR_LIT>" ) . exists ( ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class CoreConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> from functools import wraps <EOL> from django . core . paginator import InvalidPage <EOL> from django . core . paginator import Paginator <EOL> from django . db . models import QuerySet <EOL> from django . http import Http404 <EOL> from django . http import HttpResponse <EOL> from django . template . loader import render_to_string <EOL> from django . utils . translation import gettext_lazy as _ <EOL> from . types import HttpRequest <EOL> def paginate_queryset ( request : HttpRequest , queryset : QuerySet , page_size : int = <NUM_LIT> ) : <EOL> paginator = Paginator ( queryset , page_size ) <EOL> page_number = request . GET . get ( "<STR_LIT>" ) or <NUM_LIT> <EOL> try : <EOL> page_number = int ( page_number ) <EOL> except ValueError as e : <EOL> if page_number == "<STR_LIT>" : <EOL> page_number = paginator . num_pages <EOL> else : <EOL> msg = "<STR_LIT>" <EOL> raise Http404 ( _ ( msg ) ) from e <EOL> try : <EOL> return paginator . page ( page_number ) <EOL> except InvalidPage as exc : <EOL> msg = "<STR_LIT>" <EOL> raise Http404 ( _ ( msg ) % ( page_number , str ( exc ) ) ) from exc <EOL> def for_htmx ( <EOL> * , <EOL> if_hx_target : str | None = None , <EOL> use_template : str | None = None , <EOL> use_partial : str | list [ str ] | None = None , <EOL> use_partial_from_params : bool = False , <EOL> ) : <EOL> if len ( [ p for p in [ use_partial , use_template , use_partial_from_params ] if p ] ) != <NUM_LIT> : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> def decorator ( view ) : <EOL> @ wraps ( view ) <EOL> def _view ( request : HttpRequest , * args , ** kwargs ) : <EOL> resp = view ( request , * args , ** kwargs ) <EOL> if not request . htmx : <EOL> return resp <EOL> apply_decorator = if_hx_target is None or request . headers . get ( "<STR_LIT>" , None ) == if_hx_target <EOL> if not apply_decorator : <EOL> return resp <EOL> partials_to_use = use_partial <EOL> if not hasattr ( resp , "<STR_LIT>" ) : <EOL> if not resp . content and any ( <EOL> h in resp . headers <EOL> for h in ( <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ) <EOL> ) : <EOL> return resp <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> if resp . is_rendered : <EOL> raise ValueError ( "<STR_LIT>" ) <EOL> if use_partial_from_params : <EOL> use_partial_from_params_val = _get_param_from_request ( request , "<STR_LIT>" ) <EOL> if use_partial_from_params_val is not None : <EOL> partials_to_use = use_partial_from_params_val <EOL> if use_template is not None : <EOL> resp . template_name = use_template <EOL> elif partials_to_use is not None : <EOL> if not isinstance ( partials_to_use , list ) : <EOL> partials_to_use = [ partials_to_use ] <EOL> rendered_partials = [ <EOL> render_to_string ( f"<STR_LIT>" , context = resp . context_data , request = request ) <EOL> for b in partials_to_use <EOL> ] <EOL> resp = HttpResponse ( <EOL> content = "<STR_LIT>" . join ( rendered_partials ) , <EOL> status = resp . status_code , <EOL> headers = resp . headers , <EOL> ) <EOL> return resp <EOL> return _view <EOL> return decorator <EOL> def _get_param_from_request ( request , param ) : <EOL> if param in request . GET : <EOL> return request . GET . getlist ( param ) <EOL> if request . method == "<STR_LIT>" and param in request . POST : <EOL> return request . POST . getlist ( param ) <EOL> return None <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . TextField ( blank = True , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> from django . core . wsgi import get_wsgi_application <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> application = get_wsgi_application ( ) <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = False ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> from django . core . asgi import get_asgi_application <EOL> os . environ . setdefault ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> application = get_asgi_application ( ) <EOL> </s>
<s> from django . db import models <EOL> from django . contrib . postgres . fields import ArrayField <EOL> class Entry ( models . Model ) : <EOL> CHANNEL_CHOICES = ( <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ) <EOL> full_text = models . TextField ( ) <EOL> location = ArrayField ( base_field = models . FloatField ( default = <NUM_LIT> ) , null = True ) <EOL> is_resolved = models . BooleanField ( default = False ) <EOL> is_geolocated = models . BooleanField ( default = False ) <EOL> channel = models . CharField ( max_length = <NUM_LIT> , choices = CHANNEL_CHOICES ) <EOL> extra_parameters = models . TextField ( null = True , blank = True ) <EOL> timestamp = models . DateTimeField ( auto_now_add = True , auto_now = False ) <EOL> class Meta : <EOL> ordering = [ "<STR_LIT>" ] <EOL> class Location ( models . Model ) : <EOL> entry = models . ForeignKey ( <EOL> "<STR_LIT>" , on_delete = models . CASCADE , related_query_name = "<STR_LIT>" , related_name = "<STR_LIT>" <EOL> ) <EOL> formatted_address = models . TextField ( null = True , blank = True ) <EOL> latitude = models . FloatField ( default = <NUM_LIT> ) <EOL> longitude = models . FloatField ( default = <NUM_LIT> ) <EOL> northeast_lat = models . FloatField ( default = <NUM_LIT> ) <EOL> northeast_lng = models . FloatField ( default = <NUM_LIT> ) <EOL> southwest_lat = models . FloatField ( default = <NUM_LIT> ) <EOL> southwest_lng = models . FloatField ( default = <NUM_LIT> ) <EOL> @ property <EOL> def loc ( self ) : <EOL> return [ self . latitude , self . longitude ] <EOL> @ property <EOL> def viewport ( self ) : <EOL> return { <EOL> "<STR_LIT>" : { "<STR_LIT>" : self . northeast_lat , "<STR_LIT>" : self . northeast_lng } , <EOL> "<STR_LIT>" : { "<STR_LIT>" : self . southwest_lat , "<STR_LIT>" : self . southwest_lng } , <EOL> } <EOL> class Meta : <EOL> ordering = [ "<STR_LIT>" ] <EOL> </s>
<s> from django . db import models <EOL> </s>
<s> import django . db . models . deletion <EOL> import django . contrib . postgres . fields <EOL> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = django . contrib . postgres . fields . ArrayField ( <EOL> base_field = models . CharField ( max_length = <NUM_LIT> ) , null = True , size = None <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . ForeignKey ( <EOL> on_delete = django . db . models . deletion . CASCADE , <EOL> related_name = "<STR_LIT>" , <EOL> related_query_name = "<STR_LIT>" , <EOL> to = "<STR_LIT>" , <EOL> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . test import TestCase <EOL> </s>
<s> import json <EOL> import datetime <EOL> from typing import List <EOL> from feeds . models import Entry <EOL> from feeds . tasks import process_entry <EOL> from tweets . helpers import fetch_tweets <EOL> from tweets . models import DepremAddress <EOL> from trquake . celery import app <EOL> @ app . task <EOL> def collect_tweets ( ) : <EOL> data = [ ] <EOL> since_time = int ( <EOL> ( datetime . datetime . now ( ) . replace ( second = <NUM_LIT> , microsecond = <NUM_LIT> ) - datetime . timedelta ( minutes = <NUM_LIT> ) ) . timestamp ( ) <EOL> ) <EOL> query = <EOL> for tweet in fetch_tweets ( query = query ) : <EOL> data . append ( <EOL> Entry ( <EOL> full_text = tweet [ "<STR_LIT>" ] , <EOL> is_resolved = False , <EOL> channel = "<STR_LIT>" , <EOL> extra_parameters = json . dumps ( <EOL> { <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : tweet [ "<STR_LIT>" ] , <EOL> } <EOL> ) , <EOL> ) <EOL> ) <EOL> created_tweets : List [ Entry ] = Entry . objects . bulk_create ( data ) <EOL> for entry in created_tweets : <EOL> process_entry . apply_async ( kwargs = { "<STR_LIT>" : entry . id } ) <EOL> @ app . task <EOL> def collect_deprem_address_tweets ( ) : <EOL> data = [ ] <EOL> since_time = int ( <EOL> ( datetime . datetime . now ( ) . replace ( second = <NUM_LIT> , microsecond = <NUM_LIT> ) - datetime . timedelta ( minutes = <NUM_LIT> ) ) . timestamp ( ) <EOL> ) <EOL> query = <EOL> for tweet in fetch_tweets ( query = query ) : <EOL> data . append ( <EOL> DepremAddress ( <EOL> full_text = tweet [ "<STR_LIT>" ] , <EOL> tweet_id = tweet [ "<STR_LIT>" ] , <EOL> screen_name = tweet [ "<STR_LIT>" ] , <EOL> created_at = tweet [ "<STR_LIT>" ] , <EOL> geo_link = tweet [ "<STR_LIT>" ] , <EOL> ) <EOL> ) <EOL> DepremAddress . objects . bulk_create ( data ) <EOL> </s>
<s> from django . db import migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterModelOptions ( <EOL> name = "<STR_LIT>" , <EOL> options = { "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . contrib import admin <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . TextField ( blank = True , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( default = "<STR_LIT>" , max_length = <NUM_LIT> ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . TextField ( null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> import itertools <EOL> import pandas as pd <EOL> from pytz import timezone <EOL> import snscrape . modules . twitter as sntwitter <EOL> def fetch_tweets ( query : str ) : <EOL> turkey = timezone ( "<STR_LIT>" ) <EOL> df = pd . DataFrame ( itertools . islice ( sntwitter . TwitterSearchScraper ( f"<STR_LIT>" ) . get_items ( ) , <NUM_LIT> ) ) <EOL> try : <EOL> df [ "<STR_LIT>" ] = df . date . apply ( lambda x : pd . to_datetime ( str ( pd . to_datetime ( x ) . astimezone ( turkey ) ) [ : - <NUM_LIT> ] ) ) <EOL> except AttributeError : <EOL> return [ ] <EOL> for ind in df . index : <EOL> links = df [ "<STR_LIT>" ] [ ind ] [ <NUM_LIT> ] [ "<STR_LIT>" ] if df [ "<STR_LIT>" ] [ ind ] else "<STR_LIT>" <EOL> user_id = df [ "<STR_LIT>" ] [ ind ] [ "<STR_LIT>" ] <EOL> screen_name = df [ "<STR_LIT>" ] [ ind ] [ "<STR_LIT>" ] <EOL> name = df [ "<STR_LIT>" ] [ ind ] [ "<STR_LIT>" ] <EOL> tweet_id = df [ "<STR_LIT>" ] [ ind ] <EOL> created_at = df [ "<STR_LIT>" ] [ ind ] <EOL> full_text = df [ "<STR_LIT>" ] [ ind ] <EOL> hashtags = [ i for i in df [ "<STR_LIT>" ] ] [ ind ] <EOL> user_account_created_at = df [ "<STR_LIT>" ] [ ind ] [ "<STR_LIT>" ] <EOL> try : <EOL> media = df [ "<STR_LIT>" ] [ ind ] [ <NUM_LIT> ] [ "<STR_LIT>" ] <EOL> except ( KeyError , TypeError ) : <EOL> media = None <EOL> yield { <EOL> "<STR_LIT>" : str ( full_text ) , <EOL> "<STR_LIT>" : str ( user_id ) , <EOL> "<STR_LIT>" : str ( screen_name ) , <EOL> "<STR_LIT>" : str ( name ) , <EOL> "<STR_LIT>" : str ( tweet_id ) , <EOL> "<STR_LIT>" : str ( created_at ) , <EOL> "<STR_LIT>" : str ( hashtags ) , <EOL> "<STR_LIT>" : str ( user_account_created_at ) , <EOL> "<STR_LIT>" : str ( media ) , <EOL> "<STR_LIT>" : links , <EOL> } <EOL> </s>
<s> import re <EOL> import copy <EOL> from typing import Dict , Union , Optional <EOL> import unidecode <EOL> import pandas as pd <EOL> from django . conf import settings <EOL> DATA_PATH = settings . APPLICATIONS_DIR / "<STR_LIT>" / "<STR_LIT>" / "<STR_LIT>" <EOL> neighbourhood_list = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> street_list = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> site_list = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> block_list = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> df = pd . read_csv ( str ( DATA_PATH / "<STR_LIT>" ) ) <EOL> city_pattern = re . compile ( r"<STR_LIT>" + "<STR_LIT>" . join ( df [ "<STR_LIT>" ] . tolist ( ) ) + "<STR_LIT>" , re . IGNORECASE ) <EOL> distinct_pattern = re . compile ( r"<STR_LIT>" + "<STR_LIT>" . join ( df [ "<STR_LIT>" ] . tolist ( ) ) + "<STR_LIT>" , re . IGNORECASE ) <EOL> neighbourhood_pattern = re . compile ( r"<STR_LIT>" + "<STR_LIT>" . join ( df [ "<STR_LIT>" ] . tolist ( ) ) + "<STR_LIT>" , re . IGNORECASE ) <EOL> neighbourhood_pattern_v2 = re . compile ( <EOL> r"<STR_LIT>" + "<STR_LIT>" . join ( neighbourhood_list ) + r"<STR_LIT>" , <EOL> re . IGNORECASE , <EOL> ) <EOL> street_road_boulevard_pattern = re . compile ( r"<STR_LIT>" + "<STR_LIT>" . join ( street_list ) + "<STR_LIT>" , re . IGNORECASE ) <EOL> site_apartment_pattern = re . compile ( r"<STR_LIT>" + "<STR_LIT>" . join ( site_list ) + "<STR_LIT>" , re . IGNORECASE ) <EOL> block_pattern = re . compile ( r"<STR_LIT>" + "<STR_LIT>" . join ( block_list ) + "<STR_LIT>" , re . IGNORECASE ) <EOL> floor_pattern = re . compile ( r"<STR_LIT>" , re . IGNORECASE ) <EOL> apartment_no_pattern = re . compile ( <EOL> r"<STR_LIT>" , <EOL> re . IGNORECASE , <EOL> ) <EOL> phone_number_pattern = re . compile ( r"<STR_LIT>" , re . IGNORECASE ) <EOL> city_dict = dict ( zip ( df [ "<STR_LIT>" ] . tolist ( ) , df [ "<STR_LIT>" ] . tolist ( ) ) ) <EOL> distinct_dict = dict ( zip ( df [ "<STR_LIT>" ] . tolist ( ) , df [ "<STR_LIT>" ] . tolist ( ) ) ) <EOL> neighbourhood_dict = dict ( zip ( df [ "<STR_LIT>" ] . tolist ( ) , df [ "<STR_LIT>" ] . tolist ( ) ) ) <EOL> remove_punct_pattern = re . compile ( r"<STR_LIT>" , re . IGNORECASE ) <EOL> number_regex = re . compile ( r"<STR_LIT>" , re . IGNORECASE ) <EOL> class ExtractInfo : <EOL> result : Dict [ str , Optional [ Union [ str , int ] ] ] <EOL> text : str <EOL> def __init__ ( self ) : <EOL> self . stopword_list = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> @ staticmethod <EOL> def process_text ( text , is_unidecode = True ) : <EOL> text = text . translate ( str . maketrans ( "<STR_LIT>" , "<STR_LIT>" ) ) . lower ( ) <EOL> if is_unidecode : <EOL> text = unidecode . unidecode ( text ) <EOL> return text <EOL> @ staticmethod <EOL> def number_exact_match ( text1 , text2 ) : <EOL> return True if set ( number_regex . findall ( text1 ) ) == set ( number_regex . findall ( text2 ) ) else False <EOL> def get_sim_based_city_distinct_neighbourhood ( self ) : <EOL> for token in self . text . split ( ) : <EOL> token_lower = token . translate ( str . maketrans ( "<STR_LIT>" , "<STR_LIT>" ) ) . lower ( ) <EOL> for city in city_dict . values ( ) : <EOL> city_lower = city . translate ( str . maketrans ( "<STR_LIT>" , "<STR_LIT>" ) ) . lower ( ) <EOL> if textdistance . levenshtein . normalized_similarity ( token_lower , city_lower ) >= <NUM_LIT> : <EOL> self . result [ "<STR_LIT>" ] = city <EOL> break <EOL> for distinct in distinct_dict . values ( ) : <EOL> distinct_lower = distinct . translate ( str . maketrans ( "<STR_LIT>" , "<STR_LIT>" ) ) . lower ( ) <EOL> if textdistance . levenshtein . normalized_similarity ( token_lower , distinct_lower ) >= <NUM_LIT> : <EOL> self . result [ "<STR_LIT>" ] = distinct <EOL> break <EOL> for neighbourhood in neighbourhood_dict . values ( ) : <EOL> neighbourhood_lower = neighbourhood . translate ( str . maketrans ( "<STR_LIT>" , "<STR_LIT>" ) ) . lower ( ) <EOL> if textdistance . levenshtein . normalized_similarity ( token_lower , neighbourhood_lower ) >= <NUM_LIT> : <EOL> self . result [ "<STR_LIT>" ] = neighbourhood <EOL> break <EOL> def get_until_stopword ( self , text , key ) : <EOL> index = text . find ( key ) <EOL> current_text = text [ : index ] + f"<STR_LIT>" <EOL> stopword_index = - <NUM_LIT> <EOL> for stopword in self . stopword_list : <EOL> index = [ el . end ( ) for el in re . finditer ( stopword , current_text ) ] <EOL> if index : <EOL> st_index = index [ - <NUM_LIT> ] <EOL> else : <EOL> continue <EOL> if st_index > stopword_index : <EOL> stopword_index = st_index <EOL> if stopword_index != - <NUM_LIT> : <EOL> current_text = current_text [ stopword_index : ] <EOL> current_text = "<STR_LIT>" . join ( current_text . split ( "<STR_LIT>" ) [ - <NUM_LIT> : ] ) <EOL> return re . sub ( "<STR_LIT>" , "<STR_LIT>" , current_text ) . strip ( ) <EOL> def extract ( self , text ) : <EOL> self . text = "<STR_LIT>" . join ( text . strip ( ) . split ( ) ) <EOL> self . result = { <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : None , <EOL> "<STR_LIT>" : { } , <EOL> "<STR_LIT>" : copy . deepcopy ( text ) , <EOL> } <EOL> self . text = self . text . split ( "<STR_LIT>" ) [ - <NUM_LIT> ] <EOL> self . text = remove_punct_pattern . sub ( "<STR_LIT>" , self . text ) <EOL> unidecoded_text = self . process_text ( self . text ) <EOL> try : <EOL> extracted_il = city_pattern . findall ( unidecoded_text ) [ <NUM_LIT> ] <EOL> unidecoded_text = unidecoded_text . replace ( extracted_il , "<STR_LIT>" ) <EOL> self . result [ "<STR_LIT>" ] = city_dict [ extracted_il ] . title ( ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> extracted_distinct = distinct_pattern . findall ( unidecoded_text ) [ <NUM_LIT> ] <EOL> unidecoded_text = unidecoded_text . replace ( extracted_distinct , "<STR_LIT>" ) <EOL> self . result [ "<STR_LIT>" ] = distinct_dict [ extracted_distinct ] . title ( ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> self . result [ "<STR_LIT>" ] = neighbourhood_pattern_v2 . findall ( self . text ) [ <NUM_LIT> ] [ <NUM_LIT> ] . strip ( ) <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> try : <EOL> extracted_neighbourhood = neighbourhood_pattern . findall ( unidecoded_text ) [ <NUM_LIT> ] <EOL> self . result [ "<STR_LIT>" ] = neighbourhood_dict [ extracted_neighbourhood ] <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> self . result [ "<STR_LIT>" ] = street_road_boulevard_pattern . findall ( self . text ) [ <NUM_LIT> ] [ <NUM_LIT> ] . strip ( ) <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> self . result [ "<STR_LIT>" ] = site_apartment_pattern . findall ( self . text ) [ <NUM_LIT> ] [ <NUM_LIT> ] . strip ( ) <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> self . result [ "<STR_LIT>" ] = block_pattern . findall ( self . text ) [ <NUM_LIT> ] [ <NUM_LIT> ] . strip ( ) <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> self . result [ "<STR_LIT>" ] = self . result [ "<STR_LIT>" ] . replace ( "<STR_LIT>" , "<STR_LIT>" ) . strip ( ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> self . result [ "<STR_LIT>" ] = floor_pattern . findall ( self . text ) [ <NUM_LIT> ] [ <NUM_LIT> ] . strip ( ) <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> self . result [ "<STR_LIT>" ] = int ( self . result [ "<STR_LIT>" ] . lower ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) . strip ( ) ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> self . result [ "<STR_LIT>" ] = apartment_no_pattern . findall ( self . text ) [ <NUM_LIT> ] [ <NUM_LIT> ] . strip ( ) <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> self . result [ "<STR_LIT>" ] = int ( <EOL> self . result [ "<STR_LIT>" ] . lower ( ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) . replace ( "<STR_LIT>" , "<STR_LIT>" ) . strip ( ) <EOL> ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> try : <EOL> phone_number = [ <EOL> phone_number <EOL> for phone_number in sorted ( <EOL> re . findall ( <EOL> r"<STR_LIT>" , <EOL> self . text , <EOL> ) , <EOL> key = len , <EOL> reverse = True , <EOL> ) <EOL> if <NUM_LIT> <= len ( phone_number ) <= <NUM_LIT> <EOL> ] [ <NUM_LIT> ] <EOL> self . result [ "<STR_LIT>" ] [ "<STR_LIT>" ] = phone_number if <NUM_LIT> <= len ( phone_number ) <= <NUM_LIT> else "<STR_LIT>" <EOL> self . text = self . text . replace ( self . result [ "<STR_LIT>" ] [ "<STR_LIT>" ] , "<STR_LIT>" ) <EOL> except Exception as e : <EOL> print ( str ( e ) ) <EOL> self . result [ "<STR_LIT>" ] [ "<STR_LIT>" ] = "<STR_LIT>" <EOL> self . concat_address ( ) <EOL> self . calculate_score ( ) <EOL> return self . result <EOL> def concat_address ( self ) : <EOL> address_str = "<STR_LIT>" <EOL> for key , value in self . result . items ( ) : <EOL> if value != "<STR_LIT>" : <EOL> if key == "<STR_LIT>" : <EOL> address_str = address_str + value + "<STR_LIT>" <EOL> if key == "<STR_LIT>" : <EOL> address_str = address_str + value + "<STR_LIT>" <EOL> if key == "<STR_LIT>" : <EOL> address_str = address_str + value + "<STR_LIT>" <EOL> if key == "<STR_LIT>" : <EOL> address_str = address_str + value + "<STR_LIT>" <EOL> if key == "<STR_LIT>" : <EOL> address_str = address_str + value + "<STR_LIT>" <EOL> self . result [ "<STR_LIT>" ] = address_str <EOL> def calculate_score ( self ) : <EOL> weighted_score = <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> if self . result [ "<STR_LIT>" ] [ "<STR_LIT>" ] != "<STR_LIT>" : <EOL> weighted_score += <NUM_LIT> <EOL> self . result [ "<STR_LIT>" ] = weighted_score / ( <NUM_LIT> + <NUM_LIT> + <NUM_LIT> + <NUM_LIT> + <NUM_LIT> + <NUM_LIT> + <NUM_LIT> + <NUM_LIT> + <NUM_LIT> ) <EOL> return self . result <EOL> </s>
<s> from django . apps import AppConfig <EOL> class CoreConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> import socket <EOL> import environ <EOL> from . base import * <EOL> env = environ . Env ( ) <EOL> INSTALLED_APPS += [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> MIDDLEWARE += [ "<STR_LIT>" ] <EOL> hostname , _ , ips = socket . gethostbyname_ex ( socket . gethostname ( ) ) <EOL> INTERNAL_IPS = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> INTERNAL_IPS += [ ip [ : - <NUM_LIT> ] + "<STR_LIT>" for ip in ips ] <EOL> SHELL_PLUS_PRINT_SQL = True <EOL> DATABASES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : env ( "<STR_LIT>" ) , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> } <EOL> CACHES = { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> ] , <EOL> } <EOL> } <EOL> CACHE_MIDDLEWARE_ALIAS = "<STR_LIT>" <EOL> CACHE_MIDDLEWARE_SECONDS = <NUM_LIT> <EOL> CACHE_MIDDLEWARE_KEY_PREFIX = "<STR_LIT>" <EOL> </s>
<s> from typing import Dict , List , Union <EOL> from core . address_api import AddressAPI <EOL> from feeds . models import Entry , Location <EOL> from feeds . serializers import BulkEntrySerializer <EOL> from trquake . celery import app <EOL> @ app . task <EOL> def process_entry ( entry_id : int ) : <EOL> address_api = AddressAPI ( ) <EOL> entry = Entry . objects . get ( id = entry_id ) <EOL> address_text = entry . full_text <EOL> if not entry . is_resolved and not entry . is_geolocated : <EOL> regex_response = address_api . regex_api_request ( entry . full_text ) <EOL> if regex_response [ "<STR_LIT>" ] < <NUM_LIT> : <EOL> return <EOL> address_text = regex_response [ "<STR_LIT>" ] <EOL> if not entry . is_geolocated : <EOL> geolocation = address_api . trendyol_bff_api_request ( address_text ) <EOL> if geolocation . get ( "<STR_LIT>" , False ) : <EOL> entry . is_resolved = True <EOL> entry . save ( ) <EOL> Location . objects . create ( <EOL> entry = entry , <EOL> latitude = geolocation [ "<STR_LIT>" ] , <EOL> longitude = geolocation [ "<STR_LIT>" ] , <EOL> northeast_lat = geolocation [ "<STR_LIT>" ] , <EOL> northeast_lng = geolocation [ "<STR_LIT>" ] , <EOL> southwest_lat = geolocation [ "<STR_LIT>" ] , <EOL> southwest_lng = geolocation [ "<STR_LIT>" ] , <EOL> formatted_address = geolocation [ "<STR_LIT>" ] , <EOL> ) <EOL> else : <EOL> Location . objects . create ( entry = entry , latitude = entry . location [ <NUM_LIT> ] , longitude = entry . location [ <NUM_LIT> ] ) <EOL> @ app . task <EOL> def write_bulk_entries ( entries : List [ Dict [ str , Union [ str , bool ] ] ] ) : <EOL> for entry_data in entries : <EOL> serializer = BulkEntrySerializer ( data = entry_data ) <EOL> if serializer . is_valid ( ) : <EOL> entry : Entry = serializer . save ( ) <EOL> process_entry ( entry_id = entry . id ) <EOL> </s>
<s> from rest_framework . authentication import TokenAuthentication <EOL> class AfetHaritaAuthentication ( TokenAuthentication ) : <EOL> keyword = "<STR_LIT>" <EOL> </s>
<s> import logging <EOL> from rest_framework . views import APIView <EOL> from rest_framework . request import Request <EOL> from rest_framework . response import Response <EOL> logger = logging . getLogger ( __name__ ) <EOL> class HealthCheckView ( APIView ) : <EOL> def get ( self , request : Request ) -> Response : <EOL> logger . debug ( request . get_host ( ) ) <EOL> return Response ( data = { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> </s>
<s> class PrimaryReplicaRouter : <EOL> def db_for_read ( self , model , ** hints ) : <EOL> return "<STR_LIT>" <EOL> def db_for_write ( self , model , ** hints ) : <EOL> return "<STR_LIT>" <EOL> def allow_relation ( self , obj1 , obj2 , ** hints ) : <EOL> db_set = { "<STR_LIT>" , "<STR_LIT>" } <EOL> if obj1 . _state . db in db_set and obj2 . _state . db in db_set : <EOL> return True <EOL> return None <EOL> def allow_migrate ( self , db , app_label , model_name = None , ** hints ) : <EOL> return True <EOL> </s>
<s> from rest_framework import filters <EOL> from feeds . serializers import LocationFilterParamSerializer <EOL> class LocationFilterBackend ( filters . BaseFilterBackend ) : <EOL> def filter_queryset ( self , request , queryset , view ) : <EOL> params = LocationFilterParamSerializer ( data = request . query_params ) <EOL> params . is_valid ( raise_exception = True ) <EOL> filter_list = params . validated_data <EOL> timestamp__gte = filter_list . get ( "<STR_LIT>" , None ) <EOL> timestamp__lte = filter_list . get ( "<STR_LIT>" , None ) <EOL> if timestamp__gte : <EOL> queryset = queryset . filter ( raw__timestamp__gte = timestamp__gte ) <EOL> if timestamp__lte : <EOL> queryset = queryset . filter ( raw__timestamp__lte = timestamp__lte ) <EOL> return queryset <EOL> </s>
<s> from django . urls import path <EOL> from core . views import HealthCheckView <EOL> urlpatterns = [ path ( "<STR_LIT>" , HealthCheckView . as_view ( ) ) ] <EOL> </s>
<s> from django . utils . decorators import method_decorator <EOL> from django . views . decorators . cache import cache_page <EOL> from rest_framework . request import Request <EOL> from rest_framework . response import Response <EOL> from rest_framework . status import HTTP_200_OK <EOL> from rest_framework . viewsets import GenericViewSet <EOL> from rest_framework . exceptions import ValidationError <EOL> from feeds . models import Location <EOL> class BaseAreaViewSet ( GenericViewSet ) : <EOL> queryset = Location . objects . select_related ( "<STR_LIT>" ) . all ( ) <EOL> def get_queryset ( self ) : <EOL> ne_lat = self . request . query_params . get ( "<STR_LIT>" ) <EOL> ne_lng = self . request . query_params . get ( "<STR_LIT>" ) <EOL> sw_lat = self . request . query_params . get ( "<STR_LIT>" ) <EOL> sw_lng = self . request . query_params . get ( "<STR_LIT>" ) <EOL> if not ne_lat : <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> if not ne_lng : <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> if not sw_lat : <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> if not sw_lng : <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> try : <EOL> ne_lat = float ( ne_lat ) <EOL> ne_lng = float ( ne_lng ) <EOL> sw_lat = float ( sw_lat ) <EOL> sw_lng = float ( sw_lng ) <EOL> except ValueError : <EOL> raise ValidationError ( "<STR_LIT>" ) <EOL> return self . queryset . filter ( <EOL> northeast_lat__lte = ne_lat , <EOL> northeast_lng__lte = ne_lng , <EOL> southwest_lat__gte = sw_lat , <EOL> southwest_lng__gte = sw_lng , <EOL> ) <EOL> @ method_decorator ( cache_page ( <NUM_LIT> * <NUM_LIT> ) ) <EOL> def list ( self , request : Request , * args , ** kwargs ) -> Response : <EOL> queryset = self . get_queryset ( ) <EOL> serializer = self . serializer_class ( queryset , many = True ) <EOL> return Response ( <EOL> data = { "<STR_LIT>" : queryset . count ( ) , "<STR_LIT>" : serializer . data } , <EOL> status = HTTP_200_OK , <EOL> ) <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( blank = True , null = True ) ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> } , <EOL> ) , <EOL> migrations . RemoveField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> migrations . DeleteModel ( <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> migrations . DeleteModel ( <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> migrations . DeleteModel ( <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> </s>
<s> import django . utils . timezone <EOL> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . DateTimeField ( auto_now_add = True , default = django . utils . timezone . now ) , <EOL> preserve_default = False , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from typing import Dict , List , Union <EOL> from rest_framework import serializers <EOL> from rest_framework . exceptions import ValidationError <EOL> from feeds . models import Entry , Location <EOL> class BaseEntrySerializer ( serializers . ModelSerializer ) : <EOL> def validate ( self , attrs : Dict [ str , Union [ str , float , bool ] ] ) : <EOL> if attrs . get ( "<STR_LIT>" ) : <EOL> location = attrs . get ( "<STR_LIT>" , None ) <EOL> if not location : <EOL> raise ValidationError ( { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> if len ( location ) != <NUM_LIT> : <EOL> raise ValidationError ( { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> for loc in location : <EOL> if type ( loc ) != float : <EOL> raise ValidationError ( { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> return attrs <EOL> class BulkEntrySerializer ( BaseEntrySerializer ) : <EOL> class Meta : <EOL> model = Entry <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> class EntrySerializer ( BaseEntrySerializer ) : <EOL> def create ( self , validated_data : Dict [ str , Union [ str , bool ] ] ) : <EOL> from feeds . tasks import process_entry <EOL> instance : Entry = super ( ) . create ( validated_data = validated_data ) <EOL> process_entry . apply_async ( kwargs = { "<STR_LIT>" : instance . id } ) <EOL> return instance <EOL> class Meta : <EOL> model = Entry <EOL> fields = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> class LocationLiteSerializer ( serializers . ModelSerializer ) : <EOL> class Meta : <EOL> model = Location <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> class LocationSerializer ( serializers . ModelSerializer ) : <EOL> raw = EntrySerializer ( source = "<STR_LIT>" ) <EOL> class Meta : <EOL> model = Location <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> class LocationFilterParamSerializer ( serializers . Serializer ) : <EOL> timestamp__gte = serializers . DateTimeField ( required = False ) <EOL> timestamp__lte = serializers . DateTimeField ( required = False ) <EOL> </s>
<s> from django . contrib import admin <EOL> from feeds . models import Entry , Location <EOL> @ admin . register ( Entry ) <EOL> class EntryAdmin ( admin . ModelAdmin ) : <EOL> list_display = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> list_filter = [ "<STR_LIT>" , "<STR_LIT>" ] <EOL> search_fields = [ "<STR_LIT>" ] <EOL> class Meta : <EOL> model = Entry <EOL> @ admin . register ( Location ) <EOL> class LocationAdmin ( admin . ModelAdmin ) : <EOL> list_display = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> class Meta : <EOL> model = Location <EOL> </s>
<s> import environ <EOL> from django . contrib . auth . models import User <EOL> from django . core . management import BaseCommand <EOL> class Command ( BaseCommand ) : <EOL> def handle ( self , * args , ** options ) : <EOL> env = environ . Env ( ) <EOL> default_password = env ( "<STR_LIT>" ) <EOL> default_username = "<STR_LIT>" <EOL> if not User . objects . filter ( username = default_username ) . exists ( ) : <EOL> user = User . objects . create ( username = default_username , is_active = True , is_staff = True , is_superuser = True ) <EOL> user . set_password ( default_password ) <EOL> user . save ( ) <EOL> </s>
<s> import django . db . models . deletion <EOL> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . BooleanField ( default = False ) , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = False ) ) , <EOL> ( "<STR_LIT>" , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = "<STR_LIT>" ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> from rest_framework . pagination import PageNumberPagination <EOL> class LocationPagination ( PageNumberPagination ) : <EOL> page_size_query_param = "<STR_LIT>" <EOL> max_page_size = <NUM_LIT> <EOL> page_size = <NUM_LIT> <EOL> class AreaPagination ( PageNumberPagination ) : <EOL> page_size_query_param = "<STR_LIT>" <EOL> max_page_size = <NUM_LIT> <EOL> page_size = <NUM_LIT> <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> migrations . AddField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( blank = True , max_length = <NUM_LIT> , null = True ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . AlterField ( <EOL> model_name = "<STR_LIT>" , <EOL> name = "<STR_LIT>" , <EOL> field = models . CharField ( <EOL> choices = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] , <EOL> max_length = <NUM_LIT> , <EOL> ) , <EOL> ) , <EOL> ] <EOL> </s>
<s> from rest_framework . views import APIView <EOL> from rest_framework . request import Request <EOL> from rest_framework . response import Response <EOL> from rest_framework . viewsets import ModelViewSet <EOL> from rest_framework . permissions import IsAuthenticated <EOL> from rest_framework . authentication import BasicAuthentication , SessionAuthentication <EOL> from feeds . models import Entry <EOL> from feeds . tasks import write_bulk_entries <EOL> from feeds . serializers import EntrySerializer <EOL> from core . authentication import AfetHaritaAuthentication <EOL> class EntryViewSet ( ModelViewSet ) : <EOL> authentication_classes = [ <EOL> AfetHaritaAuthentication , <EOL> BasicAuthentication , <EOL> SessionAuthentication , <EOL> ] <EOL> permission_classes = [ IsAuthenticated ] <EOL> queryset = Entry . objects . all ( ) <EOL> serializer_class = EntrySerializer <EOL> http_method_names = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> class BulkEntryView ( APIView ) : <EOL> write_task = write_bulk_entries <EOL> permission_classes = [ IsAuthenticated ] <EOL> authentication_classes = [ <EOL> AfetHaritaAuthentication , <EOL> BasicAuthentication , <EOL> SessionAuthentication , <EOL> ] <EOL> def post ( self , request : Request ) -> Response : <EOL> self . write_task . apply_async ( kwargs = { "<STR_LIT>" : request . data } ) <EOL> return Response ( { "<STR_LIT>" : "<STR_LIT>" } ) <EOL> </s>
<s> from django . urls import path <EOL> from rest_framework . routers import DefaultRouter <EOL> from feeds . views . locations import LocationViewSet <EOL> from feeds . views . entries import EntryViewSet , BulkEntryView <EOL> from feeds . views . areas import AreaViewSet , AreaLiteViewSet , AreasCountViewSet , CityByCityCountView <EOL> router = DefaultRouter ( trailing_slash = False ) <EOL> router . register ( "<STR_LIT>" , LocationViewSet , basename = "<STR_LIT>" ) <EOL> router . register ( "<STR_LIT>" , EntryViewSet , basename = "<STR_LIT>" ) <EOL> router . register ( "<STR_LIT>" , AreaViewSet , basename = "<STR_LIT>" ) <EOL> router . register ( "<STR_LIT>" , AreasCountViewSet , basename = "<STR_LIT>" ) <EOL> router . register ( "<STR_LIT>" , AreaLiteViewSet , basename = "<STR_LIT>" ) <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , BulkEntryView . as_view ( ) ) , <EOL> path ( "<STR_LIT>" , CityByCityCountView . as_view ( ) ) , <EOL> ] + router . urls <EOL> </s>
<s> import operator <EOL> from functools import reduce <EOL> from django . db . models import Q , Count <EOL> from django . utils . decorators import method_decorator <EOL> from django . views . decorators . cache import cache_page <EOL> from rest_framework . views import APIView <EOL> from rest_framework . request import Request <EOL> from rest_framework . response import Response <EOL> from feeds . models import Location <EOL> from feeds . views . base import BaseAreaViewSet <EOL> from feeds . serializers import LocationSerializer , LocationLiteSerializer <EOL> class AreaViewSet ( BaseAreaViewSet ) : <EOL> serializer_class = LocationSerializer <EOL> class AreaLiteViewSet ( BaseAreaViewSet ) : <EOL> serializer_class = LocationLiteSerializer <EOL> class AreasCountViewSet ( AreaViewSet ) : <EOL> @ method_decorator ( cache_page ( <NUM_LIT> * <NUM_LIT> ) ) <EOL> def list ( self , request : Request , * args , ** kwargs ) -> Response : <EOL> return Response ( { "<STR_LIT>" : self . get_queryset ( ) . count ( ) } ) <EOL> class CityByCityCountView ( APIView ) : <EOL> CITY_LIST = {} <EOL> @ method_decorator ( cache_page ( <NUM_LIT> * <NUM_LIT> ) ) <EOL> def get ( self , request : Request ) -> Response : <EOL> kwargs = { } <EOL> for city , keywords in self . CITY_LIST . items ( ) : <EOL> kwargs [ city ] = Count ( <EOL> "<STR_LIT>" , <EOL> filter = reduce ( operator . or_ , ( Q ( formatted_address__icontains = k ) for k in keywords ) ) , <EOL> ) <EOL> return Response ( data = Location . objects . aggregate ( ** kwargs ) ) <EOL> </s>
<s> from django . conf import settings <EOL> from django . contrib import admin <EOL> from django . urls import path , include <EOL> from django . conf . urls . static import static <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , admin . site . urls ) , <EOL> path ( "<STR_LIT>" , include ( "<STR_LIT>" ) ) , <EOL> path ( "<STR_LIT>" , include ( "<STR_LIT>" ) ) , <EOL> ] + static ( settings . STATIC_URL , document_root = settings . STATIC_ROOT ) <EOL> if settings . DEBUG : <EOL> urlpatterns += [ path ( "<STR_LIT>" , include ( "<STR_LIT>" ) ) ] <EOL> </s>
<s> from django . apps import AppConfig <EOL> class TweetsConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> from rest_framework . viewsets import ModelViewSet <EOL> from feeds . models import Location <EOL> from core . pagination import LocationPagination <EOL> from feeds . filters import LocationFilterBackend <EOL> from feeds . serializers import LocationSerializer <EOL> class LocationViewSet ( ModelViewSet ) : <EOL> queryset = Location . objects . select_related ( "<STR_LIT>" ) . all ( ) <EOL> serializer_class = LocationSerializer <EOL> http_method_names = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> pagination_class = LocationPagination <EOL> filter_backends = [ LocationFilterBackend ] <EOL> </s>
<s> from django . db import models <EOL> class DepremAddress ( models . Model ) : <EOL> full_text = models . TextField ( ) <EOL> tweet_id = models . CharField ( max_length = <NUM_LIT> ) <EOL> screen_name = models . CharField ( max_length = <NUM_LIT> ) <EOL> created_at = models . DateTimeField ( null = True , blank = True ) <EOL> geo_link = models . CharField ( max_length = <NUM_LIT> , default = "<STR_LIT>" ) <EOL> intent_result = models . TextField ( null = True ) <EOL> is_done = models . BooleanField ( default = False ) <EOL> class Meta : <EOL> ordering = [ "<STR_LIT>" ] <EOL> </s>
<s> from core . helpers . trendyol_bff import TY_BFF <EOL> from core . helpers . regex_api import ExtractInfo <EOL> class AddressAPI : <EOL> def __init__ ( self ) : <EOL> self . ty_geolocation_url = "<STR_LIT>" <EOL> self . ty_api = TY_BFF ( self . ty_geolocation_url ) <EOL> self . regex_api = ExtractInfo ( ) <EOL> def trendyol_bff_api_request ( self , address_text : str ) : <EOL> return self . ty_api . request ( address_text ) <EOL> def regex_api_request ( self , address_text : str ) : <EOL> return self . regex_api . extract ( address_text ) <EOL> </s>
<s> from django . apps import AppConfig <EOL> class FeedsConfig ( AppConfig ) : <EOL> default_auto_field = "<STR_LIT>" <EOL> name = "<STR_LIT>" <EOL> </s>
<s> import django . db . models . deletion <EOL> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> dependencies = [ <EOL> ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( blank = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . FloatField ( default = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = "<STR_LIT>" ) ) , <EOL> ] , <EOL> ) , <EOL> ] <EOL> </s>
<s> import django . db . models . deletion <EOL> import django . contrib . postgres . fields <EOL> from django . db import models , migrations <EOL> class Migration ( migrations . Migration ) : <EOL> initial = True <EOL> dependencies = [ ] <EOL> operations = [ <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . BooleanField ( default = False ) ) , <EOL> ( "<STR_LIT>" , models . CharField ( max_length = <NUM_LIT> ) ) , <EOL> ( "<STR_LIT>" , models . DateTimeField ( blank = True , null = True ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( <EOL> "<STR_LIT>" , <EOL> django . contrib . postgres . fields . ArrayField ( base_field = models . CharField ( max_length = <NUM_LIT> ) , size = None ) , <EOL> ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> } , <EOL> ) , <EOL> migrations . CreateModel ( <EOL> name = "<STR_LIT>" , <EOL> fields = [ <EOL> ( "<STR_LIT>" , models . BigAutoField ( auto_created = True , primary_key = True , serialize = False , verbose_name = "<STR_LIT>" ) ) , <EOL> ( "<STR_LIT>" , models . TextField ( ) ) , <EOL> ( "<STR_LIT>" , models . ForeignKey ( on_delete = django . db . models . deletion . CASCADE , to = "<STR_LIT>" ) ) , <EOL> ] , <EOL> options = { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> } , <EOL> ) , <EOL> ] <EOL> </s>
<s> import os <EOL> import sys <EOL> from pathlib import Path <EOL> import environ <EOL> BASE_DIR = Path ( __file__ ) . resolve ( ) . parent . parent . parent <EOL> APPLICATIONS_DIR = BASE_DIR / "<STR_LIT>" <EOL> sys . path . append ( str ( APPLICATIONS_DIR ) ) <EOL> env = environ . Env ( ) <EOL> ENV_FILE = BASE_DIR / "<STR_LIT>" <EOL> if Path . is_file ( ENV_FILE ) : <EOL> env . read_env ( str ( ENV_FILE ) ) <EOL> SECRET_KEY = env ( "<STR_LIT>" ) <EOL> DEBUG = True <EOL> ALLOWED_HOSTS = [ ] <EOL> INSTALLED_APPS = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> MIDDLEWARE = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> ROOT_URLCONF = "<STR_LIT>" <EOL> TEMPLATES = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ ] , <EOL> "<STR_LIT>" : True , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] , <EOL> } , <EOL> } , <EOL> ] <EOL> WSGI_APPLICATION = "<STR_LIT>" <EOL> AUTH_PASSWORD_VALIDATORS = [ <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ] <EOL> LANGUAGE_CODE = "<STR_LIT>" <EOL> TIME_ZONE = "<STR_LIT>" <EOL> USE_I18N = True <EOL> USE_TZ = True <EOL> STATIC_URL = "<STR_LIT>" <EOL> STATIC_ROOT = BASE_DIR / "<STR_LIT>" / "<STR_LIT>" <EOL> DEFAULT_AUTO_FIELD = "<STR_LIT>" <EOL> CELERY_BROKER_URL = env . str ( "<STR_LIT>" , "<STR_LIT>" ) <EOL> CELERY_ACCEPT_CONTENT = [ "<STR_LIT>" ] <EOL> CELERY_TASK_SERIALIZER = "<STR_LIT>" <EOL> CELERY_RESULT_SERIALIZER = "<STR_LIT>" <EOL> ZEKAI_USERNAME = env ( "<STR_LIT>" ) <EOL> ZEKAI_PASSWORD = env ( "<STR_LIT>" ) <EOL> LOGGING = { <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> "<STR_LIT>" : False , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : { <EOL> "<STR_LIT>" : [ "<STR_LIT>" ] , <EOL> "<STR_LIT>" : os . getenv ( "<STR_LIT>" , "<STR_LIT>" ) , <EOL> "<STR_LIT>" : False , <EOL> } , <EOL> } , <EOL> } <EOL> REST_FRAMEWORK = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : <NUM_LIT> , <EOL> } <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemOut <EOL> class TestReadModelView ( TestCase ) : <EOL> def test_register_route_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> read_item = views . ReadModelView ( <EOL> response_body = ItemOut , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . read_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> def test_bind_to_viewset_with_response_body ( self ) : <EOL> model_view = views . ReadModelView ( response_body = ItemOut ) <EOL> class ItemModelViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = None <EOL> default_response_body = None <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> def test_bind_to_viewset_without_response_body ( self ) : <EOL> model_view = views . ReadModelView ( ) <EOL> class ItemModelViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> default_request_body = None <EOL> default_response_body = ItemOut <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> def test_bind_to_viewset_without_response_body_error ( self ) : <EOL> model_view = views . ReadModelView ( ) <EOL> class ItemModelViewSet ( ModelViewSet ) : <EOL> model = Item <EOL> with self . assertRaises ( AttributeError ) : <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> </s>
<s> import inspect <EOL> from typing import Optional , Type <EOL> from django . db . models import Model <EOL> from ninja import Router , Schema <EOL> from ninja_crud . views import AbstractModelView <EOL> class ModelViewSet : <EOL> model : Type [ Model ] <EOL> default_request_body : Optional [ Type [ Schema ] ] <EOL> default_response_body : Optional [ Type [ Schema ] ] <EOL> def __init_subclass__ ( cls , * args , ** kwargs ) -> None : <EOL> super ( ) . __init_subclass__ ( * args , ** kwargs ) <EOL> if hasattr ( cls , "<STR_LIT>" ) : <EOL> cls . _bind_model_views ( ) <EOL> @ classmethod <EOL> def _bind_model_views ( cls ) -> None : <EOL> for _ , model_view in inspect . getmembers ( <EOL> cls , lambda member : isinstance ( member , AbstractModelView ) <EOL> ) : <EOL> model_view . model_viewset_class = cls <EOL> @ classmethod <EOL> def register_routes ( cls , router : Router ) -> None : <EOL> view_attributes = { <EOL> name : view <EOL> for name , view in inspect . getmembers ( cls ) <EOL> if isinstance ( view , AbstractModelView ) <EOL> } <EOL> attribute_order = list ( cls . __dict__ ) <EOL> ordered_view_attributes = sorted ( <EOL> view_attributes . items ( ) , key = lambda item : attribute_order . index ( item [ <NUM_LIT> ] ) <EOL> ) <EOL> for name , view in ordered_view_attributes : <EOL> view . register_route ( router , route_name = name ) <EOL> </s>
<s> import http <EOL> import uuid <EOL> from typing import Any , Optional , Tuple , Union <EOL> import django . core . exceptions <EOL> import django . http <EOL> import django . test <EOL> import ninja <EOL> from ninja_crud import views <EOL> from tests . test_app . models import Item <EOL> class TestAbstractModelView ( django . test . TestCase ) : <EOL> def test_property_model_viewset_class ( self ) : <EOL> class ModelView ( views . AbstractModelView ) : <EOL> def handle_request ( <EOL> self , <EOL> request : django . http . HttpRequest , <EOL> path_parameters : Optional [ ninja . Schema ] , <EOL> query_parameters : Optional [ ninja . Schema ] , <EOL> request_body : Optional [ ninja . Schema ] , <EOL> ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : <EOL> pass <EOL> class ItemViewSet : <EOL> model = Item <EOL> model_view = ModelView ( method = views . enums . HTTPMethod . GET , path = "<STR_LIT>" ) <EOL> self . assertIsNone ( <EOL> model_view . handle_request ( <EOL> request = django . http . HttpRequest ( ) , <EOL> path_parameters = None , <EOL> query_parameters = None , <EOL> request_body = None , <EOL> ) <EOL> ) <EOL> with self . assertRaises ( ValueError ) : <EOL> _ = model_view . model_viewset_class <EOL> model_view . model_viewset_class = ItemViewSet <EOL> with self . assertRaises ( ValueError ) : <EOL> model_view . model_viewset_class = ItemViewSet <EOL> def test_infer_field_type ( self ) : <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> uuid . UUID , <EOL> ) <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> str , <EOL> ) <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> str , <EOL> ) <EOL> self . assertEqual ( <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) , <EOL> uuid . UUID , <EOL> ) <EOL> with self . assertRaises ( ValueError ) : <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) <EOL> with self . assertRaises ( django . core . exceptions . FieldDoesNotExist ) : <EOL> views . AbstractModelView . _infer_field_type ( <EOL> model_class = Item , field_name = "<STR_LIT>" <EOL> ) <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemIn , ItemOut <EOL> class TestCreateModelView ( TestCase ) : <EOL> def test_register_route_with_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> create_item = views . CreateModelView ( <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . create_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> </s>
<s> from django . urls import path <EOL> from tests . test_api import api <EOL> urlpatterns = [ <EOL> path ( "<STR_LIT>" , api . urls ) , <EOL> ] <EOL> </s>
<s> from django . contrib . auth . models import Group , User <EOL> from django . test import TestCase <EOL> from tests . test_app . models import Collection , Item <EOL> class BaseTestCase ( TestCase ) : <EOL> user_1 : User <EOL> user_2 : User <EOL> collection_1 : Collection <EOL> collection_2 : Collection <EOL> item_1 : Item <EOL> item_2 : Item <EOL> @ classmethod <EOL> def setUpTestData ( cls ) : <EOL> super ( ) . setUpTestData ( ) <EOL> cls . user_1 = User . objects . create ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" , email = "<STR_LIT>" <EOL> ) <EOL> cls . user_2 = User . objects . create ( <EOL> username = "<STR_LIT>" , password = "<STR_LIT>" , email = "<STR_LIT>" <EOL> ) <EOL> cls . collection_1 = Collection . objects . create ( <EOL> name = "<STR_LIT>" , created_by = cls . user_1 <EOL> ) <EOL> cls . collection_2 = Collection . objects . create ( <EOL> name = "<STR_LIT>" , created_by = cls . user_2 <EOL> ) <EOL> cls . item_1 = Item . objects . create ( name = "<STR_LIT>" , collection = cls . collection_1 ) <EOL> cls . item_2 = Item . objects . create ( name = "<STR_LIT>" , collection = cls . collection_2 ) <EOL> cls . group_1 = Group . objects . create ( name = "<STR_LIT>" ) <EOL> cls . group_2 = Group . objects . create ( name = "<STR_LIT>" ) <EOL> </s>
<s> from typing import List , Optional <EOL> from uuid import UUID <EOL> from django . db . models import Q , QuerySet <EOL> from ninja import FilterSchema , Schema <EOL> class Identifiable ( Schema ) : <EOL> id : UUID <EOL> class Representable ( Schema ) : <EOL> name : str <EOL> description : Optional [ str ] = None <EOL> class OrderByFilterSchema ( FilterSchema ) : <EOL> order_by : Optional [ List [ str ] ] = None <EOL> def filter_order_by ( self , value ) -> Q : <EOL> return Q ( ) <EOL> def filter ( self , queryset : QuerySet ) -> QuerySet : <EOL> queryset = super ( ) . filter ( queryset ) <EOL> if self . order_by : <EOL> queryset = queryset . order_by ( * self . order_by ) <EOL> return queryset <EOL> class CollectionFilter ( OrderByFilterSchema ) : <EOL> name : Optional [ str ] = None <EOL> class CollectionIn ( Representable ) : <EOL> pass <EOL> class CollectionOut ( Identifiable , Representable ) : <EOL> pass <EOL> class ItemIn ( Representable ) : <EOL> pass <EOL> class ItemOut ( Identifiable , Representable ) : <EOL> collection_id : UUID <EOL> class TagOut ( Identifiable , Representable ) : <EOL> pass <EOL> class UserRequestBody ( Schema ) : <EOL> username : str <EOL> email : str <EOL> password : str <EOL> groups : Optional [ List [ int ] ] = None <EOL> class UserResponseBody ( Schema ) : <EOL> id : int <EOL> username : str <EOL> email : str <EOL> class UserQueryParameters ( Schema ) : <EOL> username__contains : Optional [ str ] = None <EOL> </s>
<s> from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class PathParameters : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> not_found : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . not_found : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( not_found ) if not_found is not None else None <EOL> ) <EOL> </s>
<s> from . headers import Headers <EOL> from . path_parameters import PathParameters <EOL> from . payloads import Payloads <EOL> from . query_parameters import QueryParameters <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters , Payloads <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import UpdateModelView <EOL> class UpdateModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : UpdateModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> payloads : ArgOrCallable [ Payloads , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = UpdateModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> payloads = payloads , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) -> None : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , path_parameters = path_parameters <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , response : django . http . HttpResponse , path_parameters : dict <EOL> ) -> dict : <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> instance = self . model_view . get_model ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) -> None : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_payloads_bad_request ( self ) : <EOL> self . view_test_manager . test_view_payloads_bad_request ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_payloads_conflict ( self ) : <EOL> self . view_test_manager . test_view_payloads_conflict ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_update_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> from . model_viewset_test_case import ModelViewSetTestCase <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> import uuid <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> from ninja_crud . testing . views import ( <EOL> DeleteModelViewTest , <EOL> ListModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from tests . test_app . tests . base_test_case import BaseTestCase <EOL> from tests . test_app . views . item_views import ItemViewSet <EOL> class TestItemViewSet ( ModelViewSetTestCase , BaseTestCase ) : <EOL> model_viewset_class = ItemViewSet <EOL> base_path = "<STR_LIT>" <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( ok = { "<STR_LIT>" : self . item_1 . id } , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } ) <EOL> def get_headers_ok ( self ) : <EOL> return Headers ( <EOL> ok = { "<STR_LIT>" : f"<STR_LIT>" } , unauthorized = { } <EOL> ) <EOL> def get_headers_ok_forbidden ( self ) : <EOL> return Headers ( <EOL> ok = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> unauthorized = { } , <EOL> forbidden = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> ) <EOL> test_list_items = ListModelViewTest ( <EOL> headers = get_headers_ok , <EOL> query_parameters = lambda self : QueryParameters ( <EOL> ok = [ { } , { "<STR_LIT>" : [ "<STR_LIT>" ] , "<STR_LIT>" : <NUM_LIT> } ] <EOL> ) , <EOL> ) <EOL> test_read_item = ReadModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> ) <EOL> test_update_item = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> payloads = Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) , <EOL> ) <EOL> test_delete_item = DeleteModelViewTest ( <EOL> path_parameters = get_path_parameters , headers = get_headers_ok_forbidden <EOL> ) <EOL> test_list_tags = ListModelViewTest ( <EOL> path_parameters = lambda self : PathParameters ( ok = { "<STR_LIT>" : self . item_1 . id } ) , <EOL> headers = get_headers_ok , <EOL> ) <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> class TestDeleteModelView ( TestCase ) : <EOL> def test_register_route_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> delete_item = views . DeleteModelView ( router_kwargs = { "<STR_LIT>" : True } ) <EOL> ItemViewSet . delete_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> </s>
<s> from . model_viewset import ModelViewSet <EOL> __all__ = [ "<STR_LIT>" ] <EOL> </s>
<s> from . import views , viewsets <EOL> from . core import components <EOL> __all__ = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> </s>
<s> from http import HTTPStatus <EOL> from django . core . exceptions import ( <EOL> FieldError , <EOL> ObjectDoesNotExist , <EOL> PermissionDenied , <EOL> ValidationError , <EOL> ) <EOL> from ninja import NinjaAPI <EOL> from ninja . errors import ValidationError as NinjaValidationError <EOL> from examples . views . department_views import router as department_router <EOL> from examples . views . employee_views import router as employee_router <EOL> from tests . test_app . views . collection_views import router as collection_router <EOL> from tests . test_app . views . item_views import router as item_router <EOL> from tests . test_app . views . user_views import router as user_router <EOL> from tests . test_authentication import TokenBearer <EOL> api = NinjaAPI ( urls_namespace = "<STR_LIT>" ) <EOL> api . add_router ( <EOL> "<STR_LIT>" , collection_router , auth = TokenBearer ( ) , tags = [ "<STR_LIT>" ] <EOL> ) <EOL> api . add_router ( "<STR_LIT>" , item_router , auth = TokenBearer ( ) , tags = [ "<STR_LIT>" ] ) <EOL> api . add_router ( "<STR_LIT>" , user_router , tags = [ "<STR_LIT>" ] ) <EOL> api . add_router ( "<STR_LIT>" , department_router , auth = None , tags = [ "<STR_LIT>" ] ) <EOL> api . add_router ( "<STR_LIT>" , employee_router , auth = None , tags = [ "<STR_LIT>" ] ) <EOL> @ api . exception_handler ( ObjectDoesNotExist ) <EOL> def handle_object_does_not_exist ( request , exc ) : <EOL> return api . create_response ( <EOL> request , <EOL> { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : str ( exc ) } , <EOL> status = HTTPStatus . NOT_FOUND , <EOL> ) <EOL> @ api . exception_handler ( PermissionDenied ) <EOL> def handle_permission_error ( request , exc : PermissionDenied ) : <EOL> return api . create_response ( <EOL> request , <EOL> { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> status = HTTPStatus . FORBIDDEN , <EOL> ) <EOL> @ api . exception_handler ( NinjaValidationError ) <EOL> def handle_ninja_validation_error ( request , exc : NinjaValidationError ) : <EOL> mapped_msg = { error [ "<STR_LIT>" ] [ - <NUM_LIT> ] : error [ "<STR_LIT>" ] for error in exc . errors } <EOL> return api . create_response ( <EOL> request , <EOL> data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : mapped_msg } , <EOL> status = HTTPStatus . BAD_REQUEST , <EOL> ) <EOL> @ api . exception_handler ( ValidationError ) <EOL> def handle_validation_error ( request , exc : ValidationError ) : <EOL> status = HTTPStatus . BAD_REQUEST <EOL> for _ , errors in exc . error_dict . items ( ) : <EOL> for error in errors : <EOL> if error . code in [ "<STR_LIT>" , "<STR_LIT>" ] : <EOL> status = HTTPStatus . CONFLICT <EOL> return api . create_response ( <EOL> request , <EOL> data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : exc . message_dict } , <EOL> status = status , <EOL> ) <EOL> @ api . exception_handler ( FieldError ) <EOL> def handle_field_error ( request , exc : FieldError ) : <EOL> return api . create_response ( <EOL> request , <EOL> data = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : str ( exc ) } , <EOL> status = HTTPStatus . BAD_REQUEST , <EOL> ) <EOL> </s>
<s> import uuid <EOL> from django . conf import settings <EOL> from django . db import models <EOL> class Collection ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( null = True , blank = True ) <EOL> created_by = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) <EOL> created_at = models . DateTimeField ( auto_now_add = True ) <EOL> updated_at = models . DateTimeField ( auto_now = True ) <EOL> class Item ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( null = True , blank = True ) <EOL> collection = models . ForeignKey ( Collection , on_delete = models . CASCADE ) <EOL> class Meta : <EOL> constraints = [ <EOL> models . UniqueConstraint ( <EOL> fields = [ "<STR_LIT>" , "<STR_LIT>" ] , <EOL> name = "<STR_LIT>" , <EOL> ) , <EOL> ] <EOL> class Tag ( models . Model ) : <EOL> id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) <EOL> name = models . CharField ( max_length = <NUM_LIT> , unique = True ) <EOL> description = models . TextField ( null = True , blank = True ) <EOL> items = models . ManyToManyField ( Item , related_name = "<STR_LIT>" ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import QuerySet <EOL> from django . http import HttpRequest <EOL> from ninja import FilterSchema , Schema <EOL> from ninja . pagination import LimitOffsetPagination , PaginationBase , paginate <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class ListModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Type [ Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ List [ Schema ] ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> get_queryset : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] ] , QuerySet ] <EOL> ] = None , <EOL> filter_queryset : Optional [ <EOL> Callable [ [ QuerySet , Optional [ Schema ] ] , QuerySet ] <EOL> ] = None , <EOL> list_models : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , QuerySet ] <EOL> ] = None , <EOL> pagination_class : Optional [ Type [ PaginationBase ] ] = LimitOffsetPagination , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . GET , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = None , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . OK , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . get_queryset = get_queryset or self . _default_get_queryset <EOL> self . filter_queryset = filter_queryset or self . _default_filter_queryset <EOL> self . list_models = list_models or self . _default_list_models <EOL> self . pagination_class = pagination_class <EOL> if self . pagination_class : <EOL> self . decorators . append ( paginate ( self . pagination_class ) ) <EOL> def _default_get_queryset ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> QuerySet : <EOL> return self . model_viewset_class . model . objects . get_queryset ( ) <EOL> @ staticmethod <EOL> def _default_filter_queryset ( <EOL> queryset : QuerySet , <EOL> query_parameters : Optional [ Schema ] , <EOL> ) -> QuerySet : <EOL> if query_parameters : <EOL> if isinstance ( query_parameters , FilterSchema ) : <EOL> queryset = query_parameters . filter ( queryset ) <EOL> else : <EOL> queryset = queryset . filter ( ** query_parameters . dict ( exclude_unset = True ) ) <EOL> return queryset <EOL> def _default_list_models ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> ) -> QuerySet : <EOL> queryset = self . get_queryset ( request , path_parameters ) <EOL> return self . filter_queryset ( queryset , query_parameters ) <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> QuerySet : <EOL> return self . list_models ( request , path_parameters , query_parameters ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . response_body is None : <EOL> default_response_body = self . model_viewset_class . default_response_body <EOL> self . response_body = List [ default_response_body ] <EOL> </s>
<s> from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class Payloads : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> bad_request : Union [ dict , List [ dict ] , None ] = None , <EOL> conflict : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . bad_request : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( bad_request ) if bad_request is not None else None <EOL> ) <EOL> self . conflict : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( conflict ) if conflict is not None else None <EOL> ) <EOL> </s>
<s> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemIn , ItemOut <EOL> class TestUpdateModelView ( TestCase ) : <EOL> def test_register_route_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> update_item = views . UpdateModelView ( <EOL> request_body = ItemIn , <EOL> response_body = ItemOut , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . update_item . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> </s>
<s> from . abstract_model_view_test import AbstractModelViewTest <EOL> from . create_model_view_test import CreateModelViewTest <EOL> from . delete_model_view_test import DeleteModelViewTest <EOL> from . list_model_view_test import ListModelViewTest <EOL> from . read_model_view_test import ReadModelViewTest <EOL> from . update_model_view_test import UpdateModelViewTest <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> from typing import List <EOL> from django . contrib . auth . models import User <EOL> from ninja import Router <EOL> from ninja_crud import views <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> from tests . test_app . schemas import ( <EOL> UserQueryParameters , <EOL> UserRequestBody , <EOL> UserResponseBody , <EOL> ) <EOL> router = Router ( ) <EOL> class UserViewSet ( ModelViewSet ) : <EOL> model = User <EOL> list_users = views . ListModelView ( <EOL> query_parameters = UserQueryParameters , <EOL> response_body = List [ UserResponseBody ] , <EOL> pagination_class = None , <EOL> ) <EOL> create_user = views . CreateModelView ( <EOL> request_body = UserRequestBody , response_body = UserResponseBody <EOL> ) <EOL> read_user = views . ReadModelView ( response_body = UserResponseBody ) <EOL> update_user = views . UpdateModelView ( <EOL> request_body = UserRequestBody , response_body = UserResponseBody <EOL> ) <EOL> delete_user = views . DeleteModelView ( ) <EOL> UserViewSet . register_routes ( router ) <EOL> </s>
<s> import abc <EOL> import functools <EOL> import http <EOL> import logging <EOL> from typing import Any , Callable , Dict , List , Optional , Tuple , Type , Union <EOL> import django . http <EOL> import ninja <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> logger = logging . getLogger ( __name__ ) <EOL> class AbstractView ( abc . ABC ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod , <EOL> path : str , <EOL> path_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ ninja . Schema ] ] = None , <EOL> request_body : Optional [ Type [ ninja . Schema ] ] = None , <EOL> response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , <EOL> response_status : http . HTTPStatus = http . HTTPStatus . OK , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> ) -> None : <EOL> self . method = method <EOL> self . path = path <EOL> self . path_parameters = path_parameters <EOL> self . query_parameters = query_parameters <EOL> self . request_body = request_body <EOL> self . response_body = response_body <EOL> self . response_status = response_status <EOL> self . decorators = decorators or [ ] <EOL> self . router_kwargs = router_kwargs or { } <EOL> @ abc . abstractmethod <EOL> def handle_request ( <EOL> self , <EOL> request : django . http . HttpRequest , <EOL> path_parameters : Optional [ ninja . Schema ] , <EOL> query_parameters : Optional [ ninja . Schema ] , <EOL> request_body : Optional [ ninja . Schema ] , <EOL> ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : <EOL> pass <EOL> def create_view_handler ( self ) -> Callable : <EOL> path_parameters_schema_class = self . path_parameters <EOL> query_parameters_schema_class = self . query_parameters <EOL> request_body_schema_class = self . request_body <EOL> def view_handler ( <EOL> request : django . http . HttpRequest , <EOL> path_parameters : path_parameters_schema_class = ninja . Path ( <EOL> default = None , include_in_schema = False <EOL> ) , <EOL> query_parameters : query_parameters_schema_class = ninja . Query ( <EOL> default = None , include_in_schema = False <EOL> ) , <EOL> request_body : request_body_schema_class = ninja . Body ( <EOL> default = None , include_in_schema = False <EOL> ) , <EOL> ) : <EOL> return self . handle_request ( <EOL> request = request , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = request_body , <EOL> ) <EOL> return view_handler <EOL> def register_route ( self , router : ninja . Router , route_name : str ) -> None : <EOL> view = self . create_view_handler ( ) <EOL> view . __name__ = route_name <EOL> self . _configure_view_routing ( router = router ) ( view ) <EOL> def _configure_view_routing ( self , router : ninja . Router ) -> Callable : <EOL> def route_decorator ( view : Callable ) : <EOL> for decorator in reversed ( self . decorators ) : <EOL> view = decorator ( view ) <EOL> @ router . api_operation ( ** self . _get_router_kwargs ( view . __name__ ) ) <EOL> @ functools . wraps ( view ) <EOL> def wrapped_view ( request : django . http . HttpRequest , * args , ** kwargs ) : <EOL> return view ( request , * args , ** kwargs ) <EOL> return wrapped_view <EOL> return route_decorator <EOL> def _get_router_kwargs ( self , operation_id : str ) -> Dict [ str , Any ] : <EOL> return { <EOL> "<STR_LIT>" : [ self . method . value ] , <EOL> "<STR_LIT>" : self . path , <EOL> "<STR_LIT>" : { self . response_status . value : self . response_body } , <EOL> "<STR_LIT>" : operation_id , <EOL> ** self . _clean_router_kwargs ( self . router_kwargs ) , <EOL> } <EOL> @ staticmethod <EOL> def _clean_router_kwargs ( router_kwargs : dict ) -> dict : <EOL> locked_keys = [ "<STR_LIT>" , "<STR_LIT>" , "<STR_LIT>" ] <EOL> cleaned_kwargs = router_kwargs . copy ( ) <EOL> for locked_key in locked_keys : <EOL> if locked_key in cleaned_kwargs : <EOL> logger . warning ( f"<STR_LIT>" ) <EOL> cleaned_kwargs . pop ( locked_key ) <EOL> return cleaned_kwargs <EOL> </s>
<s> import uuid <EOL> from examples . models import Department , Employee <EOL> from examples . views . employee_views import EmployeeViewSet <EOL> from ninja_crud . testing . core . components import PathParameters , Payloads <EOL> from ninja_crud . testing . views import ( <EOL> DeleteModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> class TestEmployeeViewSet ( ModelViewSetTestCase ) : <EOL> model_viewset_class = EmployeeViewSet <EOL> base_path = "<STR_LIT>" <EOL> department_1 : Department <EOL> department_2 : Department <EOL> employee : Employee <EOL> @ classmethod <EOL> def setUpTestData ( cls ) : <EOL> cls . department_1 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . department_2 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . employee = Employee . objects . create ( <EOL> first_name = "<STR_LIT>" , last_name = "<STR_LIT>" , department = cls . department_1 <EOL> ) <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( <EOL> ok = { "<STR_LIT>" : self . employee . id } , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } <EOL> ) <EOL> employee_payloads = Payloads ( <EOL> ok = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> bad_request = { "<STR_LIT>" : <NUM_LIT> } , <EOL> ) <EOL> test_read_employee = ReadModelViewTest ( path_parameters = get_path_parameters ) <EOL> test_update_employee = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , payloads = employee_payloads <EOL> ) <EOL> test_delete_employee = DeleteModelViewTest ( path_parameters = get_path_parameters ) <EOL> </s>
<s> import uuid <EOL> from examples . models import Department , Employee <EOL> from examples . views . department_views import DepartmentViewSet <EOL> from ninja_crud import testing <EOL> class TestDepartmentViewSet ( testing . viewsets . ModelViewSetTestCase ) : <EOL> model_viewset_class = DepartmentViewSet <EOL> base_path = "<STR_LIT>" <EOL> department_1 : Department <EOL> department_2 : Department <EOL> employee : Employee <EOL> @ classmethod <EOL> def setUpTestData ( cls ) : <EOL> cls . department_1 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . department_2 = Department . objects . create ( title = "<STR_LIT>" ) <EOL> cls . employee = Employee . objects . create ( <EOL> first_name = "<STR_LIT>" , last_name = "<STR_LIT>" , department = cls . department_1 <EOL> ) <EOL> @ property <EOL> def path_parameters ( self ) : <EOL> return testing . components . PathParameters ( <EOL> ok = { "<STR_LIT>" : self . department_1 . id } , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } <EOL> ) <EOL> department_payloads = testing . components . Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> bad_request = { "<STR_LIT>" : <NUM_LIT> } , <EOL> conflict = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) <EOL> test_list_departments = testing . views . ListModelViewTest ( ) <EOL> test_create_department = testing . views . CreateModelViewTest ( <EOL> payloads = department_payloads <EOL> ) <EOL> test_read_department = testing . views . ReadModelViewTest ( path_parameters ) <EOL> test_update_department = testing . views . UpdateModelViewTest ( <EOL> path_parameters , payloads = department_payloads <EOL> ) <EOL> test_delete_department = testing . views . DeleteModelViewTest ( path_parameters ) <EOL> @ property <EOL> def employees_path_parameters ( self ) : <EOL> return testing . components . PathParameters ( ok = { "<STR_LIT>" : self . department_1 . id } ) <EOL> employee_payloads = testing . components . Payloads ( <EOL> ok = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> bad_request = { "<STR_LIT>" : <NUM_LIT> } , <EOL> ) <EOL> test_list_employees = testing . views . ListModelViewTest ( <EOL> path_parameters = employees_path_parameters <EOL> ) <EOL> test_create_employee = testing . views . CreateModelViewTest ( <EOL> path_parameters = employees_path_parameters , payloads = employee_payloads <EOL> ) <EOL> </s>
<s> from ninja import Router <EOL> from examples . models import Employee <EOL> from examples . schemas import EmployeeIn , EmployeeOut <EOL> from ninja_crud import views , viewsets <EOL> router = Router ( ) <EOL> class EmployeeViewSet ( viewsets . ModelViewSet ) : <EOL> model = Employee <EOL> read_employee = views . ReadModelView ( response_body = EmployeeOut ) <EOL> update_employee = views . UpdateModelView ( <EOL> request_body = EmployeeIn , response_body = EmployeeOut <EOL> ) <EOL> delete_employee = views . DeleteModelView ( ) <EOL> EmployeeViewSet . register_routes ( router ) <EOL> </s>
<s> import http <EOL> import json <EOL> import logging <EOL> from typing import Optional , get_args <EOL> import django . db . models <EOL> import django . http <EOL> import django . test <EOL> import ninja . pagination <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters , QueryParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import ListModelView <EOL> logger = logging . getLogger ( __name__ ) <EOL> class ListModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : ListModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = ListModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> content = json . loads ( response . content ) <EOL> queryset = self . _get_queryset ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> ) <EOL> if self . model_view . pagination_class is None : <EOL> self . model_viewset_test_case . assertIsInstance ( content , list ) <EOL> self . model_viewset_test_case . assertEqual ( len ( content ) , queryset . count ( ) ) <EOL> self . _validate_response_items ( items = content , queryset = queryset ) <EOL> elif self . model_view . pagination_class == ninja . pagination . LimitOffsetPagination : <EOL> self . model_viewset_test_case . assertIsInstance ( content , dict ) <EOL> self . model_viewset_test_case . assertIn ( "<STR_LIT>" , content ) <EOL> self . model_viewset_test_case . assertIsInstance ( content [ "<STR_LIT>" ] , int ) <EOL> self . model_viewset_test_case . assertEqual ( <EOL> content [ "<STR_LIT>" ] , <EOL> queryset . count ( ) , <EOL> ) <EOL> limit = query_parameters . get ( "<STR_LIT>" , <NUM_LIT> ) <EOL> offset = query_parameters . get ( "<STR_LIT>" , <NUM_LIT> ) <EOL> self . model_viewset_test_case . assertIn ( "<STR_LIT>" , content ) <EOL> self . model_viewset_test_case . assertIsInstance ( content [ "<STR_LIT>" ] , list ) <EOL> self . model_viewset_test_case . assertEqual ( <EOL> len ( content [ "<STR_LIT>" ] ) , <EOL> queryset [ offset : offset + limit ] . count ( ) , <EOL> ) <EOL> self . _validate_response_items ( items = content [ "<STR_LIT>" ] , queryset = queryset ) <EOL> else : <EOL> logger . warning ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> def _get_queryset ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> ) -> django . db . models . QuerySet : <EOL> path_parameters_schema = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> query_parameters_schema = ( <EOL> self . model_view . query_parameters ( ** query_parameters ) <EOL> if self . model_view . query_parameters <EOL> else None <EOL> ) <EOL> return self . model_view . list_models ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> query_parameters_schema , <EOL> ) <EOL> def _validate_response_items ( <EOL> self , items : list , queryset : django . db . models . QuerySet <EOL> ) : <EOL> for item in items : <EOL> self . model_viewset_test_case . assertIsInstance ( item , dict ) <EOL> model = queryset . get ( id = item [ "<STR_LIT>" ] ) <EOL> response_body_class = get_args ( self . model_view . response_body ) [ <NUM_LIT> ] <EOL> response_body = response_body_class . from_orm ( model ) <EOL> self . model_viewset_test_case . assertDictEqual ( <EOL> item , json . loads ( response_body . json ( ) ) <EOL> ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . OK , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_query_parameters_bad_request ( self ) : <EOL> self . view_test_manager . test_view_query_parameters_bad_request ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_list_models_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> import http <EOL> import json <EOL> from typing import Optional , Type , cast <EOL> import django . http <EOL> import django . test <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters , Payloads <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import CreateModelView <EOL> class CreateModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : CreateModelView <EOL> def __init__ ( <EOL> self , <EOL> payloads : ArgOrCallable [ Payloads , TestCaseType ] , <EOL> path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = CreateModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> payloads = payloads , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> actual_output = json . loads ( response . content ) <EOL> expected_output = self . _get_expected_output ( <EOL> response = response , <EOL> path_parameters = path_parameters , <EOL> ) <EOL> self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) <EOL> def _get_expected_output ( <EOL> self , response : django . http . HttpResponse , path_parameters : dict <EOL> ) -> dict : <EOL> content = json . loads ( response . content ) <EOL> path_parameters_schema = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> model_class = self . model_view . init_model ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> ) . __class__ <EOL> model = model_class . objects . get ( id = content [ "<STR_LIT>" ] ) <EOL> schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( model ) <EOL> return json . loads ( schema . json ( ) ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . CREATED , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_payloads_bad_request ( self ) : <EOL> self . view_test_manager . test_view_payloads_bad_request ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_payloads_conflict ( self ) : <EOL> self . view_test_manager . test_view_payloads_conflict ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_create_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> from typing import List <EOL> from unittest . mock import MagicMock <EOL> from django . test import TestCase <EOL> from ninja_crud import views , viewsets <EOL> from tests . test_app . models import Item <EOL> from tests . test_app . schemas import ItemOut <EOL> class TestListModelView ( TestCase ) : <EOL> def test_register_route_with_router_kwargs ( self ) : <EOL> router_mock = MagicMock ( ) <EOL> class ItemViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> list_items = views . ListModelView ( <EOL> response_body = List [ ItemOut ] , <EOL> router_kwargs = { "<STR_LIT>" : True } , <EOL> ) <EOL> ItemViewSet . list_items . register_route ( router_mock , "<STR_LIT>" ) <EOL> router_mock . api_operation . assert_called_once ( ) <EOL> self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ "<STR_LIT>" ] ) <EOL> def test_bind_to_viewset_without_response_body_error ( self ) : <EOL> model_view = views . ListModelView ( ) <EOL> class ItemModelViewSet ( viewsets . ModelViewSet ) : <EOL> model = Item <EOL> with self . assertRaises ( AttributeError ) : <EOL> model_view . model_viewset_class = ItemModelViewSet <EOL> </s>
<s> import unittest <EOL> class TestModelViewSet ( unittest . TestCase ) : <EOL> pass <EOL> </s>
<s> from . http_method import HTTPMethod <EOL> __all__ = [ "<STR_LIT>" ] <EOL> </s>
<s> from typing import List <EOL> from ninja import Router <EOL> from examples . models import Department , Employee <EOL> from examples . schemas import DepartmentIn , DepartmentOut , EmployeeIn , EmployeeOut <EOL> from ninja_crud import views , viewsets <EOL> router = Router ( ) <EOL> class DepartmentViewSet ( viewsets . ModelViewSet ) : <EOL> model = Department <EOL> default_request_body = DepartmentIn <EOL> default_response_body = DepartmentOut <EOL> list_departments = views . ListModelView ( response_body = List [ DepartmentOut ] ) <EOL> create_department = views . CreateModelView ( ) <EOL> read_department = views . ReadModelView ( ) <EOL> update_department = views . UpdateModelView ( ) <EOL> delete_department = views . DeleteModelView ( ) <EOL> list_employees = views . ListModelView ( <EOL> path = "<STR_LIT>" , <EOL> get_queryset = lambda request , path_parameters : Employee . objects . filter ( <EOL> department_id = getattr ( path_parameters , "<STR_LIT>" , None ) <EOL> ) , <EOL> response_body = List [ EmployeeOut ] , <EOL> ) <EOL> create_employee = views . CreateModelView ( <EOL> path = "<STR_LIT>" , <EOL> request_body = EmployeeIn , <EOL> response_body = EmployeeOut , <EOL> init_model = lambda request , path_parameters : Employee ( <EOL> department_id = getattr ( path_parameters , "<STR_LIT>" , None ) <EOL> ) , <EOL> ) <EOL> DepartmentViewSet . register_routes ( router ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional <EOL> from django . db . models import Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class DeleteModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Schema ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> get_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , <EOL> pre_delete : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> post_delete : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> delete_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , None ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . DELETE , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = None , <EOL> request_body = None , <EOL> response_body = None , <EOL> response_status = http . HTTPStatus . NO_CONTENT , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . get_model = get_model or self . _default_get_model <EOL> self . pre_delete = pre_delete or self . _default_pre_delete <EOL> self . post_delete = post_delete or self . _default_post_delete <EOL> self . delete_model = delete_model or self . _default_delete_model <EOL> def _default_get_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> Model : <EOL> return self . model_viewset_class . model . objects . get ( <EOL> ** ( path_parameters . dict ( ) if path_parameters else { } ) <EOL> ) <EOL> @ staticmethod <EOL> def _default_pre_delete ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> @ staticmethod <EOL> def _default_post_delete ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> def _default_delete_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> None : <EOL> instance = self . get_model ( request , path_parameters ) <EOL> self . pre_delete ( request , instance ) <EOL> instance . delete ( ) <EOL> self . post_delete ( request , instance ) <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> None : <EOL> self . delete_model ( request , path_parameters ) <EOL> </s>
<s> import random <EOL> import uuid <EOL> from ninja_crud . testing . core . components import ( <EOL> Headers , <EOL> PathParameters , <EOL> Payloads , <EOL> QueryParameters , <EOL> ) <EOL> from ninja_crud . testing . views import ( <EOL> CreateModelViewTest , <EOL> DeleteModelViewTest , <EOL> ListModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from tests . test_app . tests . base_test_case import BaseTestCase <EOL> from tests . test_app . views . collection_views import CollectionViewSet <EOL> class TestCollectionViewSet ( ModelViewSetTestCase , BaseTestCase ) : <EOL> model_viewset_class = CollectionViewSet <EOL> base_path = "<STR_LIT>" <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( <EOL> ok = [ { "<STR_LIT>" : self . collection_1 . id } ] , not_found = { "<STR_LIT>" : uuid . uuid4 ( ) } <EOL> ) <EOL> def get_headers_ok ( self ) : <EOL> return Headers ( <EOL> ok = [ { "<STR_LIT>" : f"<STR_LIT>" } ] , unauthorized = { } <EOL> ) <EOL> def get_headers_ok_forbidden ( self ) : <EOL> return Headers ( <EOL> ok = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> unauthorized = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> forbidden = { "<STR_LIT>" : f"<STR_LIT>" } , <EOL> ) <EOL> collection_payloads = Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> bad_request = { "<STR_LIT>" : [ ] } , <EOL> conflict = { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) <EOL> test_list_collections = ListModelViewTest ( <EOL> headers = get_headers_ok , <EOL> query_parameters = QueryParameters ( <EOL> ok = [ { } , { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : [ "<STR_LIT>" ] , "<STR_LIT>" : <NUM_LIT> } ] , <EOL> bad_request = { "<STR_LIT>" : [ "<STR_LIT>" ] } , <EOL> ) , <EOL> ) <EOL> test_create_collection = CreateModelViewTest ( <EOL> headers = get_headers_ok , <EOL> payloads = collection_payloads , <EOL> ) <EOL> test_read_collection = ReadModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok , <EOL> ) <EOL> test_update_collection = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> payloads = collection_payloads , <EOL> ) <EOL> test_delete_collection = DeleteModelViewTest ( <EOL> path_parameters = get_path_parameters , headers = get_headers_ok_forbidden <EOL> ) <EOL> test_list_collection_items = ListModelViewTest ( <EOL> path_parameters = get_path_parameters , headers = get_headers_ok_forbidden <EOL> ) <EOL> test_create_collection_item = CreateModelViewTest ( <EOL> path_parameters = get_path_parameters , <EOL> headers = get_headers_ok_forbidden , <EOL> payloads = Payloads ( <EOL> ok = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) , <EOL> ) <EOL> </s>
<s> from typing import List , Optional , Union <EOL> from ninja_crud . testing . core . components import utils <EOL> class QueryParameters : <EOL> def __init__ ( <EOL> self , <EOL> ok : Union [ dict , List [ dict ] ] , <EOL> bad_request : Union [ dict , List [ dict ] , None ] = None , <EOL> ) -> None : <EOL> self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) <EOL> self . bad_request : Optional [ List [ dict ] ] = ( <EOL> utils . ensure_list_of_dicts ( bad_request ) if bad_request is not None else None <EOL> ) <EOL> </s>
<s> import http <EOL> from typing import Optional <EOL> import django . http <EOL> import django . test <EOL> from django . core . exceptions import ObjectDoesNotExist <EOL> from ninja import Schema <EOL> from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager <EOL> from ninja_crud . testing . core . components import Headers , PathParameters <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import DeleteModelView <EOL> class DeleteModelViewTest ( AbstractModelViewTest ) : <EOL> model_view : DeleteModelView <EOL> def __init__ ( <EOL> self , <EOL> path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , <EOL> headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( model_view_class = DeleteModelView ) <EOL> self . view_test_manager = ViewTestManager ( <EOL> simulate_request = self . simulate_request , <EOL> path_parameters = path_parameters , <EOL> headers = headers , <EOL> ) <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> self . model_viewset_test_case . assertEqual ( response . content , b"<STR_LIT>" ) <EOL> path_parameters_schema : Optional [ Schema ] = ( <EOL> self . model_view . path_parameters ( ** path_parameters ) <EOL> if self . model_view . path_parameters <EOL> else None <EOL> ) <EOL> with self . model_viewset_test_case . assertRaises ( ObjectDoesNotExist ) : <EOL> self . model_view . get_model ( <EOL> getattr ( response , "<STR_LIT>" , None ) , <EOL> path_parameters_schema , <EOL> ) <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_ok ( self ) : <EOL> self . view_test_manager . test_view_ok ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_successful_request , <EOL> status = http . HTTPStatus . NO_CONTENT , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_headers_unauthorized ( self ) : <EOL> self . view_test_manager . test_view_headers_unauthorized ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_headers_forbidden ( self ) : <EOL> self . view_test_manager . test_view_headers_forbidden ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> @ django . test . tag ( "<STR_LIT>" ) <EOL> def test_delete_model_path_parameters_not_found ( self ) : <EOL> self . view_test_manager . test_view_path_parameters_not_found ( <EOL> test_case = self . model_viewset_test_case , <EOL> on_completion = self . on_failed_request , <EOL> ) <EOL> </s>
<s> import inspect <EOL> import logging <EOL> from typing import List , Type <EOL> import django . test <EOL> from ninja_crud . testing . views import AbstractModelViewTest <EOL> from ninja_crud . views import AbstractModelView <EOL> from ninja_crud . viewsets import ModelViewSet <EOL> logger = logging . getLogger ( __name__ ) <EOL> class ModelViewSetTestCase ( django . test . TestCase ) : <EOL> model_viewset_class : Type [ ModelViewSet ] <EOL> base_path : str <EOL> def __init_subclass__ ( cls , ** kwargs ) : <EOL> super ( ) . __init_subclass__ ( ** kwargs ) <EOL> if hasattr ( cls , "<STR_LIT>" ) : <EOL> cls . _bind_test_model_views ( ) <EOL> cls . _register_test_methods ( ) <EOL> @ classmethod <EOL> def _bind_test_model_views ( cls ) : <EOL> associated_model_views = [ ] <EOL> cls_instance = cls ( ) <EOL> for attr_name , attr_value in inspect . getmembers ( cls ) : <EOL> if attr_name . startswith ( "<STR_LIT>" ) and isinstance ( <EOL> attr_value , AbstractModelViewTest <EOL> ) : <EOL> test_model_view_name , test_model_view = attr_name , attr_value <EOL> test_model_view . bind_to_model_viewset_test_case ( <EOL> model_viewset_test_case = cls_instance <EOL> ) <EOL> associated_model_view = cls . _get_associated_model_view ( <EOL> test_attr_name = test_model_view_name , <EOL> model_view_class = test_model_view . model_view_class , <EOL> ) <EOL> test_model_view . bind_to_model_view ( model_view = associated_model_view ) <EOL> associated_model_views . append ( associated_model_view ) <EOL> cls . _check_all_model_views_associated ( <EOL> associated_model_views = associated_model_views <EOL> ) <EOL> @ classmethod <EOL> def _register_test_methods ( cls ) : <EOL> for attr_name , attr_value in inspect . getmembers ( cls ) : <EOL> if attr_name . startswith ( "<STR_LIT>" ) and isinstance ( <EOL> attr_value , AbstractModelViewTest <EOL> ) : <EOL> for method_name , method in inspect . getmembers ( <EOL> attr_value , predicate = inspect . ismethod <EOL> ) : <EOL> if method_name . startswith ( "<STR_LIT>" ) : <EOL> new_test_method_name = f"<STR_LIT>" <EOL> setattr ( cls , new_test_method_name , method ) <EOL> @ classmethod <EOL> def _get_associated_model_view ( <EOL> cls , test_attr_name : str , model_view_class : Type [ AbstractModelView ] <EOL> ) -> AbstractModelView : <EOL> for attr_name , attr_value in inspect . getmembers ( cls . model_viewset_class ) : <EOL> if ( <EOL> isinstance ( attr_value , model_view_class ) <EOL> and test_attr_name == f"<STR_LIT>" <EOL> ) : <EOL> return attr_value <EOL> raise ValueError ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> @ classmethod <EOL> def _check_all_model_views_associated ( <EOL> cls , associated_model_views : List [ AbstractModelView ] <EOL> ) -> None : <EOL> for attr_name , attr_value in inspect . getmembers ( cls . model_viewset_class ) : <EOL> if ( <EOL> isinstance ( attr_value , AbstractModelView ) <EOL> and attr_value not in associated_model_views <EOL> ) : <EOL> logger . warning ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> </s>
<s> from typing import Any , Optional <EOL> from django . contrib . auth . models import User <EOL> from django . http import HttpRequest <EOL> from ninja . security import HttpBearer <EOL> class TokenBearer ( HttpBearer ) : <EOL> def authenticate ( self , request : HttpRequest , token : str ) -> Optional [ Any ] : <EOL> user_queryset = User . objects . filter ( id = token ) <EOL> if user_queryset . exists ( ) : <EOL> return user_queryset . get ( ) <EOL> return None <EOL> </s>
<s> import logging <EOL> import frontmatter <EOL> import yaml <EOL> READMEIO_CONFIG_PATH = "<STR_LIT>" <EOL> def load_yaml_file ( file_path : str ) : <EOL> with open ( file_path ) as yaml_file : <EOL> return yaml . load ( yaml_file , Loader = yaml . FullLoader ) <EOL> def apply_metadata_to_markdown ( markdown_file_path : str , metadata : dict ) : <EOL> try : <EOL> post = frontmatter . load ( markdown_file_path ) <EOL> post . metadata = metadata <EOL> frontmatter . dump ( post , markdown_file_path ) <EOL> except FileNotFoundError : <EOL> logging . error ( f"<STR_LIT>" ) <EOL> except Exception as e : <EOL> logging . error ( f"<STR_LIT>" ) <EOL> raise e <EOL> def main ( ) : <EOL> readmeio_config = load_yaml_file ( READMEIO_CONFIG_PATH ) <EOL> for doc in readmeio_config [ "<STR_LIT>" ] : <EOL> markdown_file_path = doc . pop ( "<STR_LIT>" ) <EOL> apply_metadata_to_markdown ( markdown_file_path = markdown_file_path , metadata = doc ) <EOL> if __name__ == "<STR_LIT>" : <EOL> logging . basicConfig ( level = logging . INFO ) <EOL> main ( ) <EOL> </s>
<s> import json <EOL> from abc import ABC , abstractmethod <EOL> from typing import TYPE_CHECKING , Type <EOL> import django . http <EOL> import django . utils . http <EOL> from ninja_crud . views import AbstractModelView <EOL> if TYPE_CHECKING : <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> class AbstractModelViewTest ( ABC ) : <EOL> model_view : AbstractModelView <EOL> model_viewset_test_case : "<STR_LIT>" <EOL> def __init__ ( self , model_view_class : Type [ AbstractModelView ] ) -> None : <EOL> self . model_view_class = model_view_class <EOL> def simulate_request ( <EOL> self , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) -> django . http . HttpResponse : <EOL> base_path = self . model_viewset_test_case . base_path . strip ( "<STR_LIT>" ) <EOL> endpoint_path = self . model_view . path . lstrip ( "<STR_LIT>" ) <EOL> path = f"<STR_LIT>" <EOL> return self . model_viewset_test_case . client_class ( ) . generic ( <EOL> method = self . model_view . method . value , <EOL> path = path . format ( ** path_parameters ) , <EOL> QUERY_STRING = django . utils . http . urlencode ( query_parameters , doseq = True ) , <EOL> data = json . dumps ( payload or None ) , <EOL> content_type = "<STR_LIT>" , <EOL> ** headers , <EOL> ) <EOL> @ abstractmethod <EOL> def on_successful_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> @ abstractmethod <EOL> def on_failed_request ( <EOL> self , <EOL> response : django . http . HttpResponse , <EOL> path_parameters : dict , <EOL> query_parameters : dict , <EOL> headers : dict , <EOL> payload : dict , <EOL> ) : <EOL> pass <EOL> def bind_to_model_viewset_test_case ( <EOL> self , model_viewset_test_case : "<STR_LIT>" <EOL> ) -> None : <EOL> self . model_viewset_test_case = model_viewset_test_case <EOL> def bind_to_model_view ( self , model_view : AbstractModelView ) -> None : <EOL> self . model_view = model_view <EOL> </s>
<s> import unittest . mock <EOL> import django . core . exceptions <EOL> import django . test <EOL> from ninja_crud import views <EOL> class TestAbstractView ( django . test . TestCase ) : <EOL> def test_docstrings ( self ) : <EOL> import http <EOL> from typing import Any , Optional , Tuple , Union <EOL> import django . http <EOL> import ninja <EOL> from ninja_crud import views <EOL> class HelloWorldSchema ( ninja . Schema ) : <EOL> message : str <EOL> class HelloWorldView ( views . AbstractView ) : <EOL> def __init__ ( self ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = views . enums . HTTPMethod . GET , <EOL> path = "<STR_LIT>" , <EOL> response_body = HelloWorldSchema , <EOL> ) <EOL> def handle_request ( <EOL> self , <EOL> request : django . http . HttpRequest , <EOL> path_parameters : Optional [ ninja . Schema ] , <EOL> query_parameters : Optional [ ninja . Schema ] , <EOL> request_body : Optional [ ninja . Schema ] , <EOL> ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : <EOL> return { "<STR_LIT>" : "<STR_LIT>" } <EOL> router = ninja . Router ( ) <EOL> view = HelloWorldView ( ) <EOL> view . register_route ( router , route_name = "<STR_LIT>" ) <EOL> self . assertEqual ( <EOL> view . handle_request ( <EOL> request = django . http . HttpRequest ( ) , <EOL> path_parameters = None , <EOL> query_parameters = None , <EOL> request_body = None , <EOL> ) , <EOL> { "<STR_LIT>" : "<STR_LIT>" } , <EOL> ) <EOL> def test_sanitize_and_merge_router_kwargs ( self ) : <EOL> router_kwargs = { "<STR_LIT>" : True , "<STR_LIT>" : "<STR_LIT>" } <EOL> sanitized_router_kwargs = views . AbstractView . _clean_router_kwargs ( router_kwargs ) <EOL> self . assertDictEqual ( sanitized_router_kwargs , router_kwargs ) <EOL> def test_sanitize_and_merge_router_kwargs_with_path ( self ) : <EOL> router_kwargs = { "<STR_LIT>" : "<STR_LIT>" } <EOL> with unittest . mock . patch ( <EOL> "<STR_LIT>" <EOL> ) as mock_logger : <EOL> sanitized_router_kwargs = views . AbstractView . _clean_router_kwargs ( <EOL> router_kwargs <EOL> ) <EOL> mock_logger . warning . assert_called_once ( ) <EOL> self . assertDictEqual ( sanitized_router_kwargs , { } ) <EOL> </s>
<s> from typing import Dict , List , Union <EOL> def ensure_list_of_dicts ( data : Union [ Dict , List [ Dict ] ] ) -> List [ Dict ] : <EOL> if isinstance ( data , dict ) : <EOL> return [ data ] <EOL> elif not isinstance ( data , list ) : <EOL> raise TypeError ( <EOL> f"<STR_LIT>" <EOL> ) <EOL> elif len ( data ) == <NUM_LIT> : <EOL> raise ValueError ( <EOL> "<STR_LIT>" <EOL> ) <EOL> return data <EOL> </s>
<s> import logging <EOL> import os <EOL> import subprocess <EOL> import yaml <EOL> GLOBAL_CONFIG_PATH = "<STR_LIT>" <EOL> PYDOC_MARKDOWN_CONFIG_PATH = "<STR_LIT>" <EOL> def load_yaml_file ( file_path : str ) : <EOL> with open ( file_path ) as yaml_file : <EOL> return yaml . load ( yaml_file , Loader = yaml . FullLoader ) <EOL> def convert_docstrings_to_markdown ( <EOL> input_path : str , output_path : str , markdown_config : dict <EOL> ) : <EOL> try : <EOL> os . makedirs ( os . path . dirname ( output_path ) , exist_ok = True ) <EOL> markdown_config [ "<STR_LIT>" ] [ "<STR_LIT>" ] = output_path <EOL> absolute_input_path = os . path . join ( os . getcwd ( ) , input_path ) <EOL> subprocess . run ( <EOL> [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> absolute_input_path , <EOL> yaml . dump ( markdown_config ) , <EOL> ] <EOL> ) <EOL> except Exception as e : <EOL> logging . error ( f"<STR_LIT>" ) <EOL> def main ( ) : <EOL> global_config = load_yaml_file ( GLOBAL_CONFIG_PATH ) <EOL> pydoc_markdown_config = load_yaml_file ( PYDOC_MARKDOWN_CONFIG_PATH ) <EOL> settings = global_config [ "<STR_LIT>" ] <EOL> for module in global_config [ "<STR_LIT>" ] : <EOL> input_path = os . path . join ( settings [ "<STR_LIT>" ] , module [ "<STR_LIT>" ] ) <EOL> output_path = os . path . join ( settings [ "<STR_LIT>" ] , module [ "<STR_LIT>" ] ) <EOL> convert_docstrings_to_markdown ( <EOL> input_path = input_path , <EOL> output_path = output_path , <EOL> markdown_config = pydoc_markdown_config , <EOL> ) <EOL> if __name__ == "<STR_LIT>" : <EOL> logging . basicConfig ( level = logging . INFO ) <EOL> main ( ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import ManyToManyField , Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class CreateModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Schema ] = None , <EOL> request_body : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ Schema ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> init_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , <EOL> pre_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> post_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> create_model : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] <EOL> ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . POST , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = None , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . CREATED , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . init_model = init_model or self . _default_init_model <EOL> self . pre_save = pre_save or self . _default_pre_save <EOL> self . post_save = post_save or self . _default_post_save <EOL> self . create_model = create_model or self . _default_create_model <EOL> def _default_init_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> Model : <EOL> return self . model_viewset_class . model ( ) <EOL> @ staticmethod <EOL> def _default_pre_save ( request : HttpRequest , instance : Model ) -> None : <EOL> instance . full_clean ( ) <EOL> @ staticmethod <EOL> def _default_post_save ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> def _default_create_model ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> instance = self . init_model ( request , path_parameters ) <EOL> m2m_fields_to_set = [ ] <EOL> if request_body : <EOL> for field , value in request_body . dict ( ) . items ( ) : <EOL> if isinstance ( instance . _meta . get_field ( field ) , ManyToManyField ) : <EOL> m2m_fields_to_set . append ( ( field , value ) ) <EOL> else : <EOL> setattr ( instance , field , value ) <EOL> self . pre_save ( request , instance ) <EOL> instance . save ( ) <EOL> self . post_save ( request , instance ) <EOL> for field , value in m2m_fields_to_set : <EOL> getattr ( instance , field ) . set ( value ) <EOL> return instance <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . create_model ( request , path_parameters , request_body ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . request_body is None : <EOL> self . request_body = self . model_viewset_class . default_request_body <EOL> if self . response_body is None : <EOL> self . response_body = self . model_viewset_class . default_response_body <EOL> </s>
<s> from ninja_crud . testing . core . components import PathParameters , Payloads <EOL> from ninja_crud . testing . views import ( <EOL> CreateModelViewTest , <EOL> DeleteModelViewTest , <EOL> ListModelViewTest , <EOL> ReadModelViewTest , <EOL> UpdateModelViewTest , <EOL> ) <EOL> from ninja_crud . testing . viewsets import ModelViewSetTestCase <EOL> from tests . test_app . tests . base_test_case import BaseTestCase <EOL> from tests . test_app . views . user_views import UserViewSet <EOL> class TestUserViewSet ( ModelViewSetTestCase , BaseTestCase ) : <EOL> model_viewset_class = UserViewSet <EOL> base_path = "<STR_LIT>" <EOL> def get_path_parameters ( self ) : <EOL> return PathParameters ( ok = { "<STR_LIT>" : self . user_1 . id } ) <EOL> def get_user_payloads ( self ) : <EOL> return Payloads ( <EOL> ok = { <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : [ self . group_1 . id , self . group_2 . id ] , <EOL> } , <EOL> bad_request = { "<STR_LIT>" : "<STR_LIT>" , "<STR_LIT>" : "<STR_LIT>" } , <EOL> conflict = { <EOL> "<STR_LIT>" : self . user_2 . username , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> "<STR_LIT>" : "<STR_LIT>" , <EOL> } , <EOL> ) <EOL> test_list_users = ListModelViewTest ( ) <EOL> test_create_user = CreateModelViewTest ( payloads = get_user_payloads ) <EOL> test_read_user = ReadModelViewTest ( path_parameters = get_path_parameters ) <EOL> test_update_user = UpdateModelViewTest ( <EOL> path_parameters = get_path_parameters , payloads = get_user_payloads <EOL> ) <EOL> test_delete_user = DeleteModelViewTest ( path_parameters = get_path_parameters ) <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class ReadModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Type [ Schema ] ] = None , <EOL> query_parameters : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ Schema ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> read_model : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] <EOL> ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = HTTPMethod . GET , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = query_parameters , <EOL> request_body = None , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . OK , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . read_model = read_model or self . _default_read_model <EOL> def _default_read_model ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . model_viewset_class . model . objects . get ( <EOL> ** ( path_parameters . dict ( ) if path_parameters else { } ) <EOL> ) <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . read_model ( request , path_parameters , query_parameters ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . response_body is None : <EOL> self . response_body = self . model_viewset_class . default_response_body <EOL> </s>
<s> from enum import Enum <EOL> class HTTPMethod ( str , Enum ) : <EOL> def __init__ ( self , value , description ) : <EOL> self . _value_ = value <EOL> self . description = description <EOL> def __new__ ( cls , value , description ) : <EOL> obj = str . __new__ ( cls , value ) <EOL> obj . _value_ = value <EOL> obj . description = description <EOL> return obj <EOL> CONNECT = "<STR_LIT>" , "<STR_LIT>" <EOL> DELETE = "<STR_LIT>" , "<STR_LIT>" <EOL> GET = "<STR_LIT>" , "<STR_LIT>" <EOL> HEAD = "<STR_LIT>" , "<STR_LIT>" <EOL> OPTIONS = "<STR_LIT>" , "<STR_LIT>" <EOL> PATCH = "<STR_LIT>" , "<STR_LIT>" <EOL> POST = "<STR_LIT>" , "<STR_LIT>" <EOL> PUT = "<STR_LIT>" , "<STR_LIT>" <EOL> TRACE = "<STR_LIT>" , "<STR_LIT>" <EOL> </s>
<s> from . abstract_model_view import AbstractModelView <EOL> from . abstract_view import AbstractView <EOL> from . create_model_view import CreateModelView <EOL> from . delete_model_view import DeleteModelView <EOL> from . list_model_view import ListModelView <EOL> from . read_model_view import ReadModelView <EOL> from . update_model_view import UpdateModelView <EOL> __all__ = [ <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> "<STR_LIT>" , <EOL> ] <EOL> </s>
<s> import http <EOL> from typing import Callable , Dict , List , Optional , Type <EOL> from django . db . models import ManyToManyField , Model <EOL> from django . http import HttpRequest <EOL> from ninja import Schema <EOL> from ninja_crud . views . abstract_model_view import AbstractModelView <EOL> from ninja_crud . views . enums import HTTPMethod <EOL> class UpdateModelView ( AbstractModelView ) : <EOL> def __init__ ( <EOL> self , <EOL> method : HTTPMethod = HTTPMethod . PUT , <EOL> path : str = "<STR_LIT>" , <EOL> path_parameters : Optional [ Schema ] = None , <EOL> request_body : Optional [ Type [ Schema ] ] = None , <EOL> response_body : Optional [ Type [ Schema ] ] = None , <EOL> decorators : Optional [ List [ Callable ] ] = None , <EOL> router_kwargs : Optional [ Dict ] = None , <EOL> get_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , <EOL> pre_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> post_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , <EOL> update_model : Optional [ <EOL> Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] <EOL> ] = None , <EOL> ) -> None : <EOL> super ( ) . __init__ ( <EOL> method = method , <EOL> path = path , <EOL> path_parameters = path_parameters , <EOL> query_parameters = None , <EOL> request_body = request_body , <EOL> response_body = response_body , <EOL> response_status = http . HTTPStatus . OK , <EOL> decorators = decorators , <EOL> router_kwargs = router_kwargs , <EOL> ) <EOL> self . get_model = get_model or self . _default_get_model <EOL> self . pre_save = pre_save or self . _default_pre_save <EOL> self . post_save = post_save or self . _default_post_save <EOL> self . update_model = update_model or self . _default_update_model <EOL> def _default_get_model ( <EOL> self , request : HttpRequest , path_parameters : Optional [ Schema ] <EOL> ) -> Model : <EOL> return self . model_viewset_class . model . objects . get ( <EOL> ** ( path_parameters . dict ( ) if path_parameters else { } ) <EOL> ) <EOL> @ staticmethod <EOL> def _default_pre_save ( request : HttpRequest , instance : Model ) -> None : <EOL> instance . full_clean ( ) <EOL> @ staticmethod <EOL> def _default_post_save ( request : HttpRequest , instance : Model ) -> None : <EOL> pass <EOL> def _default_update_model ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> instance = self . get_model ( request , path_parameters ) <EOL> if request_body : <EOL> for field , value in request_body . dict ( exclude_unset = True ) . items ( ) : <EOL> if isinstance ( instance . _meta . get_field ( field ) , ManyToManyField ) : <EOL> getattr ( instance , field ) . set ( value ) <EOL> else : <EOL> setattr ( instance , field , value ) <EOL> self . pre_save ( request , instance ) <EOL> instance . save ( ) <EOL> self . post_save ( request , instance ) <EOL> return instance <EOL> def handle_request ( <EOL> self , <EOL> request : HttpRequest , <EOL> path_parameters : Optional [ Schema ] , <EOL> query_parameters : Optional [ Schema ] , <EOL> request_body : Optional [ Schema ] , <EOL> ) -> Model : <EOL> return self . update_model ( request , path_parameters , request_body ) <EOL> def _inherit_model_viewset_class_attributes ( self ) -> None : <EOL> if self . request_body is None : <EOL> self . request_body = self . model_viewset_class . default_request_body <EOL> if self . response_body is None : <EOL> self . response_body = self . model_viewset_class . default_response_body <EOL> </s>
<s> from datetime import date <EOL> from typing import Optional <EOL> from uuid import UUID <EOL> from ninja import Schema <EOL> class DepartmentIn ( Schema ) : <EOL> title : str <EOL> class DepartmentOut ( Schema ) : <EOL> id : UUID <EOL> title : str <EOL> class EmployeeIn ( Schema ) : <EOL> first_name : str <EOL> last_name : str <EOL> birthdate : Optional [ date ] = None <EOL> class EmployeeOut ( Schema ) : <EOL> id : UUID <EOL> first_name : str <EOL> last_name : str <EOL> birthdate : Optional [ date ] = None <EOL> department_id : UUID <EOL> </s>
