[{"input": "package icu . freedomIntrovert . biliSendCommAntifraud . comment . bean ; import android . text . TextUtils ; import androidx . annotation . NonNull ; import java . util . Date ; public class HistoryComment extends Comment { public static final String STATE_NORMAL = \"<STR_LIT>\" ; public static final String STATE_SHADOW_BAN = \"<STR_LIT>\" ; public static final String STATE_DELETED = \"<STR_LIT>\" ; public static final String STATE_INVISIBLE = \"<STR_LIT>\" ; public static final String STATE_UNDER_REVIEW = \"<STR_LIT>\" ; public static final String STATE_SUSPECTED_NO_PROBLEM = \"<STR_LIT>\" ; public static final String STATE_UNKNOWN = \"<STR_LIT>\" ; public static final String STATE_COMMENT_AREA_DIED = \"<STR_LIT>\" ; public static final String STATE_SENSITIVE = \"<STR_LIT>\" ; public static final int CHECKED_NO_CHECK = <NUM_LIT> ; public static final int CHECKED_NOT_MARTIAL_LAW = <NUM_LIT> ; public static final int CHECKED_ONLY_BANNED_IN_THIS_AREA = <NUM_LIT> ; public static final int CHECKED_NOT_ONLY_BANNED_IN_THIS_AREA = <NUM_LIT> ; public static final int CHECKED_MARTIAL_LAW = <NUM_LIT> ; public int like , replyCount ; public int checkedArea ; public String firstState ; public String lastState ; public Date lastCheckDate ; public SensitiveScanResult sensitiveScanResult ; public HistoryComment ( CommentArea commentArea , long rpid , long parent , long root , String comment , Date date , int like , int replyCount , String lastState , Date lastCheckDate , int checkedArea , String firstState , String pictures , SensitiveScanResult sensitiveScanResult ) { super ( commentArea , rpid , parent , root , comment , pictures , date ) ; this . like = like ; this . replyCount = replyCount ; this . lastState = lastState ; this . lastCheckDate = lastCheckDate ; this . checkedArea = checkedArea ; this . firstState = firstState ; this . sensitiveScanResult = sensitiveScanResult ; } public HistoryComment ( long oid , String sourceId , int type , long rpid , long parent , long root , String comment , Date date , int like , int replyCount , String lastState , Date lastCheckDate ) { super ( new CommentArea ( oid , sourceId , type ) , rpid , parent , root , comment , null , date ) ; this . like = like ; this . replyCount = replyCount ; if ( lastState . equals ( \"<STR_LIT>\" ) ) { lastState = STATE_SHADOW_BAN ; firstState = STATE_NORMAL ; } if ( lastState . equals ( \"<STR_LIT>\" ) ) { lastState = STATE_DELETED ;", "output": "} this . lastState = lastState ; this . lastCheckDate = lastCheckDate ; } public HistoryComment ( Comment originalComment ) { super ( originalComment . commentArea , originalComment . rpid , originalComment . parent , originalComment . root , originalComment . comment , originalComment . pictures , originalComment . date ) ; } public String getFormatLastCheckDateFor_yMd ( ) { return getFormatDateFor_yMd ( lastCheckDate ) ; } public String getFormatLastCheckDateFor_yMdHms ( ) { return getFormatDateFor_yMdHms ( lastCheckDate ) ; } public void setFirstStateAndCurrentState ( String state ) { this . firstState = state ; this . lastState = state ; } public static String getStateDesc ( String state ) { if ( TextUtils . isEmpty ( state ) ) { return \"<STR_LIT>\" ; } switch ( state ) { case STATE_NORMAL : return \"<STR_LIT>\" ; case STATE_SHADOW_BAN : return \"<STR_LIT>\" ; case STATE_DELETED : return \"<STR_LIT>\" ; case STATE_INVISIBLE : return \"<STR_LIT>\" ; case STATE_UNDER_REVIEW : return \"<STR_LIT>\" ; case STATE_SUSPECTED_NO_PROBLEM : return \"<STR_LIT>\" ; case STATE_SENSITIVE : return \"<STR_LIT>\" ; case STATE_UNKNOWN : return \"<STR_LIT>\" ; default : return state ; } } @ NonNull @ Override public String toString ( ) { return \"<STR_LIT>\" + \"<STR_LIT>\" + like + \"<STR_LIT>\" + replyCount + \"<STR_LIT>\" + checkedArea + \"<STR_LIT>\" + firstState + '<STR_LIT>' + \"<STR_LIT>\" + lastState + '<STR_LIT>' + \"<STR_LIT>\" + lastCheckDate + \"<STR_LIT>\" + sensitiveScanResult + \"<STR_LIT>\" + commentArea + \"<STR_LIT>\" + rpid + \"<STR_LIT>\" + parent + \"<STR_LIT>\" + root + \"<STR_LIT>\" + comment + '<STR_LIT>' + \"<STR_LIT>\" + pictures + '<STR_LIT>' + \"<STR_LIT>\" + date + '<STR_LIT>' ; } }"}, {"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import android . annotation . SuppressLint ; import android . app . AlertDialog ; import android . content . Context ; import android . content . DialogInterface ; import android . content . Intent ; import android . graphics . BitmapFactory ; import android . net . Uri ; import android . view . View ; import android . view . ViewGroup ; import android . widget . ImageView ; import android . widget . TextView ; import android . widget . Toast ; import androidx . annotation . NonNull ; import androidx . recyclerview . widget . RecyclerView ; import java . util . ArrayList ; import java . util . Collections ; import java . util . List ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . CommentUtil ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . MartialLawCommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . db . StatisticsDBOpenHelper ; public class MartialLawCommentAreaListAdapter extends RecyclerView . Adapter < MartialLawCommentAreaListAdapter . ViewHolder > { ArrayList < MartialLawCommentArea > areaArrayList ; Context context ; private StatisticsDBOpenHelper statisticsDBOpenHelper ; public MartialLawCommentAreaListAdapter ( ArrayList < MartialLawCommentArea > areaArrayList , Context context ) { statisticsDBOpenHelper = new StatisticsDBOpenHelper ( context ) ; this . areaArrayList = areaArrayList ; Collections . reverse ( this . areaArrayList ) ; this . context = context ; } @ NonNull @ Override public ViewHolder onCreateViewHolder ( @ NonNull ViewGroup parent , int viewType ) { View itemView = View . inflate ( context , R . layout . item_martial_law_comment_area , null ) ; return new ViewHolder ( itemView ) ; } public void addData ( List < MartialLawCommentArea > areaArrayList ) { Collections . reverse ( areaArrayList ) ; this . areaArrayList . addAll ( <NUM_LIT> , areaArrayList ) ;", "output": "notifyDataSetChanged ( ) ; } @ SuppressLint ( { \"<STR_LIT>\" , \"<STR_LIT>\" } ) @ Override public void onBindViewHolder ( @ NonNull ViewHolder holder , int position ) { MartialLawCommentArea area = areaArrayList . get ( position ) ; byte [ ] coverImageData = statisticsDBOpenHelper . selectMartialLawCommentAreaCoverImage ( area . oid ) ; if ( area . type == CommentArea . AREA_TYPE_DYNAMIC11 || area . type == CommentArea . AREA_TYPE_DYNAMIC17 ) { holder . cover_image . setImageDrawable ( context . getDrawable ( R . drawable . dynmic ) ) ; } else { holder . cover_image . setImageBitmap ( BitmapFactory . decodeByteArray ( coverImageData , <NUM_LIT> , coverImageData . length ) ) ; } holder . txv_title . setText ( area . title ) ; holder . txv_up . setText ( \"<STR_LIT>\" + area . up ) ; holder . txv_source_id_ia . setText ( area . sourceId ) ; String areaType = null ; switch ( area . type ) { case CommentArea . AREA_TYPE_VIDEO : areaType = \"<STR_LIT>\" ; holder . img_area_type . setImageDrawable ( context . getDrawable ( R . drawable . ic_baseline_smart_display_24 ) ) ; break ; case CommentArea . AREA_TYPE_ARTICLE : areaType = \"<STR_LIT>\" ; holder . img_area_type . setImageDrawable ( context . getDrawable ( R . drawable . ic_baseline_art_track_24 ) ) ; break ; case CommentArea . AREA_TYPE_DYNAMIC11 : case CommentArea . AREA_TYPE_DYNAMIC17 : areaType = \"<STR_LIT>\" ; holder . img_area_type . setImageDrawable ( context . getDrawable ( R . drawable . ic_baseline_insert_chart_24 ) ) ; break ; } String defaultDisposalMethod = null ; switch ( area . defaultDisposalMethod ) { case MartialLawCommentArea . DISPOSAL_METHOD_SHADOW_BAN : holder . img_band_type . setImageDrawable ( context . getDrawable ( R . drawable . hide ) ) ; defaultDisposalMethod = \"<STR_LIT>\" ; break ; case MartialLawCommentArea . DISPOSAL_METHOD_QUICK_DELETE : holder . img_band_type . setImageDrawable ( context . getDrawable ( R . drawable . deleted ) ) ; defaultDisposalMethod = \"<STR_LIT>\" ; break ; } holder . txv_default_disposal_method . setText ( defaultDisposalMethod ) ; String finalDefaultDisposalMethod = defaultDisposalMethod ; String finalAreaType = areaType + \"<STR_LIT>\" + area . type + \"<STR_LIT>\" ; holder . itemView . setOnClickListener ( v -> { View dialogView = View . inflate ( context , R . layout . dialog_martial_law_comment_area_info , null ) ; TextView txv_title = dialogView . findViewById ( R . id . txv_title ) ; TextView txv_up = dialogView . findViewById ( R . id . txv_up ) ; TextView txv_oid = dialogView . findViewById ( R . id . txv_oid ) ; TextView txv_source_id = dialogView . findViewById ( R . id . txv_source_id ) ; TextView txv_band_type = dialogView . findViewById ( R . id . txv_old_status ) ; TextView txv_area_type = dialogView . findViewById ( R . id . txv_area_type ) ; txv_title . setText ( area . title ) ; txv_up . setText ( \"<STR_LIT>\" + area . up ) ; txv_oid . setText ( String . valueOf ( area . oid ) ) ; txv_source_id . setText ( area . sourceId ) ; txv_band_type . setText ( finalDefaultDisposalMethod ) ; txv_area_type . setText ( finalAreaType ) ; new AlertDialog . Builder ( context ) . setTitle ( \"<STR_LIT>\" ) . setView ( dialogView ) . setPositiveButton ( \"<STR_LIT>\" , new VoidDialogInterfaceOnClickListener ( ) ) . setNeutralButton ( \"<STR_LIT>\" , ( dialog12 , which ) -> { new AlertDialog . Builder ( context ) . setMessage ( \"<STR_LIT>\" ) . setNegativeButton ( \"<STR_LIT>\" , new VoidDialogInterfaceOnClickListener ( ) ) . setPositiveButton ( \"<STR_LIT>\" , ( dialog14 , which2 ) -> { if ( statisticsDBOpenHelper . deleteMartialLawCommentArea ( area . oid ) != <NUM_LIT> ) { areaArrayList . remove ( holder . getAdapterPosition ( ) ) ; notifyItemRemoved ( holder . getAdapterPosition ( ) ) ; Toast . makeText ( context , \"<STR_LIT>\" , Toast . LENGTH_SHORT ) . show ( ) ; } else { Toast . makeText ( context , \"<STR_LIT>\" , Toast . LENGTH_SHORT ) . show ( ) ; } } ) . show ( ) ; } ) . setNegativeButton ( \"<STR_LIT>\" , new DialogInterface . OnClickListener ( ) { @ Override public void onClick ( DialogInterface dialog , int which ) { Uri uri = Uri . parse ( CommentUtil . sourceIdToUrl ( area ) ) ; Intent intent = new Intent ( Intent . ACTION_VIEW , uri ) ; context . startActivity ( intent ) ; } } ) . show ( ) ; } ) ; } @ Override public int getItemCount ( ) { return areaArrayList . size ( ) ; } public static class ViewHolder extends RecyclerView . ViewHolder { View itemView ; ImageView cover_image , img_area_type , img_band_type ; TextView txv_title , txv_source_id_ia , txv_up , txv_default_disposal_method ; public ViewHolder ( @ NonNull View itemView ) { super ( itemView ) ; this . itemView = itemView ; cover_image = itemView . findViewById ( R . id . cover_image ) ; img_area_type = itemView . findViewById ( R . id . img_area_type ) ; img_band_type = itemView . findViewById ( R . id . img_old_status ) ; txv_title = itemView . findViewById ( R . id . txv_title ) ; txv_source_id_ia = itemView . findViewById ( R . id . txv_source_id_ia ) ; txv_up = itemView . findViewById ( R . id . txv_up ) ; txv_default_disposal_method = itemView . findViewById ( R . id . txv_default_disposal_method ) ; } } }"}, {"input": "package icu . freedomIntrovert . biliSendCommAntifraud . biliApis ; import com . alibaba . fastjson . JSON ; import java . util . List ; public class ForwardDynamicReqObject { public DynReq dyn_req ; public WebRepostSrc web_repost_src ; public static ForwardDynamicReqObject getInstance ( String uid , String dynIdStr ) { ForwardDynamicReqObject object = JSON . parseObject ( \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" + \"<STR_LIT>\" , ForwardDynamicReqObject . class ) ; object . web_repost_src . dyn_id_str = dynIdStr ; long currentTimeMillis = System . currentTimeMillis ( ) ; String t = String . valueOf ( currentTimeMillis ) ; object . dyn_req . upload_id = uid + \"<STR_LIT>\" + ( currentTimeMillis / <NUM_LIT> ) + \"<STR_LIT>\" + t . substring ( t . length ( ) - <NUM_LIT> ) + \"<STR_LIT>\" ; return object ; } public ForwardDynamicReqObject ( ) { } public static class DynReq { public Content content ; public int scene ; public String attach_card ; public String upload_id ; public Meta meta ; public static class Content { public List < Object > contents ; } public static class Meta { public AppMeta app_meta ; public static class AppMeta { public String from ; public String mobi_app ; } } }", "output": "public static class WebRepostSrc { public String dyn_id_str ; } }"}, {"input": "package icu . freedomIntrovert . biliSendCommAntifraud . comment . bean ; import android . text . TextUtils ; import com . alibaba . fastjson . JSON ; import java . text . SimpleDateFormat ; import java . util . Date ; import java . util . List ; import java . util . Locale ; public class Comment { public CommentArea commentArea ; public long rpid ; public long parent ; public long root ; public String comment ; public String pictures ; public Date date ; public Comment ( CommentArea commentArea , long rpid , long parent , long root , String comment , String pictures , Date date ) { this . commentArea = commentArea ; this . rpid = rpid ; this . comment = comment ; this . date = date ;", "output": "this . parent = parent ; this . root = root ; this . pictures = pictures ; } public long getTimeStampDate ( ) { return date . getTime ( ) ; } public String getFormatDateFor_yMd ( ) { return getFormatDateFor_yMd ( date ) ; } public String getFormatDateFor_yMdHms ( ) { return getFormatDateFor_yMdHms ( date ) ; } public static String getFormatDateFor_yMd ( Date date ) { SimpleDateFormat sdf = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . CHINA ) ; return sdf . format ( date ) ; } public static String getFormatDateFor_yMdHms ( Date date ) { SimpleDateFormat sdf = new SimpleDateFormat ( \"<STR_LIT>\" , Locale . CHINA ) ; return sdf . format ( date ) ; } public String getPictures ( ) { return pictures ; } public void setPictures ( String pictures ) { this . pictures = pictures ; } public List < PictureInfo > getPictureInfoList ( ) { if ( ! hasPictures ( ) ) { return null ; } return PictureInfo . parseJson ( pictures ) ; } public boolean hasPictures ( ) { return ! TextUtils . isEmpty ( pictures ) ; } public static class PictureInfo { public int img_height ; public double img_size ; public String img_src ; public int img_width ; public static List < PictureInfo > parseJson ( String jsonString ) { return JSON . parseArray ( jsonString , PictureInfo . class ) ; } public static String toJsonString ( List < PictureInfo > imageInfoList ) { return JSON . toJSONString ( imageInfoList ) ; } } @ Override public String toString ( ) { return \"<STR_LIT>\" + \"<STR_LIT>\" + commentArea + \"<STR_LIT>\" + rpid + \"<STR_LIT>\" + parent + \"<STR_LIT>\" + root + \"<STR_LIT>\" + comment + '<STR_LIT>' + \"<STR_LIT>\" + pictures + '<STR_LIT>' + \"<STR_LIT>\" + date + '<STR_LIT>' ; } }"}, {"input": "package icu . freedomIntrovert . biliSendCommAntifraud . biliApis ; import java . util . Map ; import retrofit2 . Call ; import retrofit2 . http . Body ; import retrofit2 . http . Field ; import retrofit2 . http . FieldMap ; import retrofit2 . http . FormUrlEncoded ; import retrofit2 . http . GET ; import retrofit2 . http . Header ; import retrofit2 . http . POST ; import retrofit2 . http . Query ; public interface BiliApiService { int COMMENT_SORT_BY_TIME = <NUM_LIT> ; int COMMENT_SORT_BY_LIKE = <NUM_LIT> ; int COMMENT_SORT_BY_REPLY_COUNT = <NUM_LIT> ; int COMMENT_SORT_MODE_HOT = <NUM_LIT> ; int COMMENT_SORT_MODE_TIME = <NUM_LIT> ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < VideoInfo > > getVideoInfoByAid ( @ Query ( \"<STR_LIT>\" ) long aid ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < VideoInfo > > getVideoInfoByBvid ( @ Query ( \"<STR_LIT>\" ) String bvid ) ; @ FormUrlEncoded @ POST ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentAddResult > > postComment ( @ Header ( \"<STR_LIT>\" ) String cookie , @ FieldMap Map < String , String > map ) ; @ FormUrlEncoded @ POST ( \"<STR_LIT>\" ) Call < GeneralResponse < Object > > deleteComment ( @ Header ( \"<STR_LIT>\" ) String cookie , @ Field ( \"<STR_LIT>\" ) String csrf , @ Field ( \"<STR_LIT>\" ) long oid , @ Field ( \"<STR_LIT>\" ) int type , @ Field ( \"<STR_LIT>\" ) long rpid ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentReplyPage > > getCommentReply ( @ Header ( \"<STR_LIT>\" ) String cookie , @ Query ( \"<STR_LIT>\" ) String csrf , @ Query ( \"<STR_LIT>\" ) long oid , @ Query ( \"<STR_LIT>\" ) int pn , @ Query ( \"<STR_LIT>\" ) int ps , @ Query ( \"<STR_LIT>\" ) long root , @ Query ( \"<STR_LIT>\" ) int type , @ Query ( \"<STR_LIT>\" ) int sort ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentReplyPage > > getCommentReply ( @ Query ( \"<STR_LIT>\" ) long oid , @ Query ( \"<STR_LIT>\" ) int pn , @ Query ( \"<STR_LIT>\" ) int ps , @ Query ( \"<STR_LIT>\" ) long root , @ Query ( \"<STR_LIT>\" ) int type , @ Query ( \"<STR_LIT>\" ) int sort ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentPage > > getCommentPageNoAccount ( @ Query ( \"<STR_LIT>\" ) long oid , @ Query ( \"<STR_LIT>\" ) int type , @ Query ( \"<STR_LIT>\" ) int pn , @ Query ( \"<STR_LIT>\" ) int sort ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentPage > > getCommentPageHasAccount ( @ Header ( \"<STR_LIT>\" ) String cookie , @ Query ( \"<STR_LIT>\" ) String csrf , @ Query ( \"<STR_LIT>\" ) int sort , @ Query ( \"<STR_LIT>\" ) long oid , @ Query ( \"<STR_LIT>\" ) int pn , @ Query ( \"<STR_LIT>\" ) int type ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentPage > > getCommentMainPageHasAccount ( @ Header ( \"<STR_LIT>\" ) String cookie , @ Query ( \"<STR_LIT>\" ) long oid , @ Query ( \"<STR_LIT>\" ) int type , @ Query ( \"<STR_LIT>\" ) int mode , @ Query ( \"<STR_LIT>\" ) int next , @ Query ( \"<STR_LIT>\" ) long seek_rpid ) ; @ GET ( \"<STR_LIT>\" ) Call < GeneralResponse < CommentPage > > getCommentMainPageNoAccount ( @ Header ( \"<STR_LIT>\" ) String cookie_buvid3 , @ Query ( \"<STR_LIT>\" ) long oid , @ Query ( \"<STR_LIT>\" ) int type , @ Query ( \"<STR_LIT>\" ) int mode , @ Query ( \"<STR_LIT>\" ) int next , @ Query ( \"<STR_LIT>\" ) long seek_rpid ) ; @ POST ( \"<STR_LIT>\" ) Call < GeneralResponse < ForwardDynamicResult > > forwardDynamic ( @ Header ( \"<STR_LIT>\" ) String cookie , @ Query ( \"<STR_LIT>\" ) String platform , @ Query ( \"<STR_LIT>\" ) String csrf , @ Body ForwardDynamicReqObject forwardDynamicReqObject ) ; @ POST ( \"<STR_LIT>\" ) Call < GeneralResponse < Object > > removeDynamic ( @ Header ( \"<STR_LIT>\" ) String cookie , @ Query ( \"<STR_LIT>\" ) String platform , @ Query ( \"<STR_LIT>\" ) String csrf , @ Body RemoveDynamicReqObject removeDynamicReqObject ) ;", "output": "}"}, {"input": "package icu . freedomIntrovert . biliSendCommAntifraud ; import static android . app . Notification . VISIBILITY_SECRET ; import android . annotation . SuppressLint ; import android . app . NotificationChannel ; import android . app . NotificationManager ; import android . app . PendingIntent ; import android . app . Service ; import android . content . Context ; import android . content . Intent ; import android . content . SharedPreferences ; import android . os . Handler ; import android . os . IBinder ; import androidx . core . app . NotificationCompat ; public class WaitService extends Service { public static final int ID_WAIT_PROGRESS = <NUM_LIT> ; public static final int ID_WAIT_OVER = <NUM_LIT> ; public static final String CHANNEL_ID_TIMER = \"<STR_LIT>\" ; public static final String CHANNEL_ID_OVER = \"<STR_LIT>\" ; long waitTime ; Handler handler ; NotificationCompat . Builder builder ; NotificationManager manager ; long rpid ; String comment ; public WaitService ( ) { } @ Override public IBinder onBind ( Intent intent ) { return null ; } @ Override public void onCreate ( ) { handler = new Handler ( ) ; manager = ( NotificationManager ) getSystemService ( Context . NOTIFICATION_SERVICE ) ; builder = new NotificationCompat . Builder ( getApplicationContext ( ) , CHANNEL_ID_TIMER ) . setWhen ( System . currentTimeMillis ( ) ) . setPriority ( NotificationCompat . PRIORITY_HIGH ) . setSmallIcon ( R . drawable . launcher ) . setContentTitle ( \"<STR_LIT>\" ) . setContentText ( \"<STR_LIT>\" ) . setOngoing ( true ) . setProgress ( <NUM_LIT> , <NUM_LIT> , false ) ; NotificationChannel notificationChannel ; if ( android . os . Build . VERSION . SDK_INT >= android . os . Build . VERSION_CODES . O ) { notificationChannel = new NotificationChannel ( CHANNEL_ID_TIMER , \"<STR_LIT>\" , NotificationManager . IMPORTANCE_DEFAULT ) ; notificationChannel . setVibrationPattern ( new long [ ] { <NUM_LIT> , <NUM_LIT> , <NUM_LIT> } ) ; notificationChannel . setLockscreenVisibility ( VISIBILITY_SECRET ) ; notificationChannel . enableLights ( true ) ; notificationChannel . setShowBadge ( true ) ; notificationChannel . enableVibration ( true ) ; manager . createNotificationChannel ( notificationChannel ) ; notificationChannel = new NotificationChannel ( CHANNEL_ID_OVER , \"<STR_LIT>\" , NotificationManager . IMPORTANCE_DEFAULT ) ; notificationChannel . setVibrationPattern ( new long [ ] { <NUM_LIT> , <NUM_LIT> , <NUM_LIT> } ) ; notificationChannel . setLockscreenVisibility ( VISIBILITY_SECRET ) ; notificationChannel . enableLights ( true ) ; notificationChannel . setShowBadge ( true ) ; notificationChannel . enableVibration ( true ) ; manager . createNotificationChannel ( notificationChannel ) ; } } @ Override public int onStartCommand ( Intent intent , int flags , int startId ) { waitTime = intent . getLongExtra ( \"<STR_LIT>\" , <NUM_LIT> ) ; if ( waitTime < <NUM_LIT> ) { waitTime = <NUM_LIT> ; } rpid = intent . getLongExtra ( \"<STR_LIT>\" , - <NUM_LIT> ) ; comment = intent . getStringExtra ( \"<STR_LIT>\" ) ; manager . notify ( ID_WAIT_PROGRESS , builder . build ( ) ) ; startTimer ( ) ; return super . onStartCommand ( intent , flags , startId ) ; } private void startTimer ( ) { new Thread ( ( ) -> { int graduation = <NUM_LIT> ; long sleepSeg = waitTime / graduation ; for ( int i = <NUM_LIT> ; i <= graduation ; i ++ ) { try { Thread . sleep ( sleepSeg ) ; int finalI = i ; handler . post ( ( ) -> { builder . setProgress ( graduation , finalI , false ) ; builder . setContentText ( finalI * sleepSeg + \"<STR_LIT>\" + graduation * sleepSeg + \"<STR_LIT>\" ) ; manager . notify ( ID_WAIT_PROGRESS , builder . build ( ) ) ; if ( finalI == graduation ) { manager . cancel ( ID_WAIT_PROGRESS ) ; } } ) ; } catch ( InterruptedException e ) { throw new RuntimeException ( e ) ; } } waitOver ( ) ; } ) . start ( ) ; } @ SuppressLint ( \"<STR_LIT>\" ) private void waitOver ( ) { NotificationCompat . Builder builder1 = new NotificationCompat . Builder ( this , CHANNEL_ID_OVER ) ; Intent intent = new Intent ( this , ByXposedLaunchedActivity . class ) ; intent . putExtra ( \"<STR_LIT>\" , ByXposedLaunchedActivity . TODO_CONTINUE_CHECK_COMMENT ) ; intent . putExtra ( \"<STR_LIT>\" , rpid ) ; intent . setAction ( Intent . ACTION_VIEW ) ; intent . setFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; SharedPreferences sp_counter = getSharedPreferences ( \"<STR_LIT>\" , MODE_PRIVATE ) ; int id = sp_counter . getInt ( \"<STR_LIT>\" , <NUM_LIT> ) ; PendingIntent pendingIntent = PendingIntent . getActivity ( this , id , intent , PendingIntent . FLAG_MUTABLE ) ; System . out . println ( \"<STR_LIT>\" + pendingIntent ) ; builder1 . setWhen ( System . currentTimeMillis ( ) ) . setPriority ( NotificationCompat . PRIORITY_MAX ) . setSmallIcon ( R . drawable . launcher ) . setContentIntent ( pendingIntent ) . setContentTitle ( \"<STR_LIT>\" ) . setContentText ( comment != null ? comment : \"<STR_LIT>\" ) . setAutoCancel ( true ) ; manager . notify ( id , builder1 . build ( ) ) ; id ++ ; sp_counter . edit ( ) . putInt ( \"<STR_LIT>\" , id ) . apply ( ) ;", "output": "stopSelf ( ) ; } }"}, {"input": "package icu . freedomIntrovert . biliSendCommAntifraud . comment ; import android . os . Build ; import android . util . ArrayMap ; import android . util . Log ; import androidx . annotation . NonNull ; import com . alibaba . fastjson . JSON ; import com . alibaba . fastjson . JSONObject ; import java . io . IOException ; import java . util . ArrayList ; import java . util . List ; import java . util . regex . Matcher ; import java . util . regex . Pattern ; import icu . freedomIntrovert . async . TaskManger ; import icu . freedomIntrovert . biliSendCommAntifraud . async . BiliBiliApiException ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliApiService ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . BiliComment ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentAddResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . CommentReplyPage ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . ForwardDynamicReqObject ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . ForwardDynamicResult ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . GeneralResponse ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . RemoveDynamicReqObject ; import icu . freedomIntrovert . biliSendCommAntifraud . biliApis . VideoInfo ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . Comment ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . CommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . comment . bean . MartialLawCommentArea ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . OkHttpUtil ; import icu . freedomIntrovert . biliSendCommAntifraud . okretro . ServiceGenerator ; import okhttp3 . FormBody ; import okhttp3 . OkHttpClient ; import okhttp3 . Request ; import okhttp3 . RequestBody ; import okhttp3 . Response ; import okhttp3 . ResponseBody ; import retrofit2 . Call ; public class CommentManipulator { public OkHttpClient httpClient ; private OkHttpClient httpClientNoRedirects ; private BiliApiService biliApiService ; private String cookie ; private String deputyCookie ; public CommentManipulator ( String cookie , String deputyCookie ) { this . httpClient = OkHttpUtil . getHttpClient ( ) ; httpClientNoRedirects = new OkHttpClient . Builder ( ) . followRedirects ( false ) . build ( ) ; this . biliApiService = ServiceGenerator . createService ( BiliApiService . class ) ; this . cookie = cookie ; this . deputyCookie = deputyCookie ; } public void setCookie ( String cookie ) { this . cookie = cookie ; } public String getCookie ( ) { return cookie ; } public boolean cookieAreSet ( ) { if ( cookie == null ) { return false ; } return cookie . contains ( \"<STR_LIT>\" ) ; } public boolean deputyCookieAreSet ( ) { if ( deputyCookie == null ) { return false ; } return deputyCookie . contains ( \"<STR_LIT>\" ) ; } public String getCsrfFromCookie ( boolean isDeputy ) { String cookie = isDeputy ? this . deputyCookie : this . cookie ; int csrfIndex = cookie . indexOf ( \"<STR_LIT>\" ) ; return cookie . substring ( csrfIndex + <NUM_LIT> , csrfIndex + <NUM_LIT> + <NUM_LIT> ) ; } public Call < GeneralResponse < VideoInfo > > getVideoInfoByAid ( long aid ) { return biliApiService . getVideoInfoByAid ( aid ) ; } public String bvidToOid ( String bvid ) throws IOException { Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + bvid ) . build ( ) ; Response response = httpClient . newCall ( request ) . execute ( ) ; String aid = null ; if ( response . code ( ) == <NUM_LIT> ) { JSONObject respJson = JSON . parseObject ( response . body ( ) . string ( ) ) ; if ( respJson . getInteger ( \"<STR_LIT>\" ) == <NUM_LIT> ) { aid = respJson . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; } } return aid ;", "output": "} public CommentArea dvidToCommentArea ( String dvid ) throws IOException { Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + dvid ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" + Build . VERSION . RELEASE + \"<STR_LIT>\" + Build . MODEL + \"<STR_LIT>\" + Build . ID + \"<STR_LIT>\" + \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , cookie ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . build ( ) ; Response response = httpClient . newCall ( request ) . execute ( ) ; String aid = null ; int comment_type = CommentArea . AREA_TYPE_DYNAMIC11 ; if ( response . code ( ) == <NUM_LIT> ) { JSONObject respJson = JSON . parseObject ( response . body ( ) . string ( ) ) ; if ( respJson . getInteger ( \"<STR_LIT>\" ) == <NUM_LIT> ) { aid = respJson . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; comment_type = respJson . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getInteger ( \"<STR_LIT>\" ) ; } } if ( aid != null ) { return new CommentArea ( Long . parseLong ( aid ) , dvid , comment_type ) ; } else { return null ; } } public CommentAddResult sendComment ( String comment , long parent , long root , CommentArea commentArea , boolean isDeputyAccount ) throws IOException , BiliBiliApiException { Call < GeneralResponse < CommentAddResult > > call = getSendCommentCall ( comment , parent , root , commentArea , isDeputyAccount ) ; GeneralResponse < CommentAddResult > body = call . execute ( ) . body ( ) ; OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { return body . data ; } else { throw new BiliBiliApiException ( body , \"<STR_LIT>\" + comment ) ; } } public Call < GeneralResponse < CommentAddResult > > getSendCommentCall ( String comment , long parent , long root , CommentArea commentArea , boolean isDeputyAccount ) { ArrayMap < String , String > arrayMap = new ArrayMap < > ( ) ; arrayMap . put ( \"<STR_LIT>\" , getCsrfFromCookie ( isDeputyAccount ) ) ; arrayMap . put ( \"<STR_LIT>\" , comment ) ; arrayMap . put ( \"<STR_LIT>\" , String . valueOf ( commentArea . oid ) ) ; arrayMap . put ( \"<STR_LIT>\" , \"<STR_LIT>\" ) ; arrayMap . put ( \"<STR_LIT>\" , String . valueOf ( parent ) ) ; arrayMap . put ( \"<STR_LIT>\" , String . valueOf ( root ) ) ; arrayMap . put ( \"<STR_LIT>\" , String . valueOf ( commentArea . type ) ) ; return biliApiService . postComment ( isDeputyAccount ? deputyCookie : getCookie ( ) , arrayMap ) ; } public BiliComment findComment ( CommentArea commentArea , long rpid , long root ) throws IOException , BiliBiliApiException { List < BiliComment > replies ; if ( root == <NUM_LIT> ) { GeneralResponse < CommentPage > body = biliApiService . getCommentPageNoAccount ( commentArea . oid , commentArea . type , <NUM_LIT> , BiliApiService . COMMENT_SORT_BY_TIME ) . execute ( ) . body ( ) ; OkHttpUtil . respNotNull ( body ) ; replies = body . data . replies ; if ( replies != null && replies . size ( ) > <NUM_LIT> ) { for ( BiliComment reply : replies ) { if ( reply . rpid == rpid ) { return reply ; } } } return null ; } else { return findCommentFromCommentReplyArea ( commentArea , rpid , root , false ) ; } } public BiliComment findCommentFromCommentReplyArea ( CommentArea commentArea , long rpid , long root , boolean hasAccount ) throws IOException , BiliBiliApiException { GeneralResponse < CommentPage > body ; if ( hasAccount ) { body = biliApiService . getCommentMainPageHasAccount ( cookie , commentArea . oid , commentArea . type , BiliApiService . COMMENT_SORT_MODE_TIME , <NUM_LIT> , rpid ) . execute ( ) . body ( ) ; } else { body = biliApiService . getCommentMainPageNoAccount ( getBuvid3Cookie ( ) , commentArea . oid , commentArea . type , BiliApiService . COMMENT_SORT_MODE_TIME , <NUM_LIT> , rpid ) . execute ( ) . body ( ) ; } OkHttpUtil . respNotNull ( body ) ; if ( ! body . isSuccess ( ) ) { throw new BiliBiliApiException ( body , \"<STR_LIT>\" ) ; } List < BiliComment > comments = new ArrayList < > ( body . data . replies ) ; if ( body . data . top_replies != null ) { comments . addAll ( body . data . top_replies ) ; } for ( BiliComment comment : comments ) { if ( comment . rpid == root ) { List < BiliComment > replies = comment . replies ; if ( replies != null ) { for ( BiliComment reply : replies ) { if ( reply . rpid == rpid ) { return reply ; } } } } } return null ; } public BiliComment findCommentUsingSeekRpid ( Comment comment , boolean hasAccount ) throws IOException , BiliBiliApiException { CommentArea commentArea = comment . commentArea ; GeneralResponse < CommentPage > body ; if ( hasAccount ) { body = biliApiService . getCommentMainPageHasAccount ( cookie , commentArea . oid , commentArea . type , BiliApiService . COMMENT_SORT_MODE_TIME , <NUM_LIT> , comment . rpid ) . execute ( ) . body ( ) ; } else { body = biliApiService . getCommentMainPageNoAccount ( getBuvid3Cookie ( ) , commentArea . oid , commentArea . type , BiliApiService . COMMENT_SORT_MODE_TIME , <NUM_LIT> , comment . rpid ) . execute ( ) . body ( ) ; } OkHttpUtil . respNotNull ( body ) ; if ( body . isSuccess ( ) ) { List < BiliComment > comments = body . data . replies ; if ( comments == null || comments . size ( ) == <NUM_LIT> ) { return null ; } for ( BiliComment gotAComment : comments ) { if ( gotAComment . rpid == comment . rpid ) { return gotAComment ; } } List < BiliComment > topReplies = body . data . top_replies ; if ( topReplies == null || topReplies . size ( ) == <NUM_LIT> ) { return null ; } for ( BiliComment aTopComment : topReplies ) { if ( aTopComment . rpid == comment . rpid ) { return aTopComment ; } } return null ; } else { throw new BiliBiliApiException ( body , \"<STR_LIT>\" ) ; } } public interface PageTurnListener { void onPageTurn ( int page ) ; } public CommentArea matchCommentArea ( String input ) throws IOException { if ( input . startsWith ( \"<STR_LIT>\" ) ) { if ( bvidToOid ( input ) != null ) { return new CommentArea ( Long . parseLong ( bvidToOid ( input ) ) , input , CommentArea . AREA_TYPE_VIDEO ) ; } else { return null ; } } else if ( input . startsWith ( \"<STR_LIT>\" ) ) { return new CommentArea ( ( Long . parseLong ( input . substring ( <NUM_LIT> , <NUM_LIT> ) ) ) , input , CommentArea . AREA_TYPE_ARTICLE ) ; } if ( input . startsWith ( \"<STR_LIT>\" ) ) { Request request = new Request . Builder ( ) . url ( input ) . build ( ) ; Response response = httpClientNoRedirects . newCall ( request ) . execute ( ) ; input = response . header ( \"<STR_LIT>\" ) ; System . out . println ( input ) ; } if ( input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) ) { String sourceId = subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ; if ( bvidToOid ( sourceId ) != null ) { return new CommentArea ( Long . parseLong ( bvidToOid ( sourceId ) ) , sourceId , CommentArea . AREA_TYPE_VIDEO ) ; } else { return null ; } } else if ( input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) ) { String text = \"<STR_LIT>\" ; String aid = input . substring ( input . indexOf ( text ) + text . length ( ) ) ; return new CommentArea ( Long . parseLong ( aid . substring ( <NUM_LIT> ) ) , aid , CommentArea . AREA_TYPE_VIDEO ) ; } else if ( input . startsWith ( \"<STR_LIT>\" ) || input . startsWith ( \"<STR_LIT>\" ) ) { String sourceId = subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ; return new CommentArea ( Long . parseLong ( sourceId ) , \"<STR_LIT>\" + sourceId , CommentArea . AREA_TYPE_ARTICLE ) ; } else if ( input . startsWith ( \"<STR_LIT>\" ) ) { String sourceId = subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ; return new CommentArea ( Long . parseLong ( sourceId ) , \"<STR_LIT>\" + sourceId , CommentArea . AREA_TYPE_ARTICLE ) ; } else if ( input . startsWith ( \"<STR_LIT>\" ) ) { String sourceId = subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ; return new CommentArea ( Long . parseLong ( sourceId ) , \"<STR_LIT>\" + sourceId , CommentArea . AREA_TYPE_ARTICLE ) ; } else if ( input . startsWith ( \"<STR_LIT>\" ) ) { return dvidToCommentArea ( subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ) ; } else if ( input . startsWith ( \"<STR_LIT>\" ) ) { String sourceId = subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ; return dvidToCommentArea ( sourceId ) ; } else if ( input . startsWith ( \"<STR_LIT>\" ) ) { String sourceId = subUrl ( input , \"<STR_LIT>\" , <NUM_LIT> ) ; return dvidToCommentArea ( sourceId ) ; } return null ; } public void matchCommentAreaInUi ( String input , MatchCommentAreaCallBack callBack ) { TaskManger . start ( ( ) -> { try { CommentArea commentArea = matchCommentArea ( input ) ; TaskManger . postOnUiThread ( ( ) -> callBack . onMatchedArea ( commentArea ) ) ; } catch ( IOException e ) { TaskManger . postOnUiThread ( ( ) -> callBack . onNetworkError ( e ) ) ; } } ) ; } public interface MatchCommentAreaCallBack { void onNetworkError ( IOException e ) ; void onMatchedArea ( CommentArea commentArea ) ; } private String subUrl ( String url , String text , int length ) { String subText = url . substring ( url . indexOf ( text ) + text . length ( ) , url . indexOf ( text ) + text . length ( ) + length ) ; System . out . println ( subText ) ; return subText ; } public MartialLawCommentArea getMartialLawCommentArea ( CommentArea commentArea , long testCommentRpid , boolean isDeputyAccount ) throws IOException { byte [ ] coverImageData = null ; String title = null , up = null ; GeneralResponse < CommentReplyPage > resp = getCommentReplyHasAccount ( commentArea , testCommentRpid , <NUM_LIT> , isDeputyAccount ) ; if ( commentArea . type == CommentArea . AREA_TYPE_VIDEO ) { Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + commentArea . sourceId ) . build ( ) ; Response response = httpClient . newCall ( request ) . execute ( ) ; if ( response . code ( ) == <NUM_LIT> ) { JSONObject respJson = JSON . parseObject ( response . body ( ) . string ( ) ) ; if ( respJson . getInteger ( \"<STR_LIT>\" ) == <NUM_LIT> ) { String picUrl = respJson . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; Request request1 = new Request . Builder ( ) . url ( picUrl + \"<STR_LIT>\" ) . build ( ) ; Response response1 = httpClient . newCall ( request1 ) . execute ( ) ; coverImageData = response1 . body ( ) . bytes ( ) ; title = respJson . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; up = respJson . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; } } } else if ( commentArea . type == CommentArea . AREA_TYPE_ARTICLE ) { Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + commentArea . oid ) . build ( ) ; Response response = httpClient . newCall ( request ) . execute ( ) ; if ( response . code ( ) == <NUM_LIT> ) { JSONObject respJson = JSON . parseObject ( response . body ( ) . string ( ) ) ; if ( respJson . getInteger ( \"<STR_LIT>\" ) == <NUM_LIT> ) { String picUrl = respJson . getJSONObject ( \"<STR_LIT>\" ) . getJSONArray ( \"<STR_LIT>\" ) . getString ( <NUM_LIT> ) ; Request request1 = new Request . Builder ( ) . url ( picUrl + \"<STR_LIT>\" ) . build ( ) ; Response response1 = httpClient . newCall ( request1 ) . execute ( ) ; coverImageData = response1 . body ( ) . bytes ( ) ; title = respJson . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; up = respJson . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; } } } else if ( commentArea . type == CommentArea . AREA_TYPE_DYNAMIC11 || commentArea . type == CommentArea . AREA_TYPE_DYNAMIC17 ) { Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" + commentArea . sourceId ) . addHeader ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . build ( ) ; Response response = httpClient . newCall ( request ) . execute ( ) ; if ( response . code ( ) == <NUM_LIT> ) { JSONObject respJson = JSON . parseObject ( response . body ( ) . string ( ) ) ; if ( respJson . getInteger ( \"<STR_LIT>\" ) == <NUM_LIT> ) { up = respJson . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; title = respJson . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) . getString ( \"<STR_LIT>\" ) ; if ( title . length ( ) > <NUM_LIT> ) { title = title . substring ( <NUM_LIT> , <NUM_LIT> ) ; title += \"<STR_LIT>\" ; } } } } else { return null ; } String defaultDisposalMethod = null ; if ( resp . code == CommentAddResult . CODE_DELETED ) { defaultDisposalMethod = MartialLawCommentArea . DISPOSAL_METHOD_QUICK_DELETE ; } else { defaultDisposalMethod = MartialLawCommentArea . DISPOSAL_METHOD_SHADOW_BAN ; } return new MartialLawCommentArea ( commentArea , defaultDisposalMethod , title , up , coverImageData ) ; } public JSONObject appealComment ( String id , String reason ) throws IOException { String idType = \"<STR_LIT>\" ; if ( id . startsWith ( \"<STR_LIT>\" ) ) { idType = \"<STR_LIT>\" ; } RequestBody requestBody = new FormBody . Builder ( ) . add ( \"<STR_LIT>\" , getCsrfFromCookie ( false ) ) . add ( idType , id ) . add ( \"<STR_LIT>\" , \"<STR_LIT>\" ) . add ( \"<STR_LIT>\" , reason ) . build ( ) ; Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" ) . header ( \"<STR_LIT>\" , cookie ) . post ( requestBody ) . build ( ) ; Response response = httpClient . newCall ( request ) . execute ( ) ; JSONObject respJson = JSON . parseObject ( response . body ( ) . string ( ) ) ; Log . i ( \"<STR_LIT>\" , respJson . toJSONString ( ) ) ; return respJson ; } public Call < GeneralResponse < Object > > createDeleteCommentCall ( CommentArea commentArea , long rpid ) { return biliApiService . deleteComment ( getCookie ( ) , getCsrfFromCookie ( false ) , commentArea . oid , commentArea . type , rpid ) ; } public GeneralResponse < Object > deleteComment ( CommentArea commentArea , long rpid , boolean isDeputyAccount ) throws IOException , BiliBiliApiException { GeneralResponse < Object > body = biliApiService . deleteComment ( isDeputyAccount ? deputyCookie : getCookie ( ) , getCsrfFromCookie ( isDeputyAccount ) , commentArea . oid , commentArea . type , rpid ) . execute ( ) . body ( ) ; OkHttpUtil . respNotNull ( body ) ; if ( ! body . isSuccess ( ) ) { throw new BiliBiliApiException ( body , String . format ( \"<STR_LIT>\" , rpid , getDedeUserID ( isDeputyAccount ) ) ) ; } return body ; } public GeneralResponse < CommentReplyPage > getCommentReplyNoAccount ( CommentArea commentArea , long rootRpid , int pn ) throws IOException { return biliApiService . getCommentReply ( commentArea . oid , pn , <NUM_LIT> , rootRpid , commentArea . type , <NUM_LIT> ) . execute ( ) . body ( ) ; } public GeneralResponse < CommentReplyPage > getCommentReplyHasAccount ( CommentArea commentArea , long rootRpid , int pn , boolean isDeputyAccount ) throws IOException { return biliApiService . getCommentReply ( isDeputyAccount ? deputyCookie : cookie , getCsrfFromCookie ( isDeputyAccount ) , commentArea . oid , pn , <NUM_LIT> , rootRpid , commentArea . type , <NUM_LIT> ) . execute ( ) . body ( ) ; } public ForwardDynamicResult forwardDynamicUsingSubAccount ( @ NonNull String dynamicId ) throws IOException , BiliBiliApiException { GeneralResponse < ForwardDynamicResult > body = biliApiService . forwardDynamic ( deputyCookie , \"<STR_LIT>\" , getCsrfFromCookie ( true ) , ForwardDynamicReqObject . getInstance ( getDedeUserID ( true ) , dynamicId ) ) . execute ( ) . body ( ) ; OkHttpUtil . respNotNull ( body ) ; if ( ! body . isSuccess ( ) ) { throw new BiliBiliApiException ( body , \"<STR_LIT>\" ) ; } return body . data ; } public void deleteDynamicUsingSubAccount ( @ NonNull String dynamicId ) throws IOException , BiliBiliApiException { GeneralResponse < Object > response = biliApiService . removeDynamic ( deputyCookie , \"<STR_LIT>\" , getCsrfFromCookie ( true ) , new RemoveDynamicReqObject ( dynamicId ) ) . execute ( ) . body ( ) ; OkHttpUtil . respNotNull ( response ) ; if ( ! response . isSuccess ( ) ) { throw new BiliBiliApiException ( response , \"<STR_LIT>\" + dynamicId + \"<STR_LIT>\" ) ; } } public boolean checkCookieNotFailed ( ) throws IOException { Request request = new Request . Builder ( ) . url ( \"<STR_LIT>\" ) . addHeader ( \"<STR_LIT>\" , cookie ) . build ( ) ; ResponseBody body = httpClient . newCall ( request ) . execute ( ) . body ( ) ; OkHttpUtil . respNotNull ( body ) ; JSONObject userProfileJSON = JSON . parseObject ( body . string ( ) ) ; JSONObject userProfile = userProfileJSON . getJSONObject ( \"<STR_LIT>\" ) . getJSONObject ( \"<STR_LIT>\" ) ; return userProfile != null ; } public String getBuvid3Cookie ( ) { String patternString = \"<STR_LIT>\" ; Pattern pattern = Pattern . compile ( patternString ) ; Matcher matcher = pattern . matcher ( cookie ) ; matcher . find ( ) ; return matcher . group ( ) ; } public String getDedeUserID ( boolean isDeputy ) { String patternString = \"<STR_LIT>\" ; Pattern pattern = Pattern . compile ( patternString ) ; Matcher matcher = pattern . matcher ( isDeputy ? deputyCookie : cookie ) ; matcher . find ( ) ; return matcher . group ( <NUM_LIT> ) ; } }"}]