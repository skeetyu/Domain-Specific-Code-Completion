[{"input": "from http import HTTPStatus \n from typing import Callable , List , Optional , TypeVar , Union , cast \n from django . http import HttpResponse \n from django . test import TestCase \n from ninja_crud . testing . core . components import ( \n Headers , \n PathParameters , \n Payloads , \n QueryParameters , \n ) \n T = TypeVar ( \"<STR_LIT>\" ) \n TestCaseType = TypeVar ( \"<STR_LIT>\" , bound = TestCase ) \n ArgOrCallable = Union [ T , property , Callable [ [ TestCaseType ] , T ] ] \n CompletionCallback = Callable [ [ HttpResponse , dict , dict , dict , dict ] , None ] \n class ViewTestManager : \n def __init__ ( \n self , \n simulate_request : Callable [ [ dict , dict , dict , dict ] , HttpResponse ] , \n path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , \n query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , \n headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , \n payloads : Optional [ ArgOrCallable [ Payloads , TestCaseType ] ] = None , \n ) -> None : \n self . simulate_request = simulate_request \n self . path_parameters = path_parameters or PathParameters ( ok = { } ) \n self . query_parameters = query_parameters or QueryParameters ( ok = { } ) \n self . headers = headers or Headers ( ok = { } ) \n self . payloads = payloads or Payloads ( ok = { } ) \n @ staticmethod \n def _get_arg_or_callable ( \n test_case : TestCase , params : ArgOrCallable [ T , TestCaseType ] \n ) -> T : \n if callable ( params ) : \n return params ( test_case ) \n elif isinstance ( params , property ) : \n return cast ( Callable , params . fget ) ( test_case ) \n else : \n return params \n def get_path_parameters ( self , test_case : TestCase ) -> PathParameters : \n path_parameters = self . _get_arg_or_callable ( test_case , self . path_parameters ) \n if not isinstance ( path_parameters , PathParameters ) : \n raise TypeError ( \n f\"<STR_LIT>\" \n f\"<STR_LIT>\" \n ) \n return path_parameters \n def get_query_parameters ( self , test_case : TestCase ) -> QueryParameters : \n query_parameters = self . _get_arg_or_callable ( test_case , self . query_parameters ) \n if not isinstance ( query_parameters , QueryParameters ) : \n raise TypeError ( \n f\"<STR_LIT>\" \n f\"<STR_LIT>\" \n ) \n return query_parameters \n def get_headers ( self , test_case : TestCase ) -> Headers : \n headers = self . _get_arg_or_callable ( test_case , self . headers ) \n if not isinstance ( headers , Headers ) : \n raise TypeError ( \n f\"<STR_LIT>\" \n f\"<STR_LIT>\" \n ) \n return headers \n def get_payloads ( self , test_case : TestCase ) -> Payloads : \n payloads = self . _get_arg_or_callable ( test_case , self . payloads ) \n if not isinstance ( payloads , Payloads ) : \n raise TypeError ( \n f\"<STR_LIT>\" \n f\"<STR_LIT>\" \n ) \n return payloads \n @ staticmethod \n def wrap_completion_with_status_check ( \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus , \n ) -> CompletionCallback : \n def on_completion_with_status_check ( \n response : HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n test_case . assertEqual ( response . status_code , status ) \n on_completion ( response , path_parameters , query_parameters , headers , payload ) \n return on_completion_with_status_check \n def run_combinatorial_tests ( \n self , \n test_case : TestCase , \n path_parameters_list : List [ dict ] , \n query_parameters_list : List [ dict ] , \n headers_list : List [ dict ] , \n payload_list : List [ dict ] , \n on_completion : CompletionCallback , \n ) : \n for path_parameters in path_parameters_list : \n for query_parameters in query_parameters_list : \n for headers in headers_list : \n for payload in payload_list : \n with test_case . subTest ( \n path_parameters = path_parameters , \n query_parameters = query_parameters , \n headers = headers , \n payload = payload , \n ) : \n response = self . simulate_request ( \n path_parameters , query_parameters , headers , payload \n ) \n on_completion ( \n response , \n path_parameters , \n query_parameters , \n headers , \n payload , \n ) \n def test_view_ok ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus = HTTPStatus . OK , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . ok , \n query_parameters_list = query_parameters . ok , \n headers_list = headers . ok , \n payload_list = payloads . ok , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n ) \n def test_view_payloads_bad_request ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus = HTTPStatus . BAD_REQUEST , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n if payloads . bad_request is None : \n test_case . skipTest ( reason = \"<STR_LIT>\" ) \n else : \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . ok , \n query_parameters_list = query_parameters . ok , \n headers_list = headers . ok , \n payload_list = payloads . bad_request , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n ) \n def test_view_payloads_conflict ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus = HTTPStatus . CONFLICT , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n if payloads . conflict is None : \n test_case . skipTest ( reason = \"<STR_LIT>\" ) \n else : \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . ok , \n query_parameters_list = query_parameters . ok , \n headers_list = headers . ok , \n payload_list = payloads . conflict , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n ) \n def test_view_query_parameters_bad_request ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus = HTTPStatus . BAD_REQUEST , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n if query_parameters . bad_request is None : \n test_case . skipTest ( reason = \"<STR_LIT>\" ) \n else : \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . ok , \n query_parameters_list = query_parameters . bad_request , \n headers_list = headers . ok , \n payload_list = payloads . ok , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n ) \n def test_view_headers_unauthorized ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus = HTTPStatus . UNAUTHORIZED , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n if headers . unauthorized is None : \n test_case . skipTest ( reason = \"<STR_LIT>\" ) \n else : \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . ok , \n query_parameters_list = query_parameters . ok , \n headers_list = headers . unauthorized , \n payload_list = payloads . ok , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n ) \n def test_view_headers_forbidden ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback ,", "output": "status : HTTPStatus = HTTPStatus . FORBIDDEN , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n if headers . forbidden is None : \n test_case . skipTest ( reason = \"<STR_LIT>\" ) \n else : \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . ok , \n query_parameters_list = query_parameters . ok , \n headers_list = headers . forbidden , \n payload_list = payloads . ok , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n ) \n def test_view_path_parameters_not_found ( \n self , \n test_case : TestCase , \n on_completion : CompletionCallback , \n status : HTTPStatus = HTTPStatus . NOT_FOUND , \n ) : \n path_parameters = self . get_path_parameters ( test_case ) \n query_parameters = self . get_query_parameters ( test_case ) \n headers = self . get_headers ( test_case ) \n payloads = self . get_payloads ( test_case ) \n if path_parameters . not_found is None : \n test_case . skipTest ( reason = \"<STR_LIT>\" ) \n else : \n self . run_combinatorial_tests ( \n test_case = test_case , \n path_parameters_list = path_parameters . not_found , \n query_parameters_list = query_parameters . ok , \n headers_list = headers . ok , \n payload_list = payloads . ok , \n on_completion = self . wrap_completion_with_status_check ( \n test_case , on_completion = on_completion , status = status \n ) , \n )"}, {"input": "from functools import wraps \n from typing import List \n from django . core . exceptions import PermissionDenied \n from ninja import Router \n from ninja_crud . views import ( \n DeleteModelView , \n ListModelView , \n ReadModelView , \n UpdateModelView , \n ) \n from ninja_crud . viewsets import ModelViewSet \n from tests . test_app . models import Item , Tag \n from tests . test_app . schemas import ItemIn , ItemOut , OrderByFilterSchema , TagOut \n router = Router ( ) \n def user_is_collection_creator ( func ) : \n @ wraps ( func ) \n def wrapper ( request , * args , ** kwargs ) : \n item_id = getattr ( kwargs . get ( \"<STR_LIT>\" ) , \"<STR_LIT>\" , None ) \n item = Item . objects . get ( id = item_id ) \n if item . collection . created_by != request . auth : \n raise PermissionDenied ( ) \n return func ( request , * args , ** kwargs ) \n return wrapper \n class ItemViewSet ( ModelViewSet ) : \n model = Item \n default_request_body = ItemIn \n default_response_body = ItemOut \n list_items = ListModelView ( \n query_parameters = OrderByFilterSchema , \n get_queryset = lambda request , path_parameters : Item . objects . get_queryset ( ) , \n ) \n read_item = ReadModelView (", "output": "read_model = lambda request , path_parameters , _ : Item . objects . get ( \n id = getattr ( path_parameters , \"<STR_LIT>\" , None ) \n ) , \n decorators = [ user_is_collection_creator ] , \n ) \n update_item = UpdateModelView ( \n pre_save = lambda request , instance : None , \n post_save = lambda request , instance : None , \n decorators = [ user_is_collection_creator ] , \n ) \n delete_item = DeleteModelView ( decorators = [ user_is_collection_creator ] ) \n list_tags = ListModelView ( \n path = \"<STR_LIT>\" , \n get_queryset = lambda request , path_parameters : Tag . objects . filter ( \n items__id = getattr ( path_parameters , \"<STR_LIT>\" , None ) \n ) , \n response_body = List [ TagOut ] , \n ) \n ItemViewSet . register_routes ( router )"}, {"input": "import http \n import json \n from typing import Optional , Type , cast \n import django . http \n import django . test \n import django . utils . http \n from ninja import Schema \n from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager \n from ninja_crud . testing . core . components import Headers , PathParameters \n from ninja_crud . testing . views import AbstractModelViewTest \n from ninja_crud . views import ReadModelView \n class ReadModelViewTest ( AbstractModelViewTest ) : \n model_view : ReadModelView \n def __init__ ( \n self , \n path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , \n headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , \n ) -> None : \n super ( ) . __init__ ( model_view_class = ReadModelView ) \n self . view_test_manager = ViewTestManager ( \n simulate_request = self . simulate_request , \n path_parameters = path_parameters , \n headers = headers , \n ) \n def on_successful_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n actual_output = json . loads ( response . content ) \n expected_output = self . _get_expected_output ( \n response = response , \n path_parameters = path_parameters , \n query_parameters = query_parameters , \n ) \n self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) \n def _get_expected_output ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n ) -> dict : \n path_parameters_schema : Optional [ Schema ] = ( \n self . model_view . path_parameters ( ** path_parameters ) \n if self . model_view . path_parameters \n else None \n )", "output": "query_parameters_schema = ( \n self . model_view . query_parameters ( ** query_parameters ) \n if self . model_view . query_parameters \n else None \n ) \n instance = self . model_view . read_model ( \n getattr ( response , \"<STR_LIT>\" , None ) , \n path_parameters_schema , \n query_parameters_schema , \n ) \n schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) \n return json . loads ( schema . json ( ) ) \n def on_failed_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n pass \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_read_model_ok ( self ) : \n self . view_test_manager . test_view_ok ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_successful_request , \n status = http . HTTPStatus . OK , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_read_model_headers_unauthorized ( self ) : \n self . view_test_manager . test_view_headers_unauthorized ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_read_model_headers_forbidden ( self ) : \n self . view_test_manager . test_view_headers_forbidden ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_read_model_path_parameters_not_found ( self ) : \n self . view_test_manager . test_view_path_parameters_not_found ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n )"}, {"input": "import unittest \n from typing import List \n from ninja_crud . testing . core . components import utils \n class TestUtils ( unittest . TestCase ) : \n def test_ensure_list_of_dicts_single_dict ( self ) : \n data = { \"<STR_LIT>\" : \"<STR_LIT>\" } \n result = utils . ensure_list_of_dicts ( data = data ) \n self . assertEqual ( result , [ data ] ) \n def test_ensure_list_of_dicts_list_of_dicts ( self ) : \n data = [ { \"<STR_LIT>\" : \"<STR_LIT>\" } ] \n result = utils . ensure_list_of_dicts ( data = data ) \n self . assertEqual ( result , data ) \n def test_ensure_list_of_dicts_empty_list ( self ) :", "output": "data : List [ dict ] = [ ] \n with self . assertRaises ( ValueError ) : \n utils . ensure_list_of_dicts ( data = data ) \n def test_ensure_list_of_dicts_not_list_or_dict ( self ) : \n data = <NUM_LIT> \n with self . assertRaises ( TypeError ) : \n utils . ensure_list_of_dicts ( data = data )"}, {"input": "from typing import List , Optional , Union \n from ninja_crud . testing . core . components import utils \n class Headers : \n def __init__ ( \n self , \n ok : Union [ dict , List [ dict ] ] , \n forbidden : Union [ dict , List [ dict ] , None ] = None , \n unauthorized : Union [ dict , List [ dict ] , None ] = None , \n ) -> None : \n self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) \n self . forbidden : Optional [ List [ dict ] ] = ( \n utils . ensure_list_of_dicts ( forbidden ) if forbidden is not None else None \n ) \n self . unauthorized : Optional [ List [ dict ] ] = ( \n utils . ensure_list_of_dicts ( unauthorized )", "output": "if unauthorized is not None \n else None \n )"}]