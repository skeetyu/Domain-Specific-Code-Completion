[{"input": "import uuid \n from ninja_crud . testing . core . components import ( \n Headers , \n PathParameters , \n Payloads , \n QueryParameters , \n ) \n from ninja_crud . testing . views import ( \n DeleteModelViewTest , \n ListModelViewTest , \n ReadModelViewTest , \n UpdateModelViewTest , \n ) \n from ninja_crud . testing . viewsets import ModelViewSetTestCase \n from tests . test_app . tests . base_test_case import BaseTestCase \n from tests . test_app . views . item_views import ItemViewSet \n class TestItemViewSet ( ModelViewSetTestCase , BaseTestCase ) : \n model_viewset_class = ItemViewSet \n base_path = \"<STR_LIT>\" \n def get_path_parameters ( self ) : \n return PathParameters ( ok = { \"<STR_LIT>\" : self . item_1 . id } , not_found = { \"<STR_LIT>\" : uuid . uuid4 ( ) } ) \n def get_headers_ok ( self ) : \n return Headers ( \n ok = { \"<STR_LIT>\" : f\"<STR_LIT>\" } , unauthorized = { } \n ) \n def get_headers_ok_forbidden ( self ) : \n return Headers ( \n ok = { \"<STR_LIT>\" : f\"<STR_LIT>\" } , \n unauthorized = { } ,", "output": "forbidden = { \"<STR_LIT>\" : f\"<STR_LIT>\" } , \n ) \n test_list_items = ListModelViewTest ( \n headers = get_headers_ok , \n query_parameters = lambda self : QueryParameters ( \n ok = [ { } , { \"<STR_LIT>\" : [ \"<STR_LIT>\" ] , \"<STR_LIT>\" : <NUM_LIT> } ] \n ) , \n ) \n test_read_item = ReadModelViewTest ( \n path_parameters = get_path_parameters , \n headers = get_headers_ok_forbidden , \n ) \n test_update_item = UpdateModelViewTest ( \n path_parameters = get_path_parameters , \n headers = get_headers_ok_forbidden , \n payloads = Payloads ( \n ok = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : \"<STR_LIT>\" } , \n ) , \n ) \n test_delete_item = DeleteModelViewTest ( \n path_parameters = get_path_parameters , headers = get_headers_ok_forbidden \n ) \n test_list_tags = ListModelViewTest ( \n path_parameters = lambda self : PathParameters ( ok = { \"<STR_LIT>\" : self . item_1 . id } ) , \n headers = get_headers_ok , \n )"}, {"input": "from unittest . mock import MagicMock \n from django . test import TestCase \n from ninja_crud import views , viewsets \n from tests . test_app . models import Item \n from tests . test_app . schemas import ItemIn , ItemOut \n class TestCreateModelView ( TestCase ) : \n def test_register_route_with_router_kwargs ( self ) : \n router_mock = MagicMock ( ) \n class ItemViewSet ( viewsets . ModelViewSet ) : \n model = Item \n create_item = views . CreateModelView ( \n request_body = ItemIn , \n response_body = ItemOut , \n router_kwargs = { \"<STR_LIT>\" : True } , \n )", "output": "ItemViewSet . create_item . register_route ( router_mock , \"<STR_LIT>\" ) \n router_mock . api_operation . assert_called_once ( ) \n self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ \"<STR_LIT>\" ] )"}, {"input": "from unittest . mock import MagicMock \n from django . test import TestCase \n from ninja_crud import views , viewsets \n from tests . test_app . models import Item \n class TestDeleteModelView ( TestCase ) : \n def test_register_route_router_kwargs ( self ) : \n router_mock = MagicMock ( ) \n class ItemViewSet ( viewsets . ModelViewSet ) :", "output": "model = Item \n delete_item = views . DeleteModelView ( router_kwargs = { \"<STR_LIT>\" : True } ) \n ItemViewSet . delete_item . register_route ( router_mock , \"<STR_LIT>\" ) \n router_mock . api_operation . assert_called_once ( ) \n self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ \"<STR_LIT>\" ] )"}, {"input": "import json \n from abc import ABC , abstractmethod \n from typing import TYPE_CHECKING , Type \n import django . http \n import django . utils . http \n from ninja_crud . views import AbstractModelView \n if TYPE_CHECKING : \n from ninja_crud . testing . viewsets import ModelViewSetTestCase \n class AbstractModelViewTest ( ABC ) : \n model_view : AbstractModelView \n model_viewset_test_case : \"<STR_LIT>\" \n def __init__ ( self , model_view_class : Type [ AbstractModelView ] ) -> None : \n self . model_view_class = model_view_class \n def simulate_request ( \n self , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) -> django . http . HttpResponse : \n base_path = self . model_viewset_test_case . base_path . strip ( \"<STR_LIT>\" ) \n endpoint_path = self . model_view . path . lstrip ( \"<STR_LIT>\" ) \n path = f\"<STR_LIT>\" \n return self . model_viewset_test_case . client_class ( ) . generic ( \n method = self . model_view . method . value , \n path = path . format ( ** path_parameters ) , \n QUERY_STRING = django . utils . http . urlencode ( query_parameters , doseq = True ) , \n data = json . dumps ( payload or None ) , \n content_type = \"<STR_LIT>\" , \n ** headers , \n ) \n @ abstractmethod \n def on_successful_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n pass \n @ abstractmethod \n def on_failed_request ( \n self , \n response : django . http . HttpResponse ,", "output": "path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n pass \n def bind_to_model_viewset_test_case ( \n self , model_viewset_test_case : \"<STR_LIT>\" \n ) -> None : \n self . model_viewset_test_case = model_viewset_test_case \n def bind_to_model_view ( self , model_view : AbstractModelView ) -> None : \n self . model_view = model_view"}, {"input": "import http \n from typing import Callable , Dict , List , Optional , Type \n from django . db . models import Model \n from django . http import HttpRequest \n from ninja import Schema \n from ninja_crud . views . abstract_model_view import AbstractModelView \n from ninja_crud . views . enums import HTTPMethod \n class ReadModelView ( AbstractModelView ) : \n def __init__ ( \n self , \n path : str = \"<STR_LIT>\" , \n path_parameters : Optional [ Type [ Schema ] ] = None , \n query_parameters : Optional [ Type [ Schema ] ] = None , \n response_body : Optional [ Type [ Schema ] ] = None , \n decorators : Optional [ List [ Callable ] ] = None , \n router_kwargs : Optional [ Dict ] = None , \n read_model : Optional [ \n Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] \n ] = None , \n ) -> None : \n super ( ) . __init__ ( \n method = HTTPMethod . GET , \n path = path ,", "output": "path_parameters = path_parameters , \n query_parameters = query_parameters , \n request_body = None , \n response_body = response_body , \n response_status = http . HTTPStatus . OK , \n decorators = decorators , \n router_kwargs = router_kwargs , \n ) \n self . read_model = read_model or self . _default_read_model \n def _default_read_model ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n ) -> Model : \n return self . model_viewset_class . model . objects . get ( \n ** ( path_parameters . dict ( ) if path_parameters else { } ) \n ) \n def handle_request ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> Model : \n return self . read_model ( request , path_parameters , query_parameters ) \n def _inherit_model_viewset_class_attributes ( self ) -> None : \n if self . response_body is None : \n self . response_body = self . model_viewset_class . default_response_body"}, {"input": "import abc \n import functools \n import http \n import logging \n from typing import Any , Callable , Dict , List , Optional , Tuple , Type , Union \n import django . http \n import ninja \n from ninja_crud . views . enums import HTTPMethod \n logger = logging . getLogger ( __name__ ) \n class AbstractView ( abc . ABC ) : \n def __init__ ( \n self , \n method : HTTPMethod , \n path : str , \n path_parameters : Optional [ Type [ ninja . Schema ] ] = None , \n query_parameters : Optional [ Type [ ninja . Schema ] ] = None , \n request_body : Optional [ Type [ ninja . Schema ] ] = None , \n response_body : Union [ Type [ ninja . Schema ] , Type [ List [ ninja . Schema ] ] , None ] = None , \n response_status : http . HTTPStatus = http . HTTPStatus . OK , \n decorators : Optional [ List [ Callable ] ] = None , \n router_kwargs : Optional [ Dict ] = None , \n ) -> None : \n self . method = method \n self . path = path \n self . path_parameters = path_parameters \n self . query_parameters = query_parameters \n self . request_body = request_body \n self . response_body = response_body \n self . response_status = response_status \n self . decorators = decorators or [ ] \n self . router_kwargs = router_kwargs or { } \n @ abc . abstractmethod \n def handle_request ( \n self , \n request : django . http . HttpRequest , \n path_parameters : Optional [ ninja . Schema ] , \n query_parameters : Optional [ ninja . Schema ] , \n request_body : Optional [ ninja . Schema ] , \n ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : \n pass \n def create_view_handler ( self ) -> Callable : \n path_parameters_schema_class = self . path_parameters \n query_parameters_schema_class = self . query_parameters \n request_body_schema_class = self . request_body \n def view_handler ( \n request : django . http . HttpRequest , \n path_parameters : path_parameters_schema_class = ninja . Path ( \n default = None , include_in_schema = False \n ) , \n query_parameters : query_parameters_schema_class = ninja . Query ( \n default = None , include_in_schema = False \n ) , \n request_body : request_body_schema_class = ninja . Body ( \n default = None , include_in_schema = False \n ) , \n ) : \n return self . handle_request ( \n request = request , \n path_parameters = path_parameters , \n query_parameters = query_parameters , \n request_body = request_body , \n ) \n return view_handler \n def register_route ( self , router : ninja . Router , route_name : str ) -> None : \n view = self . create_view_handler ( ) \n view . __name__ = route_name", "output": "self . _configure_view_routing ( router = router ) ( view ) \n def _configure_view_routing ( self , router : ninja . Router ) -> Callable : \n def route_decorator ( view : Callable ) : \n for decorator in reversed ( self . decorators ) : \n view = decorator ( view ) \n @ router . api_operation ( ** self . _get_router_kwargs ( view . __name__ ) ) \n @ functools . wraps ( view ) \n def wrapped_view ( request : django . http . HttpRequest , * args , ** kwargs ) : \n return view ( request , * args , ** kwargs ) \n return wrapped_view \n return route_decorator \n def _get_router_kwargs ( self , operation_id : str ) -> Dict [ str , Any ] : \n return { \n \"<STR_LIT>\" : [ self . method . value ] , \n \"<STR_LIT>\" : self . path , \n \"<STR_LIT>\" : { self . response_status . value : self . response_body } , \n \"<STR_LIT>\" : operation_id , \n ** self . _clean_router_kwargs ( self . router_kwargs ) , \n } \n @ staticmethod \n def _clean_router_kwargs ( router_kwargs : dict ) -> dict : \n locked_keys = [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] \n cleaned_kwargs = router_kwargs . copy ( ) \n for locked_key in locked_keys : \n if locked_key in cleaned_kwargs : \n logger . warning ( f\"<STR_LIT>\" ) \n cleaned_kwargs . pop ( locked_key ) \n return cleaned_kwargs"}, {"input": "from typing import Any , Optional \n from django . contrib . auth . models import User \n from django . http import HttpRequest \n from ninja . security import HttpBearer \n class TokenBearer ( HttpBearer ) : \n def authenticate ( self , request : HttpRequest , token : str ) -> Optional [ Any ] : \n user_queryset = User . objects . filter ( id = token )", "output": "if user_queryset . exists ( ) : \n return user_queryset . get ( ) \n return None"}, {"input": "import http \n from typing import Callable , Dict , List , Optional \n from django . db . models import Model \n from django . http import HttpRequest \n from ninja import Schema \n from ninja_crud . views . abstract_model_view import AbstractModelView \n from ninja_crud . views . enums import HTTPMethod \n class DeleteModelView ( AbstractModelView ) : \n def __init__ ( \n self , \n path : str = \"<STR_LIT>\" , \n path_parameters : Optional [ Schema ] = None , \n decorators : Optional [ List [ Callable ] ] = None , \n router_kwargs : Optional [ Dict ] = None , \n get_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , \n pre_delete : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , \n post_delete : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , \n delete_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , None ] ] = None , \n ) -> None : \n super ( ) . __init__ ( \n method = HTTPMethod . DELETE , \n path = path , \n path_parameters = path_parameters , \n query_parameters = None , \n request_body = None , \n response_body = None , \n response_status = http . HTTPStatus . NO_CONTENT , \n decorators = decorators , \n router_kwargs = router_kwargs , \n ) \n self . get_model = get_model or self . _default_get_model \n self . pre_delete = pre_delete or self . _default_pre_delete \n self . post_delete = post_delete or self . _default_post_delete \n self . delete_model = delete_model or self . _default_delete_model \n def _default_get_model ( \n self , request : HttpRequest , path_parameters : Optional [ Schema ] \n ) -> Model : \n return self . model_viewset_class . model . objects . get ( \n ** ( path_parameters . dict ( ) if path_parameters else { } ) \n ) \n @ staticmethod \n def _default_pre_delete ( request : HttpRequest , instance : Model ) -> None : \n pass \n @ staticmethod \n def _default_post_delete ( request : HttpRequest , instance : Model ) -> None : \n pass \n def _default_delete_model ( \n self , request : HttpRequest , path_parameters : Optional [ Schema ] \n ) -> None : \n instance = self . get_model ( request , path_parameters ) \n self . pre_delete ( request , instance ) \n instance . delete ( ) \n self . post_delete ( request , instance ) \n def handle_request ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> None :", "output": "self . delete_model ( request , path_parameters )"}, {"input": "from django . contrib . auth . models import Group , User \n from django . test import TestCase \n from tests . test_app . models import Collection , Item \n class BaseTestCase ( TestCase ) : \n user_1 : User \n user_2 : User \n collection_1 : Collection \n collection_2 : Collection \n item_1 : Item \n item_2 : Item \n @ classmethod \n def setUpTestData ( cls ) : \n super ( ) . setUpTestData ( ) \n cls . user_1 = User . objects . create ( \n username = \"<STR_LIT>\" , password = \"<STR_LIT>\" , email = \"<STR_LIT>\" \n ) \n cls . user_2 = User . objects . create ( \n username = \"<STR_LIT>\" , password = \"<STR_LIT>\" , email = \"<STR_LIT>\" \n ) \n cls . collection_1 = Collection . objects . create ( \n name = \"<STR_LIT>\" , created_by = cls . user_1 \n ) \n cls . collection_2 = Collection . objects . create (", "output": "name = \"<STR_LIT>\" , created_by = cls . user_2 \n ) \n cls . item_1 = Item . objects . create ( name = \"<STR_LIT>\" , collection = cls . collection_1 ) \n cls . item_2 = Item . objects . create ( name = \"<STR_LIT>\" , collection = cls . collection_2 ) \n cls . group_1 = Group . objects . create ( name = \"<STR_LIT>\" ) \n cls . group_2 = Group . objects . create ( name = \"<STR_LIT>\" )"}, {"input": "from typing import Dict , List , Union \n def ensure_list_of_dicts ( data : Union [ Dict , List [ Dict ] ] ) -> List [ Dict ] : \n if isinstance ( data , dict ) : \n return [ data ]", "output": "elif not isinstance ( data , list ) : \n raise TypeError ( \n f\"<STR_LIT>\" \n ) \n elif len ( data ) == <NUM_LIT> : \n raise ValueError ( \n \"<STR_LIT>\" \n ) \n return data"}, {"input": "import http \n import json \n from typing import Optional , Type , cast \n import django . http \n import django . test \n from ninja import Schema \n from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager \n from ninja_crud . testing . core . components import Headers , PathParameters , Payloads \n from ninja_crud . testing . views import AbstractModelViewTest \n from ninja_crud . views import CreateModelView \n class CreateModelViewTest ( AbstractModelViewTest ) : \n model_view : CreateModelView \n def __init__ ( \n self , \n payloads : ArgOrCallable [ Payloads , TestCaseType ] , \n path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , \n headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , \n ) -> None : \n super ( ) . __init__ ( model_view_class = CreateModelView ) \n self . view_test_manager = ViewTestManager ( \n simulate_request = self . simulate_request , \n path_parameters = path_parameters , \n headers = headers , \n payloads = payloads , \n ) \n def on_successful_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n actual_output = json . loads ( response . content ) \n expected_output = self . _get_expected_output ( \n response = response , \n path_parameters = path_parameters , \n ) \n self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) \n def _get_expected_output ( \n self , response : django . http . HttpResponse , path_parameters : dict \n ) -> dict : \n content = json . loads ( response . content ) \n path_parameters_schema = ( \n self . model_view . path_parameters ( ** path_parameters ) \n if self . model_view . path_parameters \n else None \n ) \n model_class = self . model_view . init_model ( \n getattr ( response , \"<STR_LIT>\" , None ) , \n path_parameters_schema , \n ) . __class__ \n model = model_class . objects . get ( id = content [ \"<STR_LIT>\" ] ) \n schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( model ) \n return json . loads ( schema . json ( ) ) \n def on_failed_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n pass \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_create_model_ok ( self ) : \n self . view_test_manager . test_view_ok ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_successful_request , \n status = http . HTTPStatus . CREATED , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_create_model_payloads_bad_request ( self ) : \n self . view_test_manager . test_view_payloads_bad_request ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_create_model_payloads_conflict ( self ) : \n self . view_test_manager . test_view_payloads_conflict ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_create_model_headers_unauthorized ( self ) : \n self . view_test_manager . test_view_headers_unauthorized ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_create_model_headers_forbidden ( self ) : \n self . view_test_manager . test_view_headers_forbidden ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_create_model_path_parameters_not_found ( self ) : \n self . view_test_manager . test_view_path_parameters_not_found ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request ,", "output": ")"}, {"input": "from http import HTTPStatus \n from django . core . exceptions import ( \n FieldError , \n ObjectDoesNotExist , \n PermissionDenied , \n ValidationError , \n ) \n from ninja import NinjaAPI \n from ninja . errors import ValidationError as NinjaValidationError \n from examples . views . department_views import router as department_router \n from examples . views . employee_views import router as employee_router \n from tests . test_app . views . collection_views import router as collection_router \n from tests . test_app . views . item_views import router as item_router \n from tests . test_app . views . user_views import router as user_router \n from tests . test_authentication import TokenBearer \n api = NinjaAPI ( urls_namespace = \"<STR_LIT>\" ) \n api . add_router ( \n \"<STR_LIT>\" , collection_router , auth = TokenBearer ( ) , tags = [ \"<STR_LIT>\" ] \n ) \n api . add_router ( \"<STR_LIT>\" , item_router , auth = TokenBearer ( ) , tags = [ \"<STR_LIT>\" ] ) \n api . add_router ( \"<STR_LIT>\" , user_router , tags = [ \"<STR_LIT>\" ] ) \n api . add_router ( \"<STR_LIT>\" , department_router , auth = None , tags = [ \"<STR_LIT>\" ] ) \n api . add_router ( \"<STR_LIT>\" , employee_router , auth = None , tags = [ \"<STR_LIT>\" ] ) \n @ api . exception_handler ( ObjectDoesNotExist ) \n def handle_object_does_not_exist ( request , exc ) : \n return api . create_response ( \n request , \n { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : str ( exc ) } , \n status = HTTPStatus . NOT_FOUND , \n ) \n @ api . exception_handler ( PermissionDenied ) \n def handle_permission_error ( request , exc : PermissionDenied ) : \n return api . create_response ( \n request , \n { \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n } , \n status = HTTPStatus . FORBIDDEN ,", "output": ") \n @ api . exception_handler ( NinjaValidationError ) \n def handle_ninja_validation_error ( request , exc : NinjaValidationError ) : \n mapped_msg = { error [ \"<STR_LIT>\" ] [ - <NUM_LIT> ] : error [ \"<STR_LIT>\" ] for error in exc . errors } \n return api . create_response ( \n request , \n data = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : mapped_msg } , \n status = HTTPStatus . BAD_REQUEST , \n ) \n @ api . exception_handler ( ValidationError ) \n def handle_validation_error ( request , exc : ValidationError ) : \n status = HTTPStatus . BAD_REQUEST \n for _ , errors in exc . error_dict . items ( ) : \n for error in errors : \n if error . code in [ \"<STR_LIT>\" , \"<STR_LIT>\" ] : \n status = HTTPStatus . CONFLICT \n return api . create_response ( \n request , \n data = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : exc . message_dict } , \n status = status , \n ) \n @ api . exception_handler ( FieldError ) \n def handle_field_error ( request , exc : FieldError ) : \n return api . create_response ( \n request , \n data = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : str ( exc ) } , \n status = HTTPStatus . BAD_REQUEST , \n )"}, {"input": "import inspect \n import logging \n from typing import List , Type \n import django . test \n from ninja_crud . testing . views import AbstractModelViewTest \n from ninja_crud . views import AbstractModelView \n from ninja_crud . viewsets import ModelViewSet \n logger = logging . getLogger ( __name__ ) \n class ModelViewSetTestCase ( django . test . TestCase ) : \n model_viewset_class : Type [ ModelViewSet ] \n base_path : str \n def __init_subclass__ ( cls , ** kwargs ) : \n super ( ) . __init_subclass__ ( ** kwargs ) \n if hasattr ( cls , \"<STR_LIT>\" ) : \n cls . _bind_test_model_views ( ) \n cls . _register_test_methods ( ) \n @ classmethod \n def _bind_test_model_views ( cls ) : \n associated_model_views = [ ] \n cls_instance = cls ( ) \n for attr_name , attr_value in inspect . getmembers ( cls ) : \n if attr_name . startswith ( \"<STR_LIT>\" ) and isinstance ( \n attr_value , AbstractModelViewTest \n ) : \n test_model_view_name , test_model_view = attr_name , attr_value \n test_model_view . bind_to_model_viewset_test_case ( \n model_viewset_test_case = cls_instance \n ) \n associated_model_view = cls . _get_associated_model_view ( \n test_attr_name = test_model_view_name , \n model_view_class = test_model_view . model_view_class , \n ) \n test_model_view . bind_to_model_view ( model_view = associated_model_view ) \n associated_model_views . append ( associated_model_view ) \n cls . _check_all_model_views_associated ( \n associated_model_views = associated_model_views", "output": ") \n @ classmethod \n def _register_test_methods ( cls ) : \n for attr_name , attr_value in inspect . getmembers ( cls ) : \n if attr_name . startswith ( \"<STR_LIT>\" ) and isinstance ( \n attr_value , AbstractModelViewTest \n ) : \n for method_name , method in inspect . getmembers ( \n attr_value , predicate = inspect . ismethod \n ) : \n if method_name . startswith ( \"<STR_LIT>\" ) : \n new_test_method_name = f\"<STR_LIT>\" \n setattr ( cls , new_test_method_name , method ) \n @ classmethod \n def _get_associated_model_view ( \n cls , test_attr_name : str , model_view_class : Type [ AbstractModelView ] \n ) -> AbstractModelView : \n for attr_name , attr_value in inspect . getmembers ( cls . model_viewset_class ) : \n if ( \n isinstance ( attr_value , model_view_class ) \n and test_attr_name == f\"<STR_LIT>\" \n ) : \n return attr_value \n raise ValueError ( \n f\"<STR_LIT>\" \n ) \n @ classmethod \n def _check_all_model_views_associated ( \n cls , associated_model_views : List [ AbstractModelView ] \n ) -> None : \n for attr_name , attr_value in inspect . getmembers ( cls . model_viewset_class ) : \n if ( \n isinstance ( attr_value , AbstractModelView ) \n and attr_value not in associated_model_views \n ) : \n logger . warning ( \n f\"<STR_LIT>\" \n )"}, {"input": "from ninja import Router \n from examples . models import Employee \n from examples . schemas import EmployeeIn , EmployeeOut \n from ninja_crud import views , viewsets \n router = Router ( ) \n class EmployeeViewSet ( viewsets . ModelViewSet ) : \n model = Employee \n read_employee = views . ReadModelView ( response_body = EmployeeOut ) \n update_employee = views . UpdateModelView (", "output": "request_body = EmployeeIn , response_body = EmployeeOut \n ) \n delete_employee = views . DeleteModelView ( ) \n EmployeeViewSet . register_routes ( router )"}, {"input": "import uuid \n from django . conf import settings \n from django . db import models \n class Collection ( models . Model ) : \n id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) \n name = models . CharField ( max_length = <NUM_LIT> , unique = True ) \n description = models . TextField ( null = True , blank = True ) \n created_by = models . ForeignKey ( settings . AUTH_USER_MODEL , on_delete = models . CASCADE ) \n created_at = models . DateTimeField ( auto_now_add = True ) \n updated_at = models . DateTimeField ( auto_now = True ) \n class Item ( models . Model ) :", "output": "id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) \n name = models . CharField ( max_length = <NUM_LIT> , unique = True ) \n description = models . TextField ( null = True , blank = True ) \n collection = models . ForeignKey ( Collection , on_delete = models . CASCADE ) \n class Meta : \n constraints = [ \n models . UniqueConstraint ( \n fields = [ \"<STR_LIT>\" , \"<STR_LIT>\" ] , \n name = \"<STR_LIT>\" , \n ) , \n ] \n class Tag ( models . Model ) : \n id = models . UUIDField ( primary_key = True , default = uuid . uuid4 , editable = False ) \n name = models . CharField ( max_length = <NUM_LIT> , unique = True ) \n description = models . TextField ( null = True , blank = True ) \n items = models . ManyToManyField ( Item , related_name = \"<STR_LIT>\" )"}, {"input": "from typing import List \n from ninja import Router \n from examples . models import Department , Employee \n from examples . schemas import DepartmentIn , DepartmentOut , EmployeeIn , EmployeeOut \n from ninja_crud import views , viewsets \n router = Router ( ) \n class DepartmentViewSet ( viewsets . ModelViewSet ) : \n model = Department \n default_request_body = DepartmentIn \n default_response_body = DepartmentOut \n list_departments = views . ListModelView ( response_body = List [ DepartmentOut ] ) \n create_department = views . CreateModelView ( ) \n read_department = views . ReadModelView ( ) \n update_department = views . UpdateModelView ( ) \n delete_department = views . DeleteModelView ( ) \n list_employees = views . ListModelView ( \n path = \"<STR_LIT>\" ,", "output": "get_queryset = lambda request , path_parameters : Employee . objects . filter ( \n department_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) \n ) , \n response_body = List [ EmployeeOut ] , \n ) \n create_employee = views . CreateModelView ( \n path = \"<STR_LIT>\" , \n request_body = EmployeeIn , \n response_body = EmployeeOut , \n init_model = lambda request , path_parameters : Employee ( \n department_id = getattr ( path_parameters , \"<STR_LIT>\" , None ) \n ) , \n ) \n DepartmentViewSet . register_routes ( router )"}, {"input": "import http \n from typing import Callable , Dict , List , Optional , Type \n from django . db . models import ManyToManyField , Model \n from django . http import HttpRequest \n from ninja import Schema \n from ninja_crud . views . abstract_model_view import AbstractModelView \n from ninja_crud . views . enums import HTTPMethod \n class CreateModelView ( AbstractModelView ) : \n def __init__ ( \n self , \n path : str = \"<STR_LIT>\" , \n path_parameters : Optional [ Schema ] = None , \n request_body : Optional [ Type [ Schema ] ] = None , \n response_body : Optional [ Type [ Schema ] ] = None , \n decorators : Optional [ List [ Callable ] ] = None , \n router_kwargs : Optional [ Dict ] = None , \n init_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , \n pre_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , \n post_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , \n create_model : Optional [ \n Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] \n ] = None , \n ) -> None : \n super ( ) . __init__ ( \n method = HTTPMethod . POST , \n path = path , \n path_parameters = path_parameters , \n query_parameters = None ,", "output": "request_body = request_body , \n response_body = response_body , \n response_status = http . HTTPStatus . CREATED , \n decorators = decorators , \n router_kwargs = router_kwargs , \n ) \n self . init_model = init_model or self . _default_init_model \n self . pre_save = pre_save or self . _default_pre_save \n self . post_save = post_save or self . _default_post_save \n self . create_model = create_model or self . _default_create_model \n def _default_init_model ( \n self , request : HttpRequest , path_parameters : Optional [ Schema ] \n ) -> Model : \n return self . model_viewset_class . model ( ) \n @ staticmethod \n def _default_pre_save ( request : HttpRequest , instance : Model ) -> None : \n instance . full_clean ( ) \n @ staticmethod \n def _default_post_save ( request : HttpRequest , instance : Model ) -> None : \n pass \n def _default_create_model ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> Model : \n instance = self . init_model ( request , path_parameters ) \n m2m_fields_to_set = [ ] \n if request_body : \n for field , value in request_body . dict ( ) . items ( ) : \n if isinstance ( instance . _meta . get_field ( field ) , ManyToManyField ) : \n m2m_fields_to_set . append ( ( field , value ) ) \n else : \n setattr ( instance , field , value ) \n self . pre_save ( request , instance ) \n instance . save ( ) \n self . post_save ( request , instance ) \n for field , value in m2m_fields_to_set : \n getattr ( instance , field ) . set ( value ) \n return instance \n def handle_request ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> Model : \n return self . create_model ( request , path_parameters , request_body ) \n def _inherit_model_viewset_class_attributes ( self ) -> None : \n if self . request_body is None : \n self . request_body = self . model_viewset_class . default_request_body \n if self . response_body is None : \n self . response_body = self . model_viewset_class . default_response_body"}, {"input": "from ninja_crud . testing . core . components import PathParameters , Payloads \n from ninja_crud . testing . views import ( \n CreateModelViewTest , \n DeleteModelViewTest , \n ListModelViewTest , \n ReadModelViewTest , \n UpdateModelViewTest , \n ) \n from ninja_crud . testing . viewsets import ModelViewSetTestCase \n from tests . test_app . tests . base_test_case import BaseTestCase \n from tests . test_app . views . user_views import UserViewSet \n class TestUserViewSet ( ModelViewSetTestCase , BaseTestCase ) : \n model_viewset_class = UserViewSet \n base_path = \"<STR_LIT>\" \n def get_path_parameters ( self ) : \n return PathParameters ( ok = { \"<STR_LIT>\" : self . user_1 . id } ) \n def get_user_payloads ( self ) : \n return Payloads (", "output": "ok = { \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : [ self . group_1 . id , self . group_2 . id ] , \n } , \n bad_request = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : \"<STR_LIT>\" } , \n conflict = { \n \"<STR_LIT>\" : self . user_2 . username , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n } , \n ) \n test_list_users = ListModelViewTest ( ) \n test_create_user = CreateModelViewTest ( payloads = get_user_payloads ) \n test_read_user = ReadModelViewTest ( path_parameters = get_path_parameters ) \n test_update_user = UpdateModelViewTest ( \n path_parameters = get_path_parameters , payloads = get_user_payloads \n ) \n test_delete_user = DeleteModelViewTest ( path_parameters = get_path_parameters )"}, {"input": "from typing import List , Optional , Union \n from ninja_crud . testing . core . components import utils \n class QueryParameters : \n def __init__ ( \n self , \n ok : Union [ dict , List [ dict ] ] , \n bad_request : Union [ dict , List [ dict ] , None ] = None , \n ) -> None : \n self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) \n self . bad_request : Optional [ List [ dict ] ] = (", "output": "utils . ensure_list_of_dicts ( bad_request ) if bad_request is not None else None \n )"}, {"input": "import http \n from typing import Callable , Dict , List , Optional , Type \n from django . db . models import QuerySet \n from django . http import HttpRequest \n from ninja import FilterSchema , Schema \n from ninja . pagination import LimitOffsetPagination , PaginationBase , paginate \n from ninja_crud . views . abstract_model_view import AbstractModelView \n from ninja_crud . views . enums import HTTPMethod \n class ListModelView ( AbstractModelView ) : \n def __init__ ( \n self , \n path : str = \"<STR_LIT>\" , \n path_parameters : Optional [ Type [ Schema ] ] = None , \n query_parameters : Optional [ Type [ Schema ] ] = None , \n response_body : Optional [ Type [ List [ Schema ] ] ] = None , \n decorators : Optional [ List [ Callable ] ] = None , \n router_kwargs : Optional [ Dict ] = None , \n get_queryset : Optional [ \n Callable [ [ HttpRequest , Optional [ Schema ] ] , QuerySet ] \n ] = None , \n filter_queryset : Optional [ \n Callable [ [ QuerySet , Optional [ Schema ] ] , QuerySet ] \n ] = None , \n list_models : Optional [ \n Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , QuerySet ] \n ] = None , \n pagination_class : Optional [ Type [ PaginationBase ] ] = LimitOffsetPagination , \n ) -> None : \n super ( ) . __init__ ( \n method = HTTPMethod . GET , \n path = path , \n path_parameters = path_parameters ,", "output": "query_parameters = query_parameters , \n request_body = None , \n response_body = response_body , \n response_status = http . HTTPStatus . OK , \n decorators = decorators , \n router_kwargs = router_kwargs , \n ) \n self . get_queryset = get_queryset or self . _default_get_queryset \n self . filter_queryset = filter_queryset or self . _default_filter_queryset \n self . list_models = list_models or self . _default_list_models \n self . pagination_class = pagination_class \n if self . pagination_class : \n self . decorators . append ( paginate ( self . pagination_class ) ) \n def _default_get_queryset ( \n self , request : HttpRequest , path_parameters : Optional [ Schema ] \n ) -> QuerySet : \n return self . model_viewset_class . model . objects . get_queryset ( ) \n @ staticmethod \n def _default_filter_queryset ( \n queryset : QuerySet , \n query_parameters : Optional [ Schema ] , \n ) -> QuerySet : \n if query_parameters : \n if isinstance ( query_parameters , FilterSchema ) : \n queryset = query_parameters . filter ( queryset ) \n else : \n queryset = queryset . filter ( ** query_parameters . dict ( exclude_unset = True ) ) \n return queryset \n def _default_list_models ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n ) -> QuerySet : \n queryset = self . get_queryset ( request , path_parameters ) \n return self . filter_queryset ( queryset , query_parameters ) \n def handle_request ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> QuerySet : \n return self . list_models ( request , path_parameters , query_parameters ) \n def _inherit_model_viewset_class_attributes ( self ) -> None : \n if self . response_body is None : \n default_response_body = self . model_viewset_class . default_response_body \n self . response_body = List [ default_response_body ]"}, {"input": "from typing import List \n from unittest . mock import MagicMock \n from django . test import TestCase \n from ninja_crud import views , viewsets \n from tests . test_app . models import Item \n from tests . test_app . schemas import ItemOut \n class TestListModelView ( TestCase ) : \n def test_register_route_with_router_kwargs ( self ) : \n router_mock = MagicMock ( ) \n class ItemViewSet ( viewsets . ModelViewSet ) : \n model = Item \n list_items = views . ListModelView ( \n response_body = List [ ItemOut ] , \n router_kwargs = { \"<STR_LIT>\" : True } , \n ) \n ItemViewSet . list_items . register_route ( router_mock , \"<STR_LIT>\" )", "output": "router_mock . api_operation . assert_called_once ( ) \n self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ \"<STR_LIT>\" ] ) \n def test_bind_to_viewset_without_response_body_error ( self ) : \n model_view = views . ListModelView ( ) \n class ItemModelViewSet ( viewsets . ModelViewSet ) : \n model = Item \n with self . assertRaises ( AttributeError ) : \n model_view . model_viewset_class = ItemModelViewSet"}, {"input": "import uuid \n from examples . models import Department , Employee \n from examples . views . department_views import DepartmentViewSet \n from ninja_crud import testing \n class TestDepartmentViewSet ( testing . viewsets . ModelViewSetTestCase ) : \n model_viewset_class = DepartmentViewSet \n base_path = \"<STR_LIT>\"", "output": "department_1 : Department \n department_2 : Department \n employee : Employee \n @ classmethod \n def setUpTestData ( cls ) : \n cls . department_1 = Department . objects . create ( title = \"<STR_LIT>\" ) \n cls . department_2 = Department . objects . create ( title = \"<STR_LIT>\" ) \n cls . employee = Employee . objects . create ( \n first_name = \"<STR_LIT>\" , last_name = \"<STR_LIT>\" , department = cls . department_1 \n ) \n @ property \n def path_parameters ( self ) : \n return testing . components . PathParameters ( \n ok = { \"<STR_LIT>\" : self . department_1 . id } , not_found = { \"<STR_LIT>\" : uuid . uuid4 ( ) } \n ) \n department_payloads = testing . components . Payloads ( \n ok = { \"<STR_LIT>\" : \"<STR_LIT>\" } , \n bad_request = { \"<STR_LIT>\" : <NUM_LIT> } , \n conflict = { \"<STR_LIT>\" : \"<STR_LIT>\" } , \n ) \n test_list_departments = testing . views . ListModelViewTest ( ) \n test_create_department = testing . views . CreateModelViewTest ( \n payloads = department_payloads \n ) \n test_read_department = testing . views . ReadModelViewTest ( path_parameters ) \n test_update_department = testing . views . UpdateModelViewTest ( \n path_parameters , payloads = department_payloads \n ) \n test_delete_department = testing . views . DeleteModelViewTest ( path_parameters ) \n @ property \n def employees_path_parameters ( self ) : \n return testing . components . PathParameters ( ok = { \"<STR_LIT>\" : self . department_1 . id } ) \n employee_payloads = testing . components . Payloads ( \n ok = { \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n } , \n bad_request = { \"<STR_LIT>\" : <NUM_LIT> } , \n ) \n test_list_employees = testing . views . ListModelViewTest ( \n path_parameters = employees_path_parameters \n ) \n test_create_employee = testing . views . CreateModelViewTest ( \n path_parameters = employees_path_parameters , payloads = employee_payloads \n )"}, {"input": "import http \n import json \n import logging \n from typing import Optional , get_args \n import django . db . models \n import django . http \n import django . test \n import ninja . pagination \n from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager \n from ninja_crud . testing . core . components import Headers , PathParameters , QueryParameters \n from ninja_crud . testing . views import AbstractModelViewTest \n from ninja_crud . views import ListModelView \n logger = logging . getLogger ( __name__ ) \n class ListModelViewTest ( AbstractModelViewTest ) : \n model_view : ListModelView \n def __init__ ( \n self , \n path_parameters : Optional [ ArgOrCallable [ PathParameters , TestCaseType ] ] = None , \n query_parameters : Optional [ ArgOrCallable [ QueryParameters , TestCaseType ] ] = None , \n headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , \n ) -> None : \n super ( ) . __init__ ( model_view_class = ListModelView ) \n self . view_test_manager = ViewTestManager ( \n simulate_request = self . simulate_request , \n path_parameters = path_parameters , \n query_parameters = query_parameters , \n headers = headers , \n )", "output": "def on_successful_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n content = json . loads ( response . content ) \n queryset = self . _get_queryset ( \n response = response , \n path_parameters = path_parameters , \n query_parameters = query_parameters , \n ) \n if self . model_view . pagination_class is None : \n self . model_viewset_test_case . assertIsInstance ( content , list ) \n self . model_viewset_test_case . assertEqual ( len ( content ) , queryset . count ( ) ) \n self . _validate_response_items ( items = content , queryset = queryset ) \n elif self . model_view . pagination_class == ninja . pagination . LimitOffsetPagination : \n self . model_viewset_test_case . assertIsInstance ( content , dict ) \n self . model_viewset_test_case . assertIn ( \"<STR_LIT>\" , content ) \n self . model_viewset_test_case . assertIsInstance ( content [ \"<STR_LIT>\" ] , int ) \n self . model_viewset_test_case . assertEqual ( \n content [ \"<STR_LIT>\" ] , \n queryset . count ( ) , \n ) \n limit = query_parameters . get ( \"<STR_LIT>\" , <NUM_LIT> ) \n offset = query_parameters . get ( \"<STR_LIT>\" , <NUM_LIT> ) \n self . model_viewset_test_case . assertIn ( \"<STR_LIT>\" , content ) \n self . model_viewset_test_case . assertIsInstance ( content [ \"<STR_LIT>\" ] , list ) \n self . model_viewset_test_case . assertEqual ( \n len ( content [ \"<STR_LIT>\" ] ) , \n queryset [ offset : offset + limit ] . count ( ) , \n ) \n self . _validate_response_items ( items = content [ \"<STR_LIT>\" ] , queryset = queryset ) \n else : \n logger . warning ( \n f\"<STR_LIT>\" \n ) \n def _get_queryset ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n ) -> django . db . models . QuerySet : \n path_parameters_schema = ( \n self . model_view . path_parameters ( ** path_parameters ) \n if self . model_view . path_parameters \n else None \n ) \n query_parameters_schema = ( \n self . model_view . query_parameters ( ** query_parameters ) \n if self . model_view . query_parameters \n else None \n ) \n return self . model_view . list_models ( \n getattr ( response , \"<STR_LIT>\" , None ) , \n path_parameters_schema , \n query_parameters_schema , \n ) \n def _validate_response_items ( \n self , items : list , queryset : django . db . models . QuerySet \n ) : \n for item in items : \n self . model_viewset_test_case . assertIsInstance ( item , dict ) \n model = queryset . get ( id = item [ \"<STR_LIT>\" ] ) \n response_body_class = get_args ( self . model_view . response_body ) [ <NUM_LIT> ] \n response_body = response_body_class . from_orm ( model ) \n self . model_viewset_test_case . assertDictEqual ( \n item , json . loads ( response_body . json ( ) ) \n ) \n def on_failed_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n pass \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_list_models_ok ( self ) : \n self . view_test_manager . test_view_ok ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_successful_request , \n status = http . HTTPStatus . OK , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_list_models_query_parameters_bad_request ( self ) : \n self . view_test_manager . test_view_query_parameters_bad_request ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_list_models_headers_unauthorized ( self ) : \n self . view_test_manager . test_view_headers_unauthorized ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_list_models_headers_forbidden ( self ) : \n self . view_test_manager . test_view_headers_forbidden ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_list_models_path_parameters_not_found ( self ) : \n self . view_test_manager . test_view_path_parameters_not_found ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n )"}, {"input": "import http \n from typing import Optional \n import django . http \n import django . test \n from django . core . exceptions import ObjectDoesNotExist \n from ninja import Schema \n from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager \n from ninja_crud . testing . core . components import Headers , PathParameters \n from ninja_crud . testing . views import AbstractModelViewTest \n from ninja_crud . views import DeleteModelView \n class DeleteModelViewTest ( AbstractModelViewTest ) : \n model_view : DeleteModelView \n def __init__ ( \n self , \n path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , \n headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , \n ) -> None : \n super ( ) . __init__ ( model_view_class = DeleteModelView ) \n self . view_test_manager = ViewTestManager ( \n simulate_request = self . simulate_request , \n path_parameters = path_parameters , \n headers = headers , \n ) \n def on_successful_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict ,", "output": "query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n self . model_viewset_test_case . assertEqual ( response . content , b\"<STR_LIT>\" ) \n path_parameters_schema : Optional [ Schema ] = ( \n self . model_view . path_parameters ( ** path_parameters ) \n if self . model_view . path_parameters \n else None \n ) \n with self . model_viewset_test_case . assertRaises ( ObjectDoesNotExist ) : \n self . model_view . get_model ( \n getattr ( response , \"<STR_LIT>\" , None ) , \n path_parameters_schema , \n ) \n def on_failed_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) : \n pass \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_delete_model_ok ( self ) : \n self . view_test_manager . test_view_ok ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_successful_request , \n status = http . HTTPStatus . NO_CONTENT , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_delete_model_headers_unauthorized ( self ) : \n self . view_test_manager . test_view_headers_unauthorized ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_delete_model_headers_forbidden ( self ) : \n self . view_test_manager . test_view_headers_forbidden ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_delete_model_path_parameters_not_found ( self ) : \n self . view_test_manager . test_view_path_parameters_not_found ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n )"}, {"input": "from datetime import date \n from typing import Optional \n from uuid import UUID \n from ninja import Schema \n class DepartmentIn ( Schema ) : \n title : str \n class DepartmentOut ( Schema ) : \n id : UUID", "output": "title : str \n class EmployeeIn ( Schema ) : \n first_name : str \n last_name : str \n birthdate : Optional [ date ] = None \n class EmployeeOut ( Schema ) : \n id : UUID \n first_name : str \n last_name : str \n birthdate : Optional [ date ] = None \n department_id : UUID"}, {"input": "from unittest . mock import MagicMock \n from django . test import TestCase \n from ninja_crud import views , viewsets \n from ninja_crud . viewsets import ModelViewSet \n from tests . test_app . models import Item \n from tests . test_app . schemas import ItemOut \n class TestReadModelView ( TestCase ) : \n def test_register_route_router_kwargs ( self ) : \n router_mock = MagicMock ( ) \n class ItemViewSet ( viewsets . ModelViewSet ) : \n model = Item", "output": "read_item = views . ReadModelView ( \n response_body = ItemOut , \n router_kwargs = { \"<STR_LIT>\" : True } , \n ) \n ItemViewSet . read_item . register_route ( router_mock , \"<STR_LIT>\" ) \n router_mock . api_operation . assert_called_once ( ) \n self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ \"<STR_LIT>\" ] ) \n def test_bind_to_viewset_with_response_body ( self ) : \n model_view = views . ReadModelView ( response_body = ItemOut ) \n class ItemModelViewSet ( ModelViewSet ) : \n model = Item \n default_request_body = None \n default_response_body = None \n model_view . model_viewset_class = ItemModelViewSet \n def test_bind_to_viewset_without_response_body ( self ) : \n model_view = views . ReadModelView ( ) \n class ItemModelViewSet ( ModelViewSet ) : \n model = Item \n default_request_body = None \n default_response_body = ItemOut \n model_view . model_viewset_class = ItemModelViewSet \n def test_bind_to_viewset_without_response_body_error ( self ) : \n model_view = views . ReadModelView ( ) \n class ItemModelViewSet ( ModelViewSet ) : \n model = Item \n with self . assertRaises ( AttributeError ) : \n model_view . model_viewset_class = ItemModelViewSet"}, {"input": "import uuid \n from examples . models import Department , Employee \n from examples . views . employee_views import EmployeeViewSet \n from ninja_crud . testing . core . components import PathParameters , Payloads \n from ninja_crud . testing . views import ( \n DeleteModelViewTest , \n ReadModelViewTest , \n UpdateModelViewTest , \n ) \n from ninja_crud . testing . viewsets import ModelViewSetTestCase \n class TestEmployeeViewSet ( ModelViewSetTestCase ) : \n model_viewset_class = EmployeeViewSet \n base_path = \"<STR_LIT>\" \n department_1 : Department \n department_2 : Department \n employee : Employee", "output": "@ classmethod \n def setUpTestData ( cls ) : \n cls . department_1 = Department . objects . create ( title = \"<STR_LIT>\" ) \n cls . department_2 = Department . objects . create ( title = \"<STR_LIT>\" ) \n cls . employee = Employee . objects . create ( \n first_name = \"<STR_LIT>\" , last_name = \"<STR_LIT>\" , department = cls . department_1 \n ) \n def get_path_parameters ( self ) : \n return PathParameters ( \n ok = { \"<STR_LIT>\" : self . employee . id } , not_found = { \"<STR_LIT>\" : uuid . uuid4 ( ) } \n ) \n employee_payloads = Payloads ( \n ok = { \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n \"<STR_LIT>\" : \"<STR_LIT>\" , \n } , \n bad_request = { \"<STR_LIT>\" : <NUM_LIT> } , \n ) \n test_read_employee = ReadModelViewTest ( path_parameters = get_path_parameters ) \n test_update_employee = UpdateModelViewTest ( \n path_parameters = get_path_parameters , payloads = employee_payloads \n ) \n test_delete_employee = DeleteModelViewTest ( path_parameters = get_path_parameters )"}, {"input": "from . abstract_model_view_test import AbstractModelViewTest \n from . create_model_view_test import CreateModelViewTest \n from . delete_model_view_test import DeleteModelViewTest \n from . list_model_view_test import ListModelViewTest \n from . read_model_view_test import ReadModelViewTest \n from . update_model_view_test import UpdateModelViewTest \n __all__ = [ \n \"<STR_LIT>\" , \n \"<STR_LIT>\" ,", "output": "\"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n ]"}, {"input": "import http \n from typing import Callable , Dict , List , Optional , Type \n from django . db . models import ManyToManyField , Model \n from django . http import HttpRequest \n from ninja import Schema \n from ninja_crud . views . abstract_model_view import AbstractModelView \n from ninja_crud . views . enums import HTTPMethod \n class UpdateModelView ( AbstractModelView ) : \n def __init__ ( \n self , \n method : HTTPMethod = HTTPMethod . PUT , \n path : str = \"<STR_LIT>\" , \n path_parameters : Optional [ Schema ] = None , \n request_body : Optional [ Type [ Schema ] ] = None , \n response_body : Optional [ Type [ Schema ] ] = None , \n decorators : Optional [ List [ Callable ] ] = None , \n router_kwargs : Optional [ Dict ] = None , \n get_model : Optional [ Callable [ [ HttpRequest , Optional [ Schema ] ] , Model ] ] = None , \n pre_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , \n post_save : Optional [ Callable [ [ HttpRequest , Model ] , None ] ] = None , \n update_model : Optional [ \n Callable [ [ HttpRequest , Optional [ Schema ] , Optional [ Schema ] ] , Model ] \n ] = None , \n ) -> None : \n super ( ) . __init__ ( \n method = method , \n path = path , \n path_parameters = path_parameters , \n query_parameters = None , \n request_body = request_body , \n response_body = response_body , \n response_status = http . HTTPStatus . OK , \n decorators = decorators , \n router_kwargs = router_kwargs , \n ) \n self . get_model = get_model or self . _default_get_model", "output": "self . pre_save = pre_save or self . _default_pre_save \n self . post_save = post_save or self . _default_post_save \n self . update_model = update_model or self . _default_update_model \n def _default_get_model ( \n self , request : HttpRequest , path_parameters : Optional [ Schema ] \n ) -> Model : \n return self . model_viewset_class . model . objects . get ( \n ** ( path_parameters . dict ( ) if path_parameters else { } ) \n ) \n @ staticmethod \n def _default_pre_save ( request : HttpRequest , instance : Model ) -> None : \n instance . full_clean ( ) \n @ staticmethod \n def _default_post_save ( request : HttpRequest , instance : Model ) -> None : \n pass \n def _default_update_model ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> Model : \n instance = self . get_model ( request , path_parameters ) \n if request_body : \n for field , value in request_body . dict ( exclude_unset = True ) . items ( ) : \n if isinstance ( instance . _meta . get_field ( field ) , ManyToManyField ) : \n getattr ( instance , field ) . set ( value ) \n else : \n setattr ( instance , field , value ) \n self . pre_save ( request , instance ) \n instance . save ( ) \n self . post_save ( request , instance ) \n return instance \n def handle_request ( \n self , \n request : HttpRequest , \n path_parameters : Optional [ Schema ] , \n query_parameters : Optional [ Schema ] , \n request_body : Optional [ Schema ] , \n ) -> Model : \n return self . update_model ( request , path_parameters , request_body ) \n def _inherit_model_viewset_class_attributes ( self ) -> None : \n if self . request_body is None : \n self . request_body = self . model_viewset_class . default_request_body \n if self . response_body is None : \n self . response_body = self . model_viewset_class . default_response_body"}, {"input": "import logging \n import os \n import subprocess \n import yaml \n GLOBAL_CONFIG_PATH = \"<STR_LIT>\" \n PYDOC_MARKDOWN_CONFIG_PATH = \"<STR_LIT>\" \n def load_yaml_file ( file_path : str ) : \n with open ( file_path ) as yaml_file : \n return yaml . load ( yaml_file , Loader = yaml . FullLoader ) \n def convert_docstrings_to_markdown ( \n input_path : str , output_path : str , markdown_config : dict \n ) : \n try : \n os . makedirs ( os . path . dirname ( output_path ) , exist_ok = True ) \n markdown_config [ \"<STR_LIT>\" ] [ \"<STR_LIT>\" ] = output_path \n absolute_input_path = os . path . join ( os . getcwd ( ) , input_path ) \n subprocess . run ( \n [ \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n absolute_input_path , \n yaml . dump ( markdown_config ) , \n ] \n ) \n except Exception as e : \n logging . error ( f\"<STR_LIT>\" ) \n def main ( ) : \n global_config = load_yaml_file ( GLOBAL_CONFIG_PATH ) \n pydoc_markdown_config = load_yaml_file ( PYDOC_MARKDOWN_CONFIG_PATH ) \n settings = global_config [ \"<STR_LIT>\" ] \n for module in global_config [ \"<STR_LIT>\" ] : \n input_path = os . path . join ( settings [ \"<STR_LIT>\" ] , module [ \"<STR_LIT>\" ] ) \n output_path = os . path . join ( settings [ \"<STR_LIT>\" ] , module [ \"<STR_LIT>\" ] ) \n convert_docstrings_to_markdown ( \n input_path = input_path ,", "output": "output_path = output_path , \n markdown_config = pydoc_markdown_config , \n ) \n if __name__ == \"<STR_LIT>\" : \n logging . basicConfig ( level = logging . INFO ) \n main ( )"}, {"input": "import logging \n import frontmatter \n import yaml \n READMEIO_CONFIG_PATH = \"<STR_LIT>\" \n def load_yaml_file ( file_path : str ) : \n with open ( file_path ) as yaml_file : \n return yaml . load ( yaml_file , Loader = yaml . FullLoader )", "output": "def apply_metadata_to_markdown ( markdown_file_path : str , metadata : dict ) : \n try : \n post = frontmatter . load ( markdown_file_path ) \n post . metadata = metadata \n frontmatter . dump ( post , markdown_file_path ) \n except FileNotFoundError : \n logging . error ( f\"<STR_LIT>\" ) \n except Exception as e : \n logging . error ( f\"<STR_LIT>\" ) \n raise e \n def main ( ) : \n readmeio_config = load_yaml_file ( READMEIO_CONFIG_PATH ) \n for doc in readmeio_config [ \"<STR_LIT>\" ] : \n markdown_file_path = doc . pop ( \"<STR_LIT>\" ) \n apply_metadata_to_markdown ( markdown_file_path = markdown_file_path , metadata = doc ) \n if __name__ == \"<STR_LIT>\" : \n logging . basicConfig ( level = logging . INFO ) \n main ( )"}, {"input": "from . abstract_model_view import AbstractModelView \n from . abstract_view import AbstractView \n from . create_model_view import CreateModelView \n from . delete_model_view import DeleteModelView \n from . list_model_view import ListModelView \n from . read_model_view import ReadModelView \n from . update_model_view import UpdateModelView \n __all__ = [ \n \"<STR_LIT>\" ,", "output": "\"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n ]"}, {"input": "import http \n import uuid \n from typing import Any , Optional , Tuple , Union \n import django . core . exceptions \n import django . http \n import django . test \n import ninja \n from ninja_crud import views \n from tests . test_app . models import Item \n class TestAbstractModelView ( django . test . TestCase ) : \n def test_property_model_viewset_class ( self ) : \n class ModelView ( views . AbstractModelView ) : \n def handle_request ( \n self , \n request : django . http . HttpRequest , \n path_parameters : Optional [ ninja . Schema ] , \n query_parameters : Optional [ ninja . Schema ] , \n request_body : Optional [ ninja . Schema ] , \n ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : \n pass \n class ItemViewSet : \n model = Item \n model_view = ModelView ( method = views . enums . HTTPMethod . GET , path = \"<STR_LIT>\" ) \n self . assertIsNone ( \n model_view . handle_request ( \n request = django . http . HttpRequest ( ) , \n path_parameters = None , \n query_parameters = None , \n request_body = None , \n ) \n ) \n with self . assertRaises ( ValueError ) : \n _ = model_view . model_viewset_class \n model_view . model_viewset_class = ItemViewSet", "output": "with self . assertRaises ( ValueError ) : \n model_view . model_viewset_class = ItemViewSet \n def test_infer_field_type ( self ) : \n self . assertEqual ( \n views . AbstractModelView . _infer_field_type ( \n model_class = Item , field_name = \"<STR_LIT>\" \n ) , \n uuid . UUID , \n ) \n self . assertEqual ( \n views . AbstractModelView . _infer_field_type ( \n model_class = Item , field_name = \"<STR_LIT>\" \n ) , \n str , \n ) \n self . assertEqual ( \n views . AbstractModelView . _infer_field_type ( \n model_class = Item , field_name = \"<STR_LIT>\" \n ) , \n str , \n ) \n self . assertEqual ( \n views . AbstractModelView . _infer_field_type ( \n model_class = Item , field_name = \"<STR_LIT>\" \n ) , \n uuid . UUID , \n ) \n with self . assertRaises ( ValueError ) : \n views . AbstractModelView . _infer_field_type ( \n model_class = Item , field_name = \"<STR_LIT>\" \n ) \n with self . assertRaises ( django . core . exceptions . FieldDoesNotExist ) : \n views . AbstractModelView . _infer_field_type ( \n model_class = Item , field_name = \"<STR_LIT>\" \n )"}, {"input": "import random \n import uuid \n from ninja_crud . testing . core . components import ( \n Headers , \n PathParameters , \n Payloads , \n QueryParameters , \n ) \n from ninja_crud . testing . views import ( \n CreateModelViewTest , \n DeleteModelViewTest , \n ListModelViewTest , \n ReadModelViewTest , \n UpdateModelViewTest , \n ) \n from ninja_crud . testing . viewsets import ModelViewSetTestCase \n from tests . test_app . tests . base_test_case import BaseTestCase \n from tests . test_app . views . collection_views import CollectionViewSet \n class TestCollectionViewSet ( ModelViewSetTestCase , BaseTestCase ) : \n model_viewset_class = CollectionViewSet \n base_path = \"<STR_LIT>\" \n def get_path_parameters ( self ) : \n return PathParameters ( \n ok = [ { \"<STR_LIT>\" : self . collection_1 . id } ] , not_found = { \"<STR_LIT>\" : uuid . uuid4 ( ) } \n ) \n def get_headers_ok ( self ) : \n return Headers ( \n ok = [ { \"<STR_LIT>\" : f\"<STR_LIT>\" } ] , unauthorized = { } \n ) \n def get_headers_ok_forbidden ( self ) : \n return Headers ( \n ok = { \"<STR_LIT>\" : f\"<STR_LIT>\" } , \n unauthorized = { \"<STR_LIT>\" : f\"<STR_LIT>\" } , \n forbidden = { \"<STR_LIT>\" : f\"<STR_LIT>\" } , \n ) \n collection_payloads = Payloads ( \n ok = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : \"<STR_LIT>\" } , \n bad_request = { \"<STR_LIT>\" : [ ] } , \n conflict = { \"<STR_LIT>\" : \"<STR_LIT>\" } , \n ) \n test_list_collections = ListModelViewTest ( \n headers = get_headers_ok , \n query_parameters = QueryParameters ( \n ok = [ { } , { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : [ \"<STR_LIT>\" ] , \"<STR_LIT>\" : <NUM_LIT> } ] , \n bad_request = { \"<STR_LIT>\" : [ \"<STR_LIT>\" ] } , \n ) , \n ) \n test_create_collection = CreateModelViewTest ( \n headers = get_headers_ok , \n payloads = collection_payloads , \n ) \n test_read_collection = ReadModelViewTest ( \n path_parameters = get_path_parameters , \n headers = get_headers_ok , \n ) \n test_update_collection = UpdateModelViewTest ( \n path_parameters = get_path_parameters , \n headers = get_headers_ok_forbidden , \n payloads = collection_payloads , \n ) \n test_delete_collection = DeleteModelViewTest ( \n path_parameters = get_path_parameters , headers = get_headers_ok_forbidden \n ) \n test_list_collection_items = ListModelViewTest (", "output": "path_parameters = get_path_parameters , headers = get_headers_ok_forbidden \n ) \n test_create_collection_item = CreateModelViewTest ( \n path_parameters = get_path_parameters , \n headers = get_headers_ok_forbidden , \n payloads = Payloads ( \n ok = { \"<STR_LIT>\" : \"<STR_LIT>\" , \"<STR_LIT>\" : \"<STR_LIT>\" } , \n ) , \n )"}, {"input": "from typing import List , Optional \n from uuid import UUID \n from django . db . models import Q , QuerySet \n from ninja import FilterSchema , Schema \n class Identifiable ( Schema ) : \n id : UUID \n class Representable ( Schema ) : \n name : str \n description : Optional [ str ] = None \n class OrderByFilterSchema ( FilterSchema ) : \n order_by : Optional [ List [ str ] ] = None \n def filter_order_by ( self , value ) -> Q : \n return Q ( ) \n def filter ( self , queryset : QuerySet ) -> QuerySet : \n queryset = super ( ) . filter ( queryset ) \n if self . order_by : \n queryset = queryset . order_by ( * self . order_by ) \n return queryset \n class CollectionFilter ( OrderByFilterSchema ) : \n name : Optional [ str ] = None \n class CollectionIn ( Representable ) : \n pass \n class CollectionOut ( Identifiable , Representable ) : \n pass \n class ItemIn ( Representable ) : \n pass \n class ItemOut ( Identifiable , Representable ) : \n collection_id : UUID \n class TagOut ( Identifiable , Representable ) : \n pass \n class UserRequestBody ( Schema ) :", "output": "username : str \n email : str \n password : str \n groups : Optional [ List [ int ] ] = None \n class UserResponseBody ( Schema ) : \n id : int \n username : str \n email : str \n class UserQueryParameters ( Schema ) : \n username__contains : Optional [ str ] = None"}, {"input": "import unittest . mock \n import django . core . exceptions \n import django . test \n from ninja_crud import views \n class TestAbstractView ( django . test . TestCase ) : \n def test_docstrings ( self ) : \n import http", "output": "from typing import Any , Optional , Tuple , Union \n import django . http \n import ninja \n from ninja_crud import views \n class HelloWorldSchema ( ninja . Schema ) : \n message : str \n class HelloWorldView ( views . AbstractView ) : \n def __init__ ( self ) -> None : \n super ( ) . __init__ ( \n method = views . enums . HTTPMethod . GET , \n path = \"<STR_LIT>\" , \n response_body = HelloWorldSchema , \n ) \n def handle_request ( \n self , \n request : django . http . HttpRequest , \n path_parameters : Optional [ ninja . Schema ] , \n query_parameters : Optional [ ninja . Schema ] , \n request_body : Optional [ ninja . Schema ] , \n ) -> Union [ Any , Tuple [ http . HTTPStatus , Any ] ] : \n return { \"<STR_LIT>\" : \"<STR_LIT>\" } \n router = ninja . Router ( ) \n view = HelloWorldView ( ) \n view . register_route ( router , route_name = \"<STR_LIT>\" ) \n self . assertEqual ( \n view . handle_request ( \n request = django . http . HttpRequest ( ) , \n path_parameters = None , \n query_parameters = None , \n request_body = None , \n ) , \n { \"<STR_LIT>\" : \"<STR_LIT>\" } , \n ) \n def test_sanitize_and_merge_router_kwargs ( self ) : \n router_kwargs = { \"<STR_LIT>\" : True , \"<STR_LIT>\" : \"<STR_LIT>\" } \n sanitized_router_kwargs = views . AbstractView . _clean_router_kwargs ( router_kwargs ) \n self . assertDictEqual ( sanitized_router_kwargs , router_kwargs ) \n def test_sanitize_and_merge_router_kwargs_with_path ( self ) : \n router_kwargs = { \"<STR_LIT>\" : \"<STR_LIT>\" } \n with unittest . mock . patch ( \n \"<STR_LIT>\" \n ) as mock_logger : \n sanitized_router_kwargs = views . AbstractView . _clean_router_kwargs ( \n router_kwargs \n ) \n mock_logger . warning . assert_called_once ( ) \n self . assertDictEqual ( sanitized_router_kwargs , { } )"}, {"input": "from typing import List , Optional , Union \n from ninja_crud . testing . core . components import utils \n class PathParameters : \n def __init__ ( \n self , \n ok : Union [ dict , List [ dict ] ] ,", "output": "not_found : Union [ dict , List [ dict ] , None ] = None , \n ) -> None : \n self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) \n self . not_found : Optional [ List [ dict ] ] = ( \n utils . ensure_list_of_dicts ( not_found ) if not_found is not None else None \n )"}, {"input": "import http \n import json \n from typing import Optional , Type , cast \n import django . http \n import django . test \n from ninja import Schema \n from ninja_crud . testing . core import ArgOrCallable , TestCaseType , ViewTestManager \n from ninja_crud . testing . core . components import Headers , PathParameters , Payloads \n from ninja_crud . testing . views import AbstractModelViewTest \n from ninja_crud . views import UpdateModelView \n class UpdateModelViewTest ( AbstractModelViewTest ) : \n model_view : UpdateModelView \n def __init__ ( \n self , \n path_parameters : ArgOrCallable [ PathParameters , TestCaseType ] , \n payloads : ArgOrCallable [ Payloads , TestCaseType ] , \n headers : Optional [ ArgOrCallable [ Headers , TestCaseType ] ] = None , \n ) -> None : \n super ( ) . __init__ ( model_view_class = UpdateModelView ) \n self . view_test_manager = ViewTestManager ( \n simulate_request = self . simulate_request , \n path_parameters = path_parameters , \n headers = headers , \n payloads = payloads , \n ) \n def on_successful_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) -> None : \n actual_output = json . loads ( response . content ) \n expected_output = self . _get_expected_output ( \n response = response , path_parameters = path_parameters \n ) \n self . model_viewset_test_case . assertDictEqual ( actual_output , expected_output ) \n def _get_expected_output ( \n self , response : django . http . HttpResponse , path_parameters : dict \n ) -> dict : \n path_parameters_schema : Optional [ Schema ] = ( \n self . model_view . path_parameters ( ** path_parameters ) \n if self . model_view . path_parameters \n else None \n ) \n instance = self . model_view . get_model ( \n getattr ( response , \"<STR_LIT>\" , None ) , \n path_parameters_schema ,", "output": ") \n schema = cast ( Type [ Schema ] , self . model_view . response_body ) . from_orm ( instance ) \n return json . loads ( schema . json ( ) ) \n def on_failed_request ( \n self , \n response : django . http . HttpResponse , \n path_parameters : dict , \n query_parameters : dict , \n headers : dict , \n payload : dict , \n ) -> None : \n pass \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_update_model_ok ( self ) : \n self . view_test_manager . test_view_ok ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_successful_request , \n status = http . HTTPStatus . OK , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_update_model_payloads_bad_request ( self ) : \n self . view_test_manager . test_view_payloads_bad_request ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_update_model_payloads_conflict ( self ) : \n self . view_test_manager . test_view_payloads_conflict ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_update_model_headers_unauthorized ( self ) : \n self . view_test_manager . test_view_headers_unauthorized ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_update_model_headers_forbidden ( self ) : \n self . view_test_manager . test_view_headers_forbidden ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n ) \n @ django . test . tag ( \"<STR_LIT>\" ) \n def test_update_model_path_parameters_not_found ( self ) : \n self . view_test_manager . test_view_path_parameters_not_found ( \n test_case = self . model_viewset_test_case , \n on_completion = self . on_failed_request , \n )"}, {"input": "from typing import List , Optional , Union \n from ninja_crud . testing . core . components import utils \n class Payloads : \n def __init__ ( \n self , \n ok : Union [ dict , List [ dict ] ] , \n bad_request : Union [ dict , List [ dict ] , None ] = None , \n conflict : Union [ dict , List [ dict ] , None ] = None ,", "output": ") -> None : \n self . ok : List [ dict ] = utils . ensure_list_of_dicts ( ok ) \n self . bad_request : Optional [ List [ dict ] ] = ( \n utils . ensure_list_of_dicts ( bad_request ) if bad_request is not None else None \n ) \n self . conflict : Optional [ List [ dict ] ] = ( \n utils . ensure_list_of_dicts ( conflict ) if conflict is not None else None \n )"}, {"input": "from unittest . mock import MagicMock \n from django . test import TestCase \n from ninja_crud import views , viewsets \n from tests . test_app . models import Item \n from tests . test_app . schemas import ItemIn , ItemOut \n class TestUpdateModelView ( TestCase ) : \n def test_register_route_router_kwargs ( self ) : \n router_mock = MagicMock ( ) \n class ItemViewSet ( viewsets . ModelViewSet ) : \n model = Item \n update_item = views . UpdateModelView ( \n request_body = ItemIn ,", "output": "response_body = ItemOut , \n router_kwargs = { \"<STR_LIT>\" : True } , \n ) \n ItemViewSet . update_item . register_route ( router_mock , \"<STR_LIT>\" ) \n router_mock . api_operation . assert_called_once ( ) \n self . assertTrue ( router_mock . api_operation . call_args [ <NUM_LIT> ] [ \"<STR_LIT>\" ] )"}, {"input": "from typing import List \n from django . contrib . auth . models import User \n from ninja import Router \n from ninja_crud import views \n from ninja_crud . viewsets import ModelViewSet \n from tests . test_app . schemas import ( \n UserQueryParameters , \n UserRequestBody , \n UserResponseBody , \n ) \n router = Router ( ) \n class UserViewSet ( ModelViewSet ) : \n model = User \n list_users = views . ListModelView ( \n query_parameters = UserQueryParameters , \n response_body = List [ UserResponseBody ] , \n pagination_class = None , \n ) \n create_user = views . CreateModelView ( \n request_body = UserRequestBody , response_body = UserResponseBody", "output": ") \n read_user = views . ReadModelView ( response_body = UserResponseBody ) \n update_user = views . UpdateModelView ( \n request_body = UserRequestBody , response_body = UserResponseBody \n ) \n delete_user = views . DeleteModelView ( ) \n UserViewSet . register_routes ( router )"}, {"input": "import inspect \n from typing import Optional , Type \n from django . db . models import Model \n from ninja import Router , Schema \n from ninja_crud . views import AbstractModelView", "output": "class ModelViewSet : \n model : Type [ Model ] \n default_request_body : Optional [ Type [ Schema ] ] \n default_response_body : Optional [ Type [ Schema ] ] \n def __init_subclass__ ( cls , * args , ** kwargs ) -> None : \n super ( ) . __init_subclass__ ( * args , ** kwargs ) \n if hasattr ( cls , \"<STR_LIT>\" ) : \n cls . _bind_model_views ( ) \n @ classmethod \n def _bind_model_views ( cls ) -> None : \n for _ , model_view in inspect . getmembers ( \n cls , lambda member : isinstance ( member , AbstractModelView ) \n ) : \n model_view . model_viewset_class = cls \n @ classmethod \n def register_routes ( cls , router : Router ) -> None : \n view_attributes = { \n name : view \n for name , view in inspect . getmembers ( cls ) \n if isinstance ( view , AbstractModelView ) \n } \n attribute_order = list ( cls . __dict__ ) \n ordered_view_attributes = sorted ( \n view_attributes . items ( ) , key = lambda item : attribute_order . index ( item [ <NUM_LIT> ] ) \n ) \n for name , view in ordered_view_attributes : \n view . register_route ( router , route_name = name )"}, {"input": "from . headers import Headers \n from . path_parameters import PathParameters \n from . payloads import Payloads \n from . query_parameters import QueryParameters \n __all__ = [ \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" , \n \"<STR_LIT>\" ,", "output": "]"}, {"input": "from enum import Enum \n class HTTPMethod ( str , Enum ) : \n def __init__ ( self , value , description ) : \n self . _value_ = value \n self . description = description \n def __new__ ( cls , value , description ) : \n obj = str . __new__ ( cls , value ) \n obj . _value_ = value", "output": "obj . description = description \n return obj \n CONNECT = \"<STR_LIT>\" , \"<STR_LIT>\" \n DELETE = \"<STR_LIT>\" , \"<STR_LIT>\" \n GET = \"<STR_LIT>\" , \"<STR_LIT>\" \n HEAD = \"<STR_LIT>\" , \"<STR_LIT>\" \n OPTIONS = \"<STR_LIT>\" , \"<STR_LIT>\" \n PATCH = \"<STR_LIT>\" , \"<STR_LIT>\" \n POST = \"<STR_LIT>\" , \"<STR_LIT>\" \n PUT = \"<STR_LIT>\" , \"<STR_LIT>\" \n TRACE = \"<STR_LIT>\" , \"<STR_LIT>\""}]