[{"input": "package me . zhengjie . exception . handler ; import lombok . Data ; @ Data class ApiError { private Integer status = <NUM_LIT> ; private Long timestamp ; private String message ; private ApiError ( ) {", "output": "timestamp = System . currentTimeMillis ( ) ; } public static ApiError error ( String message ) { ApiError apiError = new ApiError ( ) ; apiError . setMessage ( message ) ; return apiError ; } public static ApiError error ( Integer status , String message ) { ApiError apiError = new ApiError ( ) ; apiError . setStatus ( status ) ; apiError . setMessage ( message ) ; return apiError ; } }"}, {"input": "package me . zhengjie . utils . enums ; import lombok . AllArgsConstructor ; import lombok . Getter ; @ Getter @ AllArgsConstructor public enum RequestMethodEnum { GET ( \"<STR_LIT>\" ) , POST ( \"<STR_LIT>\" ) , PUT ( \"<STR_LIT>\" ) , PATCH ( \"<STR_LIT>\" ) , DELETE ( \"<STR_LIT>\" ) , ALL ( \"<STR_LIT>\" ) ; private final String type ;", "output": "public static RequestMethodEnum find ( String type ) { for ( RequestMethodEnum value : RequestMethodEnum . values ( ) ) { if ( value . getType ( ) . equals ( type ) ) { return value ; } } return ALL ; } }"}, {"input": "package me . zhengjie . modules . system . service ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . List ; import java . util . Set ; public interface JobService extends IService < Job > { Job findById ( Long id ) ; void create ( Job resources ) ; void update ( Job resources ) ;", "output": "void delete ( Set < Long > ids ) ; PageResult < Job > queryAll ( JobQueryCriteria criteria , Page < Object > page ) ; List < Job > queryAll ( JobQueryCriteria criteria ) ; void download ( List < Job > jobs , HttpServletResponse response ) throws IOException ; void verification ( Set < Long > ids ) ; }"}, {"input": "package me . zhengjie . domain ; import com . alibaba . fastjson . annotation . JSONField ; import com . baomidou . mybatisplus . annotation . * ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import java . io . Serializable ; import java . sql . Timestamp ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class SysLog implements Serializable { @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; private String username ; private String description ; private String method ; private String params ; private String logType ; private String requestIp ; private String address ; private String browser ; private Long time ; @ JSONField ( serialize = false ) private String exceptionDetail ; @ TableField ( fill = FieldFill . INSERT ) private Timestamp createTime ; public SysLog ( String logType , Long time ) { this . logType = logType ; this . time = time ;", "output": "} }"}, {"input": "package me . zhengjie . modules . system . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import me . zhengjie . annotation . Log ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . modules . system . domain . Job ; import me . zhengjie . modules . system . service . JobService ; import me . zhengjie . modules . system . domain . vo . JobQueryCriteria ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . security . access . prepost . PreAuthorize ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . Set ; @ RestController @ RequiredArgsConstructor @ Api ( tags = \"<STR_LIT>\" ) @ RequestMapping ( \"<STR_LIT>\" ) public class JobController { private final JobService jobService ; private static final String ENTITY_NAME = \"<STR_LIT>\" ; @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) @ PreAuthorize ( \"<STR_LIT>\" ) public void exportJob ( HttpServletResponse response , JobQueryCriteria criteria ) throws IOException { jobService . download ( jobService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < PageResult < Job > > queryJob ( JobQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( jobService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > createJob ( @ Validated @ RequestBody Job resources ) { if ( resources . getId ( ) != null ) {", "output": "throw new BadRequestException ( \"<STR_LIT>\" + ENTITY_NAME + \"<STR_LIT>\" ) ; } jobService . create ( resources ) ; return new ResponseEntity < > ( HttpStatus . CREATED ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > updateJob ( @ Validated ( Job . Update . class ) @ RequestBody Job resources ) { jobService . update ( resources ) ; return new ResponseEntity < > ( HttpStatus . NO_CONTENT ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping @ PreAuthorize ( \"<STR_LIT>\" ) public ResponseEntity < Object > deleteJob ( @ RequestBody Set < Long > ids ) { jobService . verification ( ids ) ; jobService . delete ( ids ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } }"}, {"input": "package me . zhengjie . modules . system . service . impl ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . modules . system . domain . Dict ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . mapper . DictMapper ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import me . zhengjie . utils . * ; import me . zhengjie . modules . system . mapper . DictDetailMapper ; import me . zhengjie . modules . system . service . DictDetailService ; import org . springframework . cache . annotation . CacheConfig ; import org . springframework . cache . annotation . Cacheable ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . util . List ; @ Service @ RequiredArgsConstructor @ CacheConfig ( cacheNames = \"<STR_LIT>\" ) public class DictDetailServiceImpl extends ServiceImpl < DictDetailMapper , DictDetail > implements DictDetailService { private final DictMapper dictMapper ; private final DictDetailMapper dictDetailMapper ; private final RedisUtils redisUtils ; @ Override public PageResult < DictDetail > queryAll ( DictDetailQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( dictDetailMapper . findAll ( criteria , page ) ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void create ( DictDetail resources ) { resources . setDictId ( resources . getDict ( ) . getId ( ) ) ; save ( resources ) ; delCaches ( resources ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( DictDetail resources ) { DictDetail dictDetail = getById ( resources . getId ( ) ) ;", "output": "resources . setId ( dictDetail . getId ( ) ) ; saveOrUpdate ( resources ) ; delCaches ( dictDetail ) ; } @ Override @ Cacheable ( key = \"<STR_LIT>\" ) public List < DictDetail > getDictByName ( String name ) { return dictDetailMapper . findByDictName ( name ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public void delete ( Long id ) { DictDetail dictDetail = getById ( id ) ; removeById ( id ) ; delCaches ( dictDetail ) ; } public void delCaches ( DictDetail dictDetail ) { Dict dict = dictMapper . selectById ( dictDetail . getDictId ( ) ) ; redisUtils . del ( CacheKey . DICT_NAME + dict . getName ( ) ) ; } }"}, {"input": "package me . zhengjie . modules . mnt . domain . vo ; import lombok . Data ; import java . sql . Timestamp ; import java . util . List ; @ Data public class DeployHistoryQueryCriteria { private String blurry ; private Long deployId ; private List < Timestamp > deployDate ;", "output": "}"}, {"input": "package me . zhengjie . exception ; public class BadConfigurationException extends RuntimeException { public BadConfigurationException ( ) { super ( ) ; } public BadConfigurationException ( String message ) { super ( message ) ; } public BadConfigurationException ( String message , Throwable cause ) { super ( message , cause ) ; } public BadConfigurationException ( Throwable cause ) { super ( cause ) ; }", "output": "protected BadConfigurationException ( String message , Throwable cause , boolean enableSuppression , boolean writableStackTrace ) { super ( message , cause , enableSuppression , writableStackTrace ) ; } }"}, {"input": "package me . zhengjie . rest ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import lombok . RequiredArgsConstructor ; import lombok . extern . slf4j . Slf4j ; import me . zhengjie . annotation . Log ; import me . zhengjie . domain . QiniuConfig ; import me . zhengjie . domain . QiniuContent ; import me . zhengjie . service . QiNiuConfigService ; import me . zhengjie . domain . vo . QiniuQueryCriteria ; import me . zhengjie . service . QiniuContentService ; import me . zhengjie . utils . PageResult ; import org . springframework . http . HttpStatus ; import org . springframework . http . ResponseEntity ; import org . springframework . validation . annotation . Validated ; import org . springframework . web . bind . annotation . * ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; import java . io . IOException ; import java . util . HashMap ; import java . util . Map ; @ Slf4j @ RestController @ RequiredArgsConstructor @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class QiniuController { private final QiniuContentService qiniuContentService ; private final QiNiuConfigService qiNiuConfigService ; @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < QiniuConfig > queryQiNiuConfig ( ) { return new ResponseEntity < > ( qiNiuConfigService . getConfig ( ) , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PutMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > updateQiNiuConfig ( @ Validated @ RequestBody QiniuConfig qiniuConfig ) { qiNiuConfigService . saveConfig ( qiniuConfig ) ; qiNiuConfigService . updateType ( qiniuConfig . getType ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public void exportQiNiu ( HttpServletResponse response , QiniuQueryCriteria criteria ) throws IOException { qiniuContentService . downloadList ( qiniuContentService . queryAll ( criteria ) , response ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping public ResponseEntity < PageResult < QiniuContent > > queryQiNiu ( QiniuQueryCriteria criteria , Page < Object > page ) { return new ResponseEntity < > ( qiniuContentService . queryAll ( criteria , page ) , HttpStatus . OK ) ; } @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping public ResponseEntity < Object > uploadQiNiu ( @ RequestParam MultipartFile file ) { QiniuContent qiniuContent = qiniuContentService . upload ( file , qiNiuConfigService . getConfig ( ) ) ; Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContent . getId ( ) ) ;", "output": "map . put ( \"<STR_LIT>\" , <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , new String [ ] { qiniuContent . getUrl ( ) } ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ PostMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > synchronizeQiNiu ( ) { qiniuContentService . synchronize ( qiNiuConfigService . getConfig ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ GetMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > downloadQiNiu ( @ PathVariable Long id ) { Map < String , Object > map = new HashMap < > ( <NUM_LIT> ) ; map . put ( \"<STR_LIT>\" , qiniuContentService . download ( qiniuContentService . getById ( id ) , qiNiuConfigService . getConfig ( ) ) ) ; return new ResponseEntity < > ( map , HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping ( value = \"<STR_LIT>\" ) public ResponseEntity < Object > deleteQiNiu ( @ PathVariable Long id ) { qiniuContentService . delete ( qiniuContentService . getById ( id ) , qiNiuConfigService . getConfig ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } @ Log ( \"<STR_LIT>\" ) @ ApiOperation ( \"<STR_LIT>\" ) @ DeleteMapping public ResponseEntity < Object > deleteAllQiNiu ( @ RequestBody Long [ ] ids ) { qiniuContentService . deleteAll ( ids , qiNiuConfigService . getConfig ( ) ) ; return new ResponseEntity < > ( HttpStatus . OK ) ; } }"}, {"input": "package me . zhengjie . modules . security . service . dto ; import lombok . AllArgsConstructor ; import lombok . Data ; import lombok . NoArgsConstructor ; import java . util . Date ; @ Data @ AllArgsConstructor @ NoArgsConstructor public class OnlineUserDto { private String userName ; private String nickName ; private String dept ; private String browser ; private String ip ; private String address ; private String key ; private Date loginTime ;", "output": "}"}, {"input": "package me . zhengjie . service ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . domain . vo . TradeVo ; import me . zhengjie . domain . AlipayConfig ; public interface AliPayService extends IService < AlipayConfig > { AlipayConfig find ( ) ; AlipayConfig config ( AlipayConfig alipayConfig ) ;", "output": "String toPayAsPc ( AlipayConfig alipay , TradeVo trade ) throws Exception ; String toPayAsWeb ( AlipayConfig alipay , TradeVo trade ) throws Exception ; }"}, {"input": "package me . zhengjie . modules . system . domain . vo ; import lombok . Data ; @ Data public class UserPassVo { private String oldPass ; private String newPass ;", "output": "}"}, {"input": "package me . zhengjie . domain ; import com . baomidou . mybatisplus . annotation . IdType ; import com . baomidou . mybatisplus . annotation . TableId ; import com . baomidou . mybatisplus . annotation . TableName ; import io . swagger . annotations . ApiModelProperty ; import lombok . Getter ; import lombok . NoArgsConstructor ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; import java . io . Serializable ; @ Getter @ Setter @ NoArgsConstructor @ TableName ( \"<STR_LIT>\" ) public class GenConfig implements Serializable { public GenConfig ( String tableName ) { this . tableName = tableName ; } @ ApiModelProperty ( value = \"<STR_LIT>\" , hidden = true ) @ TableId ( value = \"<STR_LIT>\" , type = IdType . AUTO ) private Long id ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String tableName ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiAlias ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String pack ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String moduleName ; @ NotBlank @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String path ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String apiPath ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String author ; @ ApiModelProperty ( value = \"<STR_LIT>\" ) private String prefix ;", "output": "@ ApiModelProperty ( value = \"<STR_LIT>\" ) private Boolean cover = false ; }"}, {"input": "package me . zhengjie . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import me . zhengjie . domain . EmailConfig ; import me . zhengjie . domain . QiniuConfig ; import org . apache . ibatis . annotations . Mapper ; @ Mapper public interface QiniuConfigMapper extends BaseMapper < QiniuConfig > {", "output": "}"}, {"input": "package me . zhengjie . service . impl ; import cn . hutool . core . util . ObjectUtil ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import com . baomidou . mybatisplus . extension . service . impl . ServiceImpl ; import lombok . RequiredArgsConstructor ; import me . zhengjie . config . FileProperties ; import me . zhengjie . domain . LocalStorage ; import me . zhengjie . domain . vo . LocalStorageQueryCriteria ; import me . zhengjie . exception . BadRequestException ; import me . zhengjie . mapper . LocalStorageMapper ; import me . zhengjie . utils . * ; import me . zhengjie . service . LocalStorageService ; import org . springframework . stereotype . Service ; import org . springframework . transaction . annotation . Transactional ; import java . io . File ; import java . io . IOException ; import java . util . ArrayList ; import java . util . LinkedHashMap ; import java . util . List ; import java . util . Map ; import org . springframework . web . multipart . MultipartFile ; import javax . servlet . http . HttpServletResponse ; @ Service @ RequiredArgsConstructor public class LocalStorageServiceImpl extends ServiceImpl < LocalStorageMapper , LocalStorage > implements LocalStorageService { private final LocalStorageMapper localStorageMapper ; private final FileProperties properties ; @ Override public PageResult < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria , Page < Object > page ) { return PageUtil . toPage ( localStorageMapper . findAll ( criteria , page ) ) ; } @ Override public List < LocalStorage > queryAll ( LocalStorageQueryCriteria criteria ) { return localStorageMapper . findAll ( criteria ) ; } @ Override @ Transactional ( rollbackFor = Exception . class ) public LocalStorage create ( String name , MultipartFile multipartFile ) { FileUtil . checkSize ( properties . getMaxSize ( ) , multipartFile . getSize ( ) ) ; String suffix = FileUtil . getExtensionName ( multipartFile . getOriginalFilename ( ) ) ; String type = FileUtil . getFileType ( suffix ) ; File file = FileUtil . upload ( multipartFile , properties . getPath ( ) . getPath ( ) + type + File . separator ) ; if ( ObjectUtil . isNull ( file ) ) { throw new BadRequestException ( \"<STR_LIT>\" ) ; } try { name = StringUtils . isBlank ( name ) ? FileUtil . getFileNameNoEx ( multipartFile . getOriginalFilename ( ) ) : name ; LocalStorage localStorage = new LocalStorage ( file . getName ( ) , name , suffix , file . getPath ( ) , type , FileUtil . getSize ( multipartFile . getSize ( ) ) ) ; save ( localStorage ) ; return localStorage ; } catch ( Exception e ) { FileUtil . del ( file ) ; throw e ; } } @ Override @ Transactional ( rollbackFor = Exception . class ) public void update ( LocalStorage resources ) { LocalStorage localStorage = getById ( resources . getId ( ) ) ; localStorage . copy ( resources ) ; saveOrUpdate ( localStorage ) ;", "output": "} @ Override @ Transactional ( rollbackFor = Exception . class ) public void deleteAll ( Long [ ] ids ) { for ( Long id : ids ) { LocalStorage storage = getById ( id ) ; FileUtil . del ( storage . getPath ( ) ) ; removeById ( storage ) ; } } @ Override public void download ( List < LocalStorage > queryAll , HttpServletResponse response ) throws IOException { List < Map < String , Object > > list = new ArrayList < > ( ) ; for ( LocalStorage localStorage : queryAll ) { Map < String , Object > map = new LinkedHashMap < > ( ) ; map . put ( \"<STR_LIT>\" , localStorage . getRealName ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getName ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getType ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getSize ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getCreateBy ( ) ) ; map . put ( \"<STR_LIT>\" , localStorage . getCreateTime ( ) ) ; list . add ( map ) ; } FileUtil . downloadExcel ( list , response ) ; } }"}, {"input": "package me . zhengjie . modules . system . rest ; import io . swagger . annotations . Api ; import io . swagger . annotations . ApiOperation ; import me . zhengjie . annotation . Limit ; import me . zhengjie . annotation . rest . AnonymousGetMapping ; import org . springframework . web . bind . annotation . RequestMapping ; import org . springframework . web . bind . annotation . RestController ; import java . util . concurrent . atomic . AtomicInteger ; @ RestController @ RequestMapping ( \"<STR_LIT>\" ) @ Api ( tags = \"<STR_LIT>\" ) public class LimitController { private static final AtomicInteger ATOMIC_INTEGER = new AtomicInteger ( ) ; @ AnonymousGetMapping @ ApiOperation ( \"<STR_LIT>\" ) @ Limit ( key = \"<STR_LIT>\" , period = <NUM_LIT> , count = <NUM_LIT> , name = \"<STR_LIT>\" , prefix = \"<STR_LIT>\" ) public int testLimit ( ) { return ATOMIC_INTEGER . incrementAndGet ( ) ;", "output": "} }"}, {"input": "package me . zhengjie . modules . mnt . mapper ; import me . zhengjie . modules . mnt . domain . Server ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . Set ; @ Mapper public interface DeployServerMapper { void insertData ( @ Param ( \"<STR_LIT>\" ) Long deployId , @ Param ( \"<STR_LIT>\" ) Set < Server > servers ) ;", "output": "void deleteByDeployId ( @ Param ( \"<STR_LIT>\" ) Long deployId ) ; void deleteByDeployIds ( @ Param ( \"<STR_LIT>\" ) Set < Long > deployIds ) ; void deleteByServerIds ( @ Param ( \"<STR_LIT>\" ) Set < Long > serverIds ) ; }"}, {"input": "package me . zhengjie . service ; import com . baomidou . mybatisplus . extension . service . IService ; import me . zhengjie . domain . GenConfig ; public interface GenConfigService extends IService < GenConfig > { GenConfig find ( String tableName ) ;", "output": "GenConfig update ( String tableName , GenConfig genConfig ) ; }"}, {"input": "package me . zhengjie . modules . system . mapper ; import com . baomidou . mybatisplus . core . mapper . BaseMapper ; import com . baomidou . mybatisplus . core . metadata . IPage ; import com . baomidou . mybatisplus . extension . plugins . pagination . Page ; import me . zhengjie . modules . system . domain . DictDetail ; import me . zhengjie . modules . system . domain . vo . DictDetailQueryCriteria ; import org . apache . ibatis . annotations . Mapper ; import org . apache . ibatis . annotations . Param ; import java . util . List ; import java . util . Set ; @ Mapper public interface DictDetailMapper extends BaseMapper < DictDetail > { List < DictDetail > findByDictName ( @ Param ( \"<STR_LIT>\" ) String name ) ; IPage < DictDetail > findAll ( @ Param ( \"<STR_LIT>\" ) DictDetailQueryCriteria criteria , Page < Object > page ) ;", "output": "void deleteByDictBatchIds ( @ Param ( \"<STR_LIT>\" ) Set < Long > dictIds ) ; }"}, {"input": "package me . zhengjie . modules . security . service . dto ; import lombok . Getter ; import lombok . Setter ; import javax . validation . constraints . NotBlank ; @ Getter @ Setter public class AuthUserDto { @ NotBlank private String username ; @ NotBlank private String password ; private String code ; private String uuid = \"<STR_LIT>\" ;", "output": "}"}]