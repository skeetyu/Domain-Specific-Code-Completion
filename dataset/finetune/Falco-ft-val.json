[{"input": "from django . contrib import admin \n from django . urls import include \n from django . urls import path \n from django . urls import reverse_lazy \n from django . views . generic . base import RedirectView \n urlpatterns = [ \n path ( \"<STR_LIT>\" , admin . site . urls ) , \n path ( \"<STR_LIT>\" , RedirectView . as_view ( url = reverse_lazy ( \"<STR_LIT>\" ) ) ) , \n path ( \"<STR_LIT>\" , include ( \"<STR_LIT>\" , namespace = \"<STR_LIT>\" ) ) ,", "output": "]"}, {"input": "import subprocess \n from cappa . testing import CommandRunner \n from falco . utils import run_in_shell \n def makemigrations ( ) : \n subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) \n def migrate ( ) : \n subprocess . run ( [ \"<STR_LIT>\" , \"<STR_LIT>\" , \"<STR_LIT>\" ] , check = False ) \n def change_model_attribute ( django_project_dir ) : \n models_file = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" \n models_file_content = models_file . read_text ( ) \n models_file . write_text ( \n models_file_content + \"<STR_LIT>\" + \"<STR_LIT>\"", "output": ") \n def insert_a_post ( ) : \n from blog . models import Post \n Post . objects . create ( title = \"<STR_LIT>\" , content = \"<STR_LIT>\" ) \n def count_nbr_of_posts ( ) -> int : \n from blog . models import Post \n return Post . objects . all ( ) . count ( ) \n def count_migrations ( django_project_dir ) : \n migrations_folder = django_project_dir / \"<STR_LIT>\" / \"<STR_LIT>\" \n return len ( [ file for file in migrations_folder . iterdir ( ) if file . name . startswith ( \"<STR_LIT>\" ) ] ) \n def test_reset_migrations ( django_project , runner : CommandRunner , set_git_repo_to_clean ) : \n makemigrations ( ) \n migrate ( ) \n run_in_shell ( insert_a_post , eval_result = False ) \n count = run_in_shell ( count_nbr_of_posts , eval_result = True ) \n assert count == <NUM_LIT> \n assert count == <NUM_LIT> \n change_model_attribute ( django_project ) \n makemigrations ( ) \n migrate ( ) \n assert count_migrations ( django_project ) == <NUM_LIT> \n runner . invoke ( \"<STR_LIT>\" , \"<STR_LIT>\" ) \n assert count_migrations ( django_project ) == <NUM_LIT> \n count = run_in_shell ( count_nbr_of_posts , eval_result = True ) \n assert count == <NUM_LIT>"}, {"input": "from django . db import models \n from django . utils import timezone \n class Product ( models . Model ) : \n name = models . CharField ( max_length = <NUM_LIT> , unique = True ) \n description = models . TextField ( ) \n price = models . DecimalField ( max_digits = <NUM_LIT> , decimal_places = <NUM_LIT> )", "output": "sku = models . CharField ( max_length = <NUM_LIT> , unique = True ) \n created_at = models . DateTimeField ( default = timezone . now ) \n @ property \n def slug ( self ) : \n return self . name . lower ( ) . replace ( \"<STR_LIT>\" , \"<STR_LIT>\" )"}]